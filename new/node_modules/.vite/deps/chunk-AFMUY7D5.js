import {
  warnOnce
} from "./chunk-UO6HTX3B.js";

// node_modules/@cloudscape-design/components/internal/events/index.js
var CustomEventStub = class {
  constructor(cancelable = false, detail = null) {
    this.cancelable = cancelable;
    this.detail = detail;
    this.defaultPrevented = false;
    this.cancelBubble = false;
  }
  preventDefault() {
    this.defaultPrevented = true;
  }
  stopPropagation() {
    this.cancelBubble = true;
  }
};
function createCustomEvent({ cancelable, detail }) {
  return new CustomEventStub(cancelable, detail);
}
function fireNonCancelableEvent(handler, detail) {
  if (!handler) {
    return;
  }
  const event = createCustomEvent({ cancelable: false, detail });
  handler(event);
}
function fireCancelableEvent(handler, detail, sourceEvent) {
  if (!handler) {
    return false;
  }
  const event = createCustomEvent({ cancelable: true, detail });
  handler(event);
  if (event.defaultPrevented && sourceEvent) {
    sourceEvent.preventDefault();
  }
  if (event.cancelBubble && sourceEvent) {
    sourceEvent.stopPropagation();
  }
  return event.defaultPrevented;
}
function fireKeyboardEvent(handler, reactEvent) {
  return fireCancelableEvent(handler, {
    keyCode: reactEvent.keyCode,
    key: reactEvent.key,
    ctrlKey: reactEvent.ctrlKey,
    shiftKey: reactEvent.shiftKey,
    altKey: reactEvent.altKey,
    metaKey: reactEvent.metaKey,
    isComposing: reactEvent.nativeEvent.isComposing
  }, reactEvent);
}
var isMouseEvent = (e) => {
  return e.button !== void 0;
};
function hasModifierKeys(event) {
  return event.ctrlKey || event.altKey || event.shiftKey || event.metaKey;
}
function isPlainLeftClick(event) {
  return event && (!isMouseEvent(event) || event.button === 0) && !hasModifierKeys(event);
}

// node_modules/@cloudscape-design/components/internal/utils/check-safe-url.js
var allowedJavascriptUrls = ["javascript:void(0)", "javascript:void(0);", "javascript:;"];
function checkSafeUrl(component, url) {
  if (!url) {
    return;
  }
  if (allowedJavascriptUrls.indexOf(url.toLowerCase()) !== -1) {
    return;
  }
  let parsedUrl;
  try {
    parsedUrl = new URL(url);
  } catch (e) {
    return;
  }
  if (parsedUrl.protocol === "javascript:") {
    warnOnce(component, `A javascript: URL was blocked as a security precaution. The URL was "${url}".`);
    throw new Error(`A javascript: URL was blocked as a security precaution.`);
  }
  return;
}

export {
  fireNonCancelableEvent,
  fireCancelableEvent,
  fireKeyboardEvent,
  hasModifierKeys,
  isPlainLeftClick,
  checkSafeUrl
};
//# sourceMappingURL=chunk-AFMUY7D5.js.map
