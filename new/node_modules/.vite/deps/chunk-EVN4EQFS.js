import {
  custom_css_properties_default
} from "./chunk-OLLVJWHA.js";
import {
  checkbox_icon_default
} from "./chunk-TQUOU5WW.js";
import {
  internal_default as internal_default3
} from "./chunk-T6HVRCOZ.js";
import {
  useFormFieldContext
} from "./chunk-5OOIWY6K.js";
import {
  InfoLinkLabelContext
} from "./chunk-BMSBHPJV.js";
import {
  getExternalProps
} from "./chunk-4XCIQI6J.js";
import {
  useMobile
} from "./chunk-DBNBK24U.js";
import {
  useDebounceCallback
} from "./chunk-ELJXQC4G.js";
import {
  StatusIndicator,
  joinStrings
} from "./chunk-HZPZDVTH.js";
import {
  useVisualContext
} from "./chunk-RRWZGKMV.js";
import {
  LinkDefaultVariantContext
} from "./chunk-WXFAMC53.js";
import {
  useContainerQuery
} from "./chunk-4L55HWID.js";
import {
  getBreakpointValue
} from "./chunk-JO267CDI.js";
import {
  KeyCode,
  TabTrap,
  Tooltip,
  Transition,
  getFirstFocusable,
  getLastFocusable,
  internal_default,
  internal_default2,
  useHiddenDescription,
  useInternalI18n
} from "./chunk-3QSNPY2Y.js";
import {
  useSingleTabStopNavigation
} from "./chunk-UD2PBZQX.js";
import {
  useForwardFocus
} from "./chunk-TNYC4R72.js";
import {
  isDevelopment
} from "./chunk-TIE5RIC4.js";
import {
  FunnelMetrics,
  useFunnel,
  useFunnelStep,
  useFunnelSubStep
} from "./chunk-5PWBM2WA.js";
import {
  nodeBelongs
} from "./chunk-IF2JLTU2.js";
import {
  DATA_ATTR_FUNNEL_VALUE,
  getFunnelValueSelector,
  getOverflowParentDimensions,
  getOverflowParents,
  getSubStepAllSelector,
  getTextFromSelector,
  scrollElementIntoView
} from "./chunk-ASIUR6HO.js";
import {
  getAnalyticsMetadataAttribute
} from "./chunk-ZPQDAYEM.js";
import {
  useMergeRefs
} from "./chunk-PSZT54K7.js";
import {
  useUniqueId
} from "./chunk-USK37E6T.js";
import {
  checkSafeUrl
} from "./chunk-J4U2BYWS.js";
import {
  fireCancelableEvent,
  fireKeyboardEvent,
  fireNonCancelableEvent,
  isPlainLeftClick
} from "./chunk-IGE3W7Z3.js";
import {
  __rest,
  applyDisplayName,
  clsx_m_default,
  findUpUntil,
  getBaseProps,
  getLogicalBoundingClientRect,
  useBaseComponent,
  useCurrentMode,
  useDensityMode,
  useResizeObserver,
  useStableCallback,
  useVisualRefresh,
  warnOnce
} from "./chunk-L6P234JG.js";
import {
  require_react_dom
} from "./chunk-PJEEZAML.js";
import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@cloudscape-design/components/select/index.js
var import_react29 = __toESM(require_react());

// node_modules/@cloudscape-design/components/select/internal.js
var import_react28 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/dropdown/index.js
var import_react2 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/@cloudscape-design/components/internal/hooks/use-portal-mode-classes/index.js
function usePortalModeClasses(ref) {
  const colorMode = useCurrentMode(ref);
  const densityMode = useDensityMode(ref);
  const context = useVisualContext(ref);
  const visualRefresh = useVisualRefresh();
  return clsx_m_default({
    "awsui-polaris-dark-mode awsui-dark-mode": colorMode === "dark",
    "awsui-polaris-compact-mode awsui-compact-mode": densityMode === "compact",
    "awsui-visual-refresh": visualRefresh,
    [`awsui-context-${context}`]: context
  });
}

// node_modules/@cloudscape-design/components/internal/components/dropdown/context.js
var import_react = __toESM(require_react());
var DropdownContext = import_react.default.createContext({
  position: "bottom-right"
});
function DropdownContextProvider({ children, position = "bottom-right" }) {
  return import_react.default.createElement(DropdownContext.Provider, { value: { position } }, children);
}
function useDropdownContext() {
  return (0, import_react.useContext)(DropdownContext);
}

// node_modules/@cloudscape-design/components/internal/components/dropdown/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/dropdown/styles.scoped.css";
var styles_css_default = {
  "dropdown-content-wrapper": "awsui_dropdown-content-wrapper_qwoo0_pwcss_153",
  "awsui-motion-fade-in-dropdown": "awsui_awsui-motion-fade-in-dropdown_qwoo0_pwcss_1",
  "refresh": "awsui_refresh_qwoo0_pwcss_174",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_qwoo0_pwcss_1",
  "root": "awsui_root_qwoo0_pwcss_199",
  "interior": "awsui_interior_qwoo0_pwcss_232",
  "dropdown": "awsui_dropdown_qwoo0_pwcss_153",
  "use-portal": "awsui_use-portal_qwoo0_pwcss_242",
  "is-empty": "awsui_is-empty_qwoo0_pwcss_288",
  "dropdown-drop-up": "awsui_dropdown-drop-up_qwoo0_pwcss_295",
  "with-limited-width": "awsui_with-limited-width_qwoo0_pwcss_299",
  "dropdown-drop-left": "awsui_dropdown-drop-left_qwoo0_pwcss_302",
  "dropdown-drop-right": "awsui_dropdown-drop-right_qwoo0_pwcss_305",
  "occupy-entire-width": "awsui_occupy-entire-width_qwoo0_pwcss_308",
  "stretch-beyond-trigger-width": "awsui_stretch-beyond-trigger-width_qwoo0_pwcss_311",
  "hide-block-border": "awsui_hide-block-border_qwoo0_pwcss_318",
  "open": "awsui_open_qwoo0_pwcss_327",
  "nowrap": "awsui_nowrap_qwoo0_pwcss_336",
  "dropdown-content": "awsui_dropdown-content_qwoo0_pwcss_153",
  "stretch-trigger-height": "awsui_stretch-trigger-height_qwoo0_pwcss_347"
};

// node_modules/@cloudscape-design/components/internal/components/dropdown/dropdown-fit-handler.js
var AVAILABLE_SPACE_RESERVE_DEFAULT = 50;
var AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL = 19;
var AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL = 20;
var getClosestParentDimensions = (element) => {
  const parents = getOverflowParents(element).map((element2) => {
    const { blockSize, inlineSize, insetBlockStart, insetInlineStart } = getLogicalBoundingClientRect(element2);
    return {
      blockSize,
      inlineSize,
      insetBlockStart,
      insetInlineStart
    };
  });
  return parents.shift();
};
var defaultMaxDropdownWidth = getBreakpointValue("xxs");
var getAvailableSpace = ({ trigger, overflowParents, stretchWidth = false, stretchHeight = false, isMobile }) => {
  const availableSpaceReserveVertical = stretchHeight ? 0 : isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const availableSpaceReserveHorizontal = stretchWidth ? 0 : isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const { insetBlockEnd: triggerBlockEnd, insetInlineStart: triggerInlineStart, insetInlineEnd: triggerInlineEnd } = getLogicalBoundingClientRect(trigger);
  return overflowParents.reduce(({ blockStart, blockEnd, inlineStart, inlineEnd }, overflowParent) => {
    const offsetTop = triggerBlockEnd - overflowParent.insetBlockStart;
    const currentBlockStart = offsetTop - trigger.offsetHeight - availableSpaceReserveVertical;
    const currentBlockEnd = overflowParent.blockSize - offsetTop - availableSpaceReserveVertical;
    const currentInlineStart = triggerInlineEnd - overflowParent.insetInlineStart - availableSpaceReserveHorizontal;
    const currentInlineEnd = overflowParent.insetInlineStart + overflowParent.inlineSize - triggerInlineStart - availableSpaceReserveHorizontal;
    return {
      blockStart: Math.min(blockStart, currentBlockStart),
      blockEnd: Math.min(blockEnd, currentBlockEnd),
      inlineStart: Math.min(inlineStart, currentInlineStart),
      inlineEnd: Math.min(inlineEnd, currentInlineEnd)
    };
  }, {
    blockStart: Number.MAX_VALUE,
    blockEnd: Number.MAX_VALUE,
    inlineStart: Number.MAX_VALUE,
    inlineEnd: Number.MAX_VALUE
  });
};
var getInteriorAvailableSpace = ({ trigger, overflowParents, isMobile }) => {
  const AVAILABLE_SPACE_RESERVE_VERTICAL = isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const AVAILABLE_SPACE_RESERVE_HORIZONTAL = isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const { insetBlockEnd: triggerBlockEnd, insetBlockStart: triggerBlockStart, insetInlineStart: triggerInlineStart, insetInlineEnd: triggerInlineEnd } = getLogicalBoundingClientRect(trigger);
  return overflowParents.reduce(({ blockStart, blockEnd, inlineStart, inlineEnd }, overflowParent) => {
    const currentBlockStart = triggerBlockEnd - overflowParent.insetBlockStart - AVAILABLE_SPACE_RESERVE_VERTICAL;
    const currentBlockEnd = overflowParent.blockSize - triggerBlockStart + overflowParent.insetBlockStart - AVAILABLE_SPACE_RESERVE_VERTICAL;
    const currentInlineStart = triggerInlineStart - overflowParent.insetInlineStart - AVAILABLE_SPACE_RESERVE_HORIZONTAL;
    const currentInlineEnd = overflowParent.insetInlineStart + overflowParent.inlineSize - triggerInlineEnd - AVAILABLE_SPACE_RESERVE_HORIZONTAL;
    return {
      blockStart: Math.min(blockStart, currentBlockStart),
      blockEnd: Math.min(blockEnd, currentBlockEnd),
      inlineStart: Math.min(inlineStart, currentInlineStart),
      inlineEnd: Math.min(inlineEnd, currentInlineEnd)
    };
  }, {
    blockStart: Number.MAX_VALUE,
    blockEnd: Number.MAX_VALUE,
    inlineStart: Number.MAX_VALUE,
    inlineEnd: Number.MAX_VALUE
  });
};
var getWidths = ({ triggerElement, dropdownElement, desiredMinWidth, stretchBeyondTriggerWidth = false }) => {
  const { inlineSize: triggerInlineSize } = getLogicalBoundingClientRect(triggerElement);
  const minWidth = desiredMinWidth ? Math.min(triggerInlineSize, desiredMinWidth) : triggerInlineSize;
  const maxWidth = stretchBeyondTriggerWidth ? Math.max(defaultMaxDropdownWidth, triggerInlineSize) : Number.MAX_VALUE;
  const { inlineSize: requiredWidth } = getLogicalBoundingClientRect(dropdownElement);
  const idealWidth = Math.min(Math.max(requiredWidth, minWidth), maxWidth);
  return { idealWidth, minWidth, triggerInlineSize };
};
var hasEnoughSpaceToStretchBeyondTriggerWidth = ({ triggerElement, dropdownElement, desiredMinWidth, expandToViewport, stretchWidth, stretchHeight, isMobile }) => {
  const overflowParents = getOverflowParentDimensions({
    element: dropdownElement,
    excludeClosestParent: false,
    expandToViewport,
    canExpandOutsideViewport: stretchHeight
  });
  const { idealWidth } = getWidths({
    triggerElement,
    dropdownElement,
    desiredMinWidth,
    stretchBeyondTriggerWidth: true
  });
  const availableSpace = getAvailableSpace({
    trigger: triggerElement,
    overflowParents,
    stretchWidth,
    stretchHeight,
    isMobile
  });
  return idealWidth <= availableSpace.inlineStart || idealWidth <= availableSpace.inlineEnd;
};
var getDropdownPosition = ({ triggerElement, dropdownElement, overflowParents, minWidth: desiredMinWidth, preferCenter = false, stretchWidth = false, stretchHeight = false, isMobile = false, stretchBeyondTriggerWidth = false }) => {
  const availableSpace = getAvailableSpace({
    trigger: triggerElement,
    overflowParents,
    stretchWidth,
    stretchHeight,
    isMobile
  });
  const { idealWidth, minWidth, triggerInlineSize } = getWidths({
    triggerElement,
    dropdownElement,
    desiredMinWidth,
    stretchBeyondTriggerWidth
  });
  let dropInlineStart;
  let insetInlineStart = null;
  let inlineSize = idealWidth;
  if (idealWidth <= availableSpace.inlineEnd) {
    dropInlineStart = false;
  } else if (idealWidth <= availableSpace.inlineStart) {
    dropInlineStart = true;
  } else {
    dropInlineStart = availableSpace.inlineStart > availableSpace.inlineEnd;
    inlineSize = Math.max(availableSpace.inlineStart, availableSpace.inlineEnd, minWidth);
  }
  if (preferCenter) {
    const spillOver = (idealWidth - triggerInlineSize) / 2;
    const availableOutsideLeft = availableSpace.inlineStart - triggerInlineSize;
    const availableOutsideRight = availableSpace.inlineEnd - triggerInlineSize;
    const fitsInCenter = availableOutsideLeft >= spillOver && availableOutsideRight >= spillOver;
    if (fitsInCenter) {
      insetInlineStart = -spillOver;
    }
  }
  const dropBlockStart = availableSpace.blockEnd < dropdownElement.offsetHeight && availableSpace.blockStart > availableSpace.blockEnd;
  const availableHeight = dropBlockStart ? availableSpace.blockStart : availableSpace.blockEnd;
  const croppedHeight = stretchHeight ? availableHeight : Math.floor(availableHeight / 31) * 31 + 16;
  return {
    dropBlockStart,
    dropInlineStart,
    insetInlineStart: insetInlineStart === null ? "auto" : `${insetInlineStart}px`,
    blockSize: `${croppedHeight}px`,
    inlineSize: `${inlineSize}px`
  };
};
var getInteriorDropdownPosition = (trigger, dropdown, overflowParents, isMobile) => {
  const availableSpace = getInteriorAvailableSpace({ trigger, overflowParents, isMobile });
  const { insetBlockEnd: triggerBlockEnd, insetBlockStart: triggerBlockStart, inlineSize: triggerInlineSize } = getLogicalBoundingClientRect(trigger);
  const { insetBlockStart: parentDropdownBlockStart, blockSize: parentDropdownHeight } = getClosestParentDimensions(trigger);
  let dropInlineStart;
  let { inlineSize } = getLogicalBoundingClientRect(dropdown);
  const insetBlockStart = triggerBlockStart - parentDropdownBlockStart;
  if (inlineSize <= availableSpace.inlineEnd) {
    dropInlineStart = false;
  } else if (inlineSize <= availableSpace.inlineStart) {
    dropInlineStart = true;
  } else {
    dropInlineStart = availableSpace.inlineStart > availableSpace.inlineEnd;
    inlineSize = Math.max(availableSpace.inlineStart, availableSpace.inlineEnd);
  }
  const insetInlineStart = dropInlineStart ? 0 - inlineSize : triggerInlineSize;
  const dropBlockStart = availableSpace.blockEnd < dropdown.offsetHeight && availableSpace.blockStart > availableSpace.blockEnd;
  const insetBlockEnd = dropBlockStart ? parentDropdownBlockStart + parentDropdownHeight - triggerBlockEnd : 0;
  const availableHeight = dropBlockStart ? availableSpace.blockStart : availableSpace.blockEnd;
  const croppedHeight = Math.floor(availableHeight / 31) * 31 + 16;
  return {
    dropBlockStart,
    dropInlineStart,
    blockSize: `${croppedHeight}px`,
    inlineSize: `${inlineSize}px`,
    insetBlockStart: `${insetBlockStart}px`,
    insetBlockEnd: `${insetBlockEnd}px`,
    insetInlineStart: `${insetInlineStart}px`
  };
};
var calculatePosition = (dropdownElement, triggerElement, verticalContainerElement, interior, expandToViewport, preferCenter, stretchWidth, stretchHeight, isMobile, minWidth, stretchBeyondTriggerWidth) => {
  verticalContainerElement.style.maxBlockSize = "";
  dropdownElement.style.inlineSize = "";
  dropdownElement.style.insetBlockStart = "";
  dropdownElement.style.insetBlockEnd = "";
  dropdownElement.style.insetInlineStart = "";
  dropdownElement.classList.remove(styles_css_default["dropdown-drop-left"]);
  dropdownElement.classList.remove(styles_css_default["dropdown-drop-right"]);
  dropdownElement.classList.remove(styles_css_default["dropdown-drop-up"]);
  const overflowParents = getOverflowParentDimensions({
    element: dropdownElement,
    excludeClosestParent: interior,
    expandToViewport,
    canExpandOutsideViewport: stretchHeight
  });
  const position = interior ? getInteriorDropdownPosition(triggerElement, dropdownElement, overflowParents, isMobile) : getDropdownPosition({
    triggerElement,
    dropdownElement,
    overflowParents,
    minWidth,
    preferCenter,
    stretchWidth,
    stretchHeight,
    isMobile,
    stretchBeyondTriggerWidth
  });
  const triggerBox = getLogicalBoundingClientRect(triggerElement);
  return [position, triggerBox];
};

// node_modules/@cloudscape-design/components/internal/components/dropdown/dropdown-position.js
function applyDropdownPositionRelativeToViewport({ position, dropdownElement, triggerRect, isMobile }) {
  const useAbsolutePositioning = isMobile;
  const verticalScrollOffset = useAbsolutePositioning ? document.documentElement.scrollTop : 0;
  const horizontalScrollOffset = useAbsolutePositioning ? document.documentElement.scrollLeft : 0;
  dropdownElement.style.position = useAbsolutePositioning ? "absolute" : "fixed";
  if (position.dropBlockStart) {
    dropdownElement.style.insetBlockEnd = `calc(100% - ${verticalScrollOffset + triggerRect.insetBlockStart}px)`;
  } else {
    dropdownElement.style.insetBlockStart = `${verticalScrollOffset + triggerRect.insetBlockEnd}px`;
  }
  if (position.dropInlineStart) {
    dropdownElement.style.insetInlineStart = `calc(${horizontalScrollOffset + triggerRect.insetInlineEnd}px - ${position.inlineSize})`;
  } else {
    dropdownElement.style.insetInlineStart = `${horizontalScrollOffset + triggerRect.insetInlineStart}px`;
  }
}

// node_modules/@cloudscape-design/components/internal/components/dropdown/index.js
var DropdownContainer = ({ triggerRef, children, renderWithPortal, id, referrerId, open }) => {
  var _a, _b;
  if (!renderWithPortal) {
    return import_react2.default.createElement(import_react2.default.Fragment, null, children);
  }
  if (!open) {
    return null;
  }
  const currentDocument = (_b = (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.ownerDocument) !== null && _b !== void 0 ? _b : document;
  return (0, import_react_dom.createPortal)(import_react2.default.createElement("div", { id, "data-awsui-referrer-id": referrerId }, children), currentDocument.body);
};
var TransitionContent = ({ state, transitionRef, dropdownClasses, stretchWidth, interior, isRefresh, dropdownRef, verticalContainerRef, expandToViewport, stretchBeyondTriggerWidth, header, children, footer, position, open, onMouseDown, id, role, ariaLabelledby, ariaDescribedby }) => {
  const contentRef = useMergeRefs(dropdownRef, transitionRef);
  return import_react2.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default.dropdown, dropdownClasses, {
      [styles_css_default.open]: open,
      [styles_css_default["with-limited-width"]]: !stretchWidth,
      [styles_css_default["hide-block-border"]]: stretchWidth,
      [styles_css_default.interior]: interior,
      [styles_css_default.refresh]: isRefresh,
      [styles_css_default["use-portal"]]: expandToViewport && !interior,
      [styles_css_default["stretch-beyond-trigger-width"]]: stretchBeyondTriggerWidth
    }), ref: contentRef, id, role, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby, "data-open": open, "data-animating": state !== "exited", "aria-hidden": !open, style: stretchBeyondTriggerWidth ? { [custom_css_properties_default.dropdownDefaultMaxWidth]: `${defaultMaxDropdownWidth}px` } : {}, onMouseDown },
    import_react2.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default["dropdown-content-wrapper"], !header && !children && styles_css_default["is-empty"], isRefresh && styles_css_default.refresh) },
      import_react2.default.createElement(
        "div",
        { ref: verticalContainerRef, className: styles_css_default["dropdown-content"] },
        import_react2.default.createElement(
          DropdownContextProvider,
          { position },
          header,
          children,
          footer
        )
      )
    )
  );
};
var Dropdown = ({ children, trigger, open, onDropdownClose, onMouseDown, header, footer, dropdownId, stretchTriggerHeight = false, stretchWidth = true, stretchHeight = false, stretchToTriggerWidth = true, stretchBeyondTriggerWidth = false, expandToViewport = false, preferCenter = false, interior = false, minWidth, scrollable = true, loopFocus = expandToViewport, onFocus, onBlur, contentKey, dropdownContentId, dropdownContentRole, ariaLabelledby, ariaDescribedby }) => {
  const wrapperRef = (0, import_react2.useRef)(null);
  const triggerRef = (0, import_react2.useRef)(null);
  const dropdownRef = (0, import_react2.useRef)(null);
  const dropdownContainerRef = (0, import_react2.useRef)(null);
  const verticalContainerRef = (0, import_react2.useRef)(null);
  const fixedPosition = (0, import_react2.useRef)(null);
  const isRefresh = useVisualRefresh();
  const dropdownClasses = usePortalModeClasses(triggerRef);
  const [position, setPosition] = (0, import_react2.useState)("bottom-right");
  const isMobile = useMobile();
  const setDropdownPosition = (position2, triggerBox, target, verticalContainer) => {
    const entireWidth = !interior && stretchWidth;
    if (!stretchWidth) {
      verticalContainer.style.maxBlockSize = `${parseInt(position2.blockSize) + 1}px`;
    } else {
      verticalContainer.style.maxBlockSize = position2.blockSize;
    }
    if (entireWidth && !expandToViewport) {
      if (stretchToTriggerWidth) {
        target.classList.add(styles_css_default["occupy-entire-width"]);
      }
    } else {
      target.style.inlineSize = position2.inlineSize;
    }
    if (position2.dropBlockStart && !interior) {
      target.classList.add(styles_css_default["dropdown-drop-up"]);
      if (!expandToViewport) {
        target.style.insetBlockEnd = "100%";
      }
    } else {
      target.classList.remove(styles_css_default["dropdown-drop-up"]);
    }
    target.classList.add(position2.dropInlineStart ? styles_css_default["dropdown-drop-left"] : styles_css_default["dropdown-drop-right"]);
    if (position2.insetInlineStart && position2.insetInlineStart !== "auto") {
      target.style.insetInlineStart = position2.insetInlineStart;
    }
    if (expandToViewport && !interior) {
      applyDropdownPositionRelativeToViewport({
        position: position2,
        dropdownElement: target,
        triggerRect: triggerBox,
        isMobile
      });
      fixedPosition.current = position2;
      return;
    }
    if (interior && isInteriorPosition(position2)) {
      if (position2.dropBlockStart) {
        target.style.insetBlockEnd = position2.insetBlockEnd;
      } else {
        target.style.insetBlockStart = position2.insetBlockStart;
      }
      target.style.insetInlineStart = position2.insetInlineStart;
    }
    if (position2.dropBlockStart && position2.dropInlineStart) {
      setPosition("top-left");
    } else if (position2.dropBlockStart) {
      setPosition("top-right");
    } else if (position2.dropInlineStart) {
      setPosition("bottom-left");
    } else {
      setPosition("bottom-right");
    }
  };
  const isOutsideDropdown = (element) => (!wrapperRef.current || !nodeBelongs(wrapperRef.current, element)) && (!dropdownContainerRef.current || !nodeBelongs(dropdownContainerRef.current, element));
  const focusHandler = (event) => {
    if (!event.relatedTarget || isOutsideDropdown(event.relatedTarget)) {
      fireNonCancelableEvent(onFocus, event);
    }
  };
  const blurHandler = (event) => {
    if (!event.relatedTarget || isOutsideDropdown(event.relatedTarget)) {
      fireNonCancelableEvent(onBlur, event);
    }
  };
  const fixStretching = () => {
    const classNameToRemove = styles_css_default["stretch-beyond-trigger-width"];
    if (open && stretchBeyondTriggerWidth && dropdownRef.current && triggerRef.current && dropdownRef.current.classList.contains(classNameToRemove) && !hasEnoughSpaceToStretchBeyondTriggerWidth({
      triggerElement: triggerRef.current,
      dropdownElement: dropdownRef.current,
      desiredMinWidth: minWidth,
      expandToViewport,
      stretchWidth,
      stretchHeight,
      isMobile
    })) {
      dropdownRef.current.classList.remove(classNameToRemove);
    }
  };
  useResizeObserver(() => dropdownRef.current, fixStretching);
  (0, import_react2.useLayoutEffect)(() => {
    const onDropdownOpen = () => {
      if (open && dropdownRef.current && triggerRef.current && verticalContainerRef.current) {
        if (scrollable) {
          dropdownRef.current.classList.add(styles_css_default.nowrap);
        }
        setDropdownPosition(...calculatePosition(dropdownRef.current, triggerRef.current, verticalContainerRef.current, interior, expandToViewport, preferCenter, stretchWidth, stretchHeight, isMobile, minWidth, stretchBeyondTriggerWidth), dropdownRef.current, verticalContainerRef.current);
        if (scrollable) {
          dropdownRef.current.classList.remove(styles_css_default.nowrap);
        }
      }
    };
    onDropdownOpen();
    if (open) {
      window.addEventListener("scroll", onDropdownOpen);
      const timeoutId = setTimeout(() => {
        window.removeEventListener("scroll", onDropdownOpen);
      }, 500);
      return () => {
        clearTimeout(timeoutId);
        window.removeEventListener("scroll", onDropdownOpen);
      };
    }
  }, [open, dropdownRef, triggerRef, verticalContainerRef, interior, stretchWidth, isMobile, contentKey]);
  (0, import_react2.useEffect)(() => {
    if (!open) {
      return;
    }
    const clickListener = (event) => {
      const target = event.composedPath ? event.composedPath()[0] : event.target;
      if (!nodeBelongs(dropdownRef.current, target) && !nodeBelongs(triggerRef.current, target)) {
        fireNonCancelableEvent(onDropdownClose);
      }
    };
    window.addEventListener("click", clickListener, true);
    return () => {
      window.removeEventListener("click", clickListener, true);
    };
  }, [open, onDropdownClose]);
  (0, import_react2.useLayoutEffect)(() => {
    if (!expandToViewport || !open) {
      return;
    }
    const updateDropdownPosition = () => {
      if (triggerRef.current && dropdownRef.current && verticalContainerRef.current && fixedPosition.current) {
        applyDropdownPositionRelativeToViewport({
          position: fixedPosition.current,
          dropdownElement: dropdownRef.current,
          triggerRect: getLogicalBoundingClientRect(triggerRef.current),
          isMobile
        });
      }
    };
    updateDropdownPosition();
    const controller = new AbortController();
    window.addEventListener("scroll", updateDropdownPosition, { capture: true, signal: controller.signal });
    window.addEventListener("resize", updateDropdownPosition, { capture: true, signal: controller.signal });
    return () => {
      controller.abort();
    };
  }, [open, expandToViewport, isMobile]);
  const referrerId = useUniqueId();
  return import_react2.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default.root, interior && styles_css_default.interior, stretchTriggerHeight && styles_css_default["stretch-trigger-height"]), ref: wrapperRef, onFocus: focusHandler, onBlur: blurHandler },
    import_react2.default.createElement("div", { id: referrerId, className: clsx_m_default(stretchTriggerHeight && styles_css_default["stretch-trigger-height"]), ref: triggerRef }, trigger),
    import_react2.default.createElement(TabTrap, { focusNextCallback: () => {
      var _a;
      return dropdownRef.current && ((_a = getFirstFocusable(dropdownRef.current)) === null || _a === void 0 ? void 0 : _a.focus());
    }, disabled: !open || !loopFocus }),
    import_react2.default.createElement(
      DropdownContainer,
      { triggerRef, renderWithPortal: expandToViewport && !interior, id: dropdownId, referrerId, open },
      import_react2.default.createElement(Transition, { in: open !== null && open !== void 0 ? open : false, exit: false }, (state, ref) => import_react2.default.createElement(
        "div",
        { ref: dropdownContainerRef },
        import_react2.default.createElement(TabTrap, { focusNextCallback: () => {
          var _a;
          return triggerRef.current && ((_a = getLastFocusable(triggerRef.current)) === null || _a === void 0 ? void 0 : _a.focus());
        }, disabled: !open || !loopFocus }),
        import_react2.default.createElement(TransitionContent, { state, transitionRef: ref, dropdownClasses, open, stretchWidth, interior, header, expandToViewport, stretchBeyondTriggerWidth, footer, onMouseDown, isRefresh, dropdownRef, verticalContainerRef, position, id: dropdownContentId, role: dropdownContentRole, ariaLabelledby, ariaDescribedby }, children),
        import_react2.default.createElement(TabTrap, { focusNextCallback: () => {
          var _a;
          return triggerRef.current && ((_a = getFirstFocusable(triggerRef.current)) === null || _a === void 0 ? void 0 : _a.focus());
        }, disabled: !open || !loopFocus })
      ))
    )
  );
};
var isInteriorPosition = (position) => position.insetBlockEnd !== void 0;
var dropdown_default = Dropdown;

// node_modules/@cloudscape-design/components/internal/components/dropdown-footer/index.js
var import_react6 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/dropdown-status/index.js
var import_react5 = __toESM(require_react());

// node_modules/@cloudscape-design/components/link/internal.js
var import_react3 = __toESM(require_react());

// node_modules/@cloudscape-design/components/link/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/link/styles.scoped.css";
var styles_css_default2 = {
  "link": "awsui_link_4c84z_1q0zg_145",
  "variant-secondary": "awsui_variant-secondary_4c84z_1q0zg_211",
  "variant-primary": "awsui_variant-primary_4c84z_1q0zg_246",
  "variant-info": "awsui_variant-info_4c84z_1q0zg_279",
  "variant-value-large": "awsui_variant-value-large_4c84z_1q0zg_314",
  "variant-top-navigation": "awsui_variant-top-navigation_4c84z_1q0zg_346",
  "variant-recovery": "awsui_variant-recovery_4c84z_1q0zg_379",
  "button": "awsui_button_4c84z_1q0zg_412",
  "color-inverted": "awsui_color-inverted_4c84z_1q0zg_447",
  "font-size-body-s": "awsui_font-size-body-s_4c84z_1q0zg_468",
  "font-size-body-m": "awsui_font-size-body-m_4c84z_1q0zg_475",
  "font-size-heading-xs": "awsui_font-size-heading-xs_4c84z_1q0zg_481",
  "font-size-heading-s": "awsui_font-size-heading-s_4c84z_1q0zg_487",
  "font-size-heading-m": "awsui_font-size-heading-m_4c84z_1q0zg_494",
  "font-size-heading-l": "awsui_font-size-heading-l_4c84z_1q0zg_501",
  "font-size-heading-xl": "awsui_font-size-heading-xl_4c84z_1q0zg_508",
  "font-size-display-l": "awsui_font-size-display-l_4c84z_1q0zg_515",
  "font-size-inherit": "awsui_font-size-inherit_4c84z_1q0zg_522",
  "icon-wrapper": "awsui_icon-wrapper_4c84z_1q0zg_530",
  "icon": "awsui_icon_4c84z_1q0zg_530"
};

// node_modules/@cloudscape-design/components/link/internal.js
var InternalLink = import_react3.default.forwardRef((_a, ref) => {
  var { variant: providedVariant, fontSize = "body-m", color = "normal", external = false, target, href, rel, ariaLabel, externalIconAriaLabel, onFollow, onClick, children, __internalRootRef = null } = _a, props2 = __rest(_a, ["variant", "fontSize", "color", "external", "target", "href", "rel", "ariaLabel", "externalIconAriaLabel", "onFollow", "onClick", "children", "__internalRootRef"]);
  checkSafeUrl("Link", href);
  const isButton = !href;
  const { defaultVariant } = (0, import_react3.useContext)(LinkDefaultVariantContext);
  const variant = providedVariant || defaultVariant;
  const specialStyles = ["top-navigation", "link", "recovery"];
  const hasSpecialStyle = specialStyles.indexOf(variant) > -1;
  const i18n = useInternalI18n("link");
  const baseProps = getBaseProps(props2);
  const anchorTarget = target !== null && target !== void 0 ? target : external ? "_blank" : void 0;
  const anchorRel = rel !== null && rel !== void 0 ? rel : anchorTarget === "_blank" ? "noopener noreferrer" : void 0;
  const uniqueId = useUniqueId("link");
  const linkId = useUniqueId("link-self");
  const infoId = useUniqueId("link-info");
  const infoLinkLabelFromContext = (0, import_react3.useContext)(InfoLinkLabelContext);
  const { funnelIdentifier, funnelInteractionId } = useFunnel();
  const { stepIdentifier, stepNumber, stepNameSelector } = useFunnelStep();
  const { subStepIdentifier, subStepSelector, subStepNameSelector } = useFunnelSubStep();
  const fireFunnelEvent = (funnelInteractionId2) => {
    if (variant === "info") {
      const stepName = getTextFromSelector(stepNameSelector);
      const subStepName = getTextFromSelector(subStepNameSelector);
      FunnelMetrics.helpPanelInteracted({
        funnelIdentifier,
        funnelInteractionId: funnelInteractionId2,
        stepIdentifier,
        stepNumber,
        stepName,
        subStepIdentifier,
        stepNameSelector,
        subStepSelector,
        subStepName,
        subStepNameSelector,
        elementSelector: getFunnelValueSelector(uniqueId),
        subStepAllSelector: getSubStepAllSelector()
      });
    } else if (external) {
      const stepName = getTextFromSelector(stepNameSelector);
      const subStepName = getTextFromSelector(subStepNameSelector);
      FunnelMetrics.externalLinkInteracted({
        funnelIdentifier,
        funnelInteractionId: funnelInteractionId2,
        stepIdentifier,
        stepNumber,
        stepName,
        stepNameSelector,
        subStepIdentifier,
        subStepSelector,
        subStepName,
        subStepNameSelector,
        elementSelector: getFunnelValueSelector(uniqueId),
        subStepAllSelector: getSubStepAllSelector()
      });
    }
  };
  const fireFollowEvent = (event) => {
    if (funnelInteractionId) {
      fireFunnelEvent(funnelInteractionId);
    }
    fireCancelableEvent(onFollow, { href, external, target: anchorTarget }, event);
  };
  const fireClickEvent = (event) => {
    const { altKey, ctrlKey, metaKey, shiftKey } = event;
    const button = "button" in event ? event.button : 0;
    fireNonCancelableEvent(onClick, { altKey, button, ctrlKey, metaKey, shiftKey });
  };
  const handleLinkClick = (event) => {
    if (isPlainLeftClick(event)) {
      fireFollowEvent(event);
    }
    fireClickEvent(event);
  };
  const handleButtonClick = (event) => {
    fireFollowEvent(event);
    fireClickEvent(event);
  };
  const handleButtonKeyDown = (event) => {
    if (event.keyCode === KeyCode.space || event.keyCode === KeyCode.enter) {
      event.preventDefault();
      fireFollowEvent(event);
      fireClickEvent(event);
    }
  };
  const linkRef = (0, import_react3.useRef)(null);
  const isVisualRefresh = useVisualRefresh();
  useForwardFocus(ref, linkRef);
  const applyButtonStyles = isButton && isVisualRefresh && !hasSpecialStyle;
  const sharedProps = Object.assign(Object.assign({ id: linkId }, baseProps), {
    // https://github.com/microsoft/TypeScript/issues/36659
    ref: useMergeRefs(linkRef, __internalRootRef),
    className: clsx_m_default(styles_css_default2.link, baseProps.className, applyButtonStyles ? styles_css_default2.button : null, styles_css_default2[getVariantStyle(variant)], styles_css_default2[getFontSizeStyle(variant, fontSize)], styles_css_default2[getColorStyle(variant, color)]),
    "aria-label": ariaLabel,
    "aria-labelledby": void 0,
    [DATA_ATTR_FUNNEL_VALUE]: uniqueId
  });
  if (variant === "info" && infoLinkLabelFromContext && !ariaLabel) {
    sharedProps["aria-labelledby"] = `${sharedProps.id} ${infoId} ${infoLinkLabelFromContext}`;
  }
  const renderedExternalIconAriaLabel = i18n("externalIconAriaLabel", externalIconAriaLabel);
  const content = import_react3.default.createElement(
    import_react3.default.Fragment,
    null,
    children,
    external && import_react3.default.createElement(
      "span",
      { className: styles_css_default2["icon-wrapper"] },
      " ",
      import_react3.default.createElement(
        "span",
        { className: styles_css_default2.icon, "aria-label": renderedExternalIconAriaLabel, role: renderedExternalIconAriaLabel ? "img" : void 0 },
        import_react3.default.createElement(internal_default, { name: "external", size: "inherit" })
      )
    ),
    variant === "info" && import_react3.default.createElement("span", { hidden: true, id: infoId }, ":")
  );
  const { tabIndex } = useSingleTabStopNavigation(linkRef, { tabIndex: isButton ? 0 : void 0 });
  if (isButton) {
    return import_react3.default.createElement("a", Object.assign({}, sharedProps, { role: "button", tabIndex, onKeyDown: handleButtonKeyDown, onClick: handleButtonClick }), content);
  }
  return (
    // we dynamically set proper rel in the code above
    // eslint-disable-next-line react/jsx-no-target-blank
    import_react3.default.createElement("a", Object.assign({}, sharedProps, { tabIndex, target: anchorTarget, rel: anchorRel, href, onClick: handleLinkClick }), content)
  );
});
function getVariantStyle(variant) {
  return `variant-${variant.replace(/^awsui-/, "")}`;
}
function getFontSizeStyle(variant, fontSize) {
  switch (variant) {
    case "info":
      return "font-size-body-s";
    case "awsui-value-large":
      return "font-size-display-l";
    default:
      return `font-size-${fontSize}`;
  }
}
function getColorStyle(variant, color) {
  return `color-${variant === "info" ? "normal" : color}`;
}
var internal_default4 = InternalLink;

// node_modules/@cloudscape-design/components/internal/hooks/use-previous/index.js
var import_react4 = __toESM(require_react());
var usePrevious = (value) => {
  const ref = (0, import_react4.useRef)();
  (0, import_react4.useEffect)(() => {
    ref.current = value;
  });
  return ref.current;
};

// node_modules/@cloudscape-design/components/internal/components/dropdown-status/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/dropdown-status/styles.scoped.css";
var styles_css_default3 = {
  "root": "awsui_root_vrgzu_1n5go_145",
  "recovery": "awsui_recovery_vrgzu_1n5go_180"
};

// node_modules/@cloudscape-design/components/internal/components/dropdown-status/index.js
function DropdownStatus({ children }) {
  return import_react5.default.createElement("div", { className: styles_css_default3.root }, children);
}
var useDropdownStatus = ({ statusType, empty, loadingText, finishedText, filteringResultsText, errorText, recoveryText, isEmpty, isNoMatch, isFiltered, noMatch, onRecoveryClick, hasRecoveryCallback = false, errorIconAriaLabel }) => {
  const previousStatusType = usePrevious(statusType);
  const statusResult = { isSticky: true, content: null, hasRecoveryButton: false };
  if (statusType === "loading") {
    statusResult.content = import_react5.default.createElement(StatusIndicator, { type: "loading" }, loadingText);
  } else if (statusType === "error") {
    statusResult.hasRecoveryButton = !!recoveryText && hasRecoveryCallback;
    statusResult.content = import_react5.default.createElement(
      "span",
      null,
      import_react5.default.createElement(StatusIndicator, { type: "error", __display: "inline", __animate: previousStatusType !== "error", iconAriaLabel: errorIconAriaLabel }, errorText),
      " ",
      statusResult.hasRecoveryButton && import_react5.default.createElement(internal_default4, { onFollow: () => fireNonCancelableEvent(onRecoveryClick), variant: "recovery", className: styles_css_default3.recovery }, recoveryText)
    );
  } else if (isEmpty && empty) {
    statusResult.content = empty;
  } else if (isNoMatch && noMatch) {
    statusResult.content = noMatch;
  } else if (isFiltered && filteringResultsText) {
    statusResult.content = filteringResultsText;
  } else if (statusType === "finished" && finishedText) {
    statusResult.content = finishedText;
    statusResult.isSticky = false;
  }
  return statusResult;
};
var dropdown_status_default = DropdownStatus;

// node_modules/@cloudscape-design/components/internal/components/dropdown-footer/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/dropdown-footer/styles.scoped.css";
var styles_css_default4 = {
  "root": "awsui_root_1afi9_1jjir_145",
  "hidden": "awsui_hidden_1afi9_1jjir_176",
  "no-items": "awsui_no-items_1afi9_1jjir_179"
};

// node_modules/@cloudscape-design/components/internal/components/dropdown-footer/index.js
var DropdownFooter = ({ content, id, hasItems = true }) => import_react6.default.createElement(
  "div",
  { className: clsx_m_default(styles_css_default4.root, { [styles_css_default4.hidden]: content === null, [styles_css_default4["no-items"]]: !hasItems }) },
  import_react6.default.createElement(internal_default2, { id }, content && import_react6.default.createElement(dropdown_status_default, null, content))
);
var dropdown_footer_default = DropdownFooter;

// node_modules/@cloudscape-design/components/internal/components/options-list/utils/test-indexes.js
var testIndexMap = /* @__PURE__ */ new WeakMap();
var getTestOptionIndexes = (item) => testIndexMap.get(item);
var generateTestIndexes = (filteredItems, getParentGroup) => {
  let throughIndex = 1;
  let groupIndex = 0;
  let inGroupIndex = 1;
  let currentGroup = null;
  filteredItems.forEach((item) => {
    const isGroup2 = item.type === "parent";
    const group = isGroup2 ? item : getParentGroup(item);
    if (group && group !== currentGroup) {
      currentGroup = group;
      groupIndex += 1;
      inGroupIndex = 1;
    }
    if (isGroup2) {
      testIndexMap.set(item, { groupIndex });
    } else if (group && item.type === "child") {
      testIndexMap.set(item, {
        throughIndex: throughIndex++,
        groupIndex,
        inGroupIndex: inGroupIndex++
      });
    } else if (item.type === "child" || !item.type) {
      testIndexMap.set(item, { throughIndex: throughIndex++ });
    }
  });
};

// node_modules/@cloudscape-design/components/internal/components/option/utils/filter-options.js
var searchableFields = ["value", "label", "description", "labelTag"];
var matchesString = (value, searchText, strictMatching) => {
  if (!value) {
    return false;
  }
  const index = value.toLowerCase().indexOf(searchText);
  return strictMatching ? index === 0 : index > -1;
};
var matchesSingleOption = (dropdownOption, text, strictMatching) => {
  const searchText = text.toLowerCase();
  const option = dropdownOption.option;
  const searchStrFields = (attr) => matchesString(option[attr], searchText, strictMatching);
  const searchTagsFields = (attr) => {
    var _a;
    return (_a = option[attr]) === null || _a === void 0 ? void 0 : _a.some((value) => matchesString(value, searchText, strictMatching));
  };
  const searchableTagFields = ["tags"];
  if (!strictMatching) {
    searchableTagFields.push("filteringTags");
  }
  return searchableFields.some(searchStrFields) || searchableTagFields.some(searchTagsFields);
};
var filterOptions = (options, searchText, strictMatching = false) => {
  if (searchText === "") {
    return options;
  }
  let currentGroup = null;
  let parentMatched = false;
  return options.reduce((acc, option) => {
    if (option.type === "parent") {
      parentMatched = false;
      currentGroup = option;
      if (matchesSingleOption(option, searchText, strictMatching)) {
        parentMatched = true;
        acc.push(currentGroup);
      }
      return acc;
    }
    if (option.type !== "child") {
      currentGroup = null;
      parentMatched = false;
    }
    if (parentMatched) {
      acc.push(option);
    } else if (matchesSingleOption(option, searchText, strictMatching)) {
      if (currentGroup) {
        acc.push(currentGroup);
        currentGroup = null;
      }
      acc.push(option);
    }
    return acc;
  }, []);
};
var isInteractive = (option) => !!option && !option.disabled && option.type !== "parent";
var isGroupInteractive = (option) => !!option && !option.disabled;
var isGroup = (option) => !!option && "options" in option;

// node_modules/@cloudscape-design/components/internal/components/option/utils/flatten-options.js
var flattenOptions = (options) => {
  const parentMap = /* @__PURE__ */ new Map();
  const flatOptions = options.reduce((acc, option) => {
    if ("options" in option) {
      const { options: options2 } = option, rest = __rest(option, ["options"]);
      const parentDropdownOption = { type: "parent", option };
      const allOptionsDisabled = options2.every((option2) => option2.disabled);
      if (option.disabled || allOptionsDisabled) {
        parentDropdownOption.disabled = true;
      }
      acc.push(parentDropdownOption);
      options2.forEach((child) => {
        const childDropdownOption = { type: "child", option: child };
        if (rest.disabled || child.disabled) {
          childDropdownOption.disabled = true;
        }
        acc.push(childDropdownOption);
        parentMap.set(childDropdownOption, parentDropdownOption);
      });
    } else {
      const dropdownOption = { option };
      if (option.disabled) {
        dropdownOption.disabled = true;
      }
      acc.push(dropdownOption);
    }
    return acc;
  }, []);
  return {
    flatOptions,
    parentMap
  };
};

// node_modules/@cloudscape-design/components/internal/components/option/utils/prepare-options.js
function prepareOptions(options, filteringType, filteringText) {
  const { flatOptions, parentMap } = flattenOptions(options);
  const filteredOptions = filteringType !== "auto" ? flatOptions : filterOptions(flatOptions, filteringText);
  generateTestIndexes(filteredOptions, parentMap.get.bind(parentMap));
  return {
    filteredOptions,
    parentMap,
    totalCount: flatOptions.length,
    matchesCount: filteredOptions.length
  };
}

// node_modules/@cloudscape-design/components/internal/hooks/check-controlled/index.js
function checkControlled(componentName, propertyName, propertyValue, handlerName, handlerValue) {
  if (propertyValue !== void 0 && handlerValue === void 0 && isDevelopment) {
    warnOnce(componentName, `You provided \`${propertyName}\` prop without an \`${handlerName}\` handler. This will render a read-only component. If the component should be mutable, set an \`${handlerName}\` handler.`);
  }
}

// node_modules/@cloudscape-design/components/select/parts/filter.js
var import_react7 = __toESM(require_react());

// node_modules/@cloudscape-design/components/select/parts/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/select/parts/styles.scoped.css";
var styles_css_default5 = {
  "placeholder": "awsui_placeholder_dwuol_etz7p_145",
  "item": "awsui_item_dwuol_etz7p_150",
  "checkbox": "awsui_checkbox_dwuol_etz7p_154",
  "filter": "awsui_filter_dwuol_etz7p_163",
  "trigger": "awsui_trigger_dwuol_etz7p_168",
  "layout-strut": "awsui_layout-strut_dwuol_etz7p_174",
  "list-bottom": "awsui_list-bottom_dwuol_etz7p_180",
  "selected-icon": "awsui_selected-icon_dwuol_etz7p_184",
  "show-label-tag": "awsui_show-label-tag_dwuol_etz7p_188",
  "inline-token-trigger": "awsui_inline-token-trigger_dwuol_etz7p_192",
  "inline-token-list": "awsui_inline-token-list_dwuol_etz7p_199",
  "inline-token": "awsui_inline-token_dwuol_etz7p_192",
  "visual-refresh": "awsui_visual-refresh_dwuol_etz7p_229",
  "inline-token-hidden-placeholder": "awsui_inline-token-hidden-placeholder_dwuol_etz7p_236",
  "inline-token-counter": "awsui_inline-token-counter_dwuol_etz7p_242",
  "inline-token-trigger--disabled": "awsui_inline-token-trigger--disabled_dwuol_etz7p_246",
  "inline-label-trigger-wrapper": "awsui_inline-label-trigger-wrapper_dwuol_etz7p_252",
  "inline-label-wrapper": "awsui_inline-label-wrapper_dwuol_etz7p_256",
  "inline-label": "awsui_inline-label_dwuol_etz7p_252",
  "inline-label-disabled": "awsui_inline-label-disabled_dwuol_etz7p_278",
  "disabled-reason-tooltip": "awsui_disabled-reason-tooltip_dwuol_etz7p_286"
};

// node_modules/@cloudscape-design/components/select/parts/filter.js
var Filter = import_react7.default.forwardRef((_a, ref) => {
  var { filteringType } = _a, filterProps = __rest(_a, ["filteringType"]);
  if (filteringType === "none") {
    return null;
  }
  return import_react7.default.createElement(internal_default3, Object.assign({ ref, type: "visualSearch", className: styles_css_default5.filter, autoComplete: false, disableBrowserAutocorrect: true, invalid: false, __noBorderRadius: true }, filterProps, { __nativeAttributes: Object.assign({ "aria-expanded": true, "aria-haspopup": true, role: "combobox", autoCorrect: "off", autoCapitalize: "off" }, filterProps.__nativeAttributes) }));
});
var filter_default = Filter;

// node_modules/@cloudscape-design/components/select/parts/plain-list.js
var import_react16 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/options-list/index.js
var import_react8 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/options-list/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/options-list/styles.scoped.css";
var styles_css_default6 = {
  "options-list": "awsui_options-list_19gcf_1fo58_145",
  "options-list-embedded": "awsui_options-list-embedded_19gcf_1fo58_192",
  "decrease-block-margin": "awsui_decrease-block-margin_19gcf_1fo58_199"
};

// node_modules/@cloudscape-design/components/internal/components/options-list/index.js
var BOTTOM_TRIGGER_OFFSET = 80;
var getItemIndex = (containerRef, event) => {
  const target = findUpUntil(event.target, (element) => element === containerRef.current || !!element.dataset.mouseTarget);
  const mouseTarget = target === null || target === void 0 ? void 0 : target.dataset.mouseTarget;
  return mouseTarget ? parseInt(mouseTarget) : -1;
};
var OptionsList = (_a, ref) => {
  var { open, statusType, children, nativeAttributes = {}, onKeyDown, onBlur, onFocus, onLoadMore, onMouseUp, onMouseMove, position = "relative", role = "listbox", decreaseBlockMargin = false, ariaLabel, ariaLabelledby, ariaDescribedby, embedded } = _a, restProps = __rest(_a, ["open", "statusType", "children", "nativeAttributes", "onKeyDown", "onBlur", "onFocus", "onLoadMore", "onMouseUp", "onMouseMove", "position", "role", "decreaseBlockMargin", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "embedded"]);
  const baseProps = getBaseProps(restProps);
  const menuRef = (0, import_react8.useRef)(null);
  const handleScroll = useStableCallback(() => {
    const scrollContainer = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current;
    if (scrollContainer) {
      const bottomEdgePosition = scrollContainer.scrollTop + scrollContainer.clientHeight;
      const remainingScrollHeight = scrollContainer.scrollHeight - bottomEdgePosition;
      if (remainingScrollHeight < BOTTOM_TRIGGER_OFFSET) {
        fireNonCancelableEvent(onLoadMore);
      }
    }
  });
  (0, import_react8.useEffect)(() => {
    if (open && statusType === "pending") {
      handleScroll();
    }
  }, [open, statusType, handleScroll]);
  const className = clsx_m_default(styles_css_default6["options-list"], {
    [styles_css_default6["decrease-block-margin"]]: decreaseBlockMargin,
    [styles_css_default6["options-list-embedded"]]: embedded
  });
  const mergedRef = useMergeRefs(ref, menuRef);
  return import_react8.default.createElement("ul", Object.assign({}, baseProps, nativeAttributes, { className, ref: mergedRef, style: { position }, role, onScroll: handleScroll, onKeyDown: (event) => fireKeyboardEvent(onKeyDown, event), onMouseMove: (event) => onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove(getItemIndex(menuRef, event)), onMouseUp: (event) => onMouseUp === null || onMouseUp === void 0 ? void 0 : onMouseUp(getItemIndex(menuRef, event)), onBlur: (event) => fireNonCancelableEvent(onBlur, { relatedTarget: event.relatedTarget }), onFocus: () => fireNonCancelableEvent(onFocus), tabIndex: embedded ? 0 : -1, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby }), open && children);
};
var options_list_default = import_react8.default.forwardRef(OptionsList);

// node_modules/@cloudscape-design/components/select/utils/render-options.js
var import_react15 = __toESM(require_react());

// node_modules/@cloudscape-design/components/select/parts/item.js
var import_react13 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/option/index.js
var import_react11 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/option/option-parts.js
var import_react10 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/option/highlight-match.js
var import_react9 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/option/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/option/styles.scoped.css";
var styles_css_default7 = {
  "option": "awsui_option_1p2cx_4qlzt_153",
  "disabled": "awsui_disabled_1p2cx_4qlzt_190",
  "parent": "awsui_parent_1p2cx_4qlzt_193",
  "highlighted": "awsui_highlighted_1p2cx_4qlzt_196",
  "content": "awsui_content_1p2cx_4qlzt_200",
  "label-content": "awsui_label-content_1p2cx_4qlzt_207",
  "label": "awsui_label_1p2cx_4qlzt_207",
  "tag": "awsui_tag_1p2cx_4qlzt_214",
  "label-tag": "awsui_label-tag_1p2cx_4qlzt_215",
  "label-prefix": "awsui_label-prefix_1p2cx_4qlzt_225",
  "tags": "awsui_tags_1p2cx_4qlzt_238",
  "description": "awsui_description_1p2cx_4qlzt_239",
  "selected": "awsui_selected_1p2cx_4qlzt_250",
  "icon": "awsui_icon_1p2cx_4qlzt_264",
  "icon-size-big": "awsui_icon-size-big_1p2cx_4qlzt_271",
  "filtering-match-highlight": "awsui_filtering-match-highlight_1p2cx_4qlzt_275",
  "trigger-variant": "awsui_trigger-variant_1p2cx_4qlzt_290"
};

// node_modules/@cloudscape-design/components/internal/components/option/highlight-match.js
var splitOnFiltering = (str, highlightText) => {
  if (highlightText.length > 1e5) {
    return { noMatches: [str], matches: null };
  }
  const filteringPattern = highlightText.replace(/[-[\]/{}()*+?.\\^$|]/g, "\\$&");
  const regexp = new RegExp(filteringPattern, "gi");
  const noMatches = str.split(regexp);
  const matches = str.match(regexp);
  return { noMatches, matches };
};
var Highlight = ({ str }) => str ? import_react9.default.createElement("span", { className: styles_css_default7["filtering-match-highlight"] }, str) : null;
function HighlightMatch({ str, highlightText }) {
  if (!str || !highlightText) {
    return import_react9.default.createElement("span", null, str);
  }
  if (str === highlightText) {
    return import_react9.default.createElement(Highlight, { str });
  }
  const { noMatches, matches } = splitOnFiltering(str, highlightText);
  const highlighted = [];
  noMatches.forEach((noMatch, idx) => {
    highlighted.push(import_react9.default.createElement("span", { key: `noMatch-${idx}` }, noMatch));
    if (matches && idx < matches.length) {
      highlighted.push(import_react9.default.createElement(Highlight, { key: `match-${idx}`, str: matches[idx] }));
    }
  });
  return import_react9.default.createElement("span", null, highlighted);
}

// node_modules/@cloudscape-design/components/internal/components/option/analytics-metadata/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/option/analytics-metadata/styles.scoped.css";
var styles_css_default8 = {
  "label": "awsui_label_1q5vz_ocied_5"
};

// node_modules/@cloudscape-design/components/internal/components/option/option-parts.js
var Label = ({ label, prefix, highlightText, triggerVariant }) => import_react10.default.createElement(
  "span",
  { className: clsx_m_default(styles_css_default7.label, styles_css_default8.label, triggerVariant && styles_css_default7["trigger-variant"]) },
  prefix && import_react10.default.createElement(
    "span",
    { className: clsx_m_default(styles_css_default7["label-prefix"], triggerVariant && styles_css_default7["trigger-variant"]) },
    prefix,
    " "
  ),
  import_react10.default.createElement(HighlightMatch, { str: label, highlightText })
);
var LabelTag = ({ labelTag, highlightText, triggerVariant }) => labelTag ? import_react10.default.createElement(
  "span",
  { className: clsx_m_default(styles_css_default7["label-tag"], triggerVariant && styles_css_default7["trigger-variant"]) },
  import_react10.default.createElement(HighlightMatch, { str: labelTag, highlightText })
) : null;
var Description = ({ description, highlightedOption, highlightText, selectedOption, triggerVariant }) => description ? import_react10.default.createElement(
  "span",
  { className: clsx_m_default(styles_css_default7.description, {
    [styles_css_default7["trigger-variant"]]: triggerVariant,
    [styles_css_default7.highlighted]: highlightedOption,
    [styles_css_default7.selected]: selectedOption
  }) },
  import_react10.default.createElement(HighlightMatch, { str: description, highlightText })
) : null;
var Tags = ({ tags, highlightedOption, highlightText, selectedOption, triggerVariant }) => tags ? import_react10.default.createElement("span", { className: clsx_m_default(styles_css_default7.tags, {
  [styles_css_default7.highlighted]: highlightedOption,
  [styles_css_default7.selected]: selectedOption
}) }, tags.map((tag, idx) => import_react10.default.createElement(
  "span",
  { key: idx, className: clsx_m_default(styles_css_default7.tag, triggerVariant && styles_css_default7["trigger-variant"]) },
  import_react10.default.createElement(HighlightMatch, { str: tag, highlightText })
))) : null;
var FilteringTags = ({ filteringTags, highlightedOption, highlightText, selectedOption, triggerVariant }) => {
  if (!highlightText || !filteringTags) {
    return null;
  }
  const searchElement = highlightText.toLowerCase();
  return import_react10.default.createElement("span", { className: clsx_m_default(styles_css_default7.tags, {
    [styles_css_default7.highlighted]: highlightedOption,
    [styles_css_default7.selected]: selectedOption
  }) }, filteringTags.map((filteringTag, key) => {
    const match = filteringTag.toLowerCase().indexOf(searchElement) !== -1;
    if (match) {
      return import_react10.default.createElement(
        "span",
        { className: clsx_m_default(styles_css_default7.tag, triggerVariant && styles_css_default7["trigger-variant"]), key, "aria-disabled": true },
        import_react10.default.createElement(HighlightMatch, { str: filteringTag, highlightText })
      );
    }
    return null;
  }));
};
var OptionIcon = (props2) => {
  if (!props2.name && !props2.url && !props2.svg) {
    return null;
  }
  return import_react10.default.createElement(
    "span",
    { className: clsx_m_default(styles_css_default7.icon, props2.size === "big" && [styles_css_default7[`icon-size-big`]]) },
    import_react10.default.createElement(internal_default, Object.assign({}, props2))
  );
};

// node_modules/@cloudscape-design/components/internal/components/option/index.js
function validateStringValue(value, propertyName) {
  if (typeof value !== "undefined" && typeof value !== "string") {
    warnOnce("DropdownOption", `This component only supports string values, but "option.${propertyName}" has ${typeof value} type. The component may work incorrectly.`);
  }
}
var Option = (_a) => {
  var _b, _c, _d, _e;
  var { option, highlightText, triggerVariant = false, isGroupOption = false, isGenericGroup = true, highlightedOption = false, selectedOption = false } = _a, restProps = __rest(_a, ["option", "highlightText", "triggerVariant", "isGroupOption", "isGenericGroup", "highlightedOption", "selectedOption"]);
  if (!option) {
    return null;
  }
  const { disabled } = option;
  const baseProps = getBaseProps(restProps);
  if (isDevelopment) {
    validateStringValue(option.label, "label");
    validateStringValue(option.description, "description");
    validateStringValue(option.labelTag, "labelTag");
    (_b = option.tags) === null || _b === void 0 ? void 0 : _b.forEach((tag, index) => {
      validateStringValue(tag, `tags[${index}]`);
    });
    (_c = option.filteringTags) === null || _c === void 0 ? void 0 : _c.forEach((tag, index) => {
      validateStringValue(tag, `filteringTags[${index}]`);
    });
  }
  const className = clsx_m_default(styles_css_default7.option, disabled && styles_css_default7.disabled, isGroupOption && styles_css_default7.parent, highlightedOption && styles_css_default7.highlighted);
  const icon = option.__customIcon || import_react11.default.createElement(OptionIcon, { name: option.iconName, url: option.iconUrl, svg: option.iconSvg, alt: option.iconAlt, size: option.description || option.tags ? "big" : "normal" });
  const genericGroupProps = isGenericGroup ? {
    title: (_d = option.label) !== null && _d !== void 0 ? _d : option.value,
    "aria-disabled": disabled
  } : void 0;
  return import_react11.default.createElement(
    "span",
    Object.assign({ "data-value": option.value, className, lang: option.lang }, genericGroupProps, baseProps),
    icon,
    import_react11.default.createElement(
      "span",
      { className: styles_css_default7.content },
      import_react11.default.createElement(
        "span",
        { className: styles_css_default7["label-content"] },
        import_react11.default.createElement(Label, { label: (_e = option.label) !== null && _e !== void 0 ? _e : option.value, prefix: option.__labelPrefix, highlightText, triggerVariant }),
        import_react11.default.createElement(LabelTag, { labelTag: option.labelTag, highlightText, triggerVariant })
      ),
      import_react11.default.createElement(Description, { description: option.description, highlightedOption, selectedOption, highlightText, triggerVariant }),
      import_react11.default.createElement(Tags, { tags: option.tags, highlightedOption, selectedOption, highlightText, triggerVariant }),
      import_react11.default.createElement(FilteringTags, { filteringTags: option.filteringTags, highlightedOption, selectedOption, highlightText, triggerVariant })
    )
  );
};
var option_default = Option;

// node_modules/@cloudscape-design/components/internal/components/selectable-item/index.js
var import_react12 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/selectable-item/analytics-metadata/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/selectable-item/analytics-metadata/styles.scoped.css";
var styles_css_default9 = {
  "parent": "awsui_parent_2dmmi_qu62t_5",
  "option-content": "awsui_option-content_2dmmi_qu62t_6"
};

// node_modules/@cloudscape-design/components/internal/components/selectable-item/analytics-metadata/utils.js
var getAnalyticsSelectActionMetadata = (_a) => {
  var { isChild, value } = _a, restProps = __rest(_a, ["isChild", "value"]);
  const dataAttributes = restProps;
  const analyticsMetadata = {
    action: "select",
    detail: {
      label: {
        selector: [`.${styles_css_default8.label}`, `.${styles_css_default9["option-content"]}`]
      }
    }
  };
  let position = void 0;
  if (isChild && dataAttributes["data-group-index"] && dataAttributes["data-in-group-index"] || dataAttributes["data-child-index"]) {
    position = `${dataAttributes["data-group-index"]},${dataAttributes["data-in-group-index"] || dataAttributes["data-child-index"]}`;
  } else if (dataAttributes["data-test-index"]) {
    position = `${dataAttributes["data-test-index"]}`;
  }
  if (position) {
    analyticsMetadata.detail.position = position;
  }
  if (value) {
    analyticsMetadata.detail.value = value;
  }
  if (isChild) {
    analyticsMetadata.detail.groupLabel = {
      root: "body",
      selector: `.${styles_css_default9.parent}[data-group-index="${dataAttributes["data-group-index"]}"] .${styles_css_default9["option-content"]}`
    };
  }
  return analyticsMetadata;
};

// node_modules/@cloudscape-design/components/internal/components/selectable-item/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/selectable-item/styles.scoped.css";
var styles_css_default10 = {
  "selectable-item": "awsui_selectable-item_15o6u_ieaqn_145",
  "pad-bottom": "awsui_pad-bottom_15o6u_ieaqn_167",
  "has-background": "awsui_has-background_15o6u_ieaqn_174",
  "highlighted": "awsui_highlighted_15o6u_ieaqn_177",
  "selected": "awsui_selected_15o6u_ieaqn_177",
  "disabled": "awsui_disabled_15o6u_ieaqn_195",
  "next-item-selected": "awsui_next-item-selected_15o6u_ieaqn_205",
  "is-keyboard": "awsui_is-keyboard_15o6u_ieaqn_217",
  "parent": "awsui_parent_15o6u_ieaqn_221",
  "interactiveGroups": "awsui_interactiveGroups_15o6u_ieaqn_225",
  "child": "awsui_child_15o6u_ieaqn_241",
  "virtual": "awsui_virtual_15o6u_ieaqn_256",
  "measure-strut": "awsui_measure-strut_15o6u_ieaqn_267",
  "measure-strut-first": "awsui_measure-strut-first_15o6u_ieaqn_276",
  "screenreader-content": "awsui_screenreader-content_15o6u_ieaqn_280",
  "option-content": "awsui_option-content_15o6u_ieaqn_286"
};

// node_modules/@cloudscape-design/components/internal/components/selectable-item/index.js
var SelectableItem = (_a, ref) => {
  var { children: content, ariaSelected, ariaChecked, selected, highlighted, disabled, hasBackground, isParent, isChild, virtualPosition, padBottom, isNextSelected, useInteractiveGroups, screenReaderContent, ariaPosinset, ariaSetsize, highlightType, value } = _a, restProps = __rest(_a, ["children", "ariaSelected", "ariaChecked", "selected", "highlighted", "disabled", "hasBackground", "isParent", "isChild", "virtualPosition", "padBottom", "isNextSelected", "useInteractiveGroups", "screenReaderContent", "ariaPosinset", "ariaSetsize", "highlightType", "value"]);
  const _b = getBaseProps(restProps), { className } = _b, rest = __rest(_b, ["className"]);
  const classNames = clsx_m_default(className, styles_css_default10["selectable-item"], {
    [styles_css_default10.selected]: selected,
    [styles_css_default10.highlighted]: highlighted,
    [styles_css_default10["has-background"]]: hasBackground,
    [styles_css_default10.parent]: isParent,
    [styles_css_default9.parent]: isParent,
    [styles_css_default10.child]: isChild,
    [styles_css_default10["is-keyboard"]]: highlightType === "keyboard",
    [styles_css_default10.disabled]: disabled,
    [styles_css_default10.virtual]: virtualPosition !== void 0,
    [styles_css_default10["pad-bottom"]]: padBottom,
    [styles_css_default10["next-item-selected"]]: isNextSelected,
    [styles_css_default10.interactiveGroups]: useInteractiveGroups
  });
  const contentRef = (0, import_react12.useRef)(null);
  const screenReaderContentRef = (0, import_react12.useRef)(null);
  (0, import_react12.useLayoutEffect)(() => {
    if (highlighted && screenReaderContent) {
      if (contentRef.current) {
        contentRef.current.setAttribute("aria-hidden", "true");
      }
      if (screenReaderContentRef.current) {
        screenReaderContentRef.current.textContent = screenReaderContent;
      }
    }
  }, [highlighted, screenReaderContent, contentRef, screenReaderContentRef]);
  const style = virtualPosition !== void 0 ? {
    transform: `translateY(${virtualPosition}px)`
  } : void 0;
  const a11yProperties = {
    "aria-disabled": disabled
  };
  if (isParent && !useInteractiveGroups) {
    a11yProperties["aria-hidden"] = true;
  }
  if (ariaSelected !== void 0) {
    a11yProperties["aria-selected"] = ariaSelected;
  }
  if (ariaChecked !== void 0) {
    a11yProperties["aria-checked"] = ariaChecked;
  }
  if (ariaPosinset && ariaSetsize) {
    a11yProperties["aria-posinset"] = ariaPosinset;
    a11yProperties["aria-setsize"] = ariaSetsize;
  }
  if (restProps.ariaDescribedby) {
    a11yProperties["aria-describedby"] = restProps.ariaDescribedby;
  }
  return import_react12.default.createElement(
    "li",
    Object.assign({ role: "option", className: classNames, style }, a11yProperties, rest, isParent || disabled ? {} : getAnalyticsMetadataAttribute(getAnalyticsSelectActionMetadata(Object.assign({ isChild, value }, restProps)))),
    import_react12.default.createElement("div", { className: clsx_m_default(styles_css_default10["option-content"], styles_css_default9["option-content"]), ref: contentRef }, content),
    import_react12.default.createElement("div", { className: styles_css_default10["measure-strut"], ref }),
    import_react12.default.createElement("div", { className: styles_css_default10["screenreader-content"], ref: screenReaderContentRef })
  );
};
var selectable_item_default = import_react12.default.forwardRef(SelectableItem);

// node_modules/@cloudscape-design/components/select/parts/item.js
var Item = (_a, ref) => {
  var { option, highlighted, selected, filteringValue, hasCheckbox, virtualPosition, padBottom, isNextSelected, screenReaderContent, ariaPosinset, ariaSetsize, highlightType } = _a, restProps = __rest(_a, ["option", "highlighted", "selected", "filteringValue", "hasCheckbox", "virtualPosition", "padBottom", "isNextSelected", "screenReaderContent", "ariaPosinset", "ariaSetsize", "highlightType"]);
  const baseProps = getBaseProps(restProps);
  const isParent = option.type === "parent";
  const isChild = option.type === "child";
  const wrappedOption = option.option;
  const disabled = option.disabled || wrappedOption.disabled;
  const disabledReason = disabled && wrappedOption.disabledReason ? wrappedOption.disabledReason : "";
  const isDisabledWithReason = !!disabledReason;
  const internalRef = (0, import_react13.useRef)(null);
  const { descriptionEl, descriptionId } = useHiddenDescription(disabledReason);
  return import_react13.default.createElement(
    selectable_item_default,
    Object.assign({ ariaSelected: Boolean(selected), selected, isNextSelected, highlighted, disabled: option.disabled, isParent, isChild, ref: useMergeRefs(ref, internalRef), virtualPosition, padBottom, screenReaderContent, ariaPosinset, ariaSetsize, highlightType, ariaDescribedby: isDisabledWithReason ? descriptionId : "", value: option.option.value }, baseProps),
    import_react13.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default5.item, !isParent && wrappedOption.labelTag && styles_css_default5["show-label-tag"]) },
      hasCheckbox && !isParent && import_react13.default.createElement(
        "div",
        { className: styles_css_default5.checkbox },
        import_react13.default.createElement(checkbox_icon_default, { checked: selected || false, disabled: option.disabled })
      ),
      import_react13.default.createElement(option_default, { option: Object.assign(Object.assign({}, wrappedOption), { disabled }), highlightedOption: highlighted, selectedOption: selected, highlightText: filteringValue, isGroupOption: isParent }),
      !hasCheckbox && !isParent && selected && import_react13.default.createElement(
        "div",
        { className: styles_css_default5["selected-icon"] },
        import_react13.default.createElement(internal_default, { name: "check" })
      ),
      isDisabledWithReason && import_react13.default.createElement(
        import_react13.default.Fragment,
        null,
        descriptionEl,
        highlighted && import_react13.default.createElement(Tooltip, { className: styles_css_default5["disabled-reason-tooltip"], trackRef: internalRef, value: disabledReason, position: "right", hideOnOverscroll: true })
      )
    )
  );
};
var item_default = import_react13.default.memo(import_react13.default.forwardRef(Item));

// node_modules/@cloudscape-design/components/select/parts/multiselect-item.js
var import_react14 = __toESM(require_react());
var MultiSelectItem = (_a, ref) => {
  var { option, highlighted, selected, filteringValue, hasCheckbox, virtualPosition, padBottom, isNextSelected, indeterminate, screenReaderContent, ariaPosinset, ariaSetsize, highlightType } = _a, restProps = __rest(_a, ["option", "highlighted", "selected", "filteringValue", "hasCheckbox", "virtualPosition", "padBottom", "isNextSelected", "indeterminate", "screenReaderContent", "ariaPosinset", "ariaSetsize", "highlightType"]);
  const baseProps = getBaseProps(restProps);
  const isParent = option.type === "parent";
  const isChild = option.type === "child";
  const wrappedOption = option.option;
  const disabled = option.disabled || wrappedOption.disabled;
  const disabledReason = disabled && (option.disabledReason || wrappedOption.disabledReason) ? option.disabledReason || wrappedOption.disabledReason : "";
  const isDisabledWithReason = !!disabledReason;
  const internalRef = (0, import_react14.useRef)(null);
  const className = styles_css_default5.item;
  const { descriptionId, descriptionEl } = useHiddenDescription(disabledReason);
  return import_react14.default.createElement(
    selectable_item_default,
    Object.assign({ ariaChecked: isParent && indeterminate ? "mixed" : Boolean(selected), selected, isNextSelected, highlighted, disabled, isParent, isChild, highlightType, ref: useMergeRefs(ref, internalRef), virtualPosition, padBottom, useInteractiveGroups: true, screenReaderContent, ariaPosinset, ariaSetsize, ariaDescribedby: isDisabledWithReason ? descriptionId : "", value: option.option.value }, baseProps),
    import_react14.default.createElement(
      "div",
      { className },
      hasCheckbox && import_react14.default.createElement(
        "div",
        { className: styles_css_default5.checkbox },
        import_react14.default.createElement(checkbox_icon_default, { checked: selected, indeterminate: isParent && indeterminate, disabled: option.disabled })
      ),
      import_react14.default.createElement(option_default, { option: Object.assign(Object.assign({}, wrappedOption), { disabled }), highlightedOption: highlighted, selectedOption: selected, highlightText: filteringValue, isGroupOption: isParent })
    ),
    isDisabledWithReason && import_react14.default.createElement(
      import_react14.default.Fragment,
      null,
      descriptionEl,
      highlighted && import_react14.default.createElement(Tooltip, { className: styles_css_default5["disabled-reason-tooltip"], trackRef: internalRef, value: disabledReason, position: "right", hideOnOverscroll: true })
    )
  );
};
var multiselect_item_default = import_react14.default.memo(import_react14.default.forwardRef(MultiSelectItem));

// node_modules/@cloudscape-design/components/select/utils/get-item-props.js
var getItemProps = ({ option, index, getOptionProps, filteringValue, checkboxes = false }) => {
  const optionProps = getOptionProps(option, index);
  optionProps.filteringValue = filteringValue;
  const { inGroupIndex, groupIndex, throughIndex } = getTestOptionIndexes(option) || {};
  return Object.assign(Object.assign({}, optionProps), { hasCheckbox: checkboxes, ["data-group-index"]: groupIndex, ["data-child-index"]: inGroupIndex, ["data-test-index"]: throughIndex });
};

// node_modules/@cloudscape-design/components/select/utils/render-options.js
var renderOptions = ({ options, getOptionProps, filteringValue, highlightType, checkboxes = false, hasDropdownStatus, virtualItems, useInteractiveGroups, screenReaderContent, ariaSetsize }) => {
  return options.map((option, index) => {
    const virtualItem = virtualItems && virtualItems[index];
    const globalIndex = virtualItem ? virtualItem.index : index;
    const props2 = getItemProps({
      option,
      index: globalIndex,
      getOptionProps,
      filteringValue,
      checkboxes
    });
    const isLastItem = index === options.length - 1;
    const padBottom = !hasDropdownStatus && isLastItem;
    const ListItem = useInteractiveGroups ? multiselect_item_default : item_default;
    return import_react15.default.createElement(ListItem, Object.assign({ key: globalIndex }, props2, { virtualPosition: virtualItem && virtualItem.start, ref: virtualItem && virtualItem.measureRef, padBottom, screenReaderContent, ariaPosinset: globalIndex + 1, ariaSetsize, highlightType: highlightType.type }));
  });
};

// node_modules/@cloudscape-design/components/select/parts/plain-list.js
var PlainList = ({ menuProps, getOptionProps, filteredOptions, filteringValue, highlightType, checkboxes, hasDropdownStatus, listBottom, useInteractiveGroups, screenReaderContent }, ref) => {
  const menuRef = menuProps.ref;
  (0, import_react16.useImperativeHandle)(ref, () => (index) => {
    var _a;
    const item = (_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(`[data-mouse-target="${index}"]`);
    if (highlightType.moveFocus && item) {
      scrollElementIntoView(item);
    }
  }, [highlightType, menuRef]);
  return import_react16.default.createElement(
    options_list_default,
    Object.assign({}, menuProps),
    renderOptions({
      options: filteredOptions,
      getOptionProps,
      filteringValue,
      highlightType,
      checkboxes,
      hasDropdownStatus,
      useInteractiveGroups,
      screenReaderContent
    }),
    listBottom ? import_react16.default.createElement("li", { role: "option", className: styles_css_default5["list-bottom"] }, listBottom) : null
  );
};
var plain_list_default = (0, import_react16.forwardRef)(PlainList);

// node_modules/@cloudscape-design/components/select/parts/trigger.js
var import_react18 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/button-trigger/index.js
var import_react17 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/button-trigger/analytics-metadata/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/button-trigger/analytics-metadata/styles.scoped.css";
var styles_css_default11 = {
  "button-trigger": "awsui_button-trigger_l32fn_xo3sj_5"
};

// node_modules/@cloudscape-design/components/internal/components/button-trigger/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/button-trigger/styles.scoped.css";
var styles_css_default12 = {
  "button-trigger": "awsui_button-trigger_18eso_14puw_161",
  "arrow": "awsui_arrow_18eso_14puw_161",
  "in-filtering-token-root": "awsui_in-filtering-token-root_18eso_14puw_221",
  "in-filtering-token-nested": "awsui_in-filtering-token-nested_18eso_14puw_221",
  "has-caret": "awsui_has-caret_18eso_14puw_255",
  "placeholder": "awsui_placeholder_18eso_14puw_258",
  "pressed": "awsui_pressed_18eso_14puw_271",
  "disabled": "awsui_disabled_18eso_14puw_274",
  "in-filtering-token": "awsui_in-filtering-token_18eso_14puw_221",
  "readonly": "awsui_readonly_18eso_14puw_290",
  "invalid": "awsui_invalid_18eso_14puw_312",
  "warning": "awsui_warning_18eso_14puw_321",
  "inline-tokens": "awsui_inline-tokens_18eso_14puw_330"
};

// node_modules/@cloudscape-design/components/internal/components/button-trigger/index.js
var ButtonTrigger = (_a, ref) => {
  var { children, pressed = false, hideCaret = false, disabled = false, readOnly = false, invalid = false, warning = false, inlineTokens, inFilteringToken, ariaHasPopup, ariaLabel, ariaLabelledby, ariaDescribedby, ariaControls, onKeyDown, onKeyUp, onMouseDown, onClick, onFocus, onBlur, autoFocus } = _a, restProps = __rest(_a, ["children", "pressed", "hideCaret", "disabled", "readOnly", "invalid", "warning", "inlineTokens", "inFilteringToken", "ariaHasPopup", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "ariaControls", "onKeyDown", "onKeyUp", "onMouseDown", "onClick", "onFocus", "onBlur", "autoFocus"]);
  const baseProps = getBaseProps(restProps);
  let attributes = Object.assign(Object.assign({}, baseProps), { type: "button", className: clsx_m_default(styles_css_default12["button-trigger"], styles_css_default11["button-trigger"], baseProps.className, pressed && styles_css_default12.pressed, disabled && styles_css_default12.disabled, invalid && styles_css_default12.invalid, warning && !invalid && styles_css_default12.warning, !hideCaret && styles_css_default12["has-caret"], readOnly && styles_css_default12.readonly, inFilteringToken && styles_css_default12["in-filtering-token"], inFilteringToken && styles_css_default12[`in-filtering-token-${inFilteringToken}`], inlineTokens && styles_css_default12["inline-tokens"]), disabled, "aria-expanded": pressed, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby, "aria-haspopup": ariaHasPopup !== null && ariaHasPopup !== void 0 ? ariaHasPopup : "listbox", "aria-controls": ariaControls, "aria-disabled": readOnly && !disabled ? "true" : void 0, autoFocus });
  if (!readOnly) {
    attributes = Object.assign(Object.assign({}, attributes), { onKeyDown: onKeyDown && ((event) => fireKeyboardEvent(onKeyDown, event)), onKeyUp: onKeyUp && ((event) => fireKeyboardEvent(onKeyUp, event)), onMouseDown: onMouseDown && ((event) => fireCancelableEvent(onMouseDown, {}, event)), onClick: onClick && ((event) => fireCancelableEvent(onClick, {}, event)), onFocus: onFocus && ((event) => fireCancelableEvent(onFocus, {}, event)), onBlur: onBlur && ((event) => fireCancelableEvent(onBlur, { relatedTarget: event.relatedTarget }, event)) });
  }
  if (invalid) {
    attributes["aria-invalid"] = invalid;
  }
  const analyticsMetadata = {
    action: "expand",
    detail: {
      label: { root: "self" },
      expanded: `${!pressed}`
    }
  };
  return import_react17.default.createElement(
    "button",
    Object.assign({ ref }, attributes, disabled || readOnly ? {} : getAnalyticsMetadataAttribute(analyticsMetadata)),
    children,
    !hideCaret && import_react17.default.createElement(
      "span",
      { className: styles_css_default12.arrow },
      import_react17.default.createElement(internal_default, { name: "caret-down-filled", variant: disabled || readOnly ? "disabled" : "normal" })
    )
  );
};
var button_trigger_default = import_react17.default.forwardRef(ButtonTrigger);

// node_modules/@cloudscape-design/components/select/parts/trigger.js
var Trigger = import_react18.default.forwardRef(({ ariaLabelledby, ariaDescribedby, controlId, invalid, inlineLabelText, warning, triggerProps, selectedOption, selectedOptions, triggerVariant, inFilteringToken, isOpen, placeholder, disabled, readOnly }, ref) => {
  const isVisualRefresh = useVisualRefresh();
  const generatedId = useUniqueId();
  const id = controlId !== null && controlId !== void 0 ? controlId : generatedId;
  const triggerContentId = useUniqueId("trigger-content-");
  let ariaLabelledbyIds = joinStrings(ariaLabelledby, triggerContentId);
  let triggerContent = null;
  if (triggerVariant === "tokens") {
    if (selectedOptions === null || selectedOptions === void 0 ? void 0 : selectedOptions.length) {
      triggerContent = import_react18.default.createElement(
        "span",
        { className: clsx_m_default(styles_css_default5["inline-token-trigger"], disabled && styles_css_default5["inline-token-trigger--disabled"], isVisualRefresh && styles_css_default5["visual-refresh"]) },
        import_react18.default.createElement("span", { className: styles_css_default5["inline-token-list"] }, selectedOptions.map(({ label }, i) => import_react18.default.createElement("span", { key: i, className: styles_css_default5["inline-token"] }, label))),
        import_react18.default.createElement(
          "span",
          { className: styles_css_default5["inline-token-counter"], id: triggerContentId },
          import_react18.default.createElement("span", { className: styles_css_default5["inline-token-hidden-placeholder"] }, placeholder),
          import_react18.default.createElement(
            "span",
            null,
            "(",
            selectedOptions.length,
            ")"
          )
        )
      );
      ariaLabelledbyIds = ariaLabelledby;
    } else {
      triggerContent = import_react18.default.createElement("span", { "aria-disabled": "true", className: clsx_m_default(styles_css_default5.placeholder, styles_css_default5.trigger), id: triggerContentId }, placeholder);
    }
  } else if (!selectedOption) {
    triggerContent = import_react18.default.createElement("span", { "aria-disabled": "true", className: clsx_m_default(styles_css_default5.placeholder, styles_css_default5.trigger), id: triggerContentId }, placeholder);
  } else if (triggerVariant === "option") {
    triggerContent = import_react18.default.createElement(option_default, { id: triggerContentId, option: Object.assign(Object.assign({}, selectedOption), { disabled }), triggerVariant: true });
  } else {
    triggerContent = import_react18.default.createElement("span", { id: triggerContentId, className: styles_css_default5.trigger }, selectedOption.label || selectedOption.value);
  }
  const mergedRef = useMergeRefs(triggerProps.ref, ref);
  const triggerButton = import_react18.default.createElement(button_trigger_default, Object.assign({}, triggerProps, { id, ref: mergedRef, pressed: isOpen, disabled, readOnly, invalid, warning: warning && !invalid, inFilteringToken, inlineTokens: triggerVariant === "tokens", ariaDescribedby, ariaLabelledby: ariaLabelledbyIds }), triggerContent);
  return import_react18.default.createElement(import_react18.default.Fragment, null, inlineLabelText ? import_react18.default.createElement(
    "div",
    { className: styles_css_default5["inline-label-wrapper"] },
    import_react18.default.createElement("label", { htmlFor: controlId, className: clsx_m_default(styles_css_default5["inline-label"], disabled && styles_css_default5["inline-label-disabled"]) }, inlineLabelText),
    import_react18.default.createElement("div", { className: styles_css_default5["inline-label-trigger-wrapper"] }, triggerButton)
  ) : import_react18.default.createElement(import_react18.default.Fragment, null, triggerButton));
});
var trigger_default = Trigger;

// node_modules/@cloudscape-design/components/select/parts/virtual-list.js
var import_react21 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-virtual/index.js
var import_react20 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/vendor/react-virtual.js
var import_react19 = __toESM(require_react());
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var props = ["bottom", "height", "left", "right", "top", "width"];
var rectChanged = function rectChanged2(a, b) {
  if (a === void 0) {
    a = {};
  }
  if (b === void 0) {
    b = {};
  }
  return props.some(function(prop) {
    return a[prop] !== b[prop];
  });
};
var observedNodes = /* @__PURE__ */ new Map();
var rafId;
var run = function run2() {
  var changedStates = [];
  observedNodes.forEach(function(state, node) {
    var newRect = node.getBoundingClientRect();
    if (rectChanged(newRect, state.rect)) {
      state.rect = newRect;
      changedStates.push(state);
    }
  });
  changedStates.forEach(function(state) {
    state.callbacks.forEach(function(cb) {
      return cb(state.rect);
    });
  });
  rafId = window.requestAnimationFrame(run2);
};
function observeRect(node, cb) {
  return {
    observe: function observe() {
      var wasEmpty = observedNodes.size === 0;
      if (observedNodes.has(node)) {
        observedNodes.get(node).callbacks.push(cb);
      } else {
        observedNodes.set(node, {
          rect: void 0,
          hasRectChanged: false,
          callbacks: [cb]
        });
      }
      if (wasEmpty) run();
    },
    unobserve: function unobserve() {
      var state = observedNodes.get(node);
      if (state) {
        var index = state.callbacks.indexOf(cb);
        if (index >= 0) state.callbacks.splice(index, 1);
        if (!state.callbacks.length) observedNodes["delete"](node);
        if (!observedNodes.size) cancelAnimationFrame(rafId);
      }
    }
  };
}
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? import_react19.default.useLayoutEffect : import_react19.default.useEffect;
function useRect(nodeRef, initialRect) {
  if (initialRect === void 0) {
    initialRect = {
      width: 0,
      height: 0
    };
  }
  var _React$useState = import_react19.default.useState(nodeRef.current), element = _React$useState[0], setElement = _React$useState[1];
  var _React$useReducer = import_react19.default.useReducer(rectReducer, initialRect), rect = _React$useReducer[0], dispatch = _React$useReducer[1];
  var initialRectSet = import_react19.default.useRef(false);
  useIsomorphicLayoutEffect(function() {
    if (nodeRef.current !== element) {
      setElement(nodeRef.current);
    }
  });
  useIsomorphicLayoutEffect(function() {
    if (element && !initialRectSet.current) {
      initialRectSet.current = true;
      var _rect = element.getBoundingClientRect();
      dispatch({
        rect: _rect
      });
    }
  }, [element]);
  import_react19.default.useEffect(function() {
    if (!element) {
      return;
    }
    var observer = observeRect(element, function(rect2) {
      dispatch({
        rect: rect2
      });
    });
    observer.observe();
    return function() {
      observer.unobserve();
    };
  }, [element]);
  return rect;
}
function rectReducer(state, action) {
  var rect = action.rect;
  if (state.height !== rect.height || state.width !== rect.width) {
    return rect;
  }
  return state;
}
var defaultEstimateSize = function defaultEstimateSize2() {
  return 50;
};
var defaultKeyExtractor = function defaultKeyExtractor2(index) {
  return index;
};
var defaultMeasureSize = function defaultMeasureSize2(el, horizontal) {
  var key = horizontal ? "offsetWidth" : "offsetHeight";
  return el[key];
};
var defaultRangeExtractor = function defaultRangeExtractor2(range) {
  var start = Math.max(range.start - range.overscan, 0);
  var end = Math.min(range.end + range.overscan, range.size - 1);
  var arr = [];
  for (var i = start; i <= end; i++) {
    arr.push(i);
  }
  return arr;
};
function useVirtual(_ref) {
  var _measurements;
  var _ref$size = _ref.size, size = _ref$size === void 0 ? 0 : _ref$size, _ref$estimateSize = _ref.estimateSize, estimateSize = _ref$estimateSize === void 0 ? defaultEstimateSize : _ref$estimateSize, _ref$overscan = _ref.overscan, overscan = _ref$overscan === void 0 ? 1 : _ref$overscan, _ref$paddingStart = _ref.paddingStart, paddingStart = _ref$paddingStart === void 0 ? 0 : _ref$paddingStart, _ref$paddingEnd = _ref.paddingEnd, paddingEnd = _ref$paddingEnd === void 0 ? 0 : _ref$paddingEnd, parentRef = _ref.parentRef, horizontal = _ref.horizontal, scrollToFn = _ref.scrollToFn, useObserver = _ref.useObserver, initialRect = _ref.initialRect, onScrollElement = _ref.onScrollElement, scrollOffsetFn = _ref.scrollOffsetFn, _ref$keyExtractor = _ref.keyExtractor, keyExtractor = _ref$keyExtractor === void 0 ? defaultKeyExtractor : _ref$keyExtractor, _ref$measureSize = _ref.measureSize, measureSize = _ref$measureSize === void 0 ? defaultMeasureSize : _ref$measureSize, _ref$rangeExtractor = _ref.rangeExtractor, rangeExtractor = _ref$rangeExtractor === void 0 ? defaultRangeExtractor : _ref$rangeExtractor;
  var sizeKey = horizontal ? "width" : "height";
  var scrollKey = horizontal ? "scrollLeft" : "scrollTop";
  var latestRef = import_react19.default.useRef({
    scrollOffset: 0,
    measurements: []
  });
  var _React$useState = import_react19.default.useState(0), scrollOffset = _React$useState[0], setScrollOffset = _React$useState[1];
  latestRef.current.scrollOffset = scrollOffset;
  var useMeasureParent = useObserver || useRect;
  var _useMeasureParent = useMeasureParent(parentRef, initialRect), outerSize = _useMeasureParent[sizeKey];
  latestRef.current.outerSize = outerSize;
  var defaultScrollToFn = import_react19.default.useCallback(function(offset) {
    if (parentRef.current) {
      parentRef.current[scrollKey] = offset;
    }
  }, [parentRef, scrollKey]);
  var resolvedScrollToFn = scrollToFn || defaultScrollToFn;
  scrollToFn = import_react19.default.useCallback(function(offset) {
    resolvedScrollToFn(offset, defaultScrollToFn);
  }, [defaultScrollToFn, resolvedScrollToFn]);
  var _React$useState2 = import_react19.default.useState({}), measuredCache = _React$useState2[0], setMeasuredCache = _React$useState2[1];
  var measure = import_react19.default.useCallback(function() {
    return setMeasuredCache({});
  }, []);
  var pendingMeasuredCacheIndexesRef = import_react19.default.useRef([]);
  var measurements = import_react19.default.useMemo(function() {
    var min = pendingMeasuredCacheIndexesRef.current.length > 0 ? Math.min.apply(Math, pendingMeasuredCacheIndexesRef.current) : 0;
    pendingMeasuredCacheIndexesRef.current = [];
    var measurements2 = latestRef.current.measurements.slice(0, min);
    for (var i = min; i < size; i++) {
      var key = keyExtractor(i);
      var measuredSize = measuredCache[key];
      var _start = measurements2[i - 1] ? measurements2[i - 1].end : paddingStart;
      var _size = typeof measuredSize === "number" ? measuredSize : estimateSize(i);
      var _end = _start + _size;
      measurements2[i] = {
        index: i,
        start: _start,
        size: _size,
        end: _end,
        key
      };
    }
    return measurements2;
  }, [estimateSize, measuredCache, paddingStart, size, keyExtractor]);
  var totalSize = (((_measurements = measurements[size - 1]) == null ? void 0 : _measurements.end) || paddingStart) + paddingEnd;
  latestRef.current.measurements = measurements;
  latestRef.current.totalSize = totalSize;
  var element = onScrollElement ? onScrollElement.current : parentRef.current;
  var scrollOffsetFnRef = import_react19.default.useRef(scrollOffsetFn);
  scrollOffsetFnRef.current = scrollOffsetFn;
  useIsomorphicLayoutEffect(function() {
    if (!element) {
      setScrollOffset(0);
      return;
    }
    var onScroll = function onScroll2(event) {
      var offset = scrollOffsetFnRef.current ? scrollOffsetFnRef.current(event) : element[scrollKey];
      setScrollOffset(offset);
    };
    onScroll();
    element.addEventListener("scroll", onScroll, {
      capture: false,
      passive: true
    });
    return function() {
      element.removeEventListener("scroll", onScroll);
    };
  }, [element, scrollKey]);
  var _calculateRange = calculateRange(latestRef.current), start = _calculateRange.start, end = _calculateRange.end;
  var indexes = import_react19.default.useMemo(function() {
    return rangeExtractor({
      start,
      end,
      overscan,
      size: measurements.length
    });
  }, [start, end, overscan, measurements.length, rangeExtractor]);
  var measureSizeRef = import_react19.default.useRef(measureSize);
  measureSizeRef.current = measureSize;
  var virtualItems = import_react19.default.useMemo(function() {
    var virtualItems2 = [];
    var _loop = function _loop2(k2, len2) {
      var i = indexes[k2];
      var measurement = measurements[i];
      var item = _extends(_extends({}, measurement), {}, {
        measureRef: function measureRef(el) {
          if (el) {
            var measuredSize = measureSizeRef.current(el, horizontal);
            if (measuredSize !== item.size) {
              var _scrollOffset = latestRef.current.scrollOffset;
              if (item.start < _scrollOffset) {
                defaultScrollToFn(_scrollOffset + (measuredSize - item.size));
              }
              pendingMeasuredCacheIndexesRef.current.push(i);
              setMeasuredCache(function(old) {
                var _extends2;
                return _extends(_extends({}, old), {}, (_extends2 = {}, _extends2[item.key] = measuredSize, _extends2));
              });
            }
          }
        }
      });
      virtualItems2.push(item);
    };
    for (var k = 0, len = indexes.length; k < len; k++) {
      _loop(k);
    }
    return virtualItems2;
  }, [indexes, defaultScrollToFn, horizontal, measurements]);
  var mountedRef = import_react19.default.useRef(false);
  useIsomorphicLayoutEffect(function() {
    if (mountedRef.current) {
      setMeasuredCache({});
    }
    mountedRef.current = true;
  }, [estimateSize]);
  var scrollToOffset = import_react19.default.useCallback(function(toOffset, _temp) {
    var _ref2 = _temp === void 0 ? {} : _temp, _ref2$align = _ref2.align, align = _ref2$align === void 0 ? "start" : _ref2$align;
    var _latestRef$current = latestRef.current, scrollOffset2 = _latestRef$current.scrollOffset, outerSize2 = _latestRef$current.outerSize;
    if (align === "auto") {
      if (toOffset <= scrollOffset2) {
        align = "start";
      } else if (toOffset >= scrollOffset2 + outerSize2) {
        align = "end";
      } else {
        align = "start";
      }
    }
    if (align === "start") {
      scrollToFn(toOffset);
    } else if (align === "end") {
      scrollToFn(toOffset - outerSize2);
    } else if (align === "center") {
      scrollToFn(toOffset - outerSize2 / 2);
    }
  }, [scrollToFn]);
  var tryScrollToIndex = import_react19.default.useCallback(function(index, _temp2) {
    var _ref3 = _temp2 === void 0 ? {} : _temp2, _ref3$align = _ref3.align, align = _ref3$align === void 0 ? "auto" : _ref3$align, rest = _objectWithoutPropertiesLoose(_ref3, ["align"]);
    var _latestRef$current2 = latestRef.current, measurements2 = _latestRef$current2.measurements, scrollOffset2 = _latestRef$current2.scrollOffset, outerSize2 = _latestRef$current2.outerSize;
    var measurement = measurements2[Math.max(0, Math.min(index, size - 1))];
    if (!measurement) {
      return;
    }
    if (align === "auto") {
      if (measurement.end >= scrollOffset2 + outerSize2) {
        align = "end";
      } else if (measurement.start <= scrollOffset2) {
        align = "start";
      } else {
        return;
      }
    }
    var toOffset = align === "center" ? measurement.start + measurement.size / 2 : align === "end" ? measurement.end : measurement.start;
    scrollToOffset(toOffset, _extends({
      align
    }, rest));
  }, [scrollToOffset, size]);
  var scrollToIndex = import_react19.default.useCallback(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    tryScrollToIndex.apply(void 0, args);
    requestAnimationFrame(function() {
      tryScrollToIndex.apply(void 0, args);
    });
  }, [tryScrollToIndex]);
  return {
    virtualItems,
    totalSize,
    scrollToOffset,
    scrollToIndex,
    measure
  };
}
var findNearestBinarySearch = function findNearestBinarySearch2(low, high, getCurrentValue, value) {
  while (low <= high) {
    var middle = (low + high) / 2 | 0;
    var currentValue = getCurrentValue(middle);
    if (currentValue < value) {
      low = middle + 1;
    } else if (currentValue > value) {
      high = middle - 1;
    } else {
      return middle;
    }
  }
  if (low > 0) {
    return low - 1;
  } else {
    return 0;
  }
};
function calculateRange(_ref4) {
  var measurements = _ref4.measurements, outerSize = _ref4.outerSize, scrollOffset = _ref4.scrollOffset;
  var size = measurements.length - 1;
  var getOffset = function getOffset2(index) {
    return measurements[index].start;
  };
  var start = findNearestBinarySearch(0, size, getOffset, scrollOffset);
  var end = start;
  while (end < size && measurements[end].end < scrollOffset + outerSize) {
    end++;
  }
  return {
    start,
    end
  };
}

// node_modules/@cloudscape-design/components/internal/hooks/use-virtual/index.js
var MAX_ITEM_MOUNTS = 100;
function useVirtual2({ items, parentRef, estimateSize }) {
  const rowVirtualizer = useVirtual({ size: items.length, parentRef, estimateSize, overscan: 5 });
  const measuresCache = (0, import_react20.useRef)(/* @__PURE__ */ new WeakMap());
  const indicesKey = rowVirtualizer.virtualItems.map((item) => `${item.index}`).join(":");
  (0, import_react20.useEffect)(() => {
    measuresCache.current = /* @__PURE__ */ new WeakMap();
  }, [indicesKey, items, estimateSize]);
  const virtualItems = (0, import_react20.useMemo)(() => rowVirtualizer.virtualItems.map((virtualItem) => Object.assign(Object.assign({}, virtualItem), { measureRef: (node) => {
    var _a;
    const mountedCount = (_a = measuresCache.current.get(items[virtualItem.index])) !== null && _a !== void 0 ? _a : 0;
    if (mountedCount < MAX_ITEM_MOUNTS) {
      virtualItem.measureRef(node);
      measuresCache.current.set(items[virtualItem.index], mountedCount + 1);
    }
  } })), [items, rowVirtualizer.virtualItems]);
  return {
    virtualItems,
    totalSize: rowVirtualizer.totalSize,
    scrollToIndex: rowVirtualizer.scrollToIndex
  };
}

// node_modules/@cloudscape-design/components/select/parts/virtual-list.js
var VirtualList = (props2, ref) => {
  return props2.menuProps.open ? import_react21.default.createElement(VirtualListOpen, Object.assign({}, props2, { ref })) : import_react21.default.createElement(VirtualListClosed, Object.assign({}, props2, { ref }));
};
var VirtualListOpen = (0, import_react21.forwardRef)(({ menuProps, getOptionProps, filteredOptions, filteringValue, highlightType, checkboxes, hasDropdownStatus, listBottom, useInteractiveGroups, screenReaderContent }, ref) => {
  const [width, menuMeasureRef] = useContainerQuery((rect) => rect.contentBoxWidth, []);
  const menuRefObject = (0, import_react21.useRef)(null);
  const menuRef = useMergeRefs(menuMeasureRef, menuRefObject, menuProps.ref);
  const { virtualItems, totalSize, scrollToIndex } = useVirtual2({
    items: filteredOptions,
    parentRef: menuRefObject,
    // estimateSize is a dependency of measurements memo. We update it to force full recalculation
    // when the height of any option could have changed:
    // 1: because the component got resized (width property got updated)
    // 2: because the option changed its content (filteringValue property controls the highlight and the visibility of hidden tags)
    // eslint-disable-next-line react-hooks/exhaustive-deps
    estimateSize: (0, import_react21.useCallback)(() => 31, [width, filteringValue])
  });
  (0, import_react21.useImperativeHandle)(ref, () => (index) => {
    if (highlightType.moveFocus) {
      scrollToIndex(index);
    }
  }, [highlightType, scrollToIndex]);
  const finalOptions = renderOptions({
    options: virtualItems.map(({ index }) => filteredOptions[index]),
    getOptionProps,
    filteringValue,
    highlightType,
    checkboxes,
    hasDropdownStatus,
    virtualItems,
    useInteractiveGroups,
    screenReaderContent,
    ariaSetsize: filteredOptions.length
  });
  return import_react21.default.createElement(
    options_list_default,
    Object.assign({}, menuProps, { ref: menuRef }),
    import_react21.default.createElement("div", { "aria-hidden": "true", key: "total-size", className: styles_css_default5["layout-strut"], style: { height: totalSize } }),
    finalOptions,
    listBottom ? import_react21.default.createElement("li", { role: "option", className: styles_css_default5["list-bottom"] }, listBottom) : null
  );
});
var VirtualListClosed = (0, import_react21.forwardRef)(({ menuProps, listBottom }, ref) => {
  (0, import_react21.useImperativeHandle)(ref, () => () => {
  }, []);
  return import_react21.default.createElement(options_list_default, Object.assign({}, menuProps, { ref: menuProps.ref }), listBottom ? import_react21.default.createElement("li", { role: "option", className: styles_css_default5["list-bottom"] }, listBottom) : null);
});
var virtual_list_default = (0, import_react21.forwardRef)(VirtualList);

// node_modules/@cloudscape-design/components/select/utils/check-option-value-field.js
function checkOptionValueField(componentName, propertyName, propertyValue) {
  if (isDevelopment) {
    if (!propertyValue) {
      return;
    }
    const valuePropertyMissing = !propertyValue.every((element) => {
      return "options" in element || "value" in element;
    });
    if (valuePropertyMissing) {
      warnOnce(componentName, `You provided an \`${propertyName}\` prop where at least one non-group array element is missing the \`value\` field. This field is required for all options without sub-items.`);
    }
  }
}

// node_modules/@cloudscape-design/components/select/utils/use-announcement.js
var import_react22 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/option/option-announcer.js
function defaultOptionDescription(option, parentGroup) {
  return [
    parentGroup && parentGroup.label,
    option.__labelPrefix,
    option.label || option.value,
    option.description,
    option.labelTag
  ].concat(option.tags).filter((el) => !!el).join(" ");
}
var option_announcer_default = defaultOptionDescription;

// node_modules/@cloudscape-design/components/select/utils/use-announcement.js
function useAnnouncement({ announceSelected, highlightedOption, getParent, selectedAriaLabel, renderHighlightedAriaLive }) {
  const prevAnnouncedGroup = (0, import_react22.useRef)(void 0);
  (0, import_react22.useEffect)(() => {
    if (highlightedOption) {
      const frameId = requestAnimationFrame(() => {
        prevAnnouncedGroup.current = getParent(highlightedOption);
      });
      return () => cancelAnimationFrame(frameId);
    }
  });
  if (!highlightedOption) {
    return "";
  }
  const option = highlightedOption.option;
  const parent = getParent(highlightedOption);
  const group = parent && parent !== prevAnnouncedGroup.current ? parent : void 0;
  if (renderHighlightedAriaLive) {
    return renderHighlightedAriaLive(option, group);
  }
  const selectedAnnouncement = announceSelected && selectedAriaLabel ? selectedAriaLabel : "";
  const defaultDescription = option_announcer_default(option, group);
  return [selectedAnnouncement, defaultDescription].filter(Boolean).join(" ");
}

// node_modules/@cloudscape-design/components/select/utils/use-load-items.js
var import_react23 = __toESM(require_react());
var useLoadItems = ({ onLoadItems, options, statusType }) => {
  const prevFilteringText = (0, import_react23.useRef)(void 0);
  const fireLoadItems = (filteringText) => {
    if (prevFilteringText.current === filteringText) {
      return;
    }
    prevFilteringText.current = filteringText;
    fireNonCancelableEvent(onLoadItems, { filteringText, firstPage: true, samePage: false });
  };
  const handleLoadMore = () => {
    const firstPage = options.length === 0;
    statusType === "pending" && fireNonCancelableEvent(onLoadItems, {
      firstPage,
      samePage: false,
      filteringText: prevFilteringText.current || ""
    });
  };
  const handleRecoveryClick = () => fireNonCancelableEvent(onLoadItems, {
    firstPage: false,
    samePage: true,
    filteringText: prevFilteringText.current || ""
  });
  return {
    fireLoadItems,
    handleLoadMore,
    handleRecoveryClick
  };
};

// node_modules/@cloudscape-design/components/select/utils/use-native-search.js
var import_react24 = __toESM(require_react());
var isRepeatedChar = (str) => str.split("").every((c) => c === str[0]);
function findMatchingOption(options, searchText, currentHighlight, useInteractiveGroups) {
  const interactivityCheck = useInteractiveGroups ? isGroupInteractive : isInteractive;
  const filter = (searchText2) => filterOptions(options, searchText2, true).filter((option) => interactivityCheck(option));
  const matchingOptions = filter(searchText);
  if (matchingOptions.length === 1) {
    return matchingOptions[0];
  }
  if (currentHighlight && searchText.length > 1 && isRepeatedChar(searchText)) {
    const matchingOptions2 = filter(searchText[0]);
    if (matchingOptions2.length > 0) {
      let active = isGroup(currentHighlight) ? matchingOptions2.map(({ option }) => option).indexOf(currentHighlight) : matchingOptions2.map(({ option }) => option.value).indexOf(currentHighlight.value);
      active += 1;
      active = active % matchingOptions2.length;
      return matchingOptions2[active];
    }
  }
  if (matchingOptions.length > 0) {
    return matchingOptions[0];
  }
  return null;
}
function useNativeSearch({ isEnabled, options, highlightOption, highlightedOption, useInteractiveGroups }) {
  const value = (0, import_react24.useRef)("");
  const delayedResetValue = useDebounceCallback(() => value.current = "", 500);
  return (event) => {
    if (!isEnabled) {
      return;
    }
    const { key } = event;
    if (!key || key.length !== 1) {
      return;
    }
    delayedResetValue();
    const newValue = value.current + key;
    value.current = newValue;
    const nextHighlight = findMatchingOption(options, newValue, highlightedOption, useInteractiveGroups);
    if (nextHighlight) {
      highlightOption(nextHighlight);
    }
  };
}

// node_modules/@cloudscape-design/components/select/utils/use-select.js
var import_react27 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/options-list/utils/use-highlight-option.js
var import_react25 = __toESM(require_react());
var HighlightType = class {
  constructor(type, moveFocus = type === "keyboard") {
    this.type = type;
    this.moveFocus = moveFocus;
  }
};
function useHighlightedOption({ options, isHighlightable }) {
  const [highlightedIndex, setHighlightedIndexState] = (0, import_react25.useState)(-1);
  const [highlightType, setHighlightType] = (0, import_react25.useState)(new HighlightType("keyboard"));
  const setHighlightedIndex = (0, import_react25.useCallback)((index, newHighlightType) => {
    setHighlightedIndexState(index);
    setHighlightType((oldHighlight) => oldHighlight.type !== newHighlightType.type ? newHighlightType : oldHighlight);
  }, []);
  const highlightedOption = options[highlightedIndex] && isHighlightable(options[highlightedIndex]) ? options[highlightedIndex] : void 0;
  const moveHighlightFrom = (direction, startIndex = highlightedIndex, highlightType2) => {
    const fromBottomEnd = startIndex === -1 && direction === -1;
    let newIndex = fromBottomEnd ? options.length : startIndex;
    do {
      newIndex += direction;
    } while (options[newIndex] && !isHighlightable(options[newIndex]));
    if (options[newIndex]) {
      setHighlightedIndex(newIndex, highlightType2);
    }
  };
  const moveHighlight = (direction, highlightType2) => moveHighlightFrom(direction, highlightedIndex, highlightType2);
  const highlightOption = (0, import_react25.useCallback)((option, highlightType2) => {
    const index = options.indexOf(option);
    setHighlightedIndex(index, highlightType2);
  }, [options, setHighlightedIndex]);
  return [
    { highlightType, highlightedIndex, highlightedOption },
    {
      setHighlightedIndexWithMouse: (index, moveFocus = false) => setHighlightedIndex(index, new HighlightType("mouse", moveFocus)),
      moveHighlightWithKeyboard: (direction) => moveHighlight(direction, new HighlightType("keyboard")),
      highlightOptionWithKeyboard: (option) => highlightOption(option, new HighlightType("keyboard")),
      resetHighlightWithKeyboard: () => setHighlightedIndex(-1, new HighlightType("keyboard")),
      goHomeWithKeyboard: () => moveHighlightFrom(1, -1, new HighlightType("keyboard")),
      goEndWithKeyboard: () => moveHighlightFrom(-1, options.length, new HighlightType("keyboard"))
    }
  ];
}

// node_modules/@cloudscape-design/components/internal/components/options-list/utils/use-ids.js
var getOptionId = (menuId, index) => {
  if (index < 0) {
    return void 0;
  }
  return `${menuId}-option-${index}`;
};

// node_modules/@cloudscape-design/components/internal/components/options-list/utils/use-keyboard.js
var HOME = 36;
var END = 35;
var useMenuKeyboard = ({ goUp, goDown, selectOption, goHome, goEnd, closeDropdown, preventNativeSpace = false }) => {
  return (event) => {
    switch (event.detail.keyCode) {
      case KeyCode.up:
        event.preventDefault();
        goUp();
        break;
      case KeyCode.down:
        event.preventDefault();
        goDown();
        break;
      case HOME:
        goHome();
        break;
      case END:
        goEnd();
        break;
      case KeyCode.escape:
        event.stopPropagation();
        closeDropdown();
        break;
      case KeyCode.enter:
        event.preventDefault();
        selectOption();
        break;
      case KeyCode.space:
        if (preventNativeSpace) {
          event.preventDefault();
          selectOption();
        }
    }
  };
};
var useTriggerKeyboard = ({ openDropdown, goHome }) => {
  return (event) => {
    switch (event.detail.keyCode) {
      case KeyCode.up:
      case KeyCode.down:
        event.preventDefault();
        goHome();
        openDropdown();
        break;
      case KeyCode.space:
      case KeyCode.enter:
        event.preventDefault();
        openDropdown();
        break;
    }
  };
};

// node_modules/@cloudscape-design/components/internal/components/options-list/utils/use-open-state.js
var import_react26 = __toESM(require_react());
var useOpenState = ({ onOpen, onClose, defaultOpen = false }) => {
  const [isOpen, setIsOpen] = (0, import_react26.useState)(defaultOpen);
  const [openedWithKeyboard, setOpenedWithKeyboard] = (0, import_react26.useState)(false);
  const openDropdown = (isKeyboard) => {
    if (!isOpen) {
      setIsOpen(true);
      setOpenedWithKeyboard(!!isKeyboard);
      onOpen === null || onOpen === void 0 ? void 0 : onOpen();
    }
  };
  const closeDropdown = () => {
    if (isOpen) {
      setIsOpen(false);
      onClose === null || onClose === void 0 ? void 0 : onClose();
    }
  };
  const toggleDropdown = () => {
    if (isOpen) {
      closeDropdown();
    } else {
      openDropdown(false);
    }
  };
  return { isOpen, openDropdown, closeDropdown, toggleDropdown, openedWithKeyboard };
};

// node_modules/@cloudscape-design/components/select/utils/connect-options.js
var connectOptionsByValue = (options, selectedOptions) => {
  return (selectedOptions || []).map((selectedOption) => {
    for (const dropdownOption of options) {
      if (dropdownOption.type !== "parent" && dropdownOption.option.value === selectedOption.value) {
        return dropdownOption;
      }
    }
    return { option: selectedOption };
  });
};
var findOptionIndex = (options, option) => {
  for (let index = 0; index < options.length; index++) {
    const __option = options[index];
    if (__option === option || __option.value === option.value) {
      return index;
    }
  }
  return -1;
};

// node_modules/@cloudscape-design/components/select/utils/use-select.js
function useSelect({ selectedOptions, updateSelectedOption, options, filteringType, onBlur, onFocus, externalRef, keepOpen, embedded, fireLoadItems, setFilteringValue, useInteractiveGroups = false, statusType }) {
  const interactivityCheck = useInteractiveGroups ? isGroupInteractive : isInteractive;
  const isHighlightable = (option) => !!option && (useInteractiveGroups || option.type !== "parent");
  const filterRef = (0, import_react27.useRef)(null);
  const triggerRef = (0, import_react27.useRef)(null);
  const menuRef = (0, import_react27.useRef)(null);
  const hasFilter = filteringType !== "none" && !embedded;
  const activeRef = hasFilter ? filterRef : menuRef;
  const __selectedOptions = connectOptionsByValue(options, selectedOptions);
  const __selectedValuesSet = selectedOptions.reduce((selectedValuesSet, item) => {
    if (item.value) {
      selectedValuesSet.add(item.value);
    }
    return selectedValuesSet;
  }, /* @__PURE__ */ new Set());
  const [{ highlightType, highlightedOption, highlightedIndex }, { moveHighlightWithKeyboard, resetHighlightWithKeyboard, setHighlightedIndexWithMouse, highlightOptionWithKeyboard, goHomeWithKeyboard, goEndWithKeyboard }] = useHighlightedOption({ options, isHighlightable });
  const { isOpen, openDropdown, closeDropdown, toggleDropdown, openedWithKeyboard } = useOpenState({
    defaultOpen: embedded,
    onOpen: () => fireLoadItems(""),
    onClose: () => {
      resetHighlightWithKeyboard();
      setFilteringValue === null || setFilteringValue === void 0 ? void 0 : setFilteringValue("");
    }
  });
  const handleFocus = () => {
    fireNonCancelableEvent(onFocus, {});
  };
  const handleBlur = () => {
    fireNonCancelableEvent(onBlur, {});
    closeDropdown();
  };
  const hasSelectedOption = __selectedOptions.length > 0;
  const menuId = useUniqueId("option-list");
  const dialogId = useUniqueId("dialog");
  const highlightedOptionId = getOptionId(menuId, highlightedIndex);
  const selectOption = (option) => {
    var _a;
    const optionToSelect = option || highlightedOption;
    if (!optionToSelect || !interactivityCheck(optionToSelect)) {
      return;
    }
    updateSelectedOption(optionToSelect.option);
    if (!keepOpen) {
      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
      closeDropdown();
    }
  };
  const activeKeyDownHandler = useMenuKeyboard({
    goUp: () => {
      if (!useInteractiveGroups && (highlightedOption === null || highlightedOption === void 0 ? void 0 : highlightedOption.type) === "child" && highlightedIndex === 1 || highlightedIndex === 0) {
        goEndWithKeyboard();
        return;
      }
      moveHighlightWithKeyboard(-1);
    },
    goDown: () => {
      if (highlightedIndex === options.length - 1) {
        goHomeWithKeyboard();
        return;
      }
      moveHighlightWithKeyboard(1);
    },
    selectOption,
    goHome: goHomeWithKeyboard,
    goEnd: goEndWithKeyboard,
    closeDropdown: () => {
      var _a;
      if (!embedded) {
        (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        closeDropdown();
      }
    },
    preventNativeSpace: !hasFilter || !!highlightedOption
  });
  const triggerKeyDownHandler = useTriggerKeyboard({
    openDropdown: () => openDropdown(true),
    goHome: goHomeWithKeyboard
  });
  const getDropdownProps = () => ({
    onFocus: handleFocus,
    onBlur: handleBlur,
    dropdownContentId: dialogId,
    dropdownContentRole: hasFilter ? "dialog" : void 0
  });
  const getTriggerProps = (disabled = false, autoFocus = false) => {
    const triggerProps = {
      ref: triggerRef,
      onFocus: () => closeDropdown(),
      autoFocus,
      ariaHasPopup: hasFilter ? "dialog" : "listbox",
      ariaControls: isOpen ? hasFilter ? dialogId : menuId : void 0
    };
    if (!disabled) {
      triggerProps.onMouseDown = (event) => {
        var _a;
        event.preventDefault();
        if (isOpen) {
          (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        }
        toggleDropdown();
      };
      triggerProps.onKeyDown = triggerKeyDownHandler;
    }
    return triggerProps;
  };
  const getFilterProps = () => {
    if (!hasFilter || !setFilteringValue) {
      return {};
    }
    return {
      ref: filterRef,
      onKeyDown: activeKeyDownHandler,
      onChange: (event) => {
        setFilteringValue(event.detail.value);
        resetHighlightWithKeyboard();
      },
      __onDelayedInput: (event) => {
        fireLoadItems(event.detail.value);
      },
      __nativeAttributes: {
        "aria-activedescendant": highlightedOptionId,
        ["aria-owns"]: menuId,
        ["aria-controls"]: menuId
      }
    };
  };
  const getMenuProps = () => {
    const menuProps = {
      id: menuId,
      ref: menuRef,
      open: isOpen,
      onMouseUp: (itemIndex) => {
        if (itemIndex > -1) {
          selectOption(options[itemIndex]);
        }
      },
      onMouseMove: (itemIndex) => {
        if (itemIndex > -1) {
          setHighlightedIndexWithMouse(itemIndex);
        }
      },
      statusType
    };
    if (!hasFilter) {
      menuProps.onKeyDown = activeKeyDownHandler;
      menuProps.nativeAttributes = {
        "aria-activedescendant": highlightedOptionId
      };
    }
    if (embedded) {
      menuProps.onFocus = () => {
        if (!highlightedOption) {
          goHomeWithKeyboard();
        }
      };
      menuProps.onBlur = () => {
        resetHighlightWithKeyboard();
      };
    }
    return menuProps;
  };
  const getGroupState = (option) => {
    const totalSelected = option.options.filter((item) => !!item.value && __selectedValuesSet.has(item.value)).length;
    const hasSelected = totalSelected > 0;
    const allSelected = totalSelected === option.options.length;
    return {
      selected: hasSelected && allSelected && useInteractiveGroups,
      indeterminate: hasSelected && !allSelected
    };
  };
  const getOptionProps = (option, index) => {
    var _a;
    const highlighted = option === highlightedOption;
    const groupState = isGroup(option.option) ? getGroupState(option.option) : void 0;
    const selected = __selectedOptions.indexOf(option) > -1 || !!(groupState === null || groupState === void 0 ? void 0 : groupState.selected);
    const nextOption = (_a = options[index + 1]) === null || _a === void 0 ? void 0 : _a.option;
    const isNextSelected = !!nextOption && isGroup(nextOption) ? getGroupState(nextOption).selected : __selectedOptions.indexOf(options[index + 1]) > -1;
    const optionProps = {
      key: index,
      option,
      highlighted,
      selected,
      isNextSelected,
      indeterminate: !!(groupState === null || groupState === void 0 ? void 0 : groupState.indeterminate),
      ["data-mouse-target"]: isHighlightable(option) ? index : -1,
      id: getOptionId(menuId, index)
    };
    return optionProps;
  };
  const prevOpen = usePrevious(isOpen);
  (0, import_react27.useEffect)(() => {
    if (isOpen && !prevOpen && hasSelectedOption && !hasFilter) {
      if (openedWithKeyboard) {
        highlightOptionWithKeyboard(__selectedOptions[0]);
      } else {
        setHighlightedIndexWithMouse(options.indexOf(__selectedOptions[0]), true);
      }
    }
  }, [
    isOpen,
    __selectedOptions,
    hasSelectedOption,
    setHighlightedIndexWithMouse,
    highlightOptionWithKeyboard,
    openedWithKeyboard,
    options,
    prevOpen,
    hasFilter
  ]);
  (0, import_react27.useEffect)(() => {
    var _a;
    if (isOpen && !embedded) {
      (_a = activeRef.current) === null || _a === void 0 ? void 0 : _a.focus({ preventScroll: true });
    }
  }, [isOpen, activeRef, embedded]);
  useForwardFocus(externalRef, triggerRef);
  const highlightedGroupSelected = !!highlightedOption && isGroup(highlightedOption.option) && getGroupState(highlightedOption.option).selected;
  const announceSelected = !!highlightedOption && (__selectedOptions.indexOf(highlightedOption) > -1 || highlightedGroupSelected);
  return {
    isOpen,
    highlightedOption,
    highlightedIndex,
    highlightType,
    getTriggerProps,
    getDropdownProps,
    getMenuProps,
    getFilterProps,
    getOptionProps,
    highlightOption: highlightOptionWithKeyboard,
    selectOption,
    announceSelected,
    dialogId
  };
}

// node_modules/@cloudscape-design/components/select/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/select/styles.scoped.css";
var styles_css_default13 = {
  "root": "awsui_root_r2vco_d91lo_145"
};

// node_modules/@cloudscape-design/components/select/internal.js
var InternalSelect = import_react28.default.forwardRef((_a, externalRef) => {
  var _b;
  var { options, filteringType = "none", filteringPlaceholder, filteringAriaLabel, filteringClearAriaLabel, filteringResultsText, inlineLabelText, ariaRequired, placeholder, disabled, readOnly, ariaLabel, statusType = "finished", empty, loadingText, finishedText, errorText, noMatch, triggerVariant = "label", renderHighlightedAriaLive, selectedOption, onBlur, onFocus, onLoadItems, onChange, virtualScroll, expandToViewport, autoFocus, __inFilteringToken, __internalRootRef = null } = _a, restProps = __rest(_a, ["options", "filteringType", "filteringPlaceholder", "filteringAriaLabel", "filteringClearAriaLabel", "filteringResultsText", "inlineLabelText", "ariaRequired", "placeholder", "disabled", "readOnly", "ariaLabel", "statusType", "empty", "loadingText", "finishedText", "errorText", "noMatch", "triggerVariant", "renderHighlightedAriaLive", "selectedOption", "onBlur", "onFocus", "onLoadItems", "onChange", "virtualScroll", "expandToViewport", "autoFocus", "__inFilteringToken", "__internalRootRef"]);
  const baseProps = getBaseProps(restProps);
  const formFieldContext = useFormFieldContext(restProps);
  const i18n = useInternalI18n("select");
  const errorIconAriaLabel = i18n("errorIconAriaLabel", restProps.errorIconAriaLabel);
  const selectedAriaLabel = i18n("selectedAriaLabel", restProps.selectedAriaLabel);
  const recoveryText = i18n("recoveryText", restProps.recoveryText);
  if (restProps.recoveryText && !onLoadItems) {
    warnOnce("Select", "`onLoadItems` must be provided for `recoveryText` to be displayed.");
  }
  const { handleLoadMore, handleRecoveryClick, fireLoadItems } = useLoadItems({
    onLoadItems,
    options,
    statusType
  });
  checkControlled("Select", "selectedOption", selectedOption, "onChange", onChange);
  checkOptionValueField("Select", "options", options);
  const [filteringValue, setFilteringValue] = (0, import_react28.useState)("");
  const { filteredOptions, parentMap, totalCount, matchesCount } = prepareOptions(options, filteringType, filteringValue);
  const rootRef = (0, import_react28.useRef)(null);
  const triggerRef = (0, import_react28.useRef)(null);
  const selfControlId = useUniqueId("trigger");
  const controlId = (_b = formFieldContext.controlId) !== null && _b !== void 0 ? _b : selfControlId;
  const scrollToIndex = (0, import_react28.useRef)(null);
  const { isOpen, highlightType, highlightedOption, highlightedIndex, getTriggerProps, getDropdownProps, getFilterProps, getMenuProps, getOptionProps, highlightOption, selectOption, announceSelected } = useSelect({
    selectedOptions: selectedOption ? [selectedOption] : [],
    updateSelectedOption: (option) => fireNonCancelableEvent(onChange, { selectedOption: option }),
    options: filteredOptions,
    filteringType,
    onBlur,
    onFocus,
    externalRef,
    fireLoadItems,
    setFilteringValue,
    statusType
  });
  const handleNativeSearch = useNativeSearch({
    isEnabled: filteringType === "none",
    options: filteredOptions,
    highlightOption: !isOpen ? selectOption : highlightOption,
    highlightedOption: !isOpen ? selectedOption : highlightedOption === null || highlightedOption === void 0 ? void 0 : highlightedOption.option
  });
  const selectAriaLabelId = useUniqueId("select-arialabel-");
  const footerId = useUniqueId("footer");
  (0, import_react28.useEffect)(() => {
    var _a2;
    (_a2 = scrollToIndex.current) === null || _a2 === void 0 ? void 0 : _a2.call(scrollToIndex, highlightedIndex);
  }, [highlightedIndex]);
  const filter = import_react28.default.createElement(filter_default, Object.assign({ clearAriaLabel: filteringClearAriaLabel, filteringType, placeholder: filteringPlaceholder, ariaLabel: filteringAriaLabel, ariaRequired, value: filteringValue }, getFilterProps()));
  const trigger = import_react28.default.createElement(trigger_default, Object.assign({ ref: triggerRef, placeholder, disabled, readOnly, triggerVariant, triggerProps: getTriggerProps(disabled, autoFocus), selectedOption, isOpen, inFilteringToken: __inFilteringToken, inlineLabelText }, formFieldContext, { controlId, ariaLabelledby: joinStrings(formFieldContext.ariaLabelledby, selectAriaLabelId) }));
  const isEmpty = !options || options.length === 0;
  const isNoMatch = filteredOptions && filteredOptions.length === 0;
  const isFiltered = filteringType !== "none" && filteringValue.length > 0 && filteredOptions && filteredOptions.length > 0;
  const filteredText = isFiltered ? filteringResultsText === null || filteringResultsText === void 0 ? void 0 : filteringResultsText(matchesCount, totalCount) : void 0;
  const dropdownStatus = useDropdownStatus({
    statusType,
    empty,
    loadingText,
    finishedText,
    errorText,
    recoveryText,
    isEmpty,
    isNoMatch,
    noMatch,
    isFiltered,
    filteringResultsText: filteredText,
    errorIconAriaLabel,
    onRecoveryClick: handleRecoveryClick,
    hasRecoveryCallback: !!onLoadItems
  });
  const menuProps = Object.assign(Object.assign({}, getMenuProps()), { onLoadMore: handleLoadMore, ariaLabelledby: joinStrings(selectAriaLabelId, controlId), ariaDescribedby: dropdownStatus.content ? footerId : void 0 });
  const announcement = useAnnouncement({
    announceSelected,
    highlightedOption,
    getParent: (option) => {
      var _a2;
      return (_a2 = parentMap.get(option)) === null || _a2 === void 0 ? void 0 : _a2.option;
    },
    selectedAriaLabel,
    renderHighlightedAriaLive
  });
  const ListComponent = virtualScroll ? virtual_list_default : plain_list_default;
  const handleMouseDown = (event) => {
    const target = event.target;
    if (target !== document.activeElement) {
      event.preventDefault();
    }
  };
  const mergedRef = useMergeRefs(rootRef, __internalRootRef);
  const dropdownProps = getDropdownProps();
  return import_react28.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: mergedRef, className: clsx_m_default(styles_css_default13.root, baseProps.className), onKeyDown: handleNativeSearch }),
    import_react28.default.createElement(
      dropdown_default,
      Object.assign({}, dropdownProps, { ariaLabelledby: dropdownProps.dropdownContentRole ? joinStrings(selectAriaLabelId, controlId) : void 0, ariaDescribedby: dropdownProps.dropdownContentRole ? dropdownStatus.content ? footerId : void 0 : void 0, open: isOpen, stretchTriggerHeight: !!__inFilteringToken, stretchBeyondTriggerWidth: true, trigger, header: filter, onMouseDown: handleMouseDown, footer: dropdownStatus.isSticky ? import_react28.default.createElement(dropdown_footer_default, { content: isOpen ? dropdownStatus.content : null, id: footerId }) : null, expandToViewport }),
      import_react28.default.createElement(ListComponent, { listBottom: !dropdownStatus.isSticky ? import_react28.default.createElement(dropdown_footer_default, { content: isOpen ? dropdownStatus.content : null, id: footerId }) : null, menuProps, getOptionProps, filteredOptions, filteringValue, ref: scrollToIndex, hasDropdownStatus: dropdownStatus.content !== null, screenReaderContent: announcement, highlightType })
    ),
    import_react28.default.createElement("div", { hidden: true, id: selectAriaLabelId }, ariaLabel || inlineLabelText)
  );
});
var internal_default5 = InternalSelect;

// node_modules/@cloudscape-design/components/select/index.js
var Select = import_react29.default.forwardRef((_a, ref) => {
  var { options = [], filteringType = "none", statusType = "finished", triggerVariant = "label" } = _a, restProps = __rest(_a, ["options", "filteringType", "statusType", "triggerVariant"]);
  const baseComponentProps = useBaseComponent("Select", {
    props: {
      autoFocus: restProps.autoFocus,
      expandToViewport: restProps.expandToViewport,
      filteringType,
      triggerVariant,
      virtualScroll: restProps.virtualScroll,
      readOnly: restProps.readOnly
    },
    metadata: {
      hasInlineLabel: Boolean(restProps.inlineLabelText),
      hasDisabledReasons: options.some((option) => Boolean(option.disabledReason))
    }
  });
  const externalProps = getExternalProps(restProps);
  const componentAnalyticsMetadata = {
    name: "awsui.Select",
    label: `.${styles_css_default11["button-trigger"]}`,
    properties: {
      disabled: `${!!externalProps.disabled}`
    }
  };
  return import_react29.default.createElement(internal_default5, Object.assign({ options, filteringType, statusType, triggerVariant }, externalProps, baseComponentProps, { ref }, getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata })));
});
applyDisplayName(Select, "Select");
var select_default = Select;

export {
  usePortalModeClasses,
  useDropdownContext,
  dropdown_default,
  options_list_default,
  useOpenState,
  internal_default4 as internal_default,
  usePrevious,
  useDropdownStatus,
  dropdown_footer_default,
  filter_default,
  option_default,
  selectable_item_default,
  getTestOptionIndexes,
  generateTestIndexes,
  plain_list_default,
  styles_css_default11 as styles_css_default,
  button_trigger_default,
  trigger_default,
  useVirtual2 as useVirtual,
  virtual_list_default,
  checkControlled,
  isGroup,
  prepareOptions,
  checkOptionValueField,
  findOptionIndex,
  useAnnouncement,
  useLoadItems,
  useNativeSearch,
  useHighlightedOption,
  useSelect,
  internal_default5 as internal_default2,
  select_default
};
//# sourceMappingURL=chunk-EVN4EQFS.js.map
