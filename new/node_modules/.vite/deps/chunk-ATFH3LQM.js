import {
  getMatchingBreakpoint,
  mobileBreakpoint
} from "./chunk-XTPUGG63.js";
import {
  findUpUntil,
  supportsStickyPosition
} from "./chunk-MKRUABPM.js";
import {
  createSingletonState,
  useVisualRefresh
} from "./chunk-3NFHZQPK.js";
import {
  require_react
} from "./chunk-WHMHD7EJ.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@cloudscape-design/components/internal/hooks/use-mobile/index.js
function getIsMobile() {
  if (typeof window === "undefined") {
    return false;
  }
  if (window.matchMedia) {
    return window.matchMedia(`(max-width: ${mobileBreakpoint}px)`).matches;
  }
  return getMatchingBreakpoint(window.innerWidth, ["xs"]) !== "xs";
}
var useMobile = createSingletonState({
  initialState: () => getIsMobile(),
  factory: (handler) => {
    const listener = () => handler(getIsMobile());
    window.addEventListener("resize", listener);
    return () => {
      window.removeEventListener("resize", listener);
    };
  }
});

// node_modules/@cloudscape-design/components/container/use-sticky-header.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/context/app-layout-context.js
var import_react = __toESM(require_react());
var defaultValue = {
  stickyOffsetTop: 0,
  stickyOffsetBottom: 0,
  mobileBarHeight: 0
};
var AppLayoutContext = (0, import_react.createContext)(defaultValue);
function useAppLayoutContext() {
  return (0, import_react.useContext)(AppLayoutContext);
}

// node_modules/@cloudscape-design/components/internal/utils/scrollable-containers.js
var getOverflowParents = (element) => {
  const parents = [];
  let node = element;
  while ((node = node.parentElement) && node !== document.body) {
    getComputedStyle(node).overflow !== "visible" && parents.push(node);
  }
  return parents;
};
var getOverflowParentDimensions = ({ element, excludeClosestParent = false, expandToViewport = false, canExpandOutsideViewport = false }) => {
  const parents = expandToViewport ? [] : getOverflowParents(element).map((el) => {
    const { height, width, top, left } = el.getBoundingClientRect();
    return {
      // Treat the whole scrollable area as the available height
      // if we're allowed to expand past the viewport.
      blockSize: canExpandOutsideViewport ? el.scrollHeight : height,
      inlineSize: width,
      insetBlockStart: top,
      insetInlineStart: left
    };
  });
  if (canExpandOutsideViewport && !expandToViewport) {
    const documentDimensions = document.documentElement.getBoundingClientRect();
    parents.push({
      inlineSize: Math.max(documentDimensions.width, document.documentElement.clientWidth),
      blockSize: Math.max(documentDimensions.height, document.documentElement.clientHeight),
      insetBlockStart: documentDimensions.top,
      insetInlineStart: documentDimensions.left
    });
  } else {
    parents.push({
      blockSize: window.innerHeight,
      inlineSize: window.innerWidth,
      insetBlockStart: 0,
      insetInlineStart: 0
    });
  }
  if (excludeClosestParent && !expandToViewport) {
    parents.shift();
  }
  return parents;
};
function scrollElementIntoView(element, options = { block: "nearest", inline: "nearest" }) {
  var _a;
  (_a = element === null || element === void 0 ? void 0 : element.scrollIntoView) === null || _a === void 0 ? void 0 : _a.call(element, options);
}
function calculateScroll({ insetBlockStart, blockSize }) {
  if (insetBlockStart < 0) {
    return insetBlockStart;
  } else if (insetBlockStart + blockSize > window.innerHeight) {
    if (blockSize > window.innerHeight) {
      return insetBlockStart;
    } else {
      return insetBlockStart + blockSize - window.innerHeight;
    }
  }
  return 0;
}
function scrollRectangleIntoView(box, scrollableParent) {
  const scrollAmount = calculateScroll(box);
  if (scrollAmount) {
    (scrollableParent || window).scrollBy(0, scrollAmount);
  }
}
function getFirstScrollableParent(element) {
  return findUpUntil(element, (el) => {
    const overflows = el.scrollHeight > el.clientHeight;
    return overflows && ["scroll", "auto"].includes(getComputedStyle(el).overflowY);
  }) || void 0;
}

// node_modules/@cloudscape-design/components/internal/generated/custom-css-properties/index.js
var customCSSPropertiesMap = {
  breadcrumbsGap: "--awsui-breadcrumbs-gap-lgosor",
  contentGapLeft: "--awsui-content-gap-left-lgosor",
  contentGapRight: "--awsui-content-gap-right-lgosor",
  contentHeight: "--awsui-content-height-lgosor",
  defaultMaxContentWidth: "--awsui-default-max-content-width-lgosor",
  defaultMinContentWidth: "--awsui-default-min-content-width-lgosor",
  drawerSize: "--awsui-drawer-size-lgosor",
  footerHeight: "--awsui-footer-height-lgosor",
  headerGap: "--awsui-header-gap-lgosor",
  headerHeight: "--awsui-header-height-lgosor",
  layoutWidth: "--awsui-layout-width-lgosor",
  mainGap: "--awsui-main-gap-lgosor",
  mainOffsetLeft: "--awsui-main-offset-left-lgosor",
  mainTemplateRows: "--awsui-main-template-rows-lgosor",
  maxContentWidth: "--awsui-max-content-width-lgosor",
  minContentWidth: "--awsui-min-content-width-lgosor",
  mobileBarHeight: "--awsui-mobile-bar-height-lgosor",
  notificationsGap: "--awsui-notifications-gap-lgosor",
  notificationsHeight: "--awsui-notifications-height-lgosor",
  offsetTop: "--awsui-offset-top-lgosor",
  offsetTopWithNotifications: "--awsui-offset-top-with-notifications-lgosor",
  overlapHeight: "--awsui-overlap-height-lgosor",
  navigationWidth: "--awsui-navigation-width-lgosor",
  splitPanelReportedHeaderSize: "--awsui-split-panel-reported-header-size-lgosor",
  splitPanelReportedSize: "--awsui-split-panel-reported-size-lgosor",
  splitPanelHeight: "--awsui-split-panel-height-lgosor",
  splitPanelMinWidth: "--awsui-split-panel-min-width-lgosor",
  splitPanelMaxWidth: "--awsui-split-panel-max-width-lgosor",
  toolsMaxWidth: "--awsui-tools-max-width-lgosor",
  toolsWidth: "--awsui-tools-width-lgosor",
  toolsAnimationStartingOpacity: "--awsui-tools-animation-starting-opacity-lgosor",
  contentScrollMargin: "--awsui-content-scroll-margin-lgosor",
  flashbarStackDepth: "--awsui-flashbar-stack-depth-lgosor",
  flashbarStackIndex: "--awsui-flashbar-stack-index-lgosor",
  flashbarStickyBottomMargin: "--awsui-flashbar-sticky-bottom-margin-lgosor",
  stackedNotificationsBottomMargin: "--awsui-stacked-notifications-bottom-margin-lgosor",
  stackedNotificationsDefaultBottomMargin: "--awsui-stacked-notifications-default-bottom-margin-lgosor",
  dropdownDefaultMaxWidth: "--awsui-dropdown-default-max-width-lgosor",
  spinnerRotatorFrom: "--awsui-spinner-rotator-from-lgosor",
  spinnerRotatorTo: "--awsui-spinner-rotator-to-lgosor",
  spinnerLineLeftFrom: "--awsui-spinner-line-left-from-lgosor",
  spinnerLineLeftTo: "--awsui-spinner-line-left-to-lgosor",
  spinnerLineRightFrom: "--awsui-spinner-line-right-from-lgosor",
  spinnerLineRightTo: "--awsui-spinner-line-right-to-lgosor"
};
var custom_css_properties_default = customCSSPropertiesMap;

// node_modules/@cloudscape-design/components/container/use-sticky-header.js
function computeOffset({ isMobile, isVisualRefresh, customCssProps, __stickyOffset, __mobileStickyOffset, mobileBarHeight = 0, stickyOffsetTop, hasInnerOverflowParents }) {
  const effectiveStickyOffset = __stickyOffset !== null && __stickyOffset !== void 0 ? __stickyOffset : hasInnerOverflowParents ? 0 : stickyOffsetTop;
  let computedOffset = `${effectiveStickyOffset}px`;
  if (isMobile) {
    const classicOffset = `${stickyOffsetTop + mobileBarHeight + (__stickyOffset !== null && __stickyOffset !== void 0 ? __stickyOffset : 0) - (__mobileStickyOffset !== null && __mobileStickyOffset !== void 0 ? __mobileStickyOffset : 0)}px`;
    const visualRefreshOffset = `calc(var(${customCssProps.offsetTop}, 0px) + var(${customCssProps.mobileBarHeight}, 0px) + ${(__stickyOffset !== null && __stickyOffset !== void 0 ? __stickyOffset : 0) - (__mobileStickyOffset !== null && __mobileStickyOffset !== void 0 ? __mobileStickyOffset : 0)}px)`;
    computedOffset = isVisualRefresh ? visualRefreshOffset : classicOffset;
  } else if (isVisualRefresh && !hasInnerOverflowParents) {
    computedOffset = `var(${customCssProps.offsetTopWithNotifications}, ${computedOffset})`;
  }
  return computedOffset;
}
var StickyHeaderContext = (0, import_react2.createContext)({
  isStuck: false
});
var useStickyHeader = (rootRef, headerRef, __stickyHeader, __stickyOffset, __mobileStickyOffset, __disableMobile = true) => {
  const isMobile = useMobile();
  const { stickyOffsetTop, mobileBarHeight } = useAppLayoutContext();
  const disableSticky = isMobile && __disableMobile;
  const isSticky = supportsStickyPosition() && !disableSticky && !!__stickyHeader;
  const isVisualRefresh = useVisualRefresh();
  const [hasInnerOverflowParents, setHasInnerOverflowParents] = (0, import_react2.useState)(false);
  const [isStuck, setIsStuck] = (0, import_react2.useState)(false);
  (0, import_react2.useLayoutEffect)(() => {
    if (rootRef.current) {
      const overflowParents = getOverflowParents(rootRef.current);
      const mainElement = findUpUntil(rootRef.current, (elem) => elem.tagName === "MAIN");
      setHasInnerOverflowParents(overflowParents.length > 0 && overflowParents[0] !== mainElement);
    }
  }, [rootRef]);
  const computedOffset = computeOffset({
    isMobile,
    isVisualRefresh,
    customCssProps: custom_css_properties_default,
    __stickyOffset,
    __mobileStickyOffset,
    mobileBarHeight,
    stickyOffsetTop,
    hasInnerOverflowParents
  });
  const stickyStyles = isSticky ? {
    style: {
      top: computedOffset
    }
  } : {};
  const checkIfStuck = (0, import_react2.useCallback)(() => {
    if (rootRef.current && headerRef.current) {
      const rootTopBorderWidth = parseFloat(getComputedStyle(rootRef.current).borderTopWidth) || 0;
      const rootTop = rootRef.current.getBoundingClientRect().top + rootTopBorderWidth;
      const headerTop = headerRef.current.getBoundingClientRect().top;
      if (rootTop < headerTop) {
        setIsStuck(true);
      } else {
        setIsStuck(false);
      }
    }
  }, [rootRef, headerRef]);
  (0, import_react2.useEffect)(() => {
    if (isSticky) {
      window.addEventListener("scroll", checkIfStuck, true);
      window.addEventListener("resize", checkIfStuck);
      return () => {
        window.removeEventListener("scroll", checkIfStuck, true);
        window.removeEventListener("resize", checkIfStuck);
      };
    }
  }, [isSticky, checkIfStuck]);
  return {
    isSticky,
    isStuck,
    stickyStyles
  };
};

// node_modules/@cloudscape-design/components/header/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/header/styles.scoped.css";
var styles_css_default = {
  "root": "awsui_root_2qdw9_1bpgx_99",
  "refresh": "awsui_refresh_2qdw9_1bpgx_138",
  "root-no-actions": "awsui_root-no-actions_2qdw9_1bpgx_138",
  "root-variant-h2": "awsui_root-variant-h2_2qdw9_1bpgx_141",
  "root-variant-h3": "awsui_root-variant-h3_2qdw9_1bpgx_141",
  "root-has-description": "awsui_root-has-description_2qdw9_1bpgx_141",
  "root-variant-h1": "awsui_root-variant-h1_2qdw9_1bpgx_150",
  "main": "awsui_main_2qdw9_1bpgx_160",
  "no-wrap": "awsui_no-wrap_2qdw9_1bpgx_170",
  "main-variant-h1": "awsui_main-variant-h1_2qdw9_1bpgx_176",
  "actions": "awsui_actions_2qdw9_1bpgx_184",
  "actions-centered": "awsui_actions-centered_2qdw9_1bpgx_189",
  "actions-variant-h1": "awsui_actions-variant-h1_2qdw9_1bpgx_192",
  "actions-variant-h2": "awsui_actions-variant-h2_2qdw9_1bpgx_196",
  "actions-variant-h3": "awsui_actions-variant-h3_2qdw9_1bpgx_200",
  "title": "awsui_title_2qdw9_1bpgx_216",
  "title-variant-h1": "awsui_title-variant-h1_2qdw9_1bpgx_221",
  "title-variant-h2": "awsui_title-variant-h2_2qdw9_1bpgx_228",
  "title-variant-h3": "awsui_title-variant-h3_2qdw9_1bpgx_234",
  "virtual-space": "awsui_virtual-space_2qdw9_1bpgx_259",
  "info": "awsui_info_2qdw9_1bpgx_265",
  "description": "awsui_description_2qdw9_1bpgx_269",
  "description-variant-h1": "awsui_description-variant-h1_2qdw9_1bpgx_276",
  "description-variant-h2": "awsui_description-variant-h2_2qdw9_1bpgx_280",
  "description-variant-h3": "awsui_description-variant-h3_2qdw9_1bpgx_287",
  "heading": "awsui_heading_2qdw9_1bpgx_296",
  "heading-variant-h1": "awsui_heading-variant-h1_2qdw9_1bpgx_307",
  "heading-variant-h2": "awsui_heading-variant-h2_2qdw9_1bpgx_312",
  "heading-variant-h3": "awsui_heading-variant-h3_2qdw9_1bpgx_317",
  "heading-text": "awsui_heading-text_2qdw9_1bpgx_327",
  "heading-text-variant-h1": "awsui_heading-text-variant-h1_2qdw9_1bpgx_330",
  "heading-text-variant-h2": "awsui_heading-text-variant-h2_2qdw9_1bpgx_338",
  "heading-text-variant-h3": "awsui_heading-text-variant-h3_2qdw9_1bpgx_346",
  "counter": "awsui_counter_2qdw9_1bpgx_355"
};

// node_modules/@cloudscape-design/components/internal/context/collection-label-context.js
var import_react3 = __toESM(require_react());
var CollectionLabelContext = (0, import_react3.createContext)({});

export {
  getOverflowParents,
  getOverflowParentDimensions,
  scrollElementIntoView,
  calculateScroll,
  scrollRectangleIntoView,
  getFirstScrollableParent,
  useMobile,
  custom_css_properties_default,
  defaultValue,
  AppLayoutContext,
  useAppLayoutContext,
  StickyHeaderContext,
  useStickyHeader,
  styles_css_default,
  CollectionLabelContext
};
//# sourceMappingURL=chunk-ATFH3LQM.js.map
