import {
  internal_default3 as internal_default
} from "./chunk-A62YXFPX.js";
import {
  debounce
} from "./chunk-QBOFGJFI.js";
import {
  getAnalyticsMetadataAttribute
} from "./chunk-IQEN54MI.js";
import {
  Metrics,
  PACKAGE_SOURCE,
  PACKAGE_VERSION,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __rest,
  clsx_m_default
} from "./chunk-4LQYZJVR.js";
import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@cloudscape-design/components/alert/actions-wrapper/index.js
var import_react = __toESM(require_react());

// node_modules/@cloudscape-design/components/alert/actions-wrapper/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/alert/actions-wrapper/styles.scoped.css";
var styles_css_default = {
  "root": "awsui_root_37gf8_14wux_9"
};

// node_modules/@cloudscape-design/components/alert/actions-wrapper/index.js
function createActionButton(testUtilClasses, action, buttonText, onButtonClick) {
  if (!action && buttonText) {
    action = import_react.default.createElement(
      "span",
      Object.assign({}, getAnalyticsMetadataAttribute({
        action: "buttonClick"
      })),
      import_react.default.createElement(internal_default, { className: testUtilClasses.actionButton, onClick: onButtonClick, formAction: "none" }, buttonText)
    );
  }
  return action ? import_react.default.createElement("div", { className: testUtilClasses.actionSlot }, action) : null;
}
var ActionsWrapper = ({ className, testUtilClasses, action, discoveredActions, buttonText, onButtonClick }) => {
  const actionButton = createActionButton(testUtilClasses, action, buttonText, onButtonClick);
  if (!actionButton && discoveredActions.length === 0) {
    return null;
  }
  return import_react.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default.root, className) },
    actionButton,
    discoveredActions
  );
};

// node_modules/@cloudscape-design/components/internal/metrics.js
var metrics = new Metrics(PACKAGE_SOURCE, PACKAGE_VERSION);

// node_modules/@cloudscape-design/components/internal/plugins/helpers/utils.js
function sortByPriority(items) {
  return items.slice().sort((a, b) => {
    var _a, _b;
    if (b.orderPriority !== a.orderPriority) {
      return Math.sign(((_a = b.orderPriority) !== null && _a !== void 0 ? _a : 0) - ((_b = a.orderPriority) !== null && _b !== void 0 ? _b : 0));
    }
    return b.id < a.id ? 1 : -1;
  });
}

// node_modules/@cloudscape-design/components/internal/plugins/controllers/action-buttons.js
var ActionButtonsController = class {
  constructor() {
    this.listeners = [];
    this.actions = [];
    this.scheduleUpdate = debounce(() => {
      this.listeners.forEach((listener) => listener(this.actions));
    }, 0);
    this.registerAction = (action) => {
      this.actions.push(action);
      this.actions = sortByPriority(this.actions);
      this.scheduleUpdate();
    };
    this.clearRegisteredActions = () => {
      this.actions = [];
    };
    this.onActionRegistered = (listener) => {
      this.listeners.push(listener);
      this.scheduleUpdate();
      return () => {
        this.listeners = this.listeners.filter((item) => item !== listener);
      };
    };
  }
  installPublic(api = {}) {
    var _a;
    (_a = api.registerAction) !== null && _a !== void 0 ? _a : api.registerAction = this.registerAction;
    return api;
  }
  installInternal(internalApi = {}) {
    var _a, _b;
    (_a = internalApi.clearRegisteredActions) !== null && _a !== void 0 ? _a : internalApi.clearRegisteredActions = this.clearRegisteredActions;
    (_b = internalApi.onActionRegistered) !== null && _b !== void 0 ? _b : internalApi.onActionRegistered = this.onActionRegistered;
    return internalApi;
  }
};

// node_modules/@cloudscape-design/components/internal/plugins/helpers/metrics.js
function reportRuntimeApiLoadMetric() {
  metrics.sendPanoramaMetric({ eventName: "awsui-runtime-api-loaded", eventDetail: { version: PACKAGE_VERSION } });
}
function reportRuntimeApiWarning(component, message) {
  console.warn("[AwsUi]", `[${component}]`, message);
  metrics.sendPanoramaMetric({
    eventName: "awsui-runtime-api-warning",
    eventDetail: { version: PACKAGE_VERSION, component, message }
  });
}

// node_modules/@cloudscape-design/components/internal/plugins/controllers/alert-flash-content.js
var _AlertFlashContentController_listeners;
var _AlertFlashContentController_cleanups;
var _AlertFlashContentController_provider;
var _AlertFlashContentController_scheduleUpdate;
var AlertFlashContentController = class {
  constructor() {
    _AlertFlashContentController_listeners.set(this, []);
    _AlertFlashContentController_cleanups.set(this, /* @__PURE__ */ new Map());
    _AlertFlashContentController_provider.set(this, void 0);
    _AlertFlashContentController_scheduleUpdate.set(this, debounce(() => __classPrivateFieldGet(this, _AlertFlashContentController_listeners, "f").forEach((listener) => {
      if (__classPrivateFieldGet(this, _AlertFlashContentController_provider, "f")) {
        const cleanup = listener(__classPrivateFieldGet(this, _AlertFlashContentController_provider, "f"));
        __classPrivateFieldGet(this, _AlertFlashContentController_cleanups, "f").set(listener, cleanup);
      }
    }), 0));
    this.registerContentReplacer = (content) => {
      if (__classPrivateFieldGet(this, _AlertFlashContentController_provider, "f")) {
        reportRuntimeApiWarning("alert-flash-content", `Cannot call \`registerContentReplacer\` with new provider: provider with id "${__classPrivateFieldGet(this, _AlertFlashContentController_provider, "f").id}" already registered.`);
        return;
      }
      __classPrivateFieldSet(this, _AlertFlashContentController_provider, content, "f");
      __classPrivateFieldGet(this, _AlertFlashContentController_scheduleUpdate, "f").call(this);
    };
    this.clearRegisteredReplacer = () => {
      __classPrivateFieldSet(this, _AlertFlashContentController_provider, void 0, "f");
    };
    this.initialCheck = (context) => {
      var _a;
      if ((_a = __classPrivateFieldGet(this, _AlertFlashContentController_provider, "f")) === null || _a === void 0 ? void 0 : _a.initialCheck) {
        return __classPrivateFieldGet(this, _AlertFlashContentController_provider, "f").initialCheck(context);
      }
      return false;
    };
    this.onContentRegistered = (listener) => {
      if (__classPrivateFieldGet(this, _AlertFlashContentController_provider, "f")) {
        const cleanup = listener(__classPrivateFieldGet(this, _AlertFlashContentController_provider, "f"));
        __classPrivateFieldGet(this, _AlertFlashContentController_listeners, "f").push(listener);
        __classPrivateFieldGet(this, _AlertFlashContentController_cleanups, "f").set(listener, cleanup);
      } else {
        __classPrivateFieldGet(this, _AlertFlashContentController_listeners, "f").push(listener);
      }
      return () => {
        var _a;
        (_a = __classPrivateFieldGet(this, _AlertFlashContentController_cleanups, "f").get(listener)) === null || _a === void 0 ? void 0 : _a();
        __classPrivateFieldSet(this, _AlertFlashContentController_listeners, __classPrivateFieldGet(this, _AlertFlashContentController_listeners, "f").filter((item) => item !== listener), "f");
        __classPrivateFieldGet(this, _AlertFlashContentController_cleanups, "f").delete(listener);
      };
    };
  }
  installPublic(api = {}) {
    var _a;
    (_a = api.registerContentReplacer) !== null && _a !== void 0 ? _a : api.registerContentReplacer = this.registerContentReplacer;
    return api;
  }
  installInternal(internalApi = {}) {
    var _a, _b, _c;
    (_a = internalApi.clearRegisteredReplacer) !== null && _a !== void 0 ? _a : internalApi.clearRegisteredReplacer = this.clearRegisteredReplacer;
    (_b = internalApi.onContentRegistered) !== null && _b !== void 0 ? _b : internalApi.onContentRegistered = this.onContentRegistered;
    (_c = internalApi.initialCheck) !== null && _c !== void 0 ? _c : internalApi.initialCheck = this.initialCheck;
    return internalApi;
  }
};
_AlertFlashContentController_listeners = /* @__PURE__ */ new WeakMap(), _AlertFlashContentController_cleanups = /* @__PURE__ */ new WeakMap(), _AlertFlashContentController_provider = /* @__PURE__ */ new WeakMap(), _AlertFlashContentController_scheduleUpdate = /* @__PURE__ */ new WeakMap();

// node_modules/@cloudscape-design/components/internal/plugins/controllers/app-layout-widget.js
var _AppLayoutWidgetController_registrations;
var _AppLayoutWidgetController_findPrimary;
var _AppLayoutWidgetController_update;
var _AppLayoutWidgetController_scheduleUpdate;
var AppLayoutWidgetController = class {
  constructor() {
    _AppLayoutWidgetController_registrations.set(this, []);
    _AppLayoutWidgetController_findPrimary.set(this, () => {
      const forcedPrimary = __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f").find((registration) => registration.forceType === "primary");
      if (forcedPrimary) {
        return forcedPrimary;
      }
      for (const registration of __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f").slice()) {
        if (registration.forceType !== "secondary") {
          return registration;
        }
      }
      return void 0;
    });
    _AppLayoutWidgetController_update.set(this, () => {
      const primary = __classPrivateFieldGet(this, _AppLayoutWidgetController_findPrimary, "f").call(this);
      const discoveredProps = __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f").filter((registration) => registration !== primary).map((registration) => registration.props);
      for (const registration of __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f")) {
        if (registration === primary) {
          registration.onChange({
            type: "primary",
            discoveredProps
          });
        } else {
          registration.onChange(registration.secondaryInstance);
        }
      }
    });
    _AppLayoutWidgetController_scheduleUpdate.set(this, debounce(() => __classPrivateFieldGet(this, _AppLayoutWidgetController_update, "f").call(this), 0));
    this.register = (forceType, onRegistrationChange) => {
      const hasForcedPrimary = __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f").some((instance) => instance.forceType === "primary");
      if (forceType === "primary" && hasForcedPrimary) {
        throw new Error("Double primary registration attempt");
      }
      const registration = {
        forceType,
        onChange: onRegistrationChange,
        props: {},
        secondaryInstance: {
          type: "secondary",
          update: (props) => {
            registration.props = props;
            __classPrivateFieldGet(this, _AppLayoutWidgetController_scheduleUpdate, "f").call(this);
          }
        }
      };
      __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f").push(registration);
      __classPrivateFieldGet(this, _AppLayoutWidgetController_update, "f").call(this);
      return () => {
        __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f").splice(__classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f").indexOf(registration), 1);
        __classPrivateFieldGet(this, _AppLayoutWidgetController_scheduleUpdate, "f").call(this);
      };
    };
    this.getStateForTesting = () => {
      return {
        registrations: __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f")
      };
    };
    this.installInternal = (internalApi = {}) => {
      var _a, _b;
      (_a = internalApi.register) !== null && _a !== void 0 ? _a : internalApi.register = this.register;
      (_b = internalApi.getStateForTesting) !== null && _b !== void 0 ? _b : internalApi.getStateForTesting = this.getStateForTesting;
      return internalApi;
    };
  }
};
_AppLayoutWidgetController_registrations = /* @__PURE__ */ new WeakMap(), _AppLayoutWidgetController_findPrimary = /* @__PURE__ */ new WeakMap(), _AppLayoutWidgetController_update = /* @__PURE__ */ new WeakMap(), _AppLayoutWidgetController_scheduleUpdate = /* @__PURE__ */ new WeakMap();

// node_modules/@cloudscape-design/components/internal/plugins/controllers/breadcrumbs.js
var _BreadcrumbsController_appLayoutUpdateCallback;
var _BreadcrumbsController_breadcrumbInstances;
var _BreadcrumbsController_breadcrumbRegistrations;
var _BreadcrumbsController_notifyAppLayout;
var _BreadcrumbsController_notifyBreadcrumbs;
var BreadcrumbsController = class {
  constructor() {
    _BreadcrumbsController_appLayoutUpdateCallback.set(this, null);
    _BreadcrumbsController_breadcrumbInstances.set(this, []);
    _BreadcrumbsController_breadcrumbRegistrations.set(this, []);
    _BreadcrumbsController_notifyAppLayout.set(this, debounce(() => {
      var _a;
      if (!__classPrivateFieldGet(this, _BreadcrumbsController_appLayoutUpdateCallback, "f")) {
        return;
      }
      const latestBreadcrumb = __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbInstances, "f")[__classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbInstances, "f").length - 1];
      __classPrivateFieldGet(this, _BreadcrumbsController_appLayoutUpdateCallback, "f").call(this, (_a = latestBreadcrumb === null || latestBreadcrumb === void 0 ? void 0 : latestBreadcrumb.props) !== null && _a !== void 0 ? _a : null);
    }, 0));
    _BreadcrumbsController_notifyBreadcrumbs.set(this, debounce(() => {
      __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbRegistrations, "f").forEach((listener) => listener(!!__classPrivateFieldGet(this, _BreadcrumbsController_appLayoutUpdateCallback, "f")));
    }, 0));
    this.registerAppLayout = (changeCallback) => {
      if (__classPrivateFieldGet(this, _BreadcrumbsController_appLayoutUpdateCallback, "f")) {
        return;
      }
      __classPrivateFieldSet(this, _BreadcrumbsController_appLayoutUpdateCallback, changeCallback, "f");
      __classPrivateFieldGet(this, _BreadcrumbsController_notifyBreadcrumbs, "f").call(this);
      return () => {
        __classPrivateFieldSet(this, _BreadcrumbsController_appLayoutUpdateCallback, null, "f");
        __classPrivateFieldGet(this, _BreadcrumbsController_notifyBreadcrumbs, "f").call(this);
      };
    };
    this.registerBreadcrumbs = (props, onRegistered) => {
      const instance = { props };
      __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbInstances, "f").push(instance);
      __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbRegistrations, "f").push(onRegistered);
      __classPrivateFieldGet(this, _BreadcrumbsController_notifyBreadcrumbs, "f").call(this);
      __classPrivateFieldGet(this, _BreadcrumbsController_notifyAppLayout, "f").call(this);
      return {
        update: (props2) => {
          instance.props = props2;
          __classPrivateFieldGet(this, _BreadcrumbsController_notifyAppLayout, "f").call(this);
        },
        cleanup: () => {
          __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbInstances, "f").splice(__classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbInstances, "f").indexOf(instance), 1);
          __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbRegistrations, "f").splice(__classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbRegistrations, "f").indexOf(onRegistered), 1);
          __classPrivateFieldGet(this, _BreadcrumbsController_notifyAppLayout, "f").call(this);
        }
      };
    };
    this.getStateForTesting = () => {
      return {
        appLayoutUpdateCallback: __classPrivateFieldGet(this, _BreadcrumbsController_appLayoutUpdateCallback, "f"),
        breadcrumbInstances: __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbInstances, "f"),
        breadcrumbRegistrations: __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbRegistrations, "f")
      };
    };
  }
  installInternal(internalApi = {}) {
    var _a, _b, _c;
    (_a = internalApi.registerBreadcrumbs) !== null && _a !== void 0 ? _a : internalApi.registerBreadcrumbs = this.registerBreadcrumbs;
    (_b = internalApi.registerAppLayout) !== null && _b !== void 0 ? _b : internalApi.registerAppLayout = this.registerAppLayout;
    (_c = internalApi.getStateForTesting) !== null && _c !== void 0 ? _c : internalApi.getStateForTesting = this.getStateForTesting;
    return internalApi;
  }
};
_BreadcrumbsController_appLayoutUpdateCallback = /* @__PURE__ */ new WeakMap(), _BreadcrumbsController_breadcrumbInstances = /* @__PURE__ */ new WeakMap(), _BreadcrumbsController_breadcrumbRegistrations = /* @__PURE__ */ new WeakMap(), _BreadcrumbsController_notifyAppLayout = /* @__PURE__ */ new WeakMap(), _BreadcrumbsController_notifyBreadcrumbs = /* @__PURE__ */ new WeakMap();

// node_modules/@cloudscape-design/components/internal/plugins/controllers/drawers.js
var updatableProperties = [
  "badge",
  "resizable",
  "defaultSize",
  "orderPriority",
  "defaultActive",
  "onResize"
];
var DrawersController = class {
  constructor() {
    this.drawers = [];
    this.drawersRegistrationListener = null;
    this.drawerOpenedListener = null;
    this.drawerClosedListener = null;
    this.scheduleUpdate = debounce(() => {
      var _a;
      (_a = this.drawersRegistrationListener) === null || _a === void 0 ? void 0 : _a.call(this, this.drawers);
    }, 0);
    this.registerDrawer = (config) => {
      if (this.drawers.find((drawer) => drawer.id === config.id)) {
        reportRuntimeApiWarning("app-layout-drawers", `drawer with id "${config.id}" is already registered`);
      }
      this.drawers = this.drawers.concat(config);
      this.scheduleUpdate();
    };
    this.updateDrawer = (_a) => {
      var _b;
      var { id: drawerId } = _a, rest = __rest(_a, ["id"]);
      const drawerIndex = this.drawers.findIndex(({ id }) => id === drawerId);
      const oldDrawerConfig = (_b = this.drawers) === null || _b === void 0 ? void 0 : _b[drawerIndex];
      if (!oldDrawerConfig) {
        throw new Error(`[AwsUi] [runtime drawers] drawer with id ${drawerId} not found`);
      }
      const drawers = this.drawers.slice();
      const updatedDrawer = Object.assign({}, oldDrawerConfig);
      for (const key of updatableProperties) {
        if (key in rest) {
          updatedDrawer[key] = rest[key];
        }
      }
      drawers[drawerIndex] = updatedDrawer;
      this.drawers = drawers;
      this.scheduleUpdate();
    };
    this.onDrawersRegistered = (listener) => {
      if (this.drawersRegistrationListener !== null) {
        reportRuntimeApiWarning("app-layout-drawers", "multiple app layout instances detected when calling onDrawersRegistered");
      }
      this.drawersRegistrationListener = listener;
      this.scheduleUpdate();
      return () => {
        this.drawersRegistrationListener = null;
      };
    };
    this.clearRegisteredDrawers = () => {
      this.drawers = [];
    };
    this.onDrawerOpened = (listener) => {
      if (this.drawerOpenedListener !== null) {
        reportRuntimeApiWarning("app-layout-drawers", "multiple app layout instances detected when calling onDrawerOpened");
      }
      this.drawerOpenedListener = listener;
      return () => {
        this.drawerOpenedListener = null;
      };
    };
    this.onDrawerClosed = (listener) => {
      if (this.drawerClosedListener !== null) {
        reportRuntimeApiWarning("app-layout-drawers", "multiple app layout instances detected when calling onDrawerClosed");
      }
      this.drawerClosedListener = listener;
      return () => {
        this.drawerClosedListener = null;
      };
    };
    this.openDrawer = (drawerId, params) => {
      var _a;
      (_a = this.drawerOpenedListener) === null || _a === void 0 ? void 0 : _a.call(this, drawerId, params);
    };
    this.closeDrawer = (drawerId, params) => {
      var _a;
      (_a = this.drawerClosedListener) === null || _a === void 0 ? void 0 : _a.call(this, drawerId, params);
    };
  }
  installPublic(api = {}) {
    var _a, _b, _c, _d;
    (_a = api.registerDrawer) !== null && _a !== void 0 ? _a : api.registerDrawer = this.registerDrawer;
    (_b = api.updateDrawer) !== null && _b !== void 0 ? _b : api.updateDrawer = this.updateDrawer;
    (_c = api.openDrawer) !== null && _c !== void 0 ? _c : api.openDrawer = this.openDrawer;
    (_d = api.closeDrawer) !== null && _d !== void 0 ? _d : api.closeDrawer = this.closeDrawer;
    return api;
  }
  installInternal(internalApi = {}) {
    var _a, _b, _c, _d;
    (_a = internalApi.clearRegisteredDrawers) !== null && _a !== void 0 ? _a : internalApi.clearRegisteredDrawers = this.clearRegisteredDrawers;
    (_b = internalApi.onDrawersRegistered) !== null && _b !== void 0 ? _b : internalApi.onDrawersRegistered = this.onDrawersRegistered;
    (_c = internalApi.onDrawerOpened) !== null && _c !== void 0 ? _c : internalApi.onDrawerOpened = this.onDrawerOpened;
    (_d = internalApi.onDrawerClosed) !== null && _d !== void 0 ? _d : internalApi.onDrawerClosed = this.onDrawerClosed;
    return internalApi;
  }
};

// node_modules/@cloudscape-design/components/internal/plugins/controllers/shared-react-contexts.js
var _SharedReactContexts_registeredContexts;
var SharedReactContexts = class {
  constructor() {
    _SharedReactContexts_registeredContexts.set(this, /* @__PURE__ */ new WeakMap());
    this.createContext = (ReactInstance, contextName) => {
      let contexts = __classPrivateFieldGet(this, _SharedReactContexts_registeredContexts, "f").get(ReactInstance);
      if (!contexts) {
        contexts = /* @__PURE__ */ new Map();
        __classPrivateFieldGet(this, _SharedReactContexts_registeredContexts, "f").set(ReactInstance, contexts);
      }
      let cachedContext = contexts.get(contextName);
      if (!cachedContext) {
        cachedContext = ReactInstance.createContext(void 0);
        contexts.set(contextName, cachedContext);
      }
      return cachedContext;
    };
  }
  installInternal(internalApi = {}) {
    var _a;
    (_a = internalApi.createContext) !== null && _a !== void 0 ? _a : internalApi.createContext = this.createContext;
    return internalApi;
  }
};
_SharedReactContexts_registeredContexts = /* @__PURE__ */ new WeakMap();

// node_modules/@cloudscape-design/components/internal/plugins/api.js
var storageKey = Symbol.for("awsui-plugin-api");
function findUpApi(currentWindow) {
  try {
    if (currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow[storageKey]) {
      return currentWindow[storageKey];
    }
    if (!currentWindow || currentWindow.parent === currentWindow) {
      return void 0;
    }
    return findUpApi(currentWindow.parent);
  } catch (ex) {
    return void 0;
  }
}
function loadApi() {
  if (typeof window === "undefined") {
    return installApi({});
  }
  const win = window;
  const existingApi = findUpApi(win);
  if (!existingApi) {
    reportRuntimeApiLoadMetric();
  }
  win[storageKey] = installApi(existingApi !== null && existingApi !== void 0 ? existingApi : {});
  return win[storageKey];
}
var { awsuiPlugins, awsuiPluginsInternal } = loadApi();
function installApi(api) {
  var _a, _b;
  (_a = api.awsuiPlugins) !== null && _a !== void 0 ? _a : api.awsuiPlugins = {};
  (_b = api.awsuiPluginsInternal) !== null && _b !== void 0 ? _b : api.awsuiPluginsInternal = {};
  const appLayoutDrawers = new DrawersController();
  api.awsuiPlugins.appLayout = appLayoutDrawers.installPublic(api.awsuiPlugins.appLayout);
  api.awsuiPluginsInternal.appLayout = appLayoutDrawers.installInternal(api.awsuiPluginsInternal.appLayout);
  const appLayoutController = new AppLayoutWidgetController();
  api.awsuiPluginsInternal.appLayoutWidget = appLayoutController.installInternal(api.awsuiPluginsInternal.appLayoutWidget);
  const alertActions = new ActionButtonsController();
  api.awsuiPlugins.alert = alertActions.installPublic(api.awsuiPlugins.alert);
  api.awsuiPluginsInternal.alert = alertActions.installInternal(api.awsuiPluginsInternal.alert);
  const alertContent = new AlertFlashContentController();
  api.awsuiPlugins.alertContent = alertContent.installPublic(api.awsuiPlugins.alertContent);
  api.awsuiPluginsInternal.alertContent = alertContent.installInternal(api.awsuiPluginsInternal.alertContent);
  const flashContent = new AlertFlashContentController();
  api.awsuiPlugins.flashContent = flashContent.installPublic(api.awsuiPlugins.flashContent);
  api.awsuiPluginsInternal.flashContent = flashContent.installInternal(api.awsuiPluginsInternal.flashContent);
  const flashbarActions = new ActionButtonsController();
  api.awsuiPlugins.flashbar = flashbarActions.installPublic(api.awsuiPlugins.flashbar);
  api.awsuiPluginsInternal.flashbar = flashbarActions.installInternal(api.awsuiPluginsInternal.flashbar);
  const breadcrumbs = new BreadcrumbsController();
  api.awsuiPluginsInternal.breadcrumbs = breadcrumbs.installInternal(api.awsuiPluginsInternal.breadcrumbs);
  const sharedReactContexts = new SharedReactContexts();
  api.awsuiPluginsInternal.sharedReactContexts = sharedReactContexts.installInternal(api.awsuiPluginsInternal.sharedReactContexts);
  return api;
}

// node_modules/@cloudscape-design/components/internal/plugins/helpers/use-discovered-action.js
var import_react2 = __toESM(require_react());
function RuntimeActionWrapper({ mountContent, unmountContent, context }) {
  const ref = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    const container = ref.current;
    mountContent(container, context);
    return () => {
      unmountContent(container);
    };
  }, []);
  return import_react2.default.createElement("div", { ref });
}
function convertRuntimeAction(action, context) {
  if (!action) {
    return null;
  }
  return import_react2.default.createElement(RuntimeActionWrapper, { key: action.id + "-" + context.type, context, mountContent: action.mountContent, unmountContent: action.unmountContent });
}
function createUseDiscoveredAction(onActionRegistered) {
  return function useDiscoveredAction(type) {
    const [discoveredActions, setDiscoveredActions] = (0, import_react2.useState)([]);
    const headerRef = (0, import_react2.useRef)(null);
    const contentRef = (0, import_react2.useRef)(null);
    (0, import_react2.useEffect)(() => {
      return onActionRegistered((actions) => {
        setDiscoveredActions(actions.map((action) => convertRuntimeAction(action, { type, headerRef, contentRef })));
      });
    }, [type]);
    return { discoveredActions, headerRef, contentRef };
  };
}

// node_modules/@cloudscape-design/components/internal/plugins/helpers/use-discovered-content.js
var import_react3 = __toESM(require_react());
function createUseDiscoveredContent(componentName, controller) {
  return function useDiscoveredContent({ type, header, children }) {
    const headerRef = (0, import_react3.useRef)(null);
    const contentRef = (0, import_react3.useRef)(null);
    const replacementHeaderRef = (0, import_react3.useRef)(null);
    const replacementContentRef = (0, import_react3.useRef)(null);
    const [initialHidden, setInitialHidden] = (0, import_react3.useState)(() => controller.initialCheck({
      type,
      header,
      content: children
    }));
    const [headerReplacementType, setFoundHeaderReplacement] = (0, import_react3.useState)("original");
    const [contentReplacementType, setFoundContentReplacement] = (0, import_react3.useState)("original");
    const mountedProvider = (0, import_react3.useRef)();
    (0, import_react3.useEffect)(() => {
      const context = { type, headerRef, contentRef };
      setInitialHidden(false);
      return controller.onContentRegistered((provider) => {
        let mounted = true;
        function checkMounted(methodName) {
          if (!mounted) {
            reportRuntimeApiWarning(`${componentName}-content-replacer`, `"${methodName}" called after component unmounted`);
            return false;
          }
          return true;
        }
        mountedProvider.current = provider.runReplacer(context, {
          hideHeader() {
            if (checkMounted("hideHeader")) {
              setFoundHeaderReplacement("remove");
            }
          },
          restoreHeader() {
            if (checkMounted("restoreHeader")) {
              setFoundHeaderReplacement("original");
            }
          },
          replaceHeader(replacer) {
            if (checkMounted("replaceHeader")) {
              replacer(replacementHeaderRef.current);
              setFoundHeaderReplacement("replaced");
            }
          },
          hideContent() {
            if (checkMounted("hideContent")) {
              setFoundContentReplacement("remove");
            }
          },
          restoreContent() {
            if (checkMounted("restoreContent")) {
              setFoundContentReplacement("original");
            }
          },
          replaceContent(replacer) {
            if (checkMounted("replaceContent")) {
              replacer(replacementContentRef.current);
              setFoundContentReplacement("replaced");
            }
          }
        });
        return () => {
          var _a;
          (_a = mountedProvider.current) === null || _a === void 0 ? void 0 : _a.unmount({
            replacementHeaderContainer: replacementHeaderRef.current,
            replacementContentContainer: replacementContentRef.current
          });
          mounted = false;
        };
      });
    }, [type]);
    (0, import_react3.useEffect)(() => {
      var _a;
      (_a = mountedProvider.current) === null || _a === void 0 ? void 0 : _a.update();
    }, [type, header, children]);
    return {
      initialHidden,
      headerReplacementType,
      contentReplacementType,
      headerRef,
      replacementHeaderRef,
      contentRef,
      replacementContentRef
    };
  };
}

export {
  ActionsWrapper,
  sortByPriority,
  metrics,
  awsuiPluginsInternal,
  createUseDiscoveredAction,
  createUseDiscoveredContent
};
//# sourceMappingURL=chunk-2V4IX7V5.js.map
