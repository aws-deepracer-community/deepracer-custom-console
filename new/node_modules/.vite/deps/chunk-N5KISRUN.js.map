{
  "version": 3,
  "sources": ["../../src/flashbar/index.tsx", "../../src/flashbar/collapsible-flashbar.tsx", "../../src/internal/animate.ts", "../../@cloudscape-design/components/flashbar/analytics-metadata/styles.css.js", "../../src/flashbar/analytics-metadata/utils.ts", "../../src/flashbar/common.tsx", "../../src/flashbar/flash.tsx", "../../src/flashbar/utils.ts", "../../src/flashbar/internal/analytics.ts", "../../@cloudscape-design/components/flashbar/styles.css.js", "../../src/flashbar/non-collapsible-flashbar.tsx", "../../src/flashbar/constant.ts"],
  "sourcesContent": ["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect } from 'react';\n\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport CollapsibleFlashbar from './collapsible-flashbar';\nimport { FlashbarProps } from './interfaces';\nimport { sendRenderMetric } from './internal/analytics';\nimport NonCollapsibleFlashbar from './non-collapsible-flashbar';\n\nexport { FlashbarProps };\n\nexport default function Flashbar(props: FlashbarProps) {\n  useEffect(() => {\n    if (props.items.length > 0) {\n      sendRenderMetric(props.items);\n    }\n  }, [props.items]);\n\n  if (props.stackItems) {\n    return <CollapsibleFlashbar {...props} />;\n  } else {\n    return <NonCollapsibleFlashbar {...props} />;\n  }\n}\n\napplyDisplayName(Flashbar, 'Flashbar');\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { ReactNode, useCallback, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport { TransitionGroup } from 'react-transition-group';\nimport clsx from 'clsx';\n\nimport { findUpUntil } from '@cloudscape-design/component-toolkit/dom';\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\n\nimport { useInternalI18n } from '../i18n/context';\nimport { IconProps } from '../icon/interfaces';\nimport InternalIcon from '../icon/internal';\nimport { animate, getDOMRects } from '../internal/animate';\nimport { Transition } from '../internal/components/transition';\nimport { getVisualContextClassname } from '../internal/components/visual-context';\nimport customCssProps from '../internal/generated/custom-css-properties';\nimport { useEffectOnUpdate } from '../internal/hooks/use-effect-on-update';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { scrollElementIntoView } from '../internal/utils/scrollable-containers';\nimport { throttle } from '../internal/utils/throttle';\nimport { GeneratedAnalyticsMetadataFlashbarExpand } from './analytics-metadata/interfaces';\nimport { getComponentsAnalyticsMetadata, getItemAnalyticsMetadata } from './analytics-metadata/utils';\nimport { useFlashbar } from './common';\nimport { Flash, focusFlashById } from './flash';\nimport { FlashbarProps } from './interfaces';\nimport { sendToggleMetric } from './internal/analytics';\nimport { counterTypes, getFlashTypeCount, getItemColor, getVisibleCollapsedItems, StackableItem } from './utils';\n\nimport styles from './styles.css.js';\n\n// If the number of items is equal or less than this value,\n// the toggle element will not be displayed and the Flashbar will look like a regular single-item Flashbar.\nconst maxNonCollapsibleItems = 1;\n\nconst resizeListenerThrottleDelay = 100;\n\nexport default function CollapsibleFlashbar({ items, ...restProps }: FlashbarProps) {\n  const [enteringItems, setEnteringItems] = useState<ReadonlyArray<FlashbarProps.MessageDefinition>>([]);\n  const [exitingItems, setExitingItems] = useState<ReadonlyArray<FlashbarProps.MessageDefinition>>([]);\n  const [isFlashbarStackExpanded, setIsFlashbarStackExpanded] = useState(false);\n\n  const getElementsToAnimate = useCallback(() => {\n    const flashElements = isFlashbarStackExpanded ? expandedItemRefs.current : collapsedItemRefs.current;\n    return { ...flashElements, notificationBar: notificationBarRef.current };\n  }, [isFlashbarStackExpanded]);\n\n  const prepareAnimations = useCallback(() => {\n    const rects = getDOMRects(getElementsToAnimate());\n    setInitialAnimationState(rects);\n  }, [getElementsToAnimate]);\n\n  const { baseProps, breakpoint, isReducedMotion, isVisualRefresh, mergedRef, ref } = useFlashbar({\n    items,\n    ...restProps,\n    onItemsAdded: newItems => {\n      setEnteringItems([...enteringItems, ...newItems]);\n    },\n    onItemsChanged: options => {\n      // If not all items have ID, we can still animate collapse/expand transitions\n      // because we can rely on each item's index in the original array,\n      // but we can't do that when elements are added or removed, since the index changes.\n      if (options?.allItemsHaveId && !options?.isReducedMotion) {\n        prepareAnimations();\n      }\n    },\n    onItemsRemoved: removedItems => {\n      setExitingItems([...exitingItems, ...removedItems]);\n    },\n  });\n\n  const collapsedItemRefs = useRef<Record<string, HTMLElement | null>>({});\n  const expandedItemRefs = useRef<Record<string, HTMLElement | null>>({});\n  const [initialAnimationState, setInitialAnimationState] = useState<Record<string, DOMRect> | null>(null);\n  const listElementRef = useRef<HTMLUListElement | null>(null);\n  const notificationBarRef = useRef<HTMLDivElement | null>(null);\n  const [transitioning, setTransitioning] = useState(false);\n  const flashbarElementId = useUniqueId('flashbar');\n  const itemCountElementId = useUniqueId('item-count');\n\n  if (items.length <= maxNonCollapsibleItems && isFlashbarStackExpanded) {\n    setIsFlashbarStackExpanded(false);\n  }\n\n  const animateFlash = !isReducedMotion;\n\n  function toggleCollapseExpand() {\n    sendToggleMetric(items.length, !isFlashbarStackExpanded);\n    if (!isReducedMotion) {\n      prepareAnimations();\n    }\n    setIsFlashbarStackExpanded(prev => !prev);\n  }\n\n  useLayoutEffect(() => {\n    if (isFlashbarStackExpanded && items?.length) {\n      const mostRecentItem = items[0];\n      if (mostRecentItem.id !== undefined) {\n        focusFlashById(ref.current, mostRecentItem.id);\n      }\n    }\n    // Run this after expanding, but not every time the items change.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isFlashbarStackExpanded]);\n\n  // When collapsing, scroll up if necessary to avoid losing track of the focused button\n  useEffectOnUpdate(() => {\n    if (!isFlashbarStackExpanded && notificationBarRef.current) {\n      scrollElementIntoView(notificationBarRef.current);\n    }\n  }, [isFlashbarStackExpanded]);\n\n  const updateBottomSpacing = useMemo(\n    () =>\n      throttle(() => {\n        // Allow vertical space between Flashbar and page bottom only when the Flashbar is reaching the end of the page,\n        // otherwise avoid spacing with eventual sticky elements below.\n        const listElement = listElementRef?.current;\n        const flashbar = listElement?.parentElement;\n        if (listElement && flashbar) {\n          // Make sure the bottom padding is present when we make the calculations,\n          // then we might decide to remove it or not.\n          flashbar.classList.remove(styles.floating);\n          const windowHeight = window.innerHeight;\n          // Take the parent region into account if using the App Layout, because it might have additional margins.\n          // Otherwise we use the Flashbar component for this calculation.\n          const outerElement = findUpUntil(flashbar, element => element.getAttribute('role') === 'region') || flashbar;\n          const applySpacing =\n            isFlashbarStackExpanded && Math.ceil(outerElement.getBoundingClientRect().bottom) >= windowHeight;\n          if (!applySpacing) {\n            flashbar.classList.add(styles.floating);\n          }\n        }\n      }, resizeListenerThrottleDelay),\n    [isFlashbarStackExpanded]\n  );\n\n  useLayoutEffect(() => {\n    window.addEventListener('resize', updateBottomSpacing);\n    return () => {\n      window.removeEventListener('resize', updateBottomSpacing);\n      updateBottomSpacing.cancel();\n    };\n  }, [updateBottomSpacing]);\n\n  const { i18nStrings } = restProps;\n\n  const i18n = useInternalI18n('flashbar');\n  const ariaLabel = i18n('i18nStrings.ariaLabel', i18nStrings?.ariaLabel);\n  const notificationBarText = i18n('i18nStrings.notificationBarText', i18nStrings?.notificationBarText);\n  const notificationBarAriaLabel = i18n('i18nStrings.notificationBarAriaLabel', i18nStrings?.notificationBarAriaLabel);\n  const iconAriaLabels = {\n    errorIconAriaLabel: i18n('i18nStrings.errorIconAriaLabel', i18nStrings?.errorIconAriaLabel),\n    inProgressIconAriaLabel: i18n('i18nStrings.inProgressIconAriaLabel', i18nStrings?.inProgressIconAriaLabel),\n    infoIconAriaLabel: i18n('i18nStrings.infoIconAriaLabel', i18nStrings?.infoIconAriaLabel),\n    successIconAriaLabel: i18n('i18nStrings.successIconAriaLabel', i18nStrings?.successIconAriaLabel),\n    warningIconAriaLabel: i18n('i18nStrings.warningIconAriaLabel', i18nStrings?.warningIconAriaLabel),\n  };\n\n  useLayoutEffect(() => {\n    // When `useLayoutEffect` is called, the DOM is updated but has not been painted yet,\n    // so it's a good moment to trigger animations that will make calculations based on old and new DOM state.\n    // The old state is kept in `initialAnimationState`\n    // and the new state can be retrieved from the current DOM elements.\n\n    if (initialAnimationState) {\n      updateBottomSpacing();\n\n      animate({\n        elements: getElementsToAnimate(),\n        oldState: initialAnimationState,\n        newElementInitialState: ({ top }) => ({ scale: 0.9, y: -0.2 * top }),\n        onTransitionsEnd: () => setTransitioning(false),\n      });\n\n      setTransitioning(true);\n      setInitialAnimationState(null);\n    }\n  }, [updateBottomSpacing, getElementsToAnimate, initialAnimationState, isFlashbarStackExpanded]);\n\n  const isCollapsible = items.length > maxNonCollapsibleItems;\n\n  const countByType = getFlashTypeCount(items);\n\n  const numberOfColorsInStack = new Set(items.map(getItemColor)).size;\n  const maxSlots = Math.max(numberOfColorsInStack, 3);\n  const stackDepth = Math.min(maxSlots, items.length);\n\n  const itemsToShow = isFlashbarStackExpanded\n    ? items.map((item, index) => ({ ...item, expandedIndex: index }))\n    : getVisibleCollapsedItems(items, stackDepth).map((item: StackableItem, index: number) => ({\n        ...item,\n        collapsedIndex: index,\n      }));\n\n  const getItemId = (item: StackableItem | FlashbarProps.MessageDefinition) =>\n    item.id ?? (item as StackableItem).expandedIndex ?? 0;\n\n  // This check allows us to use the standard \"enter\" Transition only when the notification was not existing before.\n  // If instead it was moved to the top of the stack but was already present in the array\n  // (e.g, after dismissing another notification),\n  // we need to use different, more custom and more controlled animations.\n  const hasEntered = (item: StackableItem | FlashbarProps.MessageDefinition) =>\n    enteringItems.some(_item => _item.id && _item.id === item.id);\n  const hasLeft = (item: StackableItem | FlashbarProps.MessageDefinition) => !('expandedIndex' in item);\n  const hasEnteredOrLeft = (item: StackableItem | FlashbarProps.MessageDefinition) => hasEntered(item) || hasLeft(item);\n\n  const showInnerContent = (item: StackableItem | FlashbarProps.MessageDefinition) =>\n    isFlashbarStackExpanded || hasLeft(item) || ('expandedIndex' in item && item.expandedIndex === 0);\n\n  const shouldUseStandardAnimation = (item: StackableItem, index: number) => index === 0 && hasEnteredOrLeft(item);\n\n  const getAnimationElementId = (item: StackableItem) => `flash-${getItemId(item)}`;\n\n  const renderList = () => (\n    <ul\n      ref={listElementRef}\n      className={clsx(\n        styles['flash-list'],\n        isFlashbarStackExpanded ? styles.expanded : styles.collapsed,\n        transitioning && styles['animation-running'],\n        initialAnimationState && styles['animation-ready'],\n        isVisualRefresh && styles['visual-refresh']\n      )}\n      id={flashbarElementId}\n      aria-label={ariaLabel}\n      aria-describedby={isCollapsible ? itemCountElementId : undefined}\n      style={\n        !isFlashbarStackExpanded || transitioning\n          ? {\n              [customCssProps.flashbarStackDepth]: stackDepth,\n            }\n          : undefined\n      }\n    >\n      <ListWrapper withMotion={!isReducedMotion}>\n        {itemsToShow.map((item: StackableItem, index: number) => (\n          <Transition\n            key={getItemId(item)}\n            in={!hasLeft(item)}\n            onStatusChange={status => {\n              if (status === 'entered') {\n                setEnteringItems([]);\n              } else if (status === 'exited') {\n                setExitingItems([]);\n              }\n            }}\n          >\n            {(state: string, transitionRootElement: React.Ref<HTMLDivElement> | undefined) => (\n              <li\n                aria-hidden={!showInnerContent(item)}\n                className={\n                  showInnerContent(item)\n                    ? clsx(\n                        styles['flash-list-item'],\n                        !isFlashbarStackExpanded && styles.item,\n                        !collapsedItemRefs.current[getAnimationElementId(item)] && styles['expanded-only']\n                      )\n                    : clsx(styles.flash, styles[`flash-type-${item.type ?? 'info'}`], styles.item)\n                }\n                ref={element => {\n                  if (isFlashbarStackExpanded) {\n                    expandedItemRefs.current[getAnimationElementId(item)] = element;\n                  } else {\n                    collapsedItemRefs.current[getAnimationElementId(item)] = element;\n                  }\n                }}\n                style={\n                  !isFlashbarStackExpanded || transitioning\n                    ? {\n                        [customCssProps.flashbarStackIndex]:\n                          (item as StackableItem).collapsedIndex ?? (item as StackableItem).expandedIndex ?? index,\n                      }\n                    : undefined\n                }\n                key={getItemId(item)}\n                {...getAnalyticsMetadataAttribute(getItemAnalyticsMetadata(index + 1, item.type || 'info', item.id))}\n              >\n                {showInnerContent(item) && (\n                  <Flash\n                    // eslint-disable-next-line react/forbid-component-props\n                    className={clsx(\n                      animateFlash && styles['flash-with-motion'],\n                      isVisualRefresh && styles['flash-refresh']\n                    )}\n                    key={getItemId(item)}\n                    ref={shouldUseStandardAnimation(item, index) ? transitionRootElement : undefined}\n                    transitionState={shouldUseStandardAnimation(item, index) ? state : undefined}\n                    i18nStrings={iconAriaLabels}\n                    {...item}\n                  />\n                )}\n              </li>\n            )}\n          </Transition>\n        ))}\n      </ListWrapper>\n    </ul>\n  );\n\n  return (\n    <div\n      {...baseProps}\n      className={clsx(\n        baseProps.className,\n        styles.flashbar,\n        styles[`breakpoint-${breakpoint}`],\n        styles.stack,\n        isCollapsible && styles.collapsible,\n        items.length === 2 && styles['short-list'],\n        isFlashbarStackExpanded && styles.expanded,\n        isVisualRefresh && styles['visual-refresh']\n      )}\n      ref={mergedRef}\n      {...getAnalyticsMetadataAttribute(getComponentsAnalyticsMetadata(items.length, true, isFlashbarStackExpanded))}\n    >\n      {isFlashbarStackExpanded && renderList()}\n      {isCollapsible && (\n        <div\n          className={clsx(\n            styles['notification-bar'],\n            isVisualRefresh && styles['visual-refresh'],\n            isFlashbarStackExpanded ? styles.expanded : styles.collapsed,\n            transitioning && styles['animation-running'],\n            items.length === 2 && styles['short-list'],\n            getVisualContextClassname('flashbar') // Visual context is needed for focus ring to be white\n          )}\n          onClick={toggleCollapseExpand}\n          ref={notificationBarRef}\n          {...getAnalyticsMetadataAttribute({\n            action: 'expand',\n            detail: {\n              label: 'h2',\n              expanded: `${!isFlashbarStackExpanded}`,\n            },\n          } as GeneratedAnalyticsMetadataFlashbarExpand)}\n        >\n          <span aria-live=\"polite\" className={styles.status} role=\"status\" id={itemCountElementId}>\n            {notificationBarText && <h2 className={styles.header}>{notificationBarText}</h2>}\n            <span className={styles['item-count']}>\n              {counterTypes.map(({ type, labelName, iconName }) => (\n                <NotificationTypeCount\n                  key={type}\n                  iconName={iconName}\n                  label={iconAriaLabels[labelName]}\n                  count={countByType[type]}\n                />\n              ))}\n            </span>\n          </span>\n          <button\n            aria-controls={flashbarElementId}\n            aria-describedby={itemCountElementId}\n            aria-expanded={isFlashbarStackExpanded}\n            aria-label={notificationBarAriaLabel}\n            className={clsx(styles.button, isFlashbarStackExpanded && styles.expanded)}\n          >\n            <InternalIcon className={styles.icon} size=\"normal\" name=\"angle-down\" />\n          </button>\n        </div>\n      )}\n      {!isFlashbarStackExpanded && renderList()}\n    </div>\n  );\n}\n\nconst NotificationTypeCount = ({\n  iconName,\n  label,\n  count,\n}: {\n  iconName: IconProps.Name;\n  label?: string;\n  count: number;\n}) => {\n  return (\n    <span className={styles['type-count']}>\n      <span aria-label={label} role=\"img\">\n        <span title={label} aria-hidden=\"true\">\n          <InternalIcon name={iconName} />\n        </span>\n      </span>\n      <span className={styles['count-number']}>{count}</span>\n    </span>\n  );\n};\n\nconst ListWrapper = ({ children, withMotion }: { children: ReactNode; withMotion: boolean }) =>\n  withMotion ? <TransitionGroup component={null}>{children}</TransitionGroup> : <>{children}</>;\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nexport function getDOMRects(elements: Record<string, HTMLElement | null>) {\n  const rects: Record<string, DOMRect> = {};\n  for (const id in elements) {\n    const element = elements[id];\n    if (element) {\n      rects[id] = element.getBoundingClientRect();\n    }\n  }\n  return rects;\n}\n\n/*\n  Animate DOM elements based on the FLIP technique\n  - https://aerotwist.com/blog/flip-your-animations/\n  - https://css-tricks.com/animating-layouts-with-the-flip-technique/\n\n  This can be useful when the initial dimensions or position of the element is not known,\n  so the initial offset or scaling needs to be retrieved via JS.\n\n  Caveat: this currently does not support elements having CSS transforms in the end state.\n  These would be overridden in the animation instead of combined.\n */\nexport function animate({\n  oldState,\n  elements,\n  onTransitionsEnd,\n  newElementInitialState,\n}: {\n  elements: Record<string, HTMLElement | null>;\n  oldState: Record<string, DOMRect>;\n  onTransitionsEnd?: () => void;\n  newElementInitialState?: (newRect: DOMRect) => { scale?: number; y?: number };\n}) {\n  // First, apply the transform that will make the elements \"look like\" in the start position\n  for (const id in elements) {\n    const element = elements[id];\n    const oldRect = oldState[id];\n    if (element) {\n      const newRect = element.getBoundingClientRect();\n      const noOpTransform = { scale: 1, x: 0, y: 0 };\n      // Calculate initial position.\n      // If the element didn't exist previously, use the newElementInitialState function if provided.\n      // If not, default to no transitions (scale: 1, y: 0)\n      const calculatedInverseTransform = oldRect\n        ? {\n            scale: oldRect.width / newRect.width,\n            x: (oldRect.left + oldRect.right) / 2 - (newRect.left + newRect.right) / 2,\n            y: (oldRect.top + oldRect.bottom) / 2 - (newRect.top + newRect.bottom) / 2,\n          }\n        : newElementInitialState\n          ? newElementInitialState(newRect)\n          : {};\n      const inverseTransform = { ...noOpTransform, ...calculatedInverseTransform };\n      // Apply this initial change, without animating\n      element.style.transitionProperty = 'none';\n      element.style.transform = `scale(${inverseTransform.scale}) translate(${inverseTransform.x}px, ${inverseTransform.y}px)`;\n      if (!oldRect) {\n        // If the element didn't exist, then fade it in\n        // (besides any other possibly defined transitions based on `newElementInitialState`)\n        element.style.opacity = '0';\n      }\n    }\n  }\n\n  // Animate from the initial state to the end state\n  requestAnimationFrame(() => {\n    const ongoingAnimations = new Set();\n    for (const id in elements) {\n      const element = elements[id];\n      if (element) {\n        const oldRect = oldState[id];\n        if (oldRect) {\n          // Animate from here on\n          element.style.transitionProperty = `transform`;\n          // Unset inline CSS transforms so that the final state is applied\n          element.style.transform = '';\n        } else {\n          // If the element didn't exist previously, fade in as well\n          element.style.transitionProperty = `transform, opacity`;\n          element.style.transform = '';\n          element.style.opacity = '';\n        }\n        const onTransitionStart = (event: TransitionEvent) => {\n          if (event.target === element) {\n            ongoingAnimations.add(id);\n            element.removeEventListener('transitionstart', onTransitionStart);\n          }\n        };\n        const onTransitionEnd = (event: TransitionEvent) => {\n          if (event.target === element) {\n            // Clean up remaining inline styles\n            element.style.transitionProperty = '';\n            element.removeEventListener('transitionend', onTransitionEnd);\n            if (onTransitionsEnd) {\n              ongoingAnimations.delete(id);\n              if (ongoingAnimations.size === 0) {\n                onTransitionsEnd();\n              }\n            }\n          }\n        };\n        element.addEventListener('transitionstart', onTransitionStart);\n        element.addEventListener('transitionend', onTransitionEnd);\n      }\n    }\n  });\n}\n", "\n    import './styles.scoped.css';\n    export default {\n  \"flash-header\": \"awsui_flash-header_4c95g_vov7p_5\"\n};\n  ", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { GeneratedAnalyticsMetadataFragment } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\n\nimport { GeneratedAnalyticsMetadataFlashbarComponent } from './interfaces';\n\nimport analyticsSelectors from './styles.css.js';\n\nexport const getComponentsAnalyticsMetadata = (\n  itemsCount: number,\n  stackItems: boolean,\n  expanded?: boolean\n): { component: GeneratedAnalyticsMetadataFlashbarComponent } => {\n  const metadata: { component: GeneratedAnalyticsMetadataFlashbarComponent } = {\n    component: {\n      name: 'awsui.Flashbar',\n      label: stackItems ? { root: 'self', selector: 'ul' } : { root: 'self' },\n      properties: {\n        itemsCount: `${itemsCount}`,\n        stackItems: `${stackItems}`,\n      },\n    },\n  };\n\n  if (expanded !== undefined) {\n    metadata.component.properties.expanded = `${expanded}`;\n  }\n  return metadata;\n};\n\nexport const getItemAnalyticsMetadata = (\n  position: number,\n  type: string,\n  id?: string\n): GeneratedAnalyticsMetadataFragment => {\n  const baseMetadata: GeneratedAnalyticsMetadataFlashbarComponent['innerContext'] = {\n    itemLabel: `.${analyticsSelectors['flash-header']}`,\n    itemPosition: `${position}`,\n    itemType: type,\n  };\n  if (id) {\n    baseMetadata.itemId = id;\n  }\n  return {\n    component: { innerContext: baseMetadata },\n  };\n};\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useMemo, useRef, useState } from 'react';\n\nimport { useReducedMotion, warnOnce } from '@cloudscape-design/component-toolkit/internal';\n\nimport { getBaseProps } from '../internal/base-component';\nimport { useContainerBreakpoints } from '../internal/hooks/container-queries';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { isDevelopment } from '../internal/is-development';\nimport { focusFlashById } from './flash';\nimport { FlashbarProps } from './interfaces';\n\n// Common logic for collapsible and non-collapsible Flashbar\nexport function useFlashbar({\n  items,\n  onItemsAdded,\n  onItemsChanged,\n  onItemsRemoved,\n  ...restProps\n}: FlashbarProps & {\n  onItemsAdded?: (items: FlashbarProps.MessageDefinition[]) => void;\n  onItemsRemoved?: (items: FlashbarProps.MessageDefinition[]) => void;\n  onItemsChanged?: (options?: { allItemsHaveId?: boolean; isReducedMotion?: boolean }) => void;\n}) {\n  const { __internalRootRef } = useBaseComponent('Flashbar', {\n    props: { stackItems: restProps.stackItems },\n  });\n  const allItemsHaveId = useMemo(() => items.every(item => 'id' in item), [items]);\n  const baseProps = getBaseProps(restProps);\n  const ref = useRef<HTMLDivElement | null>(null);\n  const [breakpoint, breakpointRef] = useContainerBreakpoints(['xs']);\n  const mergedRef = useMergeRefs(ref, breakpointRef, __internalRootRef);\n  const isReducedMotion = useReducedMotion(ref);\n  const isVisualRefresh = useVisualRefresh();\n  const [previousItems, setPreviousItems] = useState<ReadonlyArray<FlashbarProps.MessageDefinition>>(items);\n  const [nextFocusId, setNextFocusId] = useState<string | null>(null);\n\n  if (isDevelopment) {\n    if (items?.some(item => item.ariaRole === 'alert' && !item.id)) {\n      warnOnce(\n        'Flashbar',\n        `You provided \\`ariaRole=\"alert\"\\` for a flashbar item without providing an \\`id\\`. Focus will not be moved to the newly added flash message.`\n      );\n    }\n  }\n\n  // Track new or removed item IDs in state to only trigger focus changes for newly added items.\n  // https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\n  if (items) {\n    const newItems = items.filter(({ id }) => id && !previousItems.some(item => item.id === id));\n    const removedItems = previousItems.filter(({ id }) => id && !items.some(item => item.id === id));\n    if (newItems.length > 0 || removedItems.length > 0) {\n      setPreviousItems(items);\n      onItemsAdded?.(newItems);\n      onItemsRemoved?.(removedItems);\n      onItemsChanged?.({ allItemsHaveId, isReducedMotion });\n\n      const newFocusItems = newItems.filter(({ ariaRole }) => ariaRole === 'alert');\n      if (newFocusItems.length > 0) {\n        setNextFocusId(newFocusItems[0].id!);\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (nextFocusId) {\n      focusFlashById(ref.current, nextFocusId);\n    }\n  }, [nextFocusId, ref]);\n\n  return {\n    allItemsHaveId,\n    baseProps,\n    breakpoint,\n    isReducedMotion,\n    isVisualRefresh,\n    mergedRef,\n    ref,\n  };\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { useComponentMetadata, warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\n\nimport { ActionsWrapper } from '../alert/actions-wrapper';\nimport { ButtonProps } from '../button/interfaces';\nimport { InternalButton } from '../button/internal';\nimport InternalIcon from '../icon/internal';\nimport { DATA_ATTR_ANALYTICS_FLASHBAR } from '../internal/analytics/selectors';\nimport { BasePropsWithAnalyticsMetadata, getAnalyticsMetadataProps } from '../internal/base-component';\nimport { getVisualContextClassname } from '../internal/components/visual-context';\nimport { PACKAGE_VERSION } from '../internal/environment';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { isDevelopment } from '../internal/is-development';\nimport { awsuiPluginsInternal } from '../internal/plugins/api';\nimport { createUseDiscoveredAction, createUseDiscoveredContent } from '../internal/plugins/helpers';\nimport { throttle } from '../internal/utils/throttle';\nimport InternalLiveRegion from '../live-region/internal';\nimport InternalSpinner from '../spinner/internal';\nimport { GeneratedAnalyticsMetadataFlashbarDismiss } from './analytics-metadata/interfaces';\nimport { FlashbarProps } from './interfaces';\nimport { sendDismissMetric } from './internal/analytics';\nimport { FOCUS_THROTTLE_DELAY } from './utils';\n\nimport analyticsSelectors from './analytics-metadata/styles.css.js';\nimport styles from './styles.css.js';\n\nconst ICON_TYPES = {\n  success: 'status-positive',\n  warning: 'status-warning',\n  info: 'status-info',\n  error: 'status-negative',\n  'in-progress': 'status-in-progress',\n} as const;\n\nconst useDiscoveredAction = createUseDiscoveredAction(awsuiPluginsInternal.flashbar.onActionRegistered);\nconst useDiscoveredContent = createUseDiscoveredContent('flash', awsuiPluginsInternal.flashContent);\n\nfunction dismissButton(\n  dismissLabel: FlashbarProps.MessageDefinition['dismissLabel'],\n  onDismiss: FlashbarProps.MessageDefinition['onDismiss']\n) {\n  return (\n    <div\n      className={styles['dismiss-button-wrapper']}\n      {...getAnalyticsMetadataAttribute({\n        action: 'dismiss',\n      } as Partial<GeneratedAnalyticsMetadataFlashbarDismiss>)}\n    >\n      <InternalButton\n        onClick={onDismiss}\n        className={styles['dismiss-button']}\n        variant=\"flashbar-icon\"\n        iconName=\"close\"\n        formAction=\"none\"\n        ariaLabel={dismissLabel}\n      />\n    </div>\n  );\n}\n\nexport const focusFlashById = throttle(\n  (element: HTMLElement | null, itemId: string) => {\n    const selector = `[data-itemid=\"${CSS.escape(itemId)}\"] .${styles['flash-focus-container']}`;\n    element?.querySelector<HTMLElement>(selector)?.focus();\n  },\n  FOCUS_THROTTLE_DELAY,\n  { trailing: false }\n);\n\ninterface FlashProps extends FlashbarProps.MessageDefinition {\n  className: string;\n  transitionState?: string;\n  i18nStrings?: FlashbarProps.I18nStrings;\n}\n\nexport const Flash = React.forwardRef(\n  (\n    {\n      id,\n      header,\n      content,\n      dismissible,\n      dismissLabel,\n      loading,\n      action,\n      buttonText,\n      onButtonClick,\n      onDismiss,\n      className,\n      transitionState,\n      ariaRole,\n      i18nStrings,\n      type = 'info',\n      ...props\n    }: FlashProps,\n    ref: React.Ref<HTMLDivElement>\n  ) => {\n    if (isDevelopment) {\n      if (buttonText && !onButtonClick) {\n        warnOnce(\n          'Flashbar',\n          `You provided a \\`buttonText\\` prop without an \\`onButtonClick\\` handler. This will render a non-interactive action button.`\n        );\n      }\n\n      if (dismissible && !onDismiss) {\n        warnOnce(\n          'Flashbar',\n          `You have set the \\`dismissible\\` prop without an \\`onDismiss\\` handler. This will render a non-interactive dismiss button.`\n        );\n      }\n    }\n\n    const analyticsMetadata = getAnalyticsMetadataProps(props as BasePropsWithAnalyticsMetadata);\n    const elementRef = useComponentMetadata('Flash', PACKAGE_VERSION, { ...analyticsMetadata });\n    const mergedRef = useMergeRefs(ref, elementRef);\n\n    const headerRefObject = useRef<HTMLDivElement>(null);\n    const contentRefObject = useRef<HTMLDivElement>(null);\n    const { discoveredActions, headerRef: headerRefAction, contentRef: contentRefAction } = useDiscoveredAction(type);\n    const {\n      initialHidden,\n      headerReplacementType,\n      contentReplacementType,\n      headerRef: headerRefContent,\n      contentRef: contentRefContent,\n      replacementHeaderRef,\n      replacementContentRef,\n    } = useDiscoveredContent({ type, header, children: content });\n\n    const headerRef = useMergeRefs(headerRefAction, headerRefContent, headerRefObject);\n    const contentRef = useMergeRefs(contentRefAction, contentRefContent, contentRefObject);\n\n    const iconType = ICON_TYPES[type];\n\n    const icon = loading ? <InternalSpinner /> : <InternalIcon name={iconType} />;\n\n    const effectiveType = loading ? 'info' : type;\n\n    const handleDismiss: ButtonProps['onClick'] = event => {\n      sendDismissMetric(effectiveType);\n      onDismiss && onDismiss(event);\n    };\n\n    const analyticsAttributes = {\n      [DATA_ATTR_ANALYTICS_FLASHBAR]: effectiveType,\n    };\n\n    const statusIconAriaLabel =\n      props.statusIconAriaLabel ||\n      i18nStrings?.[`${loading || type === 'in-progress' ? 'inProgress' : type}IconAriaLabel`];\n\n    return (\n      // We're not using \"polite\" or \"assertive\" here, just turning default behavior off.\n      // eslint-disable-next-line @cloudscape-design/prefer-live-region\n      <div\n        ref={mergedRef}\n        role={ariaRole}\n        aria-live={ariaRole ? 'off' : undefined}\n        data-itemid={id}\n        className={clsx(\n          styles.flash,\n          styles[`flash-type-${effectiveType}`],\n          className,\n          transitionState && {\n            [styles.enter]: transitionState === 'enter',\n            [styles.entering]: transitionState === 'entering',\n            [styles.entered]: transitionState === 'entered',\n            [styles.exit]: transitionState === 'exit',\n            [styles.exiting]: transitionState === 'exiting',\n            [styles.exited]: transitionState === 'exited',\n          },\n          getVisualContextClassname(type === 'warning' && !loading ? 'flashbar-warning' : 'flashbar'),\n          initialHidden && styles['initial-hidden']\n        )}\n        {...analyticsAttributes}\n      >\n        <div className={styles['flash-body']}>\n          <div className={styles['flash-focus-container']} tabIndex={-1}>\n            <div\n              className={clsx(styles['flash-icon'], styles['flash-text'])}\n              role=\"img\"\n              aria-label={statusIconAriaLabel}\n            >\n              {icon}\n            </div>\n            <div className={clsx(styles['flash-message'], styles['flash-text'])}>\n              <div\n                className={clsx(\n                  styles['flash-header'],\n                  headerReplacementType !== 'original' ? styles.hidden : analyticsSelectors['flash-header']\n                )}\n                ref={headerRef}\n              >\n                {header}\n              </div>\n              <div\n                className={clsx(styles['header-replacement'], headerReplacementType !== 'replaced' && styles.hidden)}\n                ref={replacementHeaderRef}\n              ></div>\n              <div\n                className={clsx(\n                  styles['flash-content'],\n                  contentReplacementType !== 'original' ? styles.hidden : analyticsSelectors['flash-header']\n                )}\n                ref={contentRef}\n              >\n                {content}\n              </div>\n              <div\n                className={clsx(styles['content-replacement'], contentReplacementType !== 'replaced' && styles.hidden)}\n                ref={replacementContentRef}\n              ></div>\n            </div>\n          </div>\n          <ActionsWrapper\n            className={styles['action-button-wrapper']}\n            testUtilClasses={{\n              actionSlot: styles['action-slot'],\n              actionButton: styles['action-button'],\n            }}\n            action={action}\n            discoveredActions={discoveredActions}\n            buttonText={buttonText}\n            onButtonClick={onButtonClick}\n          />\n        </div>\n        {dismissible && dismissButton(dismissLabel, handleDismiss)}\n        {ariaRole === 'status' && (\n          <InternalLiveRegion sources={[statusIconAriaLabel, headerRefObject, contentRefObject]} />\n        )}\n      </div>\n    );\n  }\n);\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { IconProps } from '../icon/interfaces';\nimport { FlashbarProps } from './interfaces';\n\nexport const FOCUS_THROTTLE_DELAY = 2000;\n\n// Since the position of a notification changes when the Flashbar is collapsed,\n// it is useful on some situations (e.g, for animating) to know the original position of the item\n// in the non-collapsed state.\nexport interface StackableItem extends FlashbarProps.MessageDefinition {\n  expandedIndex: number;\n  collapsedIndex?: number;\n}\n\nconst typesToColors: Record<FlashbarProps.Type, string> = {\n  error: 'red',\n  info: 'blue',\n  'in-progress': 'blue',\n  success: 'green',\n  warning: 'yellow',\n};\n\nfunction getColorFromType(type?: FlashbarProps.Type): string {\n  const defaultColor = 'blue';\n  return type ? typesToColors[type] || defaultColor : defaultColor;\n}\n\nexport function getItemType(item: FlashbarProps.MessageDefinition) {\n  if (item.loading) {\n    return 'in-progress';\n  } else {\n    return item.type || 'info';\n  }\n}\n\nexport function getItemColor(item: FlashbarProps.MessageDefinition) {\n  return getColorFromType(getItemType(item));\n}\n\n/*\n Returns a selection of notifications, preserving the order when possible but making sure that all different colors in\n the stack are represented in the returned array.\n The order corresponds to how they are represented when using the collapsible feature (newest first, oldest last).\n */\nexport function getVisibleCollapsedItems(\n  items: ReadonlyArray<FlashbarProps.MessageDefinition>,\n  desiredLength: number\n): ReadonlyArray<StackableItem> {\n  // First `desiredLength` items in the original array,\n  // together with `isColorRepeated` to tell if they can be subject to be replaced later on if necessary\n  const itemsOnTop: { item: StackableItem; isColorRepeated: boolean }[] = [];\n\n  // Items that fall outside `desiredIndexLength` but need to be \"promoted\" if possible\n  // because they are of a different color which otherwise wouldn't be represented\n  const itemsToPromote: StackableItem[] = [];\n\n  const addedColors: Set<string> = new Set();\n  const allPossibleColors = Object.keys(typesToColors).length;\n  const finalLength = Math.min(items.length, desiredLength);\n\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    const color = getItemColor(item);\n    const isColorRepeated = addedColors.has(color);\n    if (i < finalLength) {\n      itemsOnTop.push({ item: { ...item, expandedIndex: i }, isColorRepeated });\n    } else {\n      if (addedColors.size === allPossibleColors) {\n        // No need to keep looking for unrepresented colors, we can stop looping\n        break;\n      } else if (!isColorRepeated) {\n        itemsToPromote.push({ ...item, expandedIndex: i });\n      }\n    }\n    addedColors.add(color);\n  }\n  // Generate the new array with the selected items, by picking from both arrays.\n  // First, from the non-repeated items within the desired length...\n  // We loop `itemsOnTop` starting from the end because we prefer to preserve the first ones rather than the old ones\n  const reversedInitialSelection = [];\n  let slotsReservedForPromotions = 0;\n  for (let j = itemsOnTop.length - 1; j >= 0; j--) {\n    const item = itemsOnTop[j];\n    if (item.isColorRepeated && slotsReservedForPromotions < itemsToPromote.length) {\n      slotsReservedForPromotions += 1;\n    } else {\n      reversedInitialSelection.push(item.item);\n    }\n  }\n  const selectedItems = reversedInitialSelection.reverse();\n  // ...and then complete the selection with as many promotable items as we can fit in the rest of the array\n  for (let k = 0; selectedItems.length < desiredLength; k++) {\n    selectedItems.push(itemsToPromote[k]);\n  }\n  return selectedItems;\n}\n\nexport function getFlashTypeCount(\n  items: readonly FlashbarProps.MessageDefinition[]\n): Record<FlashbarProps.Type, number> {\n  const count = { error: 0, info: 0, 'in-progress': 0, success: 0, warning: 0 };\n  for (const item of items) {\n    const type = getItemType(item);\n    count[type] += 1;\n  }\n  return count;\n}\n\ntype LabelName =\n  | 'errorIconAriaLabel'\n  | 'warningIconAriaLabel'\n  | 'successIconAriaLabel'\n  | 'infoIconAriaLabel'\n  | 'inProgressIconAriaLabel';\n\nexport const counterTypes: {\n  type: FlashbarProps.Type;\n  labelName: LabelName;\n  iconName: IconProps.Name;\n}[] = [\n  { type: 'error', labelName: 'errorIconAriaLabel', iconName: 'status-negative' },\n  { type: 'warning', labelName: 'warningIconAriaLabel', iconName: 'status-warning' },\n  { type: 'success', labelName: 'successIconAriaLabel', iconName: 'status-positive' },\n  { type: 'info', labelName: 'infoIconAriaLabel', iconName: 'status-info' },\n  { type: 'in-progress', labelName: 'inProgressIconAriaLabel', iconName: 'status-in-progress' },\n];\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { metrics } from '../../internal/metrics';\nimport { FlashbarProps } from '../interfaces';\nimport { getFlashTypeCount } from '../utils';\n\nconst eventContext = 'csa_flashbar';\n\nexport const sendRenderMetric = (items: FlashbarProps['items']) => {\n  const countByType = getFlashTypeCount(items);\n\n  metrics.sendPanoramaMetric({\n    eventContext,\n    eventType: 'render',\n    eventValue: items.length.toString(),\n    eventDetail: countByType,\n  });\n};\n\nexport const sendToggleMetric = (itemsCount: number, expanded: boolean) => {\n  metrics.sendPanoramaMetric({\n    eventContext,\n    eventType: expanded ? 'expand' : 'collapse',\n    eventValue: itemsCount.toString(),\n  });\n};\n\nexport const sendDismissMetric = (itemType: string) => {\n  metrics.sendPanoramaMetric({\n    eventContext,\n    eventType: 'dismiss',\n    eventValue: itemType,\n  });\n};\n", "\n    import './styles.scoped.css';\n    export default {\n  \"flash-with-motion\": \"awsui_flash-with-motion_1q84n_ld8k0_157\",\n  \"enter\": \"awsui_enter_1q84n_ld8k0_157\",\n  \"flash-body\": \"awsui_flash-body_1q84n_ld8k0_171\",\n  \"flash-message\": \"awsui_flash-message_1q84n_ld8k0_171\",\n  \"flash-header\": \"awsui_flash-header_1q84n_ld8k0_171\",\n  \"flash-content\": \"awsui_flash-content_1q84n_ld8k0_172\",\n  \"action-button-wrapper\": \"awsui_action-button-wrapper_1q84n_ld8k0_173\",\n  \"dismiss-button-wrapper\": \"awsui_dismiss-button-wrapper_1q84n_ld8k0_174\",\n  \"flash-icon\": \"awsui_flash-icon_1q84n_ld8k0_197\",\n  \"entering\": \"awsui_entering_1q84n_ld8k0_210\",\n  \"entered\": \"awsui_entered_1q84n_ld8k0_231\",\n  \"exiting\": \"awsui_exiting_1q84n_ld8k0_336\",\n  \"stack\": \"awsui_stack_1q84n_ld8k0_370\",\n  \"animation-running\": \"awsui_animation-running_1q84n_ld8k0_370\",\n  \"item\": \"awsui_item_1q84n_ld8k0_370\",\n  \"flash-list-item\": \"awsui_flash-list-item_1q84n_ld8k0_371\",\n  \"notification-bar\": \"awsui_notification-bar_1q84n_ld8k0_372\",\n  \"collapsed\": \"awsui_collapsed_1q84n_ld8k0_392\",\n  \"animation-ready\": \"awsui_animation-ready_1q84n_ld8k0_392\",\n  \"expanded-only\": \"awsui_expanded-only_1q84n_ld8k0_392\",\n  \"expanded\": \"awsui_expanded_1q84n_ld8k0_392\",\n  \"flash\": \"awsui_flash_1q84n_ld8k0_157\",\n  \"collapsible\": \"awsui_collapsible_1q84n_ld8k0_448\",\n  \"short-list\": \"awsui_short-list_1q84n_ld8k0_454\",\n  \"visual-refresh\": \"awsui_visual-refresh_1q84n_ld8k0_454\",\n  \"status\": \"awsui_status_1q84n_ld8k0_601\",\n  \"header\": \"awsui_header_1q84n_ld8k0_601\",\n  \"item-count\": \"awsui_item-count_1q84n_ld8k0_602\",\n  \"button\": \"awsui_button_1q84n_ld8k0_603\",\n  \"type-count\": \"awsui_type-count_1q84n_ld8k0_636\",\n  \"count-number\": \"awsui_count-number_1q84n_ld8k0_636\",\n  \"icon\": \"awsui_icon_1q84n_ld8k0_670\",\n  \"floating\": \"awsui_floating_1q84n_ld8k0_711\",\n  \"flashbar\": \"awsui_flashbar_1q84n_ld8k0_715\",\n  \"initial-hidden\": \"awsui_initial-hidden_1q84n_ld8k0_773\",\n  \"flash-list\": \"awsui_flash-list_1q84n_ld8k0_371\",\n  \"flash-focus-container\": \"awsui_flash-focus-container_1q84n_ld8k0_795\",\n  \"flash-text\": \"awsui_flash-text_1q84n_ld8k0_825\",\n  \"hidden\": \"awsui_hidden_1q84n_ld8k0_844\",\n  \"header-replacement\": \"awsui_header-replacement_1q84n_ld8k0_849\",\n  \"content-replacement\": \"awsui_content-replacement_1q84n_ld8k0_854\",\n  \"dismiss-button\": \"awsui_dismiss-button_1q84n_ld8k0_174\",\n  \"breakpoint-default\": \"awsui_breakpoint-default_1q84n_ld8k0_873\",\n  \"action-button\": \"awsui_action-button_1q84n_ld8k0_173\",\n  \"action-slot\": \"awsui_action-slot_1q84n_ld8k0_883\",\n  \"flash-type-success\": \"awsui_flash-type-success_1q84n_ld8k0_887\",\n  \"flash-type-error\": \"awsui_flash-type-error_1q84n_ld8k0_891\",\n  \"flash-type-info\": \"awsui_flash-type-info_1q84n_ld8k0_895\",\n  \"flash-type-in-progress\": \"awsui_flash-type-in-progress_1q84n_ld8k0_896\",\n  \"flash-type-warning\": \"awsui_flash-type-warning_1q84n_ld8k0_900\"\n};\n  ", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { TransitionGroup } from 'react-transition-group';\nimport clsx from 'clsx';\n\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\n\nimport { useInternalI18n } from '../i18n/context';\nimport { Transition } from '../internal/components/transition';\nimport { getComponentsAnalyticsMetadata, getItemAnalyticsMetadata } from './analytics-metadata/utils';\nimport { useFlashbar } from './common';\nimport { TIMEOUT_FOR_ENTERING_ANIMATION } from './constant';\nimport { Flash } from './flash';\nimport { FlashbarProps } from './interfaces';\n\nimport styles from './styles.css.js';\n\nexport default function NonCollapsibleFlashbar({ items, i18nStrings, ...restProps }: FlashbarProps) {\n  const { allItemsHaveId, baseProps, breakpoint, isReducedMotion, isVisualRefresh, mergedRef } = useFlashbar({\n    items,\n    ...restProps,\n  });\n\n  const i18n = useInternalI18n('flashbar');\n  const ariaLabel = i18n('i18nStrings.ariaLabel', i18nStrings?.ariaLabel);\n  const iconAriaLabels = {\n    errorIconAriaLabel: i18n('i18nStrings.errorIconAriaLabel', i18nStrings?.errorIconAriaLabel),\n    inProgressIconAriaLabel: i18n('i18nStrings.inProgressIconAriaLabel', i18nStrings?.inProgressIconAriaLabel),\n    infoIconAriaLabel: i18n('i18nStrings.infoIconAriaLabel', i18nStrings?.infoIconAriaLabel),\n    successIconAriaLabel: i18n('i18nStrings.successIconAriaLabel', i18nStrings?.successIconAriaLabel),\n    warningIconAriaLabel: i18n('i18nStrings.warningIconAriaLabel', i18nStrings?.warningIconAriaLabel),\n  };\n\n  /**\n   * All the flash items should have ids so we can identify which DOM element is being\n   * removed from the DOM to animate it. Motion will be disabled if any of the provided\n   * flash messages does not contain an `id`.\n   */\n  const motionDisabled = isReducedMotion || !isVisualRefresh || !allItemsHaveId;\n\n  const animateFlash = !isReducedMotion && isVisualRefresh;\n  /**\n   * If the flashbar is flat and motion is `enabled` then the adding and removing of items\n   * from the flashbar will render with visual transitions.\n   */\n  function renderFlatItemsWithTransitions() {\n    if (motionDisabled || !items) {\n      return;\n    }\n\n    return (\n      // This is a proxy for <ul>, so we're not applying a class to another actual component.\n      // eslint-disable-next-line react/forbid-component-props\n      <TransitionGroup component=\"ul\" className={styles['flash-list']} aria-label={ariaLabel}>\n        {items.map((item, index) => (\n          <Transition\n            transitionChangeDelay={{ entering: TIMEOUT_FOR_ENTERING_ANIMATION }}\n            key={item.id ?? index}\n            in={true}\n          >\n            {(state: string, transitionRootElement: React.Ref<HTMLDivElement> | undefined) => (\n              <li className={styles['flash-list-item']}>\n                {renderItem(item, item.id ?? index, transitionRootElement, state)}\n              </li>\n            )}\n          </Transition>\n        ))}\n      </TransitionGroup>\n    );\n  }\n\n  /**\n   * If the flashbar is flat and motion is `disabled` then the adding and removing of items\n   * from the flashbar will render without visual transitions.\n   */\n  function renderFlatItemsWithoutTransitions() {\n    if (!motionDisabled || !items) {\n      return;\n    }\n\n    return (\n      <ul\n        className={styles['flash-list']}\n        aria-label={ariaLabel}\n        {...getAnalyticsMetadataAttribute(getComponentsAnalyticsMetadata(items.length, false))}\n      >\n        {items.map((item, index) => (\n          <li\n            key={item.id ?? index}\n            className={styles['flash-list-item']}\n            {...getAnalyticsMetadataAttribute(getItemAnalyticsMetadata(index + 1, item.type || 'info', item.id))}\n          >\n            {renderItem(item, item.id ?? index)}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n\n  /**\n   * This is a shared render function for a single flashbar item to be used\n   * by the stacking, motion, and non-motion item group render functions.\n   */\n  function renderItem(\n    item: FlashbarProps.MessageDefinition,\n    key: string | number,\n    transitionRootElement?: React.Ref<HTMLDivElement> | undefined,\n    transitionState?: string | undefined\n  ) {\n    return (\n      <Flash\n        // eslint-disable-next-line react/forbid-component-props\n        className={clsx(animateFlash && styles['flash-with-motion'], isVisualRefresh && styles['flash-refresh'])}\n        key={key}\n        ref={transitionRootElement}\n        transitionState={transitionState}\n        i18nStrings={iconAriaLabels}\n        {...item}\n      />\n    );\n  }\n\n  return (\n    <div\n      {...baseProps}\n      className={clsx(baseProps.className, styles.flashbar, styles[`breakpoint-${breakpoint}`])}\n      ref={mergedRef}\n    >\n      {renderFlatItemsWithTransitions()}\n      {renderFlatItemsWithoutTransitions()}\n    </div>\n  );\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This is a delay that delays the `entering` transition state\n * for the flashbar to be executed, this is useful for:\n * - If a flashbar is exiting and another is entering at the same time we'd want to delay the entering to\n * prevent the jumping in the layout\n * The current animation time for the exiting can be found in motion.scss which is equivilant to 115ms,\n * if in the future this value is changed for the exiting animation we'll have to change this as well to match it\n */\nexport const TIMEOUT_FOR_ENTERING_ANIMATION = 115;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAAA,gBAAiC;;;ACAjC,IAAAC,gBAA0F;;;ACCpF,SAAU,YAAY,UAA4C;AACtE,QAAM,QAAiC,CAAA;AACvC,aAAW,MAAM,UAAU;AACzB,UAAM,UAAU,SAAS,EAAE;AAC3B,QAAI,SAAS;AACX,YAAM,EAAE,IAAI,QAAQ,sBAAqB;;;AAG7C,SAAO;AACT;AAaM,SAAU,QAAQ,EACtB,UACA,UACA,kBACA,uBAAsB,GAMvB;AAEC,aAAW,MAAM,UAAU;AACzB,UAAM,UAAU,SAAS,EAAE;AAC3B,UAAM,UAAU,SAAS,EAAE;AAC3B,QAAI,SAAS;AACX,YAAM,UAAU,QAAQ,sBAAqB;AAC7C,YAAM,gBAAgB,EAAE,OAAO,GAAG,GAAG,GAAG,GAAG,EAAC;AAI5C,YAAM,6BAA6B,UAC/B;QACE,OAAO,QAAQ,QAAQ,QAAQ;QAC/B,IAAI,QAAQ,OAAO,QAAQ,SAAS,KAAK,QAAQ,OAAO,QAAQ,SAAS;QACzE,IAAI,QAAQ,MAAM,QAAQ,UAAU,KAAK,QAAQ,MAAM,QAAQ,UAAU;UAE3E,yBACE,uBAAuB,OAAO,IAC9B,CAAA;AACN,YAAM,mBAAgB,OAAA,OAAA,OAAA,OAAA,CAAA,GAAQ,aAAa,GAAK,0BAA0B;AAE1E,cAAQ,MAAM,qBAAqB;AACnC,cAAQ,MAAM,YAAY,SAAS,iBAAiB,KAAK,eAAe,iBAAiB,CAAC,OAAO,iBAAiB,CAAC;AACnH,UAAI,CAAC,SAAS;AAGZ,gBAAQ,MAAM,UAAU;;;;AAM9B,wBAAsB,MAAK;AACzB,UAAM,oBAAoB,oBAAI,IAAG;AACjC,eAAW,MAAM,UAAU;AACzB,YAAM,UAAU,SAAS,EAAE;AAC3B,UAAI,SAAS;AACX,cAAM,UAAU,SAAS,EAAE;AAC3B,YAAI,SAAS;AAEX,kBAAQ,MAAM,qBAAqB;AAEnC,kBAAQ,MAAM,YAAY;eACrB;AAEL,kBAAQ,MAAM,qBAAqB;AACnC,kBAAQ,MAAM,YAAY;AAC1B,kBAAQ,MAAM,UAAU;;AAE1B,cAAM,oBAAoB,CAAC,UAA0B;AACnD,cAAI,MAAM,WAAW,SAAS;AAC5B,8BAAkB,IAAI,EAAE;AACxB,oBAAQ,oBAAoB,mBAAmB,iBAAiB;;QAEpE;AACA,cAAM,kBAAkB,CAAC,UAA0B;AACjD,cAAI,MAAM,WAAW,SAAS;AAE5B,oBAAQ,MAAM,qBAAqB;AACnC,oBAAQ,oBAAoB,iBAAiB,eAAe;AAC5D,gBAAI,kBAAkB;AACpB,gCAAkB,OAAO,EAAE;AAC3B,kBAAI,kBAAkB,SAAS,GAAG;AAChC,iCAAgB;;;;QAIxB;AACA,gBAAQ,iBAAiB,mBAAmB,iBAAiB;AAC7D,gBAAQ,iBAAiB,iBAAiB,eAAe;;;EAG/D,CAAC;AACH;;;AC5GI,OAAO;AACP,IAAO,qBAAQ;AAAA,EACjB,gBAAgB;AAClB;;;ACKO,IAAM,iCAAiC,CAC5C,YACA,YACA,aAC8D;AAC9D,QAAM,WAAuE;IAC3E,WAAW;MACT,MAAM;MACN,OAAO,aAAa,EAAE,MAAM,QAAQ,UAAU,KAAI,IAAK,EAAE,MAAM,OAAM;MACrE,YAAY;QACV,YAAY,GAAG,UAAU;QACzB,YAAY,GAAG,UAAU;;;;AAK/B,MAAI,aAAa,QAAW;AAC1B,aAAS,UAAU,WAAW,WAAW,GAAG,QAAQ;;AAEtD,SAAO;AACT;AAEO,IAAM,2BAA2B,CACtC,UACA,MACA,OACsC;AACtC,QAAM,eAA4E;IAChF,WAAW,IAAI,mBAAmB,cAAc,CAAC;IACjD,cAAc,GAAG,QAAQ;IACzB,UAAU;;AAEZ,MAAI,IAAI;AACN,iBAAa,SAAS;;AAExB,SAAO;IACL,WAAW,EAAE,cAAc,aAAY;;AAE3C;;;AC7CA,IAAAC,gBAAqD;;;ACArD,mBAA8B;;;ACGvB,IAAM,uBAAuB;AAUpC,IAAM,gBAAoD;EACxD,OAAO;EACP,MAAM;EACN,eAAe;EACf,SAAS;EACT,SAAS;;AAGX,SAAS,iBAAiB,MAAyB;AACjD,QAAM,eAAe;AACrB,SAAO,OAAO,cAAc,IAAI,KAAK,eAAe;AACtD;AAEM,SAAU,YAAY,MAAqC;AAC/D,MAAI,KAAK,SAAS;AAChB,WAAO;SACF;AACL,WAAO,KAAK,QAAQ;;AAExB;AAEM,SAAU,aAAa,MAAqC;AAChE,SAAO,iBAAiB,YAAY,IAAI,CAAC;AAC3C;AAOM,SAAU,yBACd,OACA,eAAqB;AAIrB,QAAM,aAAkE,CAAA;AAIxE,QAAM,iBAAkC,CAAA;AAExC,QAAM,cAA2B,oBAAI,IAAG;AACxC,QAAM,oBAAoB,OAAO,KAAK,aAAa,EAAE;AACrD,QAAM,cAAc,KAAK,IAAI,MAAM,QAAQ,aAAa;AAExD,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,UAAM,OAAO,MAAM,CAAC;AACpB,UAAM,QAAQ,aAAa,IAAI;AAC/B,UAAM,kBAAkB,YAAY,IAAI,KAAK;AAC7C,QAAI,IAAI,aAAa;AACnB,iBAAW,KAAK,EAAE,MAAI,OAAA,OAAA,OAAA,OAAA,CAAA,GAAO,IAAI,GAAA,EAAE,eAAe,EAAC,CAAA,GAAI,gBAAe,CAAE;WACnE;AACL,UAAI,YAAY,SAAS,mBAAmB;AAE1C;iBACS,CAAC,iBAAiB;AAC3B,uBAAe,KAAI,OAAA,OAAA,OAAA,OAAA,CAAA,GAAM,IAAI,GAAA,EAAE,eAAe,EAAC,CAAA,CAAA;;;AAGnD,gBAAY,IAAI,KAAK;;AAKvB,QAAM,2BAA2B,CAAA;AACjC,MAAI,6BAA6B;AACjC,WAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG,KAAK;AAC/C,UAAM,OAAO,WAAW,CAAC;AACzB,QAAI,KAAK,mBAAmB,6BAA6B,eAAe,QAAQ;AAC9E,oCAA8B;WACzB;AACL,+BAAyB,KAAK,KAAK,IAAI;;;AAG3C,QAAM,gBAAgB,yBAAyB,QAAO;AAEtD,WAAS,IAAI,GAAG,cAAc,SAAS,eAAe,KAAK;AACzD,kBAAc,KAAK,eAAe,CAAC,CAAC;;AAEtC,SAAO;AACT;AAEM,SAAU,kBACd,OAAiD;AAEjD,QAAM,QAAQ,EAAE,OAAO,GAAG,MAAM,GAAG,eAAe,GAAG,SAAS,GAAG,SAAS,EAAC;AAC3E,aAAW,QAAQ,OAAO;AACxB,UAAM,OAAO,YAAY,IAAI;AAC7B,UAAM,IAAI,KAAK;;AAEjB,SAAO;AACT;AASO,IAAM,eAIP;EACJ,EAAE,MAAM,SAAS,WAAW,sBAAsB,UAAU,kBAAiB;EAC7E,EAAE,MAAM,WAAW,WAAW,wBAAwB,UAAU,iBAAgB;EAChF,EAAE,MAAM,WAAW,WAAW,wBAAwB,UAAU,kBAAiB;EACjF,EAAE,MAAM,QAAQ,WAAW,qBAAqB,UAAU,cAAa;EACvE,EAAE,MAAM,eAAe,WAAW,2BAA2B,UAAU,qBAAoB;;;;ACtH7F,IAAM,eAAe;AAEd,IAAM,mBAAmB,CAAC,UAAiC;AAChE,QAAM,cAAc,kBAAkB,KAAK;AAE3C,UAAQ,mBAAmB;IACzB;IACA,WAAW;IACX,YAAY,MAAM,OAAO,SAAQ;IACjC,aAAa;GACd;AACH;AAEO,IAAM,mBAAmB,CAAC,YAAoB,aAAqB;AACxE,UAAQ,mBAAmB;IACzB;IACA,WAAW,WAAW,WAAW;IACjC,YAAY,WAAW,SAAQ;GAChC;AACH;AAEO,IAAM,oBAAoB,CAAC,aAAoB;AACpD,UAAQ,mBAAmB;IACzB;IACA,WAAW;IACX,YAAY;GACb;AACH;;;ACjCI,OAAO;AACP,IAAOC,sBAAQ;AAAA,EACjB,qBAAqB;AAAA,EACrB,SAAS;AAAA,EACT,cAAc;AAAA,EACd,iBAAiB;AAAA,EACjB,gBAAgB;AAAA,EAChB,iBAAiB;AAAA,EACjB,yBAAyB;AAAA,EACzB,0BAA0B;AAAA,EAC1B,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,WAAW;AAAA,EACX,SAAS;AAAA,EACT,qBAAqB;AAAA,EACrB,QAAQ;AAAA,EACR,mBAAmB;AAAA,EACnB,oBAAoB;AAAA,EACpB,aAAa;AAAA,EACb,mBAAmB;AAAA,EACnB,iBAAiB;AAAA,EACjB,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,eAAe;AAAA,EACf,cAAc;AAAA,EACd,kBAAkB;AAAA,EAClB,UAAU;AAAA,EACV,UAAU;AAAA,EACV,cAAc;AAAA,EACd,UAAU;AAAA,EACV,cAAc;AAAA,EACd,gBAAgB;AAAA,EAChB,QAAQ;AAAA,EACR,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,kBAAkB;AAAA,EAClB,cAAc;AAAA,EACd,yBAAyB;AAAA,EACzB,cAAc;AAAA,EACd,UAAU;AAAA,EACV,sBAAsB;AAAA,EACtB,uBAAuB;AAAA,EACvB,kBAAkB;AAAA,EAClB,sBAAsB;AAAA,EACtB,iBAAiB;AAAA,EACjB,eAAe;AAAA,EACf,sBAAsB;AAAA,EACtB,oBAAoB;AAAA,EACpB,mBAAmB;AAAA,EACnB,0BAA0B;AAAA,EAC1B,sBAAsB;AACxB;;;AHtBA,IAAM,aAAa;EACjB,SAAS;EACT,SAAS;EACT,MAAM;EACN,OAAO;EACP,eAAe;;AAGjB,IAAM,sBAAsB,0BAA0B,qBAAqB,SAAS,kBAAkB;AACtG,IAAM,uBAAuB,2BAA2B,SAAS,qBAAqB,YAAY;AAElG,SAAS,cACP,cACA,WAAuD;AAEvD,SACE,aAAAC,QAAA;IAAA;IAAA,OAAA,OAAA,EACE,WAAWC,oBAAO,wBAAwB,EAAC,GACvC,8BAA8B;MAChC,QAAQ;KAC6C,CAAC;IAExD,aAAAD,QAAA,cAAC,gBAAc,EACb,SAAS,WACT,WAAWC,oBAAO,gBAAgB,GAClC,SAAQ,iBACR,UAAS,SACT,YAAW,QACX,WAAW,aAAY,CAAA;EACvB;AAGR;AAEO,IAAM,iBAAiB,SAC5B,CAAC,SAA6B,WAAkB;;AAC9C,QAAM,WAAW,iBAAiB,IAAI,OAAO,MAAM,CAAC,OAAOA,oBAAO,uBAAuB,CAAC;AAC1F,GAAA,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,cAA2B,QAAQ,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE,MAAK;AACtD,GACA,sBACA,EAAE,UAAU,MAAK,CAAE;AASd,IAAM,QAAQ,aAAAD,QAAM,WACzB,CACE,IAkBA,QACE;MAnBF,EACE,IACA,QACA,SACA,aACA,cACA,SACA,QACA,YACA,eACA,WACA,WACA,iBACA,UACA,aACA,OAAO,OAAM,IAAA,IACV,QAAK,OAAA,IAhBV,CAAA,MAAA,UAAA,WAAA,eAAA,gBAAA,WAAA,UAAA,cAAA,iBAAA,aAAA,aAAA,mBAAA,YAAA,eAAA,MAAA,CAiBC;AAGD,MAAI,eAAe;AACjB,QAAI,cAAc,CAAC,eAAe;AAChC,eACE,YACA,4HAA4H;;AAIhI,QAAI,eAAe,CAAC,WAAW;AAC7B,eACE,YACA,4HAA4H;;;AAKlI,QAAM,oBAAoB,0BAA0B,KAAuC;AAC3F,QAAM,aAAa,qBAAqB,SAAS,iBAAe,OAAA,OAAA,CAAA,GAAO,iBAAiB,CAAA;AACxF,QAAM,YAAY,aAAa,KAAK,UAAU;AAE9C,QAAM,sBAAkB,qBAAuB,IAAI;AACnD,QAAM,uBAAmB,qBAAuB,IAAI;AACpD,QAAM,EAAE,mBAAmB,WAAW,iBAAiB,YAAY,iBAAgB,IAAK,oBAAoB,IAAI;AAChH,QAAM,EACJ,eACA,uBACA,wBACA,WAAW,kBACX,YAAY,mBACZ,sBACA,sBAAqB,IACnB,qBAAqB,EAAE,MAAM,QAAQ,UAAU,QAAO,CAAE;AAE5D,QAAM,YAAY,aAAa,iBAAiB,kBAAkB,eAAe;AACjF,QAAM,aAAa,aAAa,kBAAkB,mBAAmB,gBAAgB;AAErF,QAAM,WAAW,WAAW,IAAI;AAEhC,QAAM,OAAO,UAAU,aAAAA,QAAA,cAAC,iBAAe,IAAA,IAAM,aAAAA,QAAA,cAAC,kBAAY,EAAC,MAAM,SAAQ,CAAA;AAEzE,QAAM,gBAAgB,UAAU,SAAS;AAEzC,QAAM,gBAAwC,WAAQ;AACpD,sBAAkB,aAAa;AAC/B,iBAAa,UAAU,KAAK;EAC9B;AAEA,QAAM,sBAAsB;IAC1B,CAAC,4BAA4B,GAAG;;AAGlC,QAAM,sBACJ,MAAM,wBACN,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAc,GAAG,WAAW,SAAS,gBAAgB,eAAe,IAAI,eAAe;AAEzF;;;IAGE,aAAAA,QAAA;MAAA;MAAA,OAAA,OAAA,EACE,KAAK,WACL,MAAM,UAAQ,aACH,WAAW,QAAQ,QAAS,eAC1B,IACb,WAAW,eACTC,oBAAO,OACPA,oBAAO,cAAc,aAAa,EAAE,GACpC,WACA,mBAAmB;QACjB,CAACA,oBAAO,KAAK,GAAG,oBAAoB;QACpC,CAACA,oBAAO,QAAQ,GAAG,oBAAoB;QACvC,CAACA,oBAAO,OAAO,GAAG,oBAAoB;QACtC,CAACA,oBAAO,IAAI,GAAG,oBAAoB;QACnC,CAACA,oBAAO,OAAO,GAAG,oBAAoB;QACtC,CAACA,oBAAO,MAAM,GAAG,oBAAoB;SAEvC,0BAA0B,SAAS,aAAa,CAAC,UAAU,qBAAqB,UAAU,GAC1F,iBAAiBA,oBAAO,gBAAgB,CAAC,EAC1C,GACG,mBAAmB;MAEvB,aAAAD,QAAA;QAAA;QAAA,EAAK,WAAWC,oBAAO,YAAY,EAAC;QAClC,aAAAD,QAAA;UAAA;UAAA,EAAK,WAAWC,oBAAO,uBAAuB,GAAG,UAAU,GAAE;UAC3D,aAAAD,QAAA,cAAA,OAAA,EACE,WAAW,eAAKC,oBAAO,YAAY,GAAGA,oBAAO,YAAY,CAAC,GAC1D,MAAK,OAAK,cACE,oBAAmB,GAE9B,IAAI;UAEP,aAAAD,QAAA;YAAA;YAAA,EAAK,WAAW,eAAKC,oBAAO,eAAe,GAAGA,oBAAO,YAAY,CAAC,EAAC;YACjE,aAAAD,QAAA,cAAA,OAAA,EACE,WAAW,eACTC,oBAAO,cAAc,GACrB,0BAA0B,aAAaA,oBAAO,SAAS,mBAAmB,cAAc,CAAC,GAE3F,KAAK,UAAS,GAEb,MAAM;YAET,aAAAD,QAAA,cAAA,OAAA,EACE,WAAW,eAAKC,oBAAO,oBAAoB,GAAG,0BAA0B,cAAcA,oBAAO,MAAM,GACnG,KAAK,qBAAoB,CAAA;YAE3B,aAAAD,QAAA,cAAA,OAAA,EACE,WAAW,eACTC,oBAAO,eAAe,GACtB,2BAA2B,aAAaA,oBAAO,SAAS,mBAAmB,cAAc,CAAC,GAE5F,KAAK,WAAU,GAEd,OAAO;YAEV,aAAAD,QAAA,cAAA,OAAA,EACE,WAAW,eAAKC,oBAAO,qBAAqB,GAAG,2BAA2B,cAAcA,oBAAO,MAAM,GACrG,KAAK,sBAAqB,CAAA;UACrB;QACH;QAER,aAAAD,QAAA,cAAC,gBAAc,EACb,WAAWC,oBAAO,uBAAuB,GACzC,iBAAiB;UACf,YAAYA,oBAAO,aAAa;UAChC,cAAcA,oBAAO,eAAe;WAEtC,QACA,mBACA,YACA,cAA4B,CAAA;MAC5B;MAEH,eAAe,cAAc,cAAc,aAAa;MACxD,aAAa,YACZ,aAAAD,QAAA,cAACE,mBAAkB,EAAC,SAAS,CAAC,qBAAqB,iBAAiB,gBAAgB,EAAC,CAAA;IACtF;;AAGP,CAAC;;;AD9NG,SAAU,YAAY,IAU3B;MAV2B,EAC1B,OACA,cACA,gBACA,eAAc,IAAA,IACX,YAAS,OAAA,IALc,CAAA,SAAA,gBAAA,kBAAA,gBAAA,CAM3B;AAKC,QAAM,EAAE,kBAAiB,IAAK,iBAAiB,YAAY;IACzD,OAAO,EAAE,YAAY,UAAU,WAAU;GAC1C;AACD,QAAM,qBAAiB,uBAAQ,MAAM,MAAM,MAAM,UAAQ,QAAQ,IAAI,GAAG,CAAC,KAAK,CAAC;AAC/E,QAAM,YAAY,aAAa,SAAS;AACxC,QAAM,UAAM,sBAA8B,IAAI;AAC9C,QAAM,CAAC,YAAY,aAAa,IAAI,wBAAwB,CAAC,IAAI,CAAC;AAClE,QAAM,YAAY,aAAa,KAAK,eAAe,iBAAiB;AACpE,QAAM,kBAAkB,iBAAiB,GAAG;AAC5C,QAAM,kBAAkB,iBAAgB;AACxC,QAAM,CAAC,eAAe,gBAAgB,QAAI,wBAAyD,KAAK;AACxG,QAAM,CAAC,aAAa,cAAc,QAAI,wBAAwB,IAAI;AAElE,MAAI,eAAe;AACjB,QAAI,UAAK,QAAL,UAAK,SAAA,SAAL,MAAO,KAAK,UAAQ,KAAK,aAAa,WAAW,CAAC,KAAK,EAAE,GAAG;AAC9D,eACE,YACA,8IAA8I;;;AAOpJ,MAAI,OAAO;AACT,UAAM,WAAW,MAAM,OAAO,CAAC,EAAE,GAAE,MAAO,MAAM,CAAC,cAAc,KAAK,UAAQ,KAAK,OAAO,EAAE,CAAC;AAC3F,UAAM,eAAe,cAAc,OAAO,CAAC,EAAE,GAAE,MAAO,MAAM,CAAC,MAAM,KAAK,UAAQ,KAAK,OAAO,EAAE,CAAC;AAC/F,QAAI,SAAS,SAAS,KAAK,aAAa,SAAS,GAAG;AAClD,uBAAiB,KAAK;AACtB,uBAAY,QAAZ,iBAAY,SAAA,SAAZ,aAAe,QAAQ;AACvB,yBAAc,QAAd,mBAAc,SAAA,SAAd,eAAiB,YAAY;AAC7B,yBAAc,QAAd,mBAAc,SAAA,SAAd,eAAiB,EAAE,gBAAgB,gBAAe,CAAE;AAEpD,YAAM,gBAAgB,SAAS,OAAO,CAAC,EAAE,SAAQ,MAAO,aAAa,OAAO;AAC5E,UAAI,cAAc,SAAS,GAAG;AAC5B,uBAAe,cAAc,CAAC,EAAE,EAAG;;;;AAKzC,+BAAU,MAAK;AACb,QAAI,aAAa;AACf,qBAAe,IAAI,SAAS,WAAW;;EAE3C,GAAG,CAAC,aAAa,GAAG,CAAC;AAErB,SAAO;IACL;IACA;IACA;IACA;IACA;IACA;IACA;;AAEJ;;;AJlDA,IAAM,yBAAyB;AAE/B,IAAM,8BAA8B;AAEtB,SAAP,oBAAqC,IAAsC;MAAtC,EAAE,MAAK,IAAA,IAAK,YAAS,OAAA,IAArB,CAAA,OAAA,CAAuB;AACjE,QAAM,CAAC,eAAe,gBAAgB,QAAI,wBAAyD,CAAA,CAAE;AACrG,QAAM,CAAC,cAAc,eAAe,QAAI,wBAAyD,CAAA,CAAE;AACnG,QAAM,CAAC,yBAAyB,0BAA0B,QAAI,wBAAS,KAAK;AAE5E,QAAM,2BAAuB,2BAAY,MAAK;AAC5C,UAAM,gBAAgB,0BAA0B,iBAAiB,UAAU,kBAAkB;AAC7F,WAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GAAY,aAAa,GAAA,EAAE,iBAAiB,mBAAmB,QAAO,CAAA;EACxE,GAAG,CAAC,uBAAuB,CAAC;AAE5B,QAAM,wBAAoB,2BAAY,MAAK;AACzC,UAAM,QAAQ,YAAY,qBAAoB,CAAE;AAChD,6BAAyB,KAAK;EAChC,GAAG,CAAC,oBAAoB,CAAC;AAEzB,QAAM,EAAE,WAAW,YAAY,iBAAiB,iBAAiB,WAAW,IAAG,IAAK,YAAW,OAAA,OAAA,OAAA,OAAA,EAC7F,MAAK,GACF,SAAS,GAAA,EACZ,cAAc,cAAW;AACvB,qBAAiB,CAAC,GAAG,eAAe,GAAG,QAAQ,CAAC;EAClD,GACA,gBAAgB,aAAU;AAIxB,SAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,mBAAkB,EAAC,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,kBAAiB;AACxD,wBAAiB;;EAErB,GACA,gBAAgB,kBAAe;AAC7B,oBAAgB,CAAC,GAAG,cAAc,GAAG,YAAY,CAAC;EACpD,EAAC,CAAA,CAAA;AAGH,QAAM,wBAAoB,sBAA2C,CAAA,CAAE;AACvE,QAAM,uBAAmB,sBAA2C,CAAA,CAAE;AACtE,QAAM,CAAC,uBAAuB,wBAAwB,QAAI,wBAAyC,IAAI;AACvG,QAAM,qBAAiB,sBAAgC,IAAI;AAC3D,QAAM,yBAAqB,sBAA8B,IAAI;AAC7D,QAAM,CAAC,eAAe,gBAAgB,QAAI,wBAAS,KAAK;AACxD,QAAM,oBAAoB,YAAY,UAAU;AAChD,QAAM,qBAAqB,YAAY,YAAY;AAEnD,MAAI,MAAM,UAAU,0BAA0B,yBAAyB;AACrE,+BAA2B,KAAK;;AAGlC,QAAM,eAAe,CAAC;AAEtB,WAAS,uBAAoB;AAC3B,qBAAiB,MAAM,QAAQ,CAAC,uBAAuB;AACvD,QAAI,CAAC,iBAAiB;AACpB,wBAAiB;;AAEnB,+BAA2B,UAAQ,CAAC,IAAI;EAC1C;AAEA,qCAAgB,MAAK;AACnB,QAAI,4BAA2B,UAAK,QAAL,UAAK,SAAA,SAAL,MAAO,SAAQ;AAC5C,YAAM,iBAAiB,MAAM,CAAC;AAC9B,UAAI,eAAe,OAAO,QAAW;AACnC,uBAAe,IAAI,SAAS,eAAe,EAAE;;;EAKnD,GAAG,CAAC,uBAAuB,CAAC;AAG5B,oBAAkB,MAAK;AACrB,QAAI,CAAC,2BAA2B,mBAAmB,SAAS;AAC1D,4BAAsB,mBAAmB,OAAO;;EAEpD,GAAG,CAAC,uBAAuB,CAAC;AAE5B,QAAM,0BAAsB,uBAC1B,MACE,SAAS,MAAK;AAGZ,UAAM,cAAc,mBAAc,QAAd,mBAAc,SAAA,SAAd,eAAgB;AACpC,UAAM,WAAW,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa;AAC9B,QAAI,eAAe,UAAU;AAG3B,eAAS,UAAU,OAAOC,oBAAO,QAAQ;AACzC,YAAM,eAAe,OAAO;AAG5B,YAAM,eAAe,YAAY,UAAU,aAAW,QAAQ,aAAa,MAAM,MAAM,QAAQ,KAAK;AACpG,YAAM,eACJ,2BAA2B,KAAK,KAAK,aAAa,sBAAqB,EAAG,MAAM,KAAK;AACvF,UAAI,CAAC,cAAc;AACjB,iBAAS,UAAU,IAAIA,oBAAO,QAAQ;;;EAG5C,GAAG,2BAA2B,GAChC,CAAC,uBAAuB,CAAC;AAG3B,qCAAgB,MAAK;AACnB,WAAO,iBAAiB,UAAU,mBAAmB;AACrD,WAAO,MAAK;AACV,aAAO,oBAAoB,UAAU,mBAAmB;AACxD,0BAAoB,OAAM;IAC5B;EACF,GAAG,CAAC,mBAAmB,CAAC;AAExB,QAAM,EAAE,YAAW,IAAK;AAExB,QAAM,OAAO,gBAAgB,UAAU;AACvC,QAAM,YAAY,KAAK,yBAAyB,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,SAAS;AACtE,QAAM,sBAAsB,KAAK,mCAAmC,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,mBAAmB;AACpG,QAAM,2BAA2B,KAAK,wCAAwC,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,wBAAwB;AACnH,QAAM,iBAAiB;IACrB,oBAAoB,KAAK,kCAAkC,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,kBAAkB;IAC1F,yBAAyB,KAAK,uCAAuC,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,uBAAuB;IACzG,mBAAmB,KAAK,iCAAiC,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,iBAAiB;IACvF,sBAAsB,KAAK,oCAAoC,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,oBAAoB;IAChG,sBAAsB,KAAK,oCAAoC,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,oBAAoB;;AAGlG,qCAAgB,MAAK;AAMnB,QAAI,uBAAuB;AACzB,0BAAmB;AAEnB,cAAQ;QACN,UAAU,qBAAoB;QAC9B,UAAU;QACV,wBAAwB,CAAC,EAAE,IAAG,OAAQ,EAAE,OAAO,KAAK,GAAG,OAAO,IAAG;QACjE,kBAAkB,MAAM,iBAAiB,KAAK;OAC/C;AAED,uBAAiB,IAAI;AACrB,+BAAyB,IAAI;;EAEjC,GAAG,CAAC,qBAAqB,sBAAsB,uBAAuB,uBAAuB,CAAC;AAE9F,QAAM,gBAAgB,MAAM,SAAS;AAErC,QAAM,cAAc,kBAAkB,KAAK;AAE3C,QAAM,wBAAwB,IAAI,IAAI,MAAM,IAAI,YAAY,CAAC,EAAE;AAC/D,QAAM,WAAW,KAAK,IAAI,uBAAuB,CAAC;AAClD,QAAM,aAAa,KAAK,IAAI,UAAU,MAAM,MAAM;AAElD,QAAM,cAAc,0BAChB,MAAM,IAAI,CAAC,MAAM,UAAU,OAAA,OAAA,OAAA,OAAA,CAAA,GAAM,IAAI,GAAA,EAAE,eAAe,MAAK,CAAA,CAAG,IAC9D,yBAAyB,OAAO,UAAU,EAAE,IAAI,CAAC,MAAqB,UAAkB,OAAA,OAAA,OAAA,OAAA,CAAA,GACnF,IAAI,GAAA,EACP,gBAAgB,MAAK,CAAA,CACrB;AAEN,QAAM,YAAY,CAAC,SAAyD;AAAA,QAAAC,KAAA;AAC1E,YAAA,MAAAA,MAAA,KAAK,QAAE,QAAAA,QAAA,SAAAA,MAAK,KAAuB,mBAAa,QAAA,OAAA,SAAA,KAAI;EAAC;AAMvD,QAAM,aAAa,CAAC,SAClB,cAAc,KAAK,WAAS,MAAM,MAAM,MAAM,OAAO,KAAK,EAAE;AAC9D,QAAM,UAAU,CAAC,SAA0D,EAAE,mBAAmB;AAChG,QAAM,mBAAmB,CAAC,SAA0D,WAAW,IAAI,KAAK,QAAQ,IAAI;AAEpH,QAAM,mBAAmB,CAAC,SACxB,2BAA2B,QAAQ,IAAI,KAAM,mBAAmB,QAAQ,KAAK,kBAAkB;AAEjG,QAAM,6BAA6B,CAAC,MAAqB,UAAkB,UAAU,KAAK,iBAAiB,IAAI;AAE/G,QAAM,wBAAwB,CAAC,SAAwB,SAAS,UAAU,IAAI,CAAC;AAE/E,QAAM,aAAa,MACjB,cAAAC,QAAA;IAAA;IAAA,EACE,KAAK,gBACL,WAAW,eACTF,oBAAO,YAAY,GACnB,0BAA0BA,oBAAO,WAAWA,oBAAO,WACnD,iBAAiBA,oBAAO,mBAAmB,GAC3C,yBAAyBA,oBAAO,iBAAiB,GACjD,mBAAmBA,oBAAO,gBAAgB,CAAC,GAE7C,IAAI,mBAAiB,cACT,WAAS,oBACH,gBAAgB,qBAAqB,QACvD,OACE,CAAC,2BAA2B,gBACxB;MACE,CAAC,8BAAe,kBAAkB,GAAG;QAEvC,OAAS;IAGf,cAAAE,QAAA,cAAC,aAAW,EAAC,YAAY,CAAC,gBAAe,GACtC,YAAY,IAAI,CAAC,MAAqB,UACrC,cAAAA,QAAA,cAAC,YAAU,EACT,KAAK,UAAU,IAAI,GACnB,IAAI,CAAC,QAAQ,IAAI,GACjB,gBAAgB,YAAS;AACvB,UAAI,WAAW,WAAW;AACxB,yBAAiB,CAAA,CAAE;iBACV,WAAW,UAAU;AAC9B,wBAAgB,CAAA,CAAE;;IAEtB,EAAC,GAEA,CAAC,OAAe,0BAAgE;;AAAC,aAChF,cAAAA,QAAA,cAAA,MAAA,OAAA,OAAA,EAAA,eACe,CAAC,iBAAiB,IAAI,GACnC,WACE,iBAAiB,IAAI,IACjB,eACEF,oBAAO,iBAAiB,GACxB,CAAC,2BAA2BA,oBAAO,MACnC,CAAC,kBAAkB,QAAQ,sBAAsB,IAAI,CAAC,KAAKA,oBAAO,eAAe,CAAC,IAEpF,eAAKA,oBAAO,OAAOA,oBAAO,eAAcC,MAAA,KAAK,UAAI,QAAAA,QAAA,SAAAA,MAAI,MAAM,EAAE,GAAGD,oBAAO,IAAI,GAEjF,KAAK,aAAU;AACb,YAAI,yBAAyB;AAC3B,2BAAiB,QAAQ,sBAAsB,IAAI,CAAC,IAAI;eACnD;AACL,4BAAkB,QAAQ,sBAAsB,IAAI,CAAC,IAAI;;MAE7D,GACA,OACE,CAAC,2BAA2B,gBACxB;QACE,CAAC,8BAAe,kBAAkB,IAChC,MAAA,KAAC,KAAuB,oBAAc,QAAA,OAAA,SAAA,KAAK,KAAuB,mBAAa,QAAA,OAAA,SAAA,KAAI;UAEvF,QAEN,KAAK,UAAU,IAAI,EAAC,GAChB,8BAA8B,yBAAyB,QAAQ,GAAG,KAAK,QAAQ,QAAQ,KAAK,EAAE,CAAC,CAAC,GAEnG,iBAAiB,IAAI,KACpB,cAAAE,QAAA;QAAC;;;UAEC,WAAW,eACT,gBAAgBF,oBAAO,mBAAmB,GAC1C,mBAAmBA,oBAAO,eAAe,CAAC;UAE5C,KAAK,UAAU,IAAI;UACnB,KAAK,2BAA2B,MAAM,KAAK,IAAI,wBAAwB;UACvE,iBAAiB,2BAA2B,MAAM,KAAK,IAAI,QAAQ;UACnE,aAAa;QAAc,GACvB,IAAI;MAAA,CAEX;KAEJ,CAEJ,CAAC;EACU;AAIlB,SACE,cAAAE,QAAA;IAAA;IAAA,OAAA,OAAA,CAAA,GACM,WAAS,EACb,WAAW,eACT,UAAU,WACVF,oBAAO,UACPA,oBAAO,cAAc,UAAU,EAAE,GACjCA,oBAAO,OACP,iBAAiBA,oBAAO,aACxB,MAAM,WAAW,KAAKA,oBAAO,YAAY,GACzC,2BAA2BA,oBAAO,UAClC,mBAAmBA,oBAAO,gBAAgB,CAAC,GAE7C,KAAK,UAAS,GACV,8BAA8B,+BAA+B,MAAM,QAAQ,MAAM,uBAAuB,CAAC,CAAC;IAE7G,2BAA2B,WAAU;IACrC,iBACC,cAAAE,QAAA;MAAA;MAAA,OAAA,OAAA,EACE,WAAW;QACTF,oBAAO,kBAAkB;QACzB,mBAAmBA,oBAAO,gBAAgB;QAC1C,0BAA0BA,oBAAO,WAAWA,oBAAO;QACnD,iBAAiBA,oBAAO,mBAAmB;QAC3C,MAAM,WAAW,KAAKA,oBAAO,YAAY;QACzC,0BAA0B,UAAU;;SAEtC,SAAS,sBACT,KAAK,mBAAkB,GACnB,8BAA8B;QAChC,QAAQ;QACR,QAAQ;UACN,OAAO;UACP,UAAU,GAAG,CAAC,uBAAuB;;OAEI,CAAC;MAE9C,cAAAE,QAAA;QAAA;QAAA,EAAA,aAAgB,UAAS,WAAWF,oBAAO,QAAQ,MAAK,UAAS,IAAI,mBAAkB;QACpF,uBAAuB,cAAAE,QAAA,cAAA,MAAA,EAAI,WAAWF,oBAAO,OAAM,GAAG,mBAAmB;QAC1E,cAAAE,QAAA,cAAA,QAAA,EAAM,WAAWF,oBAAO,YAAY,EAAC,GAClC,aAAa,IAAI,CAAC,EAAE,MAAM,WAAW,SAAQ,MAC5C,cAAAE,QAAA,cAAC,uBAAqB,EACpB,KAAK,MACL,UACA,OAAO,eAAe,SAAS,GAC/B,OAAO,YAAY,IAAI,EAAC,CAAA,CAE3B,CAAC;MACG;MAET,cAAAA,QAAA;QAAA;QAAA,EAAA,iBACiB,mBAAiB,oBACd,oBAAkB,iBACrB,yBAAuB,cAC1B,0BACZ,WAAW,eAAKF,oBAAO,QAAQ,2BAA2BA,oBAAO,QAAQ,EAAC;QAE1E,cAAAE,QAAA,cAAC,kBAAY,EAAC,WAAWF,oBAAO,MAAM,MAAK,UAAS,MAAK,aAAY,CAAA;MAAG;IACjE;IAGZ,CAAC,2BAA2B,WAAU;EAAE;AAG/C;AAEA,IAAM,wBAAwB,CAAC,EAC7B,UACA,OACA,MAAK,MAKF;AACH,SACE,cAAAE,QAAA;IAAA;IAAA,EAAM,WAAWF,oBAAO,YAAY,EAAC;IACnC,cAAAE,QAAA;MAAA;MAAA,EAAA,cAAkB,OAAO,MAAK,MAAK;MACjC,cAAAA,QAAA;QAAA;QAAA,EAAM,OAAO,OAAK,eAAc,OAAM;QACpC,cAAAA,QAAA,cAAC,kBAAY,EAAC,MAAM,SAAQ,CAAA;MAAI;IAC3B;IAET,cAAAA,QAAA,cAAA,QAAA,EAAM,WAAWF,oBAAO,cAAc,EAAC,GAAG,KAAK;EAAQ;AAG7D;AAEA,IAAM,cAAc,CAAC,EAAE,UAAU,WAAU,MACzC,aAAa,cAAAE,QAAA,cAAC,yBAAe,EAAC,WAAW,KAAI,GAAG,QAAQ,IAAsB,cAAAA,QAAA,cAAA,cAAAA,QAAA,UAAA,MAAG,QAAQ;;;ASjY3F,IAAAC,gBAAkB;;;ACSX,IAAM,iCAAiC;;;ADOhC,SAAP,uBAAwC,IAAmD;MAAnD,EAAE,OAAO,YAAW,IAAA,IAAK,YAAS,OAAA,IAAlC,CAAA,SAAA,aAAA,CAAoC;AACjF,QAAM,EAAE,gBAAgB,WAAW,YAAY,iBAAiB,iBAAiB,UAAS,IAAK,YAAW,OAAA,OAAA,EACxG,MAAK,GACF,SAAS,CAAA;AAGd,QAAM,OAAO,gBAAgB,UAAU;AACvC,QAAM,YAAY,KAAK,yBAAyB,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,SAAS;AACtE,QAAM,iBAAiB;IACrB,oBAAoB,KAAK,kCAAkC,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,kBAAkB;IAC1F,yBAAyB,KAAK,uCAAuC,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,uBAAuB;IACzG,mBAAmB,KAAK,iCAAiC,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,iBAAiB;IACvF,sBAAsB,KAAK,oCAAoC,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,oBAAoB;IAChG,sBAAsB,KAAK,oCAAoC,gBAAW,QAAX,gBAAW,SAAA,SAAX,YAAa,oBAAoB;;AAQlG,QAAM,iBAAiB,mBAAmB,CAAC,mBAAmB,CAAC;AAE/D,QAAM,eAAe,CAAC,mBAAmB;AAKzC,WAAS,iCAA8B;AACrC,QAAI,kBAAkB,CAAC,OAAO;AAC5B;;AAGF;;;MAGE,cAAAC,QAAA,cAAC,yBAAe,EAAC,WAAU,MAAK,WAAWC,oBAAO,YAAY,GAAC,cAAc,UAAS,GACnF,MAAM,IAAI,CAAC,MAAM,UAAS;;AAAC,eAC1B,cAAAD,QAAA,cAAC,YAAU,EACT,uBAAuB,EAAE,UAAU,+BAA8B,GACjE,MAAKE,MAAA,KAAK,QAAE,QAAAA,QAAA,SAAAA,MAAI,OAChB,IAAI,KAAI,GAEP,CAAC,OAAe,0BAAgE;;AAAC,iBAChF,cAAAF,QAAA,cAAA,MAAA,EAAI,WAAWC,oBAAO,iBAAiB,EAAC,GACrC,WAAW,OAAMC,MAAA,KAAK,QAAE,QAAAA,QAAA,SAAAA,MAAI,OAAO,uBAAuB,KAAK,CAAC;SAEpE;OAEJ,CAAC;;EAGR;AAMA,WAAS,oCAAiC;AACxC,QAAI,CAAC,kBAAkB,CAAC,OAAO;AAC7B;;AAGF,WACE,cAAAF,QAAA,cAAA,MAAA,OAAA,OAAA,EACE,WAAWC,oBAAO,YAAY,GAAC,cACnB,UAAS,GACjB,8BAA8B,+BAA+B,MAAM,QAAQ,KAAK,CAAC,CAAC,GAErF,MAAM,IAAI,CAAC,MAAM,UAAS;;AAAC,aAC1B,cAAAD,QAAA,cAAA,MAAA,OAAA,OAAA,EACE,MAAKE,MAAA,KAAK,QAAE,QAAAA,QAAA,SAAAA,MAAI,OAChB,WAAWD,oBAAO,iBAAiB,EAAC,GAChC,8BAA8B,yBAAyB,QAAQ,GAAG,KAAK,QAAQ,QAAQ,KAAK,EAAE,CAAC,CAAC,GAEnG,WAAW,OAAM,KAAA,KAAK,QAAE,QAAA,OAAA,SAAA,KAAI,KAAK,CAAC;KAEtC,CAAC;EAGR;AAMA,WAAS,WACP,MACA,KACA,uBACA,iBAAoC;AAEpC,WACE,cAAAD,QAAA;MAAC;;;QAEC,WAAW,eAAK,gBAAgBC,oBAAO,mBAAmB,GAAG,mBAAmBA,oBAAO,eAAe,CAAC;QACvG;QACA,KAAK;QACL;QACA,aAAa;MAAc,GACvB,IAAI;IAAA;EAGd;AAEA,SACE,cAAAD,QAAA;IAAA;IAAA,OAAA,OAAA,CAAA,GACM,WAAS,EACb,WAAW,eAAK,UAAU,WAAWC,oBAAO,UAAUA,oBAAO,cAAc,UAAU,EAAE,CAAC,GACxF,KAAK,UAAS,CAAA;IAEb,+BAA8B;IAC9B,kCAAiC;EAAE;AAG1C;;;AVzHc,SAAP,SAA0B,OAAoB;AACnD,+BAAU,MAAK;AACb,QAAI,MAAM,MAAM,SAAS,GAAG;AAC1B,uBAAiB,MAAM,KAAK;;EAEhC,GAAG,CAAC,MAAM,KAAK,CAAC;AAEhB,MAAI,MAAM,YAAY;AACpB,WAAO,cAAAE,QAAA,cAAC,qBAAmB,OAAA,OAAA,CAAA,GAAK,KAAK,CAAA;SAChC;AACL,WAAO,cAAAA,QAAA,cAAC,wBAAsB,OAAA,OAAA,CAAA,GAAK,KAAK,CAAA;;AAE5C;AAEA,iBAAiB,UAAU,UAAU;",
  "names": ["import_react", "import_react", "import_react", "styles_css_default", "React", "styles_css_default", "internal_default", "styles_css_default", "_a", "React", "import_react", "React", "styles_css_default", "_a", "React"]
}
