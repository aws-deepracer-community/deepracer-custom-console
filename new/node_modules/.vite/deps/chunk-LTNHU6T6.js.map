{
  "version": 3,
  "sources": ["../../src/internal/breakpoints.ts", "../../src/internal/hooks/use-mobile/index.ts", "../../src/i18n/context.ts", "../../src/internal/is-development.ts", "../../@cloudscape-design/component-toolkit/lib/container-queries/use-container-query.js", "../../@cloudscape-design/component-toolkit/lib/use-controllable-state/use-controllable-state.js", "../../src/internal/direction.ts", "../../src/internal/utils/scrollable-containers.ts", "../../src/internal/generated/custom-css-properties/index.ts"],
  "sourcesContent": ["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport type Breakpoint = 'default' | 'xxs' | 'xs' | 's' | 'm' | 'l' | 'xl';\n\nconst BREAKPOINT_MAPPING: [Breakpoint, number][] = [\n  ['xl', 1840],\n  ['l', 1320],\n  ['m', 1120],\n  ['s', 912],\n  ['xs', 688],\n  ['xxs', 465],\n  ['default', -1],\n];\n\nexport const mobileBreakpoint = BREAKPOINT_MAPPING.filter(b => b[0] === 'xs')[0][1];\n\nconst BREAKPOINTS_DESCENDING = BREAKPOINT_MAPPING.map(([bp]) => bp);\n\n/**\n * Take a breakpoint mapping and return the breakpoint value that most closely matches the actual breakpoint.\n */\nexport function matchBreakpointMapping<T>(subset: Partial<Record<Breakpoint, T>>, actual: Breakpoint): T | null {\n  const qualifyingBreakpoints = BREAKPOINT_MAPPING.slice(BREAKPOINTS_DESCENDING.indexOf(actual));\n  for (const [breakpoint] of qualifyingBreakpoints) {\n    const breakpointValue = subset[breakpoint];\n    if (breakpointValue !== undefined) {\n      return breakpointValue;\n    }\n  }\n  return null;\n}\n\n/**\n * Get the named breakpoint for a provided width, optionally filtering to a subset of breakpoints.\n */\nexport function getMatchingBreakpoint<T extends readonly Breakpoint[]>(\n  width: number,\n  breakpointFilter?: T\n): T[number] | 'default' {\n  for (const [breakpoint, breakpointWidth] of BREAKPOINT_MAPPING) {\n    if (width > breakpointWidth && (!breakpointFilter || breakpointFilter.indexOf(breakpoint) !== -1)) {\n      return breakpoint;\n    }\n  }\n  return 'default';\n}\n\nexport function getBreakpointValue(breakpoint: Breakpoint): number {\n  return BREAKPOINT_MAPPING.find(bp => bp[0] === breakpoint)![1];\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { createSingletonState } from '@cloudscape-design/component-toolkit/internal';\nimport { getMatchingBreakpoint, mobileBreakpoint } from '../../breakpoints';\n\nfunction getIsMobile() {\n  if (typeof window === 'undefined') {\n    // assume desktop in server-rendering\n    return false;\n  }\n\n  if (window.matchMedia) {\n    /**\n     * Some browsers include the scrollbar width in their media query calculations, but\n     * some browsers don't. Thus we can't use `window.innerWidth` or\n     * `document.documentElement.clientWidth` to get a very accurate result (since we\n     * wouldn't know which one of them to use).\n     * Instead, we use the media query here in JS too.\n     */\n    return window.matchMedia(`(max-width: ${mobileBreakpoint}px)`).matches;\n  }\n\n  return getMatchingBreakpoint(window.innerWidth, ['xs']) !== 'xs';\n}\n\nexport const useMobile = createSingletonState<boolean>({\n  initialState: () => getIsMobile(),\n  factory: handler => {\n    const listener = () => handler(getIsMobile());\n    window.addEventListener('resize', listener);\n    return () => {\n      window.removeEventListener('resize', listener);\n    };\n  },\n});\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useContext } from 'react';\nimport { I18nFormatArgTypes } from './messages-types';\n\nexport type CustomHandler<ReturnValue, FormatFnArgs> = (formatFn: (args: FormatFnArgs) => string) => ReturnValue;\n\nexport interface FormatFunction {\n  (namespace: string, component: string, key: string, provided: string): string;\n  (namespace: string, component: string, key: string, provided: string | undefined): string | undefined;\n  <T, A = unknown>(namespace: string, component: string, key: string, provided: T, handler?: CustomHandler<T, A>): T;\n}\n\nexport interface InternalI18nContextProps {\n  locale: string | null;\n  format: FormatFunction;\n}\n\nexport const InternalI18nContext = React.createContext<InternalI18nContextProps>({\n  locale: null,\n  format: <T>(_namespace: string, _component: string, _key: string, provided: T) => provided,\n});\n\nexport function useLocale(): string | null {\n  return useContext(InternalI18nContext).locale;\n}\n\n/**\n * Utility to get \"keyof T\" but exclude number or symbol types.\n * TypeScript allows those types because JS implicitly casts them to string.\n */\ntype StringKeyOf<T> = Extract<keyof T, string>;\n\nexport interface ComponentFormatFunction<ComponentName extends StringKeyOf<I18nFormatArgTypes>> {\n  <MessageKey extends StringKeyOf<I18nFormatArgTypes[ComponentName]>>(\n    key: MessageKey,\n    provided: string,\n    handler?: CustomHandler<string, I18nFormatArgTypes[ComponentName][MessageKey]>\n  ): string;\n  <MessageKey extends StringKeyOf<I18nFormatArgTypes[ComponentName]>>(\n    key: MessageKey,\n    provided: string | undefined,\n    handler?: CustomHandler<string, I18nFormatArgTypes[ComponentName][MessageKey]>\n  ): string | undefined;\n  <MessageKey extends StringKeyOf<I18nFormatArgTypes[ComponentName]>, ReturnValue>(\n    key: MessageKey,\n    provided: ReturnValue,\n    handler: I18nFormatArgTypes[ComponentName][MessageKey] extends never\n      ? never\n      : CustomHandler<ReturnValue, I18nFormatArgTypes[ComponentName][MessageKey]>\n  ): ReturnValue;\n}\n\nexport function useInternalI18n<ComponentName extends StringKeyOf<I18nFormatArgTypes>>(\n  componentName: ComponentName\n): ComponentFormatFunction<ComponentName> {\n  const { format } = useContext(InternalI18nContext);\n  return <MessageKey extends StringKeyOf<I18nFormatArgTypes[ComponentName]>, ValueType>(\n    key: MessageKey,\n    provided: ValueType,\n    customHandler?: CustomHandler<ValueType, I18nFormatArgTypes[ComponentName][MessageKey]>\n  ) => {\n    return format('@cloudscape-design/components', componentName, key, provided, customHandler);\n  };\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * Allow use of `process.env.NODE_ENV` specifically.\n *\n * Bundlers like Webpack and Parcel find uses of `process.env.NODE_ENV` and\n * statically replace them with the actual value during the build. When creating\n * production bundles, the use is replaced with the string \"production\", and\n * dead code checkers (e.g. terser) will then remove our dev-only code from\n * production bundles, letting us write runtime checks and warnings that don't\n * hurt production bundle size or performance.\n */\ndeclare const process: { env: { NODE_ENV?: string } };\n\n/**\n * Whether the bundle is a development bundle.\n * Only use this in an if condition and on its own! This will help bundlers find\n * and remove the conditional statement for production bundles.\n */\nexport const isDevelopment = process.env.NODE_ENV !== 'production';\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useRef, useState, useCallback } from 'react';\nimport { useResizeObserver } from '../internal/container-queries/use-resize-observer';\n/**\n * Attaches resize-observer to the referenced element and keeps last observation in state.\n * The hook allows to limit the amount of re-renders to only when the observed value changes.\n *\n * @example\n * Switching display mode under a given condition (only re-renders when mode changes):\n * ```\n * const [smallMode, ref] = useContainerQuery(entry => entry.contentBoxHeight <= smallModeHeight, [smallModeHeight])\n * ```\n *\n * @example\n * Obtaining observer entry (re-renders with each observation):\n * ```\n * const [entry, ref] = useContainerQuery(entry => entry)\n * ```\n *\n * @example\n * Using previous state to avoid unnecessary re-renders:\n * ```\n * const [value, ref] = useContainerQuery((entry, prev) => shouldUpdate(entry) ? getValue(entry) : prev)\n * ```\n *\n * @typeParam ObservedState State obtained from the last observation\n * @param mapFn Function to convert ContainerQueryEntry to ObservedState\n * @param deps Dependency list to indicate when the mapFn changes\n * @returns A tuple of the observed state and a reference to be attached to the target element\n */\nexport default function useContainerQuery(mapFn, deps) {\n    if (deps === void 0) { deps = []; }\n    var elementRef = useRef(null);\n    var _a = useState(null), state = _a[0], setState = _a[1];\n    // Update getElement when deps change to trigger new observation.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    var getElement = useCallback(function () { return elementRef.current; }, deps);\n    useResizeObserver(getElement, function (entry) { return setState(function (prevState) { return mapFn(entry, prevState); }); });\n    return [state, elementRef];\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useState, useEffect, useCallback } from 'react';\nimport { useStableCallback } from '../internal/stable-callback';\nimport { isDevelopment } from '../internal/is-development';\nimport { warnOnce } from '../internal/logging';\n/**\n * This hook allows you to make a component that can be used both in controlled\n * mode and uncontrolled mode. Pass in your component's props, and then implement\n * your component as if it was only controlled.\n *\n * A component determines its mode (either controlled or uncontrolled) on the\n * first render and keeps it for its lifetime. The mode cannot be switched later.\n *\n * @example\n * Using useControllableState in a custom checkbox component\n * ```\n * const [checked, setChecked] = useControllable(\n *   props.checked,\n *   props.onChange,\n *   props.defaultEnabled ?? false,\n *   {\n *     componentName: 'MyCheckboxComponent',\n *     propertyName: 'checked',\n *     changeHandler: 'onChange'\n *   }\n * );\n *\n * return (\n *   <input\n *     type=\"checkbox\"\n *     checked={checked}\n *     onChange={event => setChecked(event.target.checked)}\n *   />\n * );\n * ```\n *\n * @param controlledValue The value to use for controlled mode\n * @param changeHandler The update handler for controlled mode\n * @param defaultValue The initial value for uncontrolled mode\n * @param propertyDescriptions Property names used when emitting warnings\n * @param fireEvent Callback executed when controllable value changes\n * @returns A tuple of value and value setter\n */\nexport default function useControllable(controlledValue, changeHandler, defaultValue, propertyDescriptions, fireEvent) {\n    if (fireEvent === void 0) { fireEvent = function (value, handler) { return handler(value); }; }\n    var componentName = propertyDescriptions.componentName, changeHandlerName = propertyDescriptions.changeHandlerName, propertyName = propertyDescriptions.propertyName;\n    // The decision whether a component is controlled or uncontrolled is made on\n    // its first render and cannot be changed afterwards.\n    var isControlled = useState(controlledValue !== undefined)[0];\n    // Most build tools will just strip this block from production builds, so we can\n    // skip the conditional hook lint error.\n    if (isDevelopment) {\n        // Print a warning if a controlled property was passed in without a change handler.\n        // This may fire every render if the change handler isn't memoized, but warnOnce\n        // will dedupe the error messages.\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        useEffect(function () {\n            if (isControlled && changeHandler === undefined) {\n                warnOnce(componentName, \"You provided a `\".concat(propertyName, \"` prop without an `\").concat(changeHandlerName, \"` handler. This will render a non-interactive component.\"));\n            }\n        }, [changeHandler, isControlled, componentName, changeHandlerName, propertyName]);\n        // Print a warning if the component switches between controlled and uncontrolled mode.\n        var isControlledValueProvided_1 = controlledValue !== undefined;\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        useEffect(function () {\n            if (isControlled !== isControlledValueProvided_1) {\n                var initialMode = isControlled ? 'controlled' : 'uncontrolled';\n                var modeNow = isControlledValueProvided_1 ? 'controlled' : 'uncontrolled';\n                warnOnce(componentName, \"A component tried to change \".concat(initialMode, \" '\").concat(propertyName, \"' property to be \").concat(modeNow, \". \") +\n                    \"This is not supported. Properties should not switch from \".concat(initialMode, \" to \").concat(modeNow, \" (or vice versa). \") +\n                    \"Decide between using a controlled or uncontrolled mode for the lifetime of the component. \" +\n                    \"More info: https://fb.me/react-controlled-components\");\n            }\n        }, [isControlled, isControlledValueProvided_1, propertyName, componentName]);\n    }\n    // This is the value that is used if the component is uncontrolled.\n    var _a = useState(defaultValue), valueState = _a[0], setValue = _a[1];\n    var _b = useState(false), isUncontrolledValueSet = _b[0], setIsUncontrolledValueSet = _b[1];\n    var stableFireEvent = useStableCallback(function (value, handler) { return fireEvent(value, handler); });\n    var setControlledValue = useCallback(function (value) {\n        if (changeHandler) {\n            stableFireEvent(value, changeHandler);\n        }\n    }, [changeHandler, stableFireEvent]);\n    // We allow changes to the defaultValue prop to be reflected until the component\n    // starts controlling it internally.\n    var currentUncontrolledValue = isUncontrolledValueSet ? valueState : defaultValue;\n    var setUncontrolledValue = useCallback(function (newValue) {\n        setValue(newValue);\n        setIsUncontrolledValueSet(true);\n    }, []);\n    return isControlled ? [controlledValue, setControlledValue] : [currentUncontrolledValue, setUncontrolledValue];\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nexport function isRtl(element: HTMLElement | SVGElement) {\n  return getComputedStyle(element).direction === 'rtl';\n}\n\n/**\n * The scrollLeft value will be a negative number if the direction is RTL and\n * needs to be converted to a positive value for direction independent scroll\n * computations. Additionally, the scrollLeft value can be a decimal value on\n * systems using display scaling requiring the floor and ceiling calls.\n */\nexport function getScrollInlineStart(element: HTMLElement) {\n  return isRtl(element) ? Math.floor(element.scrollLeft) * -1 : Math.ceil(element.scrollLeft);\n}\n\n/**\n * The getBoundingClientRect() function returns values relative to the top left\n * corner of the document regardless of document direction. The left/right position\n * will be transformed to insetInlineStart based on element direction in order to\n * support direction agnostic position computation.\n */\nexport function getLogicalBoundingClientRect(element: HTMLElement | SVGElement) {\n  const boundingClientRect = element.getBoundingClientRect();\n\n  const blockSize = boundingClientRect.height;\n  const inlineSize = boundingClientRect.width;\n  const insetBlockStart = boundingClientRect.top;\n  const insetBlockEnd = boundingClientRect.bottom;\n  const insetInlineStart = isRtl(element)\n    ? document.documentElement.clientWidth - boundingClientRect.right\n    : boundingClientRect.left;\n  const insetInlineEnd = insetInlineStart + inlineSize;\n\n  return {\n    blockSize,\n    inlineSize,\n    insetBlockStart,\n    insetBlockEnd,\n    insetInlineStart,\n    insetInlineEnd,\n  };\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { findUpUntil } from './dom';\nexport interface BoundingBox {\n  blockSize: number;\n  inlineSize: number;\n  insetBlockStart: number;\n  insetInlineStart: number;\n}\n\nexport const getOverflowParents = (element: HTMLElement): HTMLElement[] => {\n  const parents = [];\n  let node: HTMLElement | null = element;\n\n  while ((node = node.parentElement) && node !== document.body) {\n    getComputedStyle(node).overflow !== 'visible' && parents.push(node);\n  }\n  return parents;\n};\n\nexport const getOverflowParentDimensions = ({\n  element,\n  excludeClosestParent = false,\n  expandToViewport = false,\n  canExpandOutsideViewport = false,\n}: {\n  element: HTMLElement;\n  excludeClosestParent: boolean;\n  expandToViewport: boolean;\n  canExpandOutsideViewport: boolean;\n}): BoundingBox[] => {\n  const parents = expandToViewport\n    ? []\n    : getOverflowParents(element).map(el => {\n        const { height, width, top, left } = el.getBoundingClientRect();\n        return {\n          // Treat the whole scrollable area as the available height\n          // if we're allowed to expand past the viewport.\n          blockSize: canExpandOutsideViewport ? el.scrollHeight : height,\n          inlineSize: width,\n          insetBlockStart: top,\n          insetInlineStart: left,\n        };\n      });\n\n  if (canExpandOutsideViewport && !expandToViewport) {\n    const documentDimensions = document.documentElement.getBoundingClientRect();\n    parents.push({\n      inlineSize: Math.max(documentDimensions.width, document.documentElement.clientWidth),\n      blockSize: Math.max(documentDimensions.height, document.documentElement.clientHeight),\n      insetBlockStart: documentDimensions.top,\n      insetInlineStart: documentDimensions.left,\n    });\n  } else {\n    parents.push({\n      blockSize: window.innerHeight,\n      inlineSize: window.innerWidth,\n      insetBlockStart: 0,\n      insetInlineStart: 0,\n    });\n  }\n\n  if (excludeClosestParent && !expandToViewport) {\n    parents.shift();\n  }\n\n  return parents;\n};\n\ntype ScrollIntoViewOptions = Parameters<HTMLElement['scrollIntoView']>[0];\n\n/**\n * Calls `scrollIntoView` on the provided element with sensible defaults. If\n * the element does not exist or does not support the `scrollIntoView`\n * method, it will do nothing. This wrapper is created to support environments\n * where the native function is not available like JSDom (feature request:\n * https://github.com/jsdom/jsdom/issues/1422).\n *\n * @param element to be scrolled into view\n * @param options native options for `scrollIntoView`\n */\nexport function scrollElementIntoView(\n  element: HTMLElement | undefined,\n  options: ScrollIntoViewOptions = { block: 'nearest', inline: 'nearest' }\n) {\n  element?.scrollIntoView?.(options);\n}\n\nexport function calculateScroll({ insetBlockStart, blockSize }: BoundingBox) {\n  if (insetBlockStart < 0) {\n    return insetBlockStart;\n  } else if (insetBlockStart + blockSize > window.innerHeight) {\n    if (blockSize > window.innerHeight) {\n      return insetBlockStart;\n    } else {\n      return insetBlockStart + blockSize - window.innerHeight;\n    }\n  }\n  return 0;\n}\n\n/**\n * For elements with fixed position, the browser's native scrollIntoView API doesn't work,\n * so we need to manually scroll to the element's position.\n * Supports only vertical scrolling.\n */\nexport function scrollRectangleIntoView(box: BoundingBox, scrollableParent?: HTMLElement) {\n  const scrollAmount = calculateScroll(box);\n  if (scrollAmount) {\n    (scrollableParent || window).scrollBy(0, scrollAmount);\n  }\n}\n\nexport function getFirstScrollableParent(element: HTMLElement): HTMLElement | undefined {\n  return (\n    findUpUntil(element, el => {\n      const overflows = el.scrollHeight > el.clientHeight;\n      return overflows && ['scroll', 'auto'].includes(getComputedStyle(el).overflowY);\n    }) || undefined\n  );\n}\n", "const customCSSPropertiesMap: Record<string, string> = {\n  breadcrumbsGap: '--awsui-breadcrumbs-gap-lgosor',\n  contentGapLeft: '--awsui-content-gap-left-lgosor',\n  contentGapRight: '--awsui-content-gap-right-lgosor',\n  contentHeight: '--awsui-content-height-lgosor',\n  defaultMaxContentWidth: '--awsui-default-max-content-width-lgosor',\n  defaultMinContentWidth: '--awsui-default-min-content-width-lgosor',\n  drawerSize: '--awsui-drawer-size-lgosor',\n  footerHeight: '--awsui-footer-height-lgosor',\n  headerGap: '--awsui-header-gap-lgosor',\n  headerHeight: '--awsui-header-height-lgosor',\n  layoutWidth: '--awsui-layout-width-lgosor',\n  mainGap: '--awsui-main-gap-lgosor',\n  mainOffsetLeft: '--awsui-main-offset-left-lgosor',\n  mainTemplateRows: '--awsui-main-template-rows-lgosor',\n  maxContentWidth: '--awsui-max-content-width-lgosor',\n  minContentWidth: '--awsui-min-content-width-lgosor',\n  mobileBarHeight: '--awsui-mobile-bar-height-lgosor',\n  notificationsGap: '--awsui-notifications-gap-lgosor',\n  notificationsHeight: '--awsui-notifications-height-lgosor',\n  offsetTop: '--awsui-offset-top-lgosor',\n  offsetTopWithNotifications: '--awsui-offset-top-with-notifications-lgosor',\n  overlapHeight: '--awsui-overlap-height-lgosor',\n  navigationWidth: '--awsui-navigation-width-lgosor',\n  splitPanelReportedHeaderSize: '--awsui-split-panel-reported-header-size-lgosor',\n  splitPanelReportedSize: '--awsui-split-panel-reported-size-lgosor',\n  splitPanelHeight: '--awsui-split-panel-height-lgosor',\n  splitPanelMinWidth: '--awsui-split-panel-min-width-lgosor',\n  splitPanelMaxWidth: '--awsui-split-panel-max-width-lgosor',\n  toolsMaxWidth: '--awsui-tools-max-width-lgosor',\n  toolsWidth: '--awsui-tools-width-lgosor',\n  toolsAnimationStartingOpacity: '--awsui-tools-animation-starting-opacity-lgosor',\n  contentScrollMargin: '--awsui-content-scroll-margin-lgosor',\n  flashbarStackDepth: '--awsui-flashbar-stack-depth-lgosor',\n  flashbarStackIndex: '--awsui-flashbar-stack-index-lgosor',\n  flashbarStickyBottomMargin: '--awsui-flashbar-sticky-bottom-margin-lgosor',\n  stackedNotificationsBottomMargin: '--awsui-stacked-notifications-bottom-margin-lgosor',\n  stackedNotificationsDefaultBottomMargin: '--awsui-stacked-notifications-default-bottom-margin-lgosor',\n  dropdownDefaultMaxWidth: '--awsui-dropdown-default-max-width-lgosor',\n  spinnerRotatorFrom: '--awsui-spinner-rotator-from-lgosor',\n  spinnerRotatorTo: '--awsui-spinner-rotator-to-lgosor',\n  spinnerLineLeftFrom: '--awsui-spinner-line-left-from-lgosor',\n  spinnerLineLeftTo: '--awsui-spinner-line-left-to-lgosor',\n  spinnerLineRightFrom: '--awsui-spinner-line-right-from-lgosor',\n  spinnerLineRightTo: '--awsui-spinner-line-right-to-lgosor',\n};\nexport default customCSSPropertiesMap;\n"],
  "mappings": "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",
  "names": ["React", "import_react", "import_react"]
}
