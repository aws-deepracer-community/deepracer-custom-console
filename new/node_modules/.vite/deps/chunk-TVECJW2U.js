import {
  DATA_ATTR_FUNNEL_INTERACTION_ID,
  DATA_ATTR_FUNNEL_SUBSTEP,
  findUpUntil,
  getFunnelNameSelector,
  getNameFromSelector,
  getSubStepAllSelector
} from "./chunk-MKRUABPM.js";
import {
  __awaiter,
  __rest,
  clsx_m_default,
  nodeContains
} from "./chunk-3NFHZQPK.js";
import {
  require_react
} from "./chunk-WHMHD7EJ.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@cloudscape-design/components/internal/components/live-region/index.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/screenreader-only/index.js
var import_react = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/screenreader-only/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/screenreader-only/styles.scoped.css";
var styles_css_default = {
  "root": "awsui_root_xttbq_pgwjg_99"
};

// node_modules/@cloudscape-design/components/internal/components/screenreader-only/index.js
function ScreenreaderOnly(props) {
  return import_react.default.createElement("span", Object.assign({}, props, { className: clsx_m_default(styles_css_default.root, props.className) }));
}

// node_modules/@cloudscape-design/components/internal/components/live-region/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/live-region/styles.scoped.css";
var styles_css_default2 = {
  "root": "awsui_root_3bgfn_im8v7_5"
};

// node_modules/@cloudscape-design/components/internal/components/live-region/index.js
var live_region_default = (0, import_react2.memo)(LiveRegion);
function LiveRegion(_a) {
  var { assertive = false, delay = 10, visible = false, tagName: TagName = "span", children, id, source } = _a, restProps = __rest(_a, ["assertive", "delay", "visible", "tagName", "children", "id", "source"]);
  const sourceRef = (0, import_react2.useRef)(null);
  const targetRef = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    function getSourceContent() {
      if (source) {
        return source.map((item) => {
          if (!item) {
            return void 0;
          }
          if (typeof item === "string") {
            return item;
          }
          if (item.current) {
            return extractInnerText(item.current);
          }
        }).filter(Boolean).join(" ");
      }
      if (sourceRef.current) {
        return extractInnerText(sourceRef.current);
      }
    }
    function updateLiveRegion() {
      const sourceContent = getSourceContent();
      if (targetRef.current && sourceContent) {
        const targetContent = extractInnerText(targetRef.current);
        if (targetContent !== sourceContent) {
          targetRef.current.innerText = sourceContent;
        }
      }
    }
    let timeoutId;
    if (delay) {
      timeoutId = setTimeout(updateLiveRegion, delay);
    } else {
      updateLiveRegion();
    }
    return () => {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    };
  });
  return import_react2.default.createElement(
    import_react2.default.Fragment,
    null,
    visible && !source && import_react2.default.createElement(TagName, { ref: sourceRef, id }, children),
    import_react2.default.createElement(
      ScreenreaderOnly,
      Object.assign({}, restProps, { className: clsx_m_default(styles_css_default2.root, restProps.className) }),
      !visible && !source && import_react2.default.createElement(TagName, { ref: sourceRef, "aria-hidden": "true" }, children),
      import_react2.default.createElement("span", { ref: targetRef, "aria-atomic": "true", "aria-live": assertive ? "assertive" : "polite" })
    )
  );
}
function extractInnerText(node) {
  return (node.innerText || "").replace(/\s+/g, " ").trim();
}

// node_modules/@cloudscape-design/components/internal/analytics/context/analytics-context.js
var import_react3 = __toESM(require_react());
var FunnelContext = (0, import_react3.createContext)({
  funnelInteractionId: void 0,
  funnelNameSelector: getFunnelNameSelector(),
  setFunnelInteractionId: () => {
  },
  funnelType: "single-page",
  optionalStepNumbers: [],
  totalFunnelSteps: 0,
  funnelSubmit: () => {
  },
  funnelCancel: () => {
  },
  submissionAttempt: 0,
  funnelNextOrSubmitAttempt: () => {
  },
  funnelState: { current: "default" },
  errorCount: { current: 0 },
  loadingButtonCount: { current: 0 },
  latestFocusCleanupFunction: { current: void 0 },
  isInFunnel: false,
  wizardCount: { current: 0 }
});
var FunnelStepContext = (0, import_react3.createContext)({
  stepNameSelector: "",
  stepNumber: 0,
  subStepCount: { current: 0 },
  isInStep: false,
  funnelInteractionId: void 0,
  onStepChange: () => {
  },
  subStepConfiguration: { current: /* @__PURE__ */ new Map() }
});
var FunnelSubStepContext = (0, import_react3.createContext)({
  subStepId: "",
  subStepSelector: "",
  subStepNameSelector: "",
  subStepRef: { current: null },
  isNestedSubStep: false,
  mousePressed: { current: false },
  isFocusedSubStep: { current: false },
  focusCleanupFunction: { current: void 0 }
});
var FunnelNameSelectorContext = (0, import_react3.createContext)(void 0);

// node_modules/@cloudscape-design/components/internal/analytics/index.js
var FunnelMetrics = {
  funnelStart() {
    return "";
  },
  funnelError() {
  },
  funnelComplete() {
  },
  funnelSuccessful() {
  },
  funnelCancelled() {
  },
  funnelChange() {
  },
  funnelStepStart() {
  },
  funnelStepComplete() {
  },
  funnelStepNavigation() {
  },
  funnelStepError() {
  },
  funnelStepChange() {
  },
  funnelSubStepStart() {
  },
  funnelSubStepComplete() {
  },
  funnelSubStepError() {
  },
  helpPanelInteracted() {
  },
  externalLinkInteracted() {
  }
};

// node_modules/@cloudscape-design/components/internal/utils/node-belongs.js
function nodeBelongs(container, target) {
  var _a;
  if (!(target instanceof Node)) {
    return false;
  }
  const portal = findUpUntil(target, (node) => node === container || node instanceof HTMLElement && !!node.dataset.awsuiReferrerId);
  if (portal && portal === container) {
    return true;
  }
  const referrer = portal instanceof HTMLElement ? document.getElementById((_a = portal.dataset.awsuiReferrerId) !== null && _a !== void 0 ? _a : "") : null;
  return referrer ? nodeContains(container, referrer) : nodeContains(container, target);
}

// node_modules/@cloudscape-design/components/internal/analytics/hooks/use-funnel.js
var import_react4 = __toESM(require_react());
var useFunnelSubStep = () => {
  const context = (0, import_react4.useContext)(FunnelSubStepContext);
  const { funnelInteractionId, funnelState, latestFocusCleanupFunction } = useFunnel();
  const { stepNumber, stepNameSelector, subStepConfiguration } = useFunnelStep();
  const { instanceIdentifier, subStepId, subStepSelector, subStepNameSelector, subStepRef, isNestedSubStep, mousePressed, isFocusedSubStep, focusCleanupFunction } = context;
  if (isNestedSubStep) {
    return context;
  }
  const onFocus = (event) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d;
    const element = event.target;
    yield new Promise((r) => setTimeout(r, 1));
    if (document.activeElement !== element) {
      return;
    }
    if (isFocusedSubStep.current) {
      return;
    }
    isFocusedSubStep.current = true;
    if (funnelInteractionId && subStepId) {
      (_a = latestFocusCleanupFunction.current) === null || _a === void 0 ? void 0 : _a.call(latestFocusCleanupFunction);
      const subStepName = getNameFromSelector(subStepNameSelector);
      const stepName = getNameFromSelector(stepNameSelector);
      const subStepNumber = (_d = (_c = (_b = subStepConfiguration.current) === null || _b === void 0 ? void 0 : _b.get(stepNumber)) === null || _c === void 0 ? void 0 : _c.find((step) => step.name === subStepName)) === null || _d === void 0 ? void 0 : _d.number;
      FunnelMetrics.funnelSubStepStart({
        instanceIdentifier,
        funnelInteractionId,
        subStepSelector,
        subStepNameSelector,
        subStepName,
        subStepNumber,
        stepNumber,
        stepName,
        stepNameSelector,
        subStepAllSelector: getSubStepAllSelector()
      });
      let cleanupFunctionHasBeenRun = false;
      focusCleanupFunction.current = () => {
        var _a2, _b2, _c2;
        if (cleanupFunctionHasBeenRun) {
          return;
        }
        cleanupFunctionHasBeenRun = true;
        const subStepNumber2 = (_c2 = (_b2 = (_a2 = subStepConfiguration.current) === null || _a2 === void 0 ? void 0 : _a2.get(stepNumber)) === null || _b2 === void 0 ? void 0 : _b2.find((s) => s.name === subStepName)) === null || _c2 === void 0 ? void 0 : _c2.number;
        if (funnelState.current !== "cancelled") {
          FunnelMetrics.funnelSubStepComplete({
            instanceIdentifier,
            funnelInteractionId,
            subStepSelector,
            subStepNameSelector,
            subStepName,
            subStepNumber: subStepNumber2,
            stepNumber,
            stepName,
            stepNameSelector,
            subStepAllSelector: getSubStepAllSelector()
          });
        }
      };
      latestFocusCleanupFunction.current = focusCleanupFunction.current;
    }
  });
  const onBlur = (event) => {
    var _a;
    if (mousePressed.current) {
      return;
    }
    if (!subStepRef.current || !event.relatedTarget || !nodeBelongs(subStepRef.current, event.relatedTarget)) {
      isFocusedSubStep.current = false;
      if (funnelInteractionId && subStepId && funnelState.current !== "cancelled") {
        (_a = focusCleanupFunction.current) === null || _a === void 0 ? void 0 : _a.call(focusCleanupFunction);
      }
    }
  };
  const funnelSubStepProps = funnelInteractionId ? {
    [DATA_ATTR_FUNNEL_SUBSTEP]: subStepId,
    onFocus,
    onBlur
  } : {};
  return Object.assign({ funnelSubStepProps }, context);
};
var useFunnelStep = () => {
  const context = (0, import_react4.useContext)(FunnelStepContext);
  return context;
};
var useFunnel = () => {
  const context = (0, import_react4.useContext)(FunnelContext);
  const funnelProps = context.funnelInteractionId ? {
    [DATA_ATTR_FUNNEL_INTERACTION_ID]: context.funnelInteractionId
  } : {};
  return Object.assign({ funnelProps }, context);
};
var useFunnelNameSelector = () => {
  const context = (0, import_react4.useContext)(FunnelNameSelectorContext);
  return context;
};

export {
  ScreenreaderOnly,
  live_region_default,
  FunnelContext,
  FunnelStepContext,
  FunnelSubStepContext,
  FunnelNameSelectorContext,
  FunnelMetrics,
  nodeBelongs,
  useFunnelSubStep,
  useFunnelStep,
  useFunnel,
  useFunnelNameSelector
};
//# sourceMappingURL=chunk-TVECJW2U.js.map
