import {
  checkSafeUrl
} from "./chunk-ENXOWVJK.js";
import {
  fireCancelableEvent,
  fireNonCancelableEvent,
  isPlainLeftClick
} from "./chunk-IGE3W7Z3.js";
import {
  __rest,
  applyDisplayName,
  clsx_m_default,
  getBaseProps,
  useBaseComponent
} from "./chunk-6NQVCTSK.js";
import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@cloudscape-design/components/anchor-navigation/index.js
var import_react3 = __toESM(require_react());

// node_modules/@cloudscape-design/components/anchor-navigation/internal.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/components/anchor-navigation/use-scroll-spy.js
var import_react = __toESM(require_react());
var isBrowser = typeof window !== "undefined";
function useScrollSpy({ hrefs, scrollSpyOffset, activeHref }) {
  const [currentHref, setCurrentHref] = (0, import_react.useState)(activeHref);
  const [lastAnchorExists, setLastAnchorExists] = (0, import_react.useState)(false);
  (0, import_react.useEffect)(() => {
    setCurrentHref(activeHref);
  }, [activeHref]);
  (0, import_react.useEffect)(() => {
    var _a;
    setLastAnchorExists(isBrowser && !!document.getElementById((_a = hrefs[hrefs.length - 1]) === null || _a === void 0 ? void 0 : _a.slice(1)));
  }, [hrefs]);
  const getRectByHref = (0, import_react.useCallback)((href) => {
    var _a;
    return (_a = document.getElementById(href.slice(1))) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
  }, []);
  const isPageBottom = (0, import_react.useCallback)(() => {
    return lastAnchorExists && Math.ceil(window.scrollY) >= Math.floor(document.body.scrollHeight - window.innerHeight);
  }, [lastAnchorExists]);
  const findHrefInView = (0, import_react.useCallback)(() => {
    return hrefs.find((href) => {
      const rect = getRectByHref(href);
      return rect && rect.bottom <= window.innerHeight && rect.top >= scrollSpyOffset;
    });
  }, [getRectByHref, scrollSpyOffset, hrefs]);
  const findLastHrefInView = (0, import_react.useCallback)(() => {
    return [...hrefs].reverse().find((href) => {
      const rect = getRectByHref(href);
      return rect && rect.bottom <= window.innerHeight;
    });
  }, [getRectByHref, hrefs]);
  const handleScroll = (0, import_react.useCallback)(() => {
    if (activeHref || !isBrowser) {
      return;
    }
    const { scrollY } = window;
    if (document.body.scrollHeight > window.innerHeight && isPageBottom()) {
      setCurrentHref(hrefs[hrefs.length - 1]);
    } else {
      setCurrentHref(findHrefInView() || (scrollY > 0 ? findLastHrefInView() : void 0));
    }
  }, [activeHref, isPageBottom, findHrefInView, findLastHrefInView, hrefs]);
  (0, import_react.useEffect)(() => {
    if (isBrowser) {
      handleScroll();
      window.addEventListener("scroll", handleScroll, { passive: true });
      return () => {
        window.removeEventListener("scroll", handleScroll);
      };
    }
  }, [handleScroll]);
  return currentHref;
}

// node_modules/@cloudscape-design/components/anchor-navigation/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/anchor-navigation/styles.scoped.css";
var styles_css_default = {
  "root": "awsui_root_swimc_y9e12_189",
  "anchor-list": "awsui_anchor-list_swimc_y9e12_221",
  "anchor-item": "awsui_anchor-item_swimc_y9e12_244",
  "anchor-item--active": "awsui_anchor-item--active_swimc_y9e12_264",
  "anchor-link": "awsui_anchor-link_swimc_y9e12_281",
  "anchor-link--active": "awsui_anchor-link--active_swimc_y9e12_323",
  "anchor-link-text": "awsui_anchor-link-text_swimc_y9e12_330",
  "anchor-link-info": "awsui_anchor-link-info_swimc_y9e12_334"
};

// node_modules/@cloudscape-design/components/anchor-navigation/test-classes/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/anchor-navigation/test-classes/styles.scoped.css";
var styles_css_default2 = {
  "root": "awsui_root_17oho_5eh15_5",
  "anchor-list": "awsui_anchor-list_17oho_5eh15_9",
  "anchor-item--active": "awsui_anchor-item--active_17oho_5eh15_13",
  "anchor-link": "awsui_anchor-link_17oho_5eh15_17",
  "anchor-link-text": "awsui_anchor-link-text_17oho_5eh15_21",
  "anchor-link-info": "awsui_anchor-link-info_17oho_5eh15_25"
};

// node_modules/@cloudscape-design/components/anchor-navigation/internal.js
function InternalAnchorNavigation(_a) {
  var { anchors, ariaLabelledby, onFollow, onActiveHrefChange, activeHref = "", __internalRootRef = null, scrollSpyOffset = 0 } = _a, props = __rest(_a, ["anchors", "ariaLabelledby", "onFollow", "onActiveHrefChange", "activeHref", "__internalRootRef", "scrollSpyOffset"]);
  const baseProps = getBaseProps(props);
  const hrefs = (0, import_react2.useMemo)(() => anchors.map((anchor) => anchor.href), [anchors]);
  const onFollowHandler = (0, import_react2.useCallback)((anchor, sourceEvent) => {
    fireCancelableEvent(onFollow, anchor, sourceEvent);
  }, [onFollow]);
  const currentActiveHref = useScrollSpy({
    hrefs,
    scrollSpyOffset,
    activeHref
  });
  (0, import_react2.useEffect)(() => {
    if (currentActiveHref) {
      const newActiveAnchor = anchors.find((anchor) => anchor.href === currentActiveHref);
      fireNonCancelableEvent(onActiveHrefChange, newActiveAnchor);
    }
  }, [onActiveHrefChange, anchors, currentActiveHref]);
  return import_react2.default.createElement(
    "nav",
    Object.assign({}, baseProps, { ref: __internalRootRef, "aria-labelledby": ariaLabelledby, className: clsx_m_default(baseProps.className, styles_css_default.root, styles_css_default2.root) }),
    import_react2.default.createElement("ol", { className: clsx_m_default(styles_css_default["anchor-list"], styles_css_default2["anchor-list"]) }, anchors.map((anchor, index) => {
      return import_react2.default.createElement(Anchor, { onFollow: onFollowHandler, isActive: anchor.href === currentActiveHref, key: index, index, anchor });
    }))
  );
}
var Anchor = ({ anchor, onFollow, isActive, index }) => {
  checkSafeUrl("AnchorNavigation", anchor.href);
  const onClick = (0, import_react2.useCallback)((event) => {
    if (isPlainLeftClick(event)) {
      onFollow(anchor, event);
    }
  }, [onFollow, anchor]);
  const activeItemClasses = clsx_m_default(styles_css_default["anchor-item--active"], styles_css_default2["anchor-item--active"]);
  return import_react2.default.createElement(
    "li",
    { "data-itemid": `anchor-item-${index + 1}`, className: clsx_m_default(styles_css_default["anchor-item"], isActive && activeItemClasses) },
    import_react2.default.createElement(
      "a",
      Object.assign({ onClick, className: clsx_m_default(styles_css_default["anchor-link"], styles_css_default2["anchor-link"], isActive && styles_css_default["anchor-link--active"]) }, isActive ? { "aria-current": true } : {}, { href: anchor.href }),
      import_react2.default.createElement("span", { className: clsx_m_default(styles_css_default["anchor-link-text"], styles_css_default2["anchor-link-text"]), style: { paddingInlineStart: `${anchor.level * 16 + 2}px` } }, anchor.text),
      anchor.info && import_react2.default.createElement("span", { className: clsx_m_default(styles_css_default["anchor-link-info"], styles_css_default2["anchor-link-info"]) }, anchor.info)
    )
  );
};

// node_modules/@cloudscape-design/components/anchor-navigation/index.js
function AnchorNavigation(_a) {
  var { scrollSpyOffset = 0 } = _a, props = __rest(_a, ["scrollSpyOffset"]);
  const baseComponentProps = useBaseComponent("AnchorNavigation");
  return import_react3.default.createElement(InternalAnchorNavigation, Object.assign({ scrollSpyOffset }, props, baseComponentProps));
}
applyDisplayName(AnchorNavigation, "AnchorNavigation");

export {
  AnchorNavigation
};
//# sourceMappingURL=chunk-DMZKUDTR.js.map
