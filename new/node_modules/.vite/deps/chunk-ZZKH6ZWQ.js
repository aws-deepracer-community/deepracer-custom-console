import {
  CollectionLabelContext,
  StickyHeaderContext,
  styles_css_default,
  useMobile
} from "./chunk-ATFH3LQM.js";
import {
  InfoLinkLabelContext
} from "./chunk-XTPUGG63.js";
import {
  DATA_ATTR_FUNNEL_KEY,
  FUNNEL_KEY_SUBSTEP_NAME,
  useUniqueId
} from "./chunk-MKRUABPM.js";
import {
  __rest,
  clsx_m_default,
  getBaseProps,
  useVisualRefresh
} from "./chunk-3NFHZQPK.js";
import {
  require_react
} from "./chunk-WHMHD7EJ.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@cloudscape-design/components/header/internal.js
var import_react = __toESM(require_react());
function InternalHeader(_a) {
  var { variant, headingTagOverride, children, actions, counter, description, info, __internalRootRef = null, __disableActionsWrapping } = _a, restProps = __rest(_a, ["variant", "headingTagOverride", "children", "actions", "counter", "description", "info", "__internalRootRef", "__disableActionsWrapping"]);
  const isMobile = useMobile();
  const HeadingTag = headingTagOverride !== null && headingTagOverride !== void 0 ? headingTagOverride : variant === "awsui-h1-sticky" ? "h1" : variant;
  const { isStuck } = (0, import_react.useContext)(StickyHeaderContext);
  const baseProps = getBaseProps(restProps);
  const isRefresh = useVisualRefresh();
  const assignHeaderId = (0, import_react.useContext)(CollectionLabelContext).assignId;
  const headingId = useUniqueId("heading");
  if (assignHeaderId !== void 0) {
    assignHeaderId(headingId);
  }
  const dynamicVariant = !isMobile && isStuck ? "h2" : "h1";
  const variantOverride = variant === "awsui-h1-sticky" ? isRefresh ? dynamicVariant : "h2" : variant;
  return import_react.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default.root, baseProps.className, styles_css_default[`root-variant-${variantOverride}`], isRefresh && styles_css_default.refresh, !actions && [styles_css_default[`root-no-actions`]], description && [styles_css_default[`root-has-description`]]), ref: __internalRootRef }),
    import_react.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default.main, styles_css_default[`main-variant-${variantOverride}`], isRefresh && styles_css_default.refresh, __disableActionsWrapping && [styles_css_default["no-wrap"]]) },
      import_react.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default.title, styles_css_default[`title-variant-${variantOverride}`], isRefresh && styles_css_default.refresh) },
        import_react.default.createElement(
          HeadingTag,
          { className: clsx_m_default(styles_css_default.heading, styles_css_default[`heading-variant-${variantOverride}`]) },
          import_react.default.createElement("span", Object.assign({}, HeadingTag === "h2" ? { [DATA_ATTR_FUNNEL_KEY]: FUNNEL_KEY_SUBSTEP_NAME } : {}, { className: clsx_m_default(styles_css_default["heading-text"], styles_css_default[`heading-text-variant-${variantOverride}`]), id: headingId }), children),
          counter !== void 0 && import_react.default.createElement(
            "span",
            { className: styles_css_default.counter },
            " ",
            counter
          )
        ),
        info && import_react.default.createElement(
          InfoLinkLabelContext.Provider,
          { value: headingId },
          import_react.default.createElement("span", { className: styles_css_default["virtual-space"] }, " Â "),
          import_react.default.createElement("span", { className: styles_css_default.info }, info)
        )
      ),
      actions && import_react.default.createElement("div", { className: clsx_m_default(styles_css_default.actions, styles_css_default[`actions-variant-${variantOverride}`], isRefresh && styles_css_default.refresh, !__disableActionsWrapping && [styles_css_default["actions-centered"]]) }, actions)
    ),
    import_react.default.createElement(Description, { variantOverride }, description)
  );
}
function Description({ children, variantOverride }) {
  const isRefresh = useVisualRefresh();
  return children && import_react.default.createElement("p", { className: clsx_m_default(styles_css_default.description, styles_css_default[`description-variant-${variantOverride}`], isRefresh && styles_css_default.refresh) }, children) || null;
}

export {
  InternalHeader,
  Description
};
//# sourceMappingURL=chunk-ZZKH6ZWQ.js.map
