{
  "version": 3,
  "sources": ["../../src/progress-bar/index.tsx", "../../src/internal/utils/throttle.ts", "../../src/progress-bar/internal.tsx", "../../@cloudscape-design/components/progress-bar/styles.css.js"],
  "sourcesContent": ["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useMemo, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\n\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { joinStrings } from '../internal/utils/strings';\nimport { throttle } from '../internal/utils/throttle';\nimport InternalLiveRegion from '../live-region/internal';\nimport { ProgressBarProps } from './interfaces';\nimport { Progress, ResultState, SmallText } from './internal';\n\nimport styles from './styles.css.js';\n\nconst ASSERTION_FREQUENCY = 5000; // interval in ms between progress announcements\n\nexport { ProgressBarProps };\n\nexport default function ProgressBar({\n  value = 0,\n  status = 'in-progress',\n  variant = 'standalone',\n  resultButtonText,\n  label,\n  ariaLabel,\n  ariaLabelledby,\n  ariaDescribedby,\n  description,\n  additionalInfo,\n  resultText,\n  onResultButtonClick,\n  ...rest\n}: ProgressBarProps) {\n  const { __internalRootRef } = useBaseComponent('ProgressBar', {\n    props: { variant },\n  });\n  const baseProps = getBaseProps(rest);\n  const generatedName = useUniqueId('awsui-progress-bar-');\n\n  const labelId = `${generatedName}-label`;\n  const isInFlash = variant === 'flash';\n  const isInProgressState = status === 'in-progress';\n\n  const descriptionId = useUniqueId('progressbar-description-');\n  const additionalInfoId = useUniqueId('progressbar-additional-info-');\n\n  const [announcedValue, setAnnouncedValue] = useState('');\n  const throttledAssertion = useMemo(() => {\n    return throttle((value: ProgressBarProps['value']) => {\n      setAnnouncedValue(`${value}%`);\n    }, ASSERTION_FREQUENCY);\n  }, []);\n\n  useEffect(() => {\n    throttledAssertion(value);\n  }, [throttledAssertion, value]);\n\n  if (isInFlash && resultButtonText) {\n    warnOnce(\n      'ProgressBar',\n      'The `resultButtonText` is ignored if you set `variant=\"flash\"`, and the result button is not displayed. Use the `buttonText` property and the `onButtonClick` event listener of the flashbar item in which the progress bar component is embedded.'\n    );\n  }\n\n  return (\n    <div\n      {...baseProps}\n      className={clsx(baseProps.className, styles.root, variant && styles[variant])}\n      ref={__internalRootRef}\n    >\n      <div className={isInFlash ? styles['flash-container'] : undefined}>\n        <div className={clsx(styles['word-wrap'], styles[`label-${variant}`])} id={labelId}>\n          {label}\n        </div>\n        {description && (\n          <SmallText color={isInFlash ? 'inherit' : undefined} id={descriptionId}>\n            {description}\n          </SmallText>\n        )}\n        <div>\n          {isInProgressState ? (\n            <>\n              <Progress\n                value={value}\n                ariaLabel={ariaLabel}\n                ariaLabelledby={joinStrings(labelId, ariaLabelledby)}\n                ariaDescribedby={joinStrings(\n                  description ? descriptionId : undefined,\n                  additionalInfo ? additionalInfoId : undefined,\n                  ariaDescribedby\n                )}\n                isInFlash={isInFlash}\n              />\n              <InternalLiveRegion hidden={true} tagName=\"span\" delay={0}>\n                {label}\n                {label ? ': ' : null}\n                {announcedValue}\n              </InternalLiveRegion>\n            </>\n          ) : (\n            <ResultState\n              resultText={resultText}\n              isInFlash={isInFlash}\n              resultButtonText={resultButtonText}\n              status={status}\n              onClick={() => {\n                fireNonCancelableEvent(onResultButtonClick);\n              }}\n            />\n          )}\n        </div>\n      </div>\n      {additionalInfo && (\n        <SmallText\n          className={styles['additional-info']}\n          color={isInFlash ? 'inherit' : undefined}\n          id={additionalInfoId}\n        >\n          {additionalInfo}\n        </SmallText>\n      )}\n    </div>\n  );\n}\n\napplyDisplayName(ProgressBar, 'ProgressBar');\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nexport interface ThrottleOptions {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport interface ThrottledFunction<F extends (...args: any) => any> {\n  (...args: Parameters<F>): void;\n  cancel(): void;\n}\n\nexport function throttle<F extends (...args: any) => any>(\n  func: F,\n  delay: number,\n  { trailing = true }: ThrottleOptions = {}\n): ThrottledFunction<F> {\n  let pending: null | { this: any; args: any } = null;\n  let lastInvokeTime: null | number = null;\n  let timerId: null | number = null;\n\n  // Runs on every animation frame until timer stopped.\n  function pendingFunc() {\n    if (pending === null || lastInvokeTime === null) {\n      return;\n    }\n\n    const invokeTime = Date.now();\n    const shouldInvoke = invokeTime - lastInvokeTime >= delay;\n\n    if (shouldInvoke) {\n      func.apply(pending.this, pending.args);\n      lastInvokeTime = invokeTime;\n      pending = null;\n      timerId = null;\n    } else if (trailing) {\n      startTimer();\n    }\n  }\n\n  function startTimer() {\n    if (timerId) {\n      cancelAnimationFrame(timerId);\n    }\n    timerId = requestAnimationFrame(pendingFunc);\n  }\n\n  // Decorated client function with delay mechanism.\n  function throttled(this: any, ...args: any) {\n    if (lastInvokeTime === null) {\n      lastInvokeTime = Date.now();\n      func.apply(this, args);\n    } else {\n      pending = { this: this, args };\n      startTimer();\n    }\n  }\n\n  // Prevents delayed function from execution when no longer needed.\n  throttled.cancel = () => {\n    if (timerId) {\n      cancelAnimationFrame(timerId);\n    }\n    pending = null;\n    lastInvokeTime = null;\n    timerId = null;\n  };\n\n  return throttled;\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\n\nimport { BoxProps } from '../box/interfaces';\nimport InternalBox from '../box/internal';\nimport { ButtonProps } from '../button/interfaces';\nimport { InternalButton } from '../button/internal';\nimport InternalStatusIndicator from '../status-indicator/internal';\nimport { ProgressBarProps } from './interfaces';\n\nimport styles from './styles.css.js';\n\nconst MAX_VALUE = 100;\n\nconst clamp = (value: number, lowerLimit: number, upperLimit: number) => {\n  return Math.max(Math.min(value, upperLimit), lowerLimit);\n};\n\ninterface ProgressProps {\n  value: number;\n  isInFlash: boolean;\n  ariaLabel?: string;\n  ariaLabelledby?: string;\n  ariaDescribedby?: string;\n}\nexport const Progress = ({ value, isInFlash, ariaLabel, ariaLabelledby, ariaDescribedby }: ProgressProps) => {\n  const roundedValue = Math.round(value);\n  const progressValue = clamp(roundedValue, 0, MAX_VALUE);\n\n  return (\n    <div className={styles['progress-container']}>\n      <progress\n        className={clsx(\n          styles.progress,\n          progressValue >= MAX_VALUE && styles.complete,\n          isInFlash && styles['progress-in-flash']\n        )}\n        max={MAX_VALUE}\n        value={progressValue}\n        aria-label={ariaLabel}\n        // Ensures aria-label takes precedence over aria-labelledby\n        aria-labelledby={!ariaLabel ? ariaLabelledby : undefined}\n        aria-describedby={ariaDescribedby}\n      />\n      <span aria-hidden=\"true\" className={styles['percentage-container']}>\n        <InternalBox className={styles.percentage} variant=\"small\" color={isInFlash ? 'inherit' : undefined}>\n          {`${progressValue}%`}\n        </InternalBox>\n      </span>\n    </div>\n  );\n};\n\ninterface SmallTextProps {\n  color?: BoxProps.Color;\n  id?: string;\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const SmallText = ({ color, children, className, id }: SmallTextProps) => {\n  return (\n    <InternalBox className={clsx(styles['word-wrap'], className)} variant=\"small\" display=\"block\" color={color} id={id}>\n      {children}\n    </InternalBox>\n  );\n};\n\nconst ResultButton = ({ onClick, children }: ButtonProps) => {\n  return (\n    <div className={styles['result-button']}>\n      <InternalButton formAction=\"none\" onClick={onClick}>\n        {children}\n      </InternalButton>\n    </div>\n  );\n};\n\ninterface ResultStateProps {\n  isInFlash: boolean;\n  resultText: React.ReactNode;\n  resultButtonText?: string;\n  status: ProgressBarProps.Status;\n  onClick: () => void;\n}\n\nexport const ResultState = ({ isInFlash, resultText, resultButtonText, status, onClick }: ResultStateProps) => {\n  const hasResultButton = !!resultButtonText;\n\n  if (isInFlash) {\n    return (\n      <div className={styles[`result-container-${status}`]} aria-live=\"polite\" aria-atomic=\"true\">\n        <span className={styles['result-text']}>{resultText}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles[`result-container-${status}`]} aria-live=\"polite\" aria-atomic=\"true\">\n      <span className={clsx(hasResultButton && styles['with-result-button'])}>\n        <InternalStatusIndicator type={status === 'success' ? 'success' : 'error'}>\n          <span className={styles['result-text']}>{resultText}</span>\n        </InternalStatusIndicator>\n      </span>\n      {hasResultButton && <ResultButton onClick={onClick}>{resultButtonText}</ResultButton>}\n    </div>\n  );\n};\n", "\n    import './styles.scoped.css';\n    export default {\n  \"progress\": \"awsui_progress_11huc_1iefd_361\",\n  \"result-state\": \"awsui_result-state_11huc_1iefd_375\",\n  \"awsui-motion-fade-in\": \"awsui_awsui-motion-fade-in_11huc_1iefd_1\",\n  \"root\": \"awsui_root_11huc_1iefd_397\",\n  \"with-result-button\": \"awsui_with-result-button_11huc_1iefd_429\",\n  \"result-text\": \"awsui_result-text_11huc_1iefd_433\",\n  \"result-container-error\": \"awsui_result-container-error_11huc_1iefd_437\",\n  \"result-container-success\": \"awsui_result-container-success_11huc_1iefd_437\",\n  \"result-button\": \"awsui_result-button_11huc_1iefd_441\",\n  \"word-wrap\": \"awsui_word-wrap_11huc_1iefd_447\",\n  \"label-flash\": \"awsui_label-flash_11huc_1iefd_452\",\n  \"label-key-value\": \"awsui_label-key-value_11huc_1iefd_456\",\n  \"flash\": \"awsui_flash_11huc_1iefd_464\",\n  \"progress-container\": \"awsui_progress-container_11huc_1iefd_468\",\n  \"percentage-container\": \"awsui_percentage-container_11huc_1iefd_475\",\n  \"percentage\": \"awsui_percentage_11huc_1iefd_475\",\n  \"complete\": \"awsui_complete_11huc_1iefd_521\",\n  \"progress-in-flash\": \"awsui_progress-in-flash_11huc_1iefd_534\",\n  \"additional-info\": \"awsui_additional-info_11huc_1iefd_547\"\n};\n  "],
  "mappings": "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",
  "names": ["import_react", "React", "value", "React"]
}
