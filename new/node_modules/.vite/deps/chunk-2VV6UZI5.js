import {
  findUpUntil,
  nodeContains
} from "./chunk-TGQDQAIP.js";
import {
  __commonJS,
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/balanced-match/index.js
var require_balanced_match = __commonJS({
  "node_modules/balanced-match/index.js"(exports, module) {
    "use strict";
    module.exports = balanced2;
    function balanced2(a, b, str) {
      if (a instanceof RegExp) a = maybeMatch(a, str);
      if (b instanceof RegExp) b = maybeMatch(b, str);
      var r = range(a, b, str);
      return r && {
        start: r[0],
        end: r[1],
        pre: str.slice(0, r[0]),
        body: str.slice(r[0] + a.length, r[1]),
        post: str.slice(r[1] + b.length)
      };
    }
    function maybeMatch(reg, str) {
      var m = str.match(reg);
      return m ? m[0] : null;
    }
    balanced2.range = range;
    function range(a, b, str) {
      var begs, beg, left, right, result;
      var ai = str.indexOf(a);
      var bi = str.indexOf(b, ai + 1);
      var i = ai;
      if (ai >= 0 && bi > 0) {
        if (a === b) {
          return [ai, bi];
        }
        begs = [];
        left = str.length;
        while (i >= 0 && !result) {
          if (i == ai) {
            begs.push(i);
            ai = str.indexOf(a, i + 1);
          } else if (begs.length == 1) {
            result = [begs.pop(), bi];
          } else {
            beg = begs.pop();
            if (beg < left) {
              left = beg;
              right = bi;
            }
            bi = str.indexOf(b, i + 1);
          }
          i = ai < bi && ai >= 0 ? ai : bi;
        }
        if (begs.length) {
          result = [left, right];
        }
      }
      return result;
    }
  }
});

// node_modules/@cloudscape-design/components/internal/utils/dom.js
var import_balanced_match = __toESM(require_balanced_match());
function isContainingBlock(element) {
  var _a;
  const computedStyle = getComputedStyle(element);
  return !!computedStyle.transform && computedStyle.transform !== "none" || !!computedStyle.perspective && computedStyle.perspective !== "none" || !!computedStyle.containerType && computedStyle.containerType !== "normal" || ((_a = computedStyle.contain) === null || _a === void 0 ? void 0 : _a.split(" ").some((s) => ["layout", "paint", "strict", "content"].includes(s)));
}
function getContainingBlock(startElement) {
  if (!startElement.parentElement) {
    return null;
  }
  return findUpUntil(startElement.parentElement, isContainingBlock);
}
function findUpUntilMultiple({ startElement, tests }) {
  const keys = Object.keys(tests);
  const elements = {};
  let current = startElement;
  while (current && Object.keys(elements).length < keys.length) {
    current = current.parentElement;
    while (current && !isHTMLElement(current)) {
      current = current.parentElement;
    }
    for (const key of keys) {
      if (!elements[key] && current && tests[key](current)) {
        elements[key] = current;
      }
    }
  }
  return elements;
}
var cssVariableExpression = /--.+?\s*,\s*(.+)/;
function parseCssVariable(value) {
  var _a, _b, _c;
  if (typeof window === "undefined") {
    return value;
  }
  if ((_c = (_b = (_a = window.CSS) === null || _a === void 0 ? void 0 : _a.supports) === null || _b === void 0 ? void 0 : _b.call(_a, "color", "var(--dummy, #000)")) !== null && _c !== void 0 ? _c : false) {
    return value;
  }
  const varIndex = value.lastIndexOf("var(");
  if (varIndex === -1) {
    return value;
  }
  const expr = (0, import_balanced_match.default)("(", ")", value.substr(varIndex));
  if (!expr) {
    return value;
  }
  const match = expr.body.match(cssVariableExpression);
  return match ? match[1] : value;
}
function isNode(target) {
  return target instanceof Node || target !== null && typeof target === "object" && "nodeType" in target && typeof target.nodeType === "number" && "nodeName" in target && typeof target.nodeName === "string" && "parentNode" in target && typeof target.parentNode === "object";
}
function isHTMLElement(target) {
  return target instanceof HTMLElement || isNode(target) && target.nodeType === Node.ELEMENT_NODE && "style" in target && typeof target.style === "object" && typeof target.ownerDocument === "object" && !isSVGElement(target);
}
function isSVGElement(target) {
  return target instanceof SVGElement || isNode(target) && target.nodeType === Node.ELEMENT_NODE && "ownerSVGElement" in target && typeof target.ownerSVGElement === "object";
}
function documentHasFocus() {
  var _a;
  const isJSDOM = typeof navigator !== "undefined" && ((_a = navigator.userAgent) === null || _a === void 0 ? void 0 : _a.includes("jsdom"));
  return isJSDOM || typeof document !== void 0 && document.hasFocus();
}

// node_modules/@cloudscape-design/components/internal/utils/node-belongs.js
function nodeBelongs(container, target) {
  var _a;
  if (!isNode(target)) {
    return false;
  }
  const portal = findUpUntil(target, (node) => node === container || isHTMLElement(node) && !!node.dataset.awsuiReferrerId);
  if (portal && portal === container) {
    return true;
  }
  const referrer = isHTMLElement(portal) ? document.getElementById((_a = portal.dataset.awsuiReferrerId) !== null && _a !== void 0 ? _a : "") : null;
  return referrer ? nodeContains(container, referrer) : nodeContains(container, target);
}

export {
  isContainingBlock,
  getContainingBlock,
  findUpUntilMultiple,
  parseCssVariable,
  isHTMLElement,
  isSVGElement,
  documentHasFocus,
  nodeBelongs
};
//# sourceMappingURL=chunk-2VV6UZI5.js.map
