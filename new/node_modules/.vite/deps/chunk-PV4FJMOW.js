import {
  LinkDefaultVariantContext
} from "./chunk-WXFAMC53.js";
import {
  ActionsWrapper,
  awsuiPluginsInternal,
  createUseDiscoveredAction,
  createUseDiscoveredContent
} from "./chunk-2V4IX7V5.js";
import {
  useContainerBreakpoints
} from "./chunk-7HOTP4XT.js";
import {
  VisualContext
} from "./chunk-VITKB26C.js";
import {
  InternalButton,
  internal_default,
  useInternalI18n
} from "./chunk-A62YXFPX.js";
import {
  useForwardFocus
} from "./chunk-TNYC4R72.js";
import {
  FunnelMetrics,
  useFunnel,
  useFunnelStep,
  useFunnelSubStep
} from "./chunk-N7VJRNE4.js";
import {
  DATA_ATTR_ANALYTICS_ALERT,
  getSubStepAllSelector,
  getTextFromSelector
} from "./chunk-EGDAGNLX.js";
import {
  getAnalyticsMetadataAttribute
} from "./chunk-IQEN54MI.js";
import {
  useMergeRefs
} from "./chunk-PSZT54K7.js";
import {
  fireNonCancelableEvent
} from "./chunk-IGE3W7Z3.js";
import {
  __rest,
  applyDisplayName,
  clsx_m_default,
  getAnalyticsMetadataProps,
  getBaseProps,
  useBaseComponent,
  useVisualRefresh
} from "./chunk-4LQYZJVR.js";
import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@cloudscape-design/components/alert/index.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/components/alert/internal.js
var import_react = __toESM(require_react());

// node_modules/@cloudscape-design/components/alert/analytics-metadata/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/alert/analytics-metadata/styles.scoped.css";
var styles_css_default = {
  "header": "awsui_header_17427_1ns0c_5"
};

// node_modules/@cloudscape-design/components/alert/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/alert/styles.scoped.css";
var styles_css_default2 = {
  "alert": "awsui_alert_mx3cw_1euw8_193",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_mx3cw_1euw8_1",
  "root": "awsui_root_mx3cw_1euw8_215",
  "hidden": "awsui_hidden_mx3cw_1euw8_250",
  "with-dismiss": "awsui_with-dismiss_mx3cw_1euw8_297",
  "with-action": "awsui_with-action_mx3cw_1euw8_297",
  "breakpoint-default": "awsui_breakpoint-default_mx3cw_1euw8_303",
  "initial-hidden": "awsui_initial-hidden_mx3cw_1euw8_314",
  "header": "awsui_header_mx3cw_1euw8_319",
  "header-replacement": "awsui_header-replacement_mx3cw_1euw8_320",
  "action": "awsui_action_mx3cw_1euw8_324",
  "action-slot": "awsui_action-slot_mx3cw_1euw8_329",
  "action-button": "awsui_action-button_mx3cw_1euw8_330",
  "alert-focus-wrapper": "awsui_alert-focus-wrapper_mx3cw_1euw8_334",
  "text": "awsui_text_mx3cw_1euw8_363",
  "icon": "awsui_icon_mx3cw_1euw8_370",
  "message": "awsui_message_mx3cw_1euw8_373",
  "icon-size-medium": "awsui_icon-size-medium_mx3cw_1euw8_381",
  "icon-size-big": "awsui_icon-size-big_mx3cw_1euw8_384",
  "icon-size-normal": "awsui_icon-size-normal_mx3cw_1euw8_387",
  "content": "awsui_content_mx3cw_1euw8_391",
  "content-replacement": "awsui_content-replacement_mx3cw_1euw8_392",
  "dismiss": "awsui_dismiss_mx3cw_1euw8_396",
  "dismiss-button": "awsui_dismiss-button_mx3cw_1euw8_401",
  "type-error": "awsui_type-error_mx3cw_1euw8_405",
  "type-warning": "awsui_type-warning_mx3cw_1euw8_413",
  "type-success": "awsui_type-success_mx3cw_1euw8_421",
  "type-info": "awsui_type-info_mx3cw_1euw8_429"
};

// node_modules/@cloudscape-design/components/alert/internal.js
var typeToIcon = {
  error: "status-negative",
  warning: "status-warning",
  success: "status-positive",
  info: "status-info"
};
var useDiscoveredAction = createUseDiscoveredAction(awsuiPluginsInternal.alert.onActionRegistered);
var useDiscoveredContent = createUseDiscoveredContent("alert", awsuiPluginsInternal.alertContent);
var InternalAlert = import_react.default.forwardRef((_a, ref) => {
  var _b, _c;
  var { type, i18nStrings, visible = true, dismissible, children, header, buttonText, action, onDismiss, onButtonClick, __internalRootRef = null, statusIconAriaLabel: deprecatedStatusIconAriaLabel, dismissAriaLabel: deprecatedDismissAriaLabel } = _a, rest = __rest(_a, ["type", "i18nStrings", "visible", "dismissible", "children", "header", "buttonText", "action", "onDismiss", "onButtonClick", "__internalRootRef", "statusIconAriaLabel", "dismissAriaLabel"]);
  const baseProps = getBaseProps(rest);
  const i18n = useInternalI18n("alert");
  const focusRef = (0, import_react.useRef)(null);
  useForwardFocus(ref, focusRef);
  const [breakpoint, breakpointRef] = useContainerBreakpoints(["xs"]);
  const mergedRef = useMergeRefs(breakpointRef, __internalRootRef);
  const { discoveredActions, headerRef: headerRefAction, contentRef: contentRefAction } = useDiscoveredAction(type);
  const { initialHidden, headerReplacementType, contentReplacementType, headerRef: headerRefContent, contentRef: contentRefContent, replacementHeaderRef, replacementContentRef } = useDiscoveredContent({ type, header, children });
  const headerRef = useMergeRefs(headerRefAction, headerRefContent);
  const contentRef = useMergeRefs(contentRefAction, contentRefContent);
  const isRefresh = useVisualRefresh();
  const size = isRefresh ? "normal" : headerReplacementType !== "remove" && header && contentReplacementType !== "remove" && children ? "big" : "normal";
  const hasAction = Boolean(action || buttonText || discoveredActions.length);
  const analyticsAttributes = {
    [DATA_ATTR_ANALYTICS_ALERT]: type
  };
  const statusIconAriaLabel = i18n(`i18nStrings.${type}IconAriaLabel`, (_b = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings[`${type}IconAriaLabel`]) !== null && _b !== void 0 ? _b : deprecatedStatusIconAriaLabel);
  const dismissAriaLabel = i18n("i18nStrings.dismissAriaLabel", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.dismissAriaLabel) !== null && _c !== void 0 ? _c : i18n("dismissAriaLabel", deprecatedDismissAriaLabel));
  return import_react.default.createElement(
    "div",
    Object.assign({}, baseProps, analyticsAttributes, { "aria-hidden": !visible, className: clsx_m_default(styles_css_default2.root, { [styles_css_default2.hidden]: !visible, [styles_css_default2["initial-hidden"]]: initialHidden }, baseProps.className), ref: mergedRef }),
    import_react.default.createElement(
      LinkDefaultVariantContext.Provider,
      { value: { defaultVariant: "primary" } },
      import_react.default.createElement(
        VisualContext,
        { contextName: "alert" },
        import_react.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default2.alert, styles_css_default2[`type-${type}`], styles_css_default2[`icon-size-${size}`], hasAction && styles_css_default2["with-action"], dismissible && styles_css_default2["with-dismiss"], styles_css_default2[`breakpoint-${breakpoint}`]) },
          import_react.default.createElement(
            "div",
            { className: styles_css_default2["alert-focus-wrapper"], tabIndex: -1, ref: focusRef },
            import_react.default.createElement(
              "div",
              { className: clsx_m_default(styles_css_default2.icon, styles_css_default2.text), role: "img", "aria-label": statusIconAriaLabel },
              import_react.default.createElement(internal_default, { name: typeToIcon[type], size })
            ),
            import_react.default.createElement(
              "div",
              { className: clsx_m_default(styles_css_default2.message, styles_css_default2.text) },
              import_react.default.createElement("div", { className: clsx_m_default(header && styles_css_default2.header, headerReplacementType !== "original" ? styles_css_default2.hidden : styles_css_default.header), ref: headerRef }, header),
              import_react.default.createElement("div", { className: clsx_m_default(styles_css_default2["header-replacement"], headerReplacementType !== "replaced" ? styles_css_default2.hidden : styles_css_default.header), ref: replacementHeaderRef }),
              import_react.default.createElement("div", { className: clsx_m_default(styles_css_default2.content, contentReplacementType !== "original" && styles_css_default2.hidden), ref: contentRef }, children),
              import_react.default.createElement("div", { className: clsx_m_default(styles_css_default2["content-replacement"], contentReplacementType !== "replaced" && styles_css_default2.hidden), ref: replacementContentRef })
            )
          ),
          import_react.default.createElement(ActionsWrapper, { className: styles_css_default2.action, testUtilClasses: {
            actionSlot: styles_css_default2["action-slot"],
            actionButton: styles_css_default2["action-button"]
          }, action, discoveredActions, buttonText, onButtonClick: () => fireNonCancelableEvent(onButtonClick) }),
          dismissible && import_react.default.createElement(
            "div",
            Object.assign({ className: styles_css_default2.dismiss }, getAnalyticsMetadataAttribute({
              action: "dismiss"
            })),
            import_react.default.createElement(InternalButton, { className: styles_css_default2["dismiss-button"], variant: "icon", iconName: "close", formAction: "none", ariaLabel: dismissAriaLabel, onClick: () => fireNonCancelableEvent(onDismiss) })
          )
        )
      )
    )
  );
});
var internal_default2 = InternalAlert;

// node_modules/@cloudscape-design/components/alert/index.js
var Alert = import_react2.default.forwardRef((_a, ref) => {
  var { type = "info", visible = true } = _a, props = __rest(_a, ["type", "visible"]);
  const analyticsMetadata = getAnalyticsMetadataProps(props);
  const baseComponentProps = useBaseComponent("Alert", {
    props: { type, visible, dismissible: props.dismissible }
  }, analyticsMetadata);
  const { funnelIdentifier, funnelInteractionId, funnelErrorContext, submissionAttempt, funnelState, errorCount } = useFunnel();
  const { stepNumber, stepNameSelector, stepIdentifier } = useFunnelStep();
  const { subStepSelector, subStepNameSelector, subStepIdentifier, subStepErrorContext } = useFunnelSubStep();
  (0, import_react2.useEffect)(() => {
    var _a2, _b, _c;
    if (funnelInteractionId && visible && type === "error" && funnelState.current !== "complete") {
      const stepName = getTextFromSelector(stepNameSelector);
      const subStepName = getTextFromSelector(subStepNameSelector);
      errorCount.current++;
      const errorIsVisible = ((_c = (_b = (_a2 = baseComponentProps.__internalRootRef.current) === null || _a2 === void 0 ? void 0 : _a2.getBoundingClientRect()) === null || _b === void 0 ? void 0 : _b.width) !== null && _c !== void 0 ? _c : 0) > 0;
      if (errorIsVisible) {
        if (subStepSelector) {
          FunnelMetrics.funnelSubStepError({
            funnelInteractionId,
            funnelIdentifier,
            stepIdentifier,
            subStepSelector,
            subStepName,
            subStepNameSelector,
            stepNumber,
            stepName,
            stepNameSelector,
            subStepAllSelector: getSubStepAllSelector(),
            subStepIdentifier,
            subStepErrorContext
          });
        } else {
          FunnelMetrics.funnelError({
            funnelIdentifier,
            funnelInteractionId,
            funnelErrorContext
          });
        }
      }
      return () => {
        errorCount.current--;
      };
    }
  }, [funnelInteractionId, visible, submissionAttempt, errorCount]);
  const componentAnalyticsMetadata = {
    name: "awsui.Alert",
    label: `.${styles_css_default.header}`,
    properties: {
      type
    }
  };
  return import_react2.default.createElement(internal_default2, Object.assign({ type, visible }, props, baseComponentProps, { ref }, getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata })));
});
applyDisplayName(Alert, "Alert");
var alert_default = Alert;

export {
  internal_default2 as internal_default,
  alert_default
};
//# sourceMappingURL=chunk-PV4FJMOW.js.map
