import {
  InternalBox
} from "./chunk-DVZIPFI5.js";
import {
  StatusIndicator,
  joinStrings
} from "./chunk-PTPFOYI6.js";
import {
  throttle
} from "./chunk-FTHEUEP7.js";
import {
  InternalButton,
  internal_default2 as internal_default
} from "./chunk-A62YXFPX.js";
import {
  useUniqueId
} from "./chunk-USK37E6T.js";
import {
  fireNonCancelableEvent
} from "./chunk-IGE3W7Z3.js";
import {
  __rest,
  applyDisplayName,
  clsx_m_default,
  getBaseProps,
  useBaseComponent,
  warnOnce
} from "./chunk-4LQYZJVR.js";
import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@cloudscape-design/components/progress-bar/index.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/components/progress-bar/internal.js
var import_react = __toESM(require_react());

// node_modules/@cloudscape-design/components/progress-bar/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/progress-bar/styles.scoped.css";
var styles_css_default = {
  "progress": "awsui_progress_11huc_1iefd_361",
  "result-state": "awsui_result-state_11huc_1iefd_375",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_11huc_1iefd_1",
  "root": "awsui_root_11huc_1iefd_397",
  "with-result-button": "awsui_with-result-button_11huc_1iefd_429",
  "result-text": "awsui_result-text_11huc_1iefd_433",
  "result-container-error": "awsui_result-container-error_11huc_1iefd_437",
  "result-container-success": "awsui_result-container-success_11huc_1iefd_437",
  "result-button": "awsui_result-button_11huc_1iefd_441",
  "word-wrap": "awsui_word-wrap_11huc_1iefd_447",
  "label-flash": "awsui_label-flash_11huc_1iefd_452",
  "label-key-value": "awsui_label-key-value_11huc_1iefd_456",
  "flash": "awsui_flash_11huc_1iefd_464",
  "progress-container": "awsui_progress-container_11huc_1iefd_468",
  "percentage-container": "awsui_percentage-container_11huc_1iefd_475",
  "percentage": "awsui_percentage_11huc_1iefd_475",
  "complete": "awsui_complete_11huc_1iefd_521",
  "progress-in-flash": "awsui_progress-in-flash_11huc_1iefd_534",
  "additional-info": "awsui_additional-info_11huc_1iefd_547"
};

// node_modules/@cloudscape-design/components/progress-bar/internal.js
var MAX_VALUE = 100;
var clamp = (value, lowerLimit, upperLimit) => {
  return Math.max(Math.min(value, upperLimit), lowerLimit);
};
var Progress = ({ value, isInFlash, ariaLabel, ariaLabelledby, ariaDescribedby }) => {
  const roundedValue = Math.round(value);
  const progressValue = clamp(roundedValue, 0, MAX_VALUE);
  return import_react.default.createElement(
    "div",
    { className: styles_css_default["progress-container"] },
    import_react.default.createElement("progress", { className: clsx_m_default(styles_css_default.progress, progressValue >= MAX_VALUE && styles_css_default.complete, isInFlash && styles_css_default["progress-in-flash"]), max: MAX_VALUE, value: progressValue, "aria-label": ariaLabel, "aria-labelledby": !ariaLabel ? ariaLabelledby : void 0, "aria-describedby": ariaDescribedby }),
    import_react.default.createElement(
      "span",
      { "aria-hidden": "true", className: styles_css_default["percentage-container"] },
      import_react.default.createElement(InternalBox, { className: styles_css_default.percentage, variant: "small", color: isInFlash ? "inherit" : void 0 }, `${progressValue}%`)
    )
  );
};
var SmallText = ({ color, children, className, id }) => {
  return import_react.default.createElement(InternalBox, { className: clsx_m_default(styles_css_default["word-wrap"], className), variant: "small", display: "block", color, id }, children);
};
var ResultButton = ({ onClick, children }) => {
  return import_react.default.createElement(
    "div",
    { className: styles_css_default["result-button"] },
    import_react.default.createElement(InternalButton, { formAction: "none", onClick }, children)
  );
};
var ResultState = ({ isInFlash, resultText, resultButtonText, status, onClick }) => {
  const hasResultButton = !!resultButtonText;
  if (isInFlash) {
    return import_react.default.createElement(
      "div",
      { className: styles_css_default[`result-container-${status}`], "aria-live": "polite", "aria-atomic": "true" },
      import_react.default.createElement("span", { className: styles_css_default["result-text"] }, resultText)
    );
  }
  return import_react.default.createElement(
    "div",
    { className: styles_css_default[`result-container-${status}`], "aria-live": "polite", "aria-atomic": "true" },
    import_react.default.createElement(
      "span",
      { className: clsx_m_default(hasResultButton && styles_css_default["with-result-button"]) },
      import_react.default.createElement(
        StatusIndicator,
        { type: status === "success" ? "success" : "error" },
        import_react.default.createElement("span", { className: styles_css_default["result-text"] }, resultText)
      )
    ),
    hasResultButton && import_react.default.createElement(ResultButton, { onClick }, resultButtonText)
  );
};

// node_modules/@cloudscape-design/components/progress-bar/index.js
var ASSERTION_FREQUENCY = 5e3;
function ProgressBar(_a) {
  var { value = 0, status = "in-progress", variant = "standalone", resultButtonText, label, ariaLabel, ariaLabelledby, ariaDescribedby, description, additionalInfo, resultText, onResultButtonClick } = _a, rest = __rest(_a, ["value", "status", "variant", "resultButtonText", "label", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "description", "additionalInfo", "resultText", "onResultButtonClick"]);
  const { __internalRootRef } = useBaseComponent("ProgressBar", {
    props: { variant }
  });
  const baseProps = getBaseProps(rest);
  const generatedName = useUniqueId("awsui-progress-bar-");
  const labelId = `${generatedName}-label`;
  const isInFlash = variant === "flash";
  const isInProgressState = status === "in-progress";
  const descriptionId = useUniqueId("progressbar-description-");
  const additionalInfoId = useUniqueId("progressbar-additional-info-");
  const [announcedValue, setAnnouncedValue] = (0, import_react2.useState)("");
  const throttledAssertion = (0, import_react2.useMemo)(() => {
    return throttle((value2) => {
      setAnnouncedValue(`${value2}%`);
    }, ASSERTION_FREQUENCY);
  }, []);
  (0, import_react2.useEffect)(() => {
    throttledAssertion(value);
  }, [throttledAssertion, value]);
  if (isInFlash && resultButtonText) {
    warnOnce("ProgressBar", 'The `resultButtonText` is ignored if you set `variant="flash"`, and the result button is not displayed. Use the `buttonText` property and the `onButtonClick` event listener of the flashbar item in which the progress bar component is embedded.');
  }
  return import_react2.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default.root, variant && styles_css_default[variant]), ref: __internalRootRef }),
    import_react2.default.createElement(
      "div",
      { className: isInFlash ? styles_css_default["flash-container"] : void 0 },
      import_react2.default.createElement("div", { className: clsx_m_default(styles_css_default["word-wrap"], styles_css_default[`label-${variant}`]), id: labelId }, label),
      description && import_react2.default.createElement(SmallText, { color: isInFlash ? "inherit" : void 0, id: descriptionId }, description),
      import_react2.default.createElement("div", null, isInProgressState ? import_react2.default.createElement(
        import_react2.default.Fragment,
        null,
        import_react2.default.createElement(Progress, { value, ariaLabel, ariaLabelledby: joinStrings(labelId, ariaLabelledby), ariaDescribedby: joinStrings(description ? descriptionId : void 0, additionalInfo ? additionalInfoId : void 0, ariaDescribedby), isInFlash }),
        import_react2.default.createElement(
          internal_default,
          { hidden: true, tagName: "span", delay: 0 },
          label,
          label ? ": " : null,
          announcedValue
        )
      ) : import_react2.default.createElement(ResultState, { resultText, isInFlash, resultButtonText, status, onClick: () => {
        fireNonCancelableEvent(onResultButtonClick);
      } }))
    ),
    additionalInfo && import_react2.default.createElement(SmallText, { className: styles_css_default["additional-info"], color: isInFlash ? "inherit" : void 0, id: additionalInfoId }, additionalInfo)
  );
}
applyDisplayName(ProgressBar, "ProgressBar");

export {
  ProgressBar
};
//# sourceMappingURL=chunk-NARWHO57.js.map
