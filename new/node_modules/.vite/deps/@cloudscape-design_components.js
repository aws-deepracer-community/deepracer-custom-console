import {
  AppLayoutContext,
  DynamicOverlapContext,
  InternalContainer,
  InternalContainerAsSubstep,
  ModalContext,
  StickyHeaderContext,
  Tabs,
  defaultValue as defaultValue3,
  getContentHeaderClassName,
  getGlobalFlag,
  handleKey,
  shouldRemoveHighContrastHeader,
  useAppLayoutContext,
  useControllable,
  useDynamicOverlap
} from "./chunk-ZKRQKDJ2.js";
import {
  Box,
  InternalBox
} from "./chunk-JHMBALC2.js";
import {
  button_default
} from "./chunk-B7X4JTFC.js";
import {
  CSSTransition_default,
  FormFieldContext,
  InfoLinkLabelContext,
  LinkDefaultVariantContext,
  StatusIndicator,
  TabTrap,
  Transition,
  TransitionGroup_default,
  VisualContext,
  _assertThisInitialized,
  _setPrototypeOf,
  button_trigger_default,
  checkControlled,
  checkOptionValueField,
  checkbox_icon_default,
  convertAutoComplete,
  debounce,
  defaultValue as defaultValue2,
  dropdown_default,
  dropdown_footer_default,
  filter_default,
  findOptionIndex,
  generateTestIndexes,
  getAllFocusables,
  getExternalProps,
  getFirstFocusable,
  getLastFocusable,
  getTestOptionIndexes,
  getVisualContextClassname,
  internal_default as internal_default3,
  internal_default2 as internal_default4,
  internal_default3 as internal_default5,
  isGroup,
  joinStrings,
  option_default,
  options_list_default,
  padLeftZeros,
  plain_list_default,
  prepareOptions,
  select_default,
  selectable_item_default,
  styles_css_default,
  trigger_default,
  useAnnouncement,
  useDebounceCallback,
  useDropdownContext,
  useDropdownStatus,
  useFormFieldContext,
  useHighlightedOption,
  useLoadItems,
  useNativeSearch,
  useOpenState,
  usePortalModeClasses,
  usePrevious,
  useSelect,
  useVirtual,
  virtual_list_default
} from "./chunk-3BGIKWCQ.js";
import {
  calculateScroll,
  custom_css_properties_default,
  getFirstScrollableParent,
  getLogicalBoundingClientRect,
  getMatchingBreakpoint,
  getOverflowParents,
  isDevelopment,
  matchBreakpointMapping,
  scrollElementIntoView,
  scrollRectangleIntoView,
  useContainerQuery,
  useInternalI18n,
  useLocale,
  useMobile
} from "./chunk-B6KLV4PV.js";
import {
  ButtonContext,
  DATA_ATTR_ANALYTICS_ALERT,
  DATA_ATTR_ANALYTICS_FLASHBAR,
  DATA_ATTR_FIELD_ERROR,
  DATA_ATTR_FIELD_LABEL,
  DATA_ATTR_FUNNEL_KEY,
  DATA_ATTR_FUNNEL_STEP,
  FUNNEL_KEY_FUNNEL_NAME,
  FUNNEL_KEY_STEP_NAME,
  FUNNEL_KEY_SUBSTEP_NAME,
  FunnelContext,
  FunnelMetrics,
  FunnelNameSelectorContext,
  FunnelStepContext,
  FunnelSubStepContext,
  InternalButton,
  InternalSpinner,
  ScreenreaderOnly,
  SingleTabStopNavigationContext,
  calculateOnce,
  checkSafeUrl,
  defaultValue,
  findUpUntil as findUpUntil2,
  fireCancelableEvent,
  fireKeyboardEvent,
  fireNonCancelableEvent,
  getContainingBlock,
  getFieldSlotSeletor,
  getFunnelNameSelector,
  getNameFromSelector,
  getSubStepAllSelector,
  getSubStepNameSelector,
  getSubStepSelector,
  internal_default,
  internal_default2,
  isPlainLeftClick,
  live_region_default,
  nodeBelongs,
  parseCssVariable,
  supportsStickyPosition,
  useEffectOnUpdate,
  useForwardFocus,
  useFunnel,
  useFunnelNameSelector,
  useFunnelStep,
  useFunnelSubStep,
  useMergeRefs,
  usePerformanceMarks,
  useSingleTabStopNavigation,
  useUniqueId
} from "./chunk-3NPYXGPE.js";
import {
  InternalSpaceBetween,
  SpaceBetween,
  require_react_keyed_flatten_children
} from "./chunk-AMFMDJRD.js";
import "./chunk-XLOVNOK3.js";
import {
  KeyCode,
  Metrics,
  PACKAGE_SOURCE,
  PACKAGE_VERSION,
  ResizeObserver,
  __awaiter,
  __rest,
  applyDisplayName,
  clsx_m_default,
  createSingletonHandler,
  findUpUntil,
  getAnalyticsMetadataProps,
  getBaseProps,
  isModifierKey,
  nodeContains,
  useBaseComponent,
  useComponentMetadata,
  useCurrentMode,
  useDensityMode,
  useReducedMotion,
  useResizeObserver,
  useStableCallback,
  useTelemetry,
  useVisualRefresh,
  warnOnce
} from "./chunk-ZJSKJ6UY.js";
import {
  require_react_dom
} from "./chunk-HKXRFMQU.js";
import {
  require_react
} from "./chunk-WHMHD7EJ.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@cloudscape-design/components/alert/index.js
var import_react5 = __toESM(require_react());

// node_modules/@cloudscape-design/components/alert/internal.js
var import_react4 = __toESM(require_react());

// node_modules/@cloudscape-design/components/alert/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/alert/styles.scoped.css";
var styles_css_default2 = {
  "alert": "awsui_alert_mx3cw_ipfn3_99",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_mx3cw_ipfn3_1",
  "root": "awsui_root_mx3cw_ipfn3_125",
  "hidden": "awsui_hidden_mx3cw_ipfn3_163",
  "with-dismiss": "awsui_with-dismiss_mx3cw_ipfn3_213",
  "with-action": "awsui_with-action_mx3cw_ipfn3_213",
  "breakpoint-default": "awsui_breakpoint-default_mx3cw_ipfn3_219",
  "header": "awsui_header_mx3cw_ipfn3_226",
  "action": "awsui_action_mx3cw_ipfn3_230",
  "action-slot": "awsui_action-slot_mx3cw_ipfn3_235",
  "action-button": "awsui_action-button_mx3cw_ipfn3_236",
  "alert-focus-wrapper": "awsui_alert-focus-wrapper_mx3cw_ipfn3_240",
  "text": "awsui_text_mx3cw_ipfn3_269",
  "icon": "awsui_icon_mx3cw_ipfn3_276",
  "message": "awsui_message_mx3cw_ipfn3_279",
  "icon-size-medium": "awsui_icon-size-medium_mx3cw_ipfn3_287",
  "icon-size-big": "awsui_icon-size-big_mx3cw_ipfn3_290",
  "icon-size-normal": "awsui_icon-size-normal_mx3cw_ipfn3_293",
  "content": "awsui_content_mx3cw_ipfn3_297",
  "dismiss": "awsui_dismiss_mx3cw_ipfn3_301",
  "dismiss-button": "awsui_dismiss-button_mx3cw_ipfn3_306",
  "type-error": "awsui_type-error_mx3cw_ipfn3_310",
  "type-warning": "awsui_type-warning_mx3cw_ipfn3_318",
  "type-success": "awsui_type-success_mx3cw_ipfn3_326",
  "type-info": "awsui_type-info_mx3cw_ipfn3_334"
};

// node_modules/@cloudscape-design/components/internal/hooks/container-queries/use-container-breakpoints.js
function useContainerBreakpoints(triggers) {
  const triggersDep = triggers === null || triggers === void 0 ? void 0 : triggers.join();
  return useContainerQuery((rect) => getMatchingBreakpoint(rect.contentBoxWidth, triggers), [triggersDep]);
}

// node_modules/@cloudscape-design/components/internal/plugins/helpers/runtime-content-wrapper.js
var import_react = __toESM(require_react());
function RuntimeContentWrapper({ mountContent, unmountContent }) {
  const ref = (0, import_react.useRef)(null);
  (0, import_react.useEffect)(() => {
    const container = ref.current;
    mountContent(container);
    return () => unmountContent(container);
  }, []);
  return import_react.default.createElement("div", { ref });
}

// node_modules/@cloudscape-design/components/internal/plugins/helpers/use-discovered-action.js
var import_react2 = __toESM(require_react());
function convertRuntimeAction(action, context) {
  if (!action) {
    return null;
  }
  return import_react2.default.createElement(RuntimeContentWrapper, { key: action.id + "-" + context.type, mountContent: (container) => action.mountContent(container, context), unmountContent: (container) => action.unmountContent(container) });
}
function createUseDiscoveredAction(onActionRegistered) {
  return function useDiscoveredAction3(type) {
    const [discoveredActions, setDiscoveredActions] = (0, import_react2.useState)([]);
    const headerRef = (0, import_react2.useRef)(null);
    const contentRef = (0, import_react2.useRef)(null);
    (0, import_react2.useEffect)(() => {
      return onActionRegistered((actions) => {
        setDiscoveredActions(actions.map((action) => convertRuntimeAction(action, { type, headerRef, contentRef })));
      });
    }, [type]);
    return { discoveredActions, headerRef, contentRef };
  };
}

// node_modules/@cloudscape-design/components/internal/plugins/controllers/drawers.js
var DrawersController = class {
  constructor() {
    this.drawers = [];
    this.drawersRegistrationListener = null;
    this.scheduleUpdate = debounce(() => {
      var _a;
      (_a = this.drawersRegistrationListener) === null || _a === void 0 ? void 0 : _a.call(this, this.drawers);
    }, 0);
    this.registerDrawer = (config) => {
      this.drawers = this.drawers.concat(config);
      this.scheduleUpdate();
    };
    this.onDrawersRegistered = (listener) => {
      if (this.drawersRegistrationListener !== null) {
        console.warn("[AwsUi] [runtime drawers] multiple app layout instances detected");
      }
      this.drawersRegistrationListener = listener;
      this.scheduleUpdate();
      return () => {
        this.drawersRegistrationListener = null;
      };
    };
    this.clearRegisteredDrawers = () => {
      this.drawers = [];
    };
  }
  installPublic(api = {}) {
    var _a;
    (_a = api.registerDrawer) !== null && _a !== void 0 ? _a : api.registerDrawer = this.registerDrawer;
    return api;
  }
  installInternal(internalApi = {}) {
    var _a, _b;
    (_a = internalApi.clearRegisteredDrawers) !== null && _a !== void 0 ? _a : internalApi.clearRegisteredDrawers = this.clearRegisteredDrawers;
    (_b = internalApi.onDrawersRegistered) !== null && _b !== void 0 ? _b : internalApi.onDrawersRegistered = this.onDrawersRegistered;
    return internalApi;
  }
};

// node_modules/@cloudscape-design/components/internal/plugins/helpers/utils.js
function sortByPriority(items) {
  return items.slice().sort((a2, b) => {
    var _a, _b;
    if (b.orderPriority !== a2.orderPriority) {
      return Math.sign(((_a = b.orderPriority) !== null && _a !== void 0 ? _a : 0) - ((_b = a2.orderPriority) !== null && _b !== void 0 ? _b : 0));
    }
    return b.id < a2.id ? 1 : -1;
  });
}

// node_modules/@cloudscape-design/components/internal/plugins/controllers/action-buttons.js
var ActionButtonsController = class {
  constructor() {
    this.listeners = [];
    this.actions = [];
    this.scheduleUpdate = debounce(() => {
      this.listeners.forEach((listener) => listener(this.actions));
    }, 0);
    this.registerAction = (action) => {
      this.actions.push(action);
      this.actions = sortByPriority(this.actions);
      this.scheduleUpdate();
    };
    this.clearRegisteredActions = () => {
      this.actions = [];
    };
    this.onActionRegistered = (listener) => {
      this.listeners.push(listener);
      this.scheduleUpdate();
      return () => {
        this.listeners = this.listeners.filter((item) => item !== listener);
      };
    };
  }
  installPublic(api = {}) {
    var _a;
    (_a = api.registerAction) !== null && _a !== void 0 ? _a : api.registerAction = this.registerAction;
    return api;
  }
  installInternal(internalApi = {}) {
    var _a, _b;
    (_a = internalApi.clearRegisteredActions) !== null && _a !== void 0 ? _a : internalApi.clearRegisteredActions = this.clearRegisteredActions;
    (_b = internalApi.onActionRegistered) !== null && _b !== void 0 ? _b : internalApi.onActionRegistered = this.onActionRegistered;
    return internalApi;
  }
};

// node_modules/@cloudscape-design/components/internal/plugins/api.js
var storageKey = Symbol.for("awsui-plugin-api");
function findUpApi(currentWindow) {
  try {
    if (currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow[storageKey]) {
      return currentWindow[storageKey];
    }
    if (!currentWindow || currentWindow.parent === currentWindow) {
      return void 0;
    }
    return findUpApi(currentWindow.parent);
  } catch (ex) {
    return void 0;
  }
}
function loadApi() {
  if (typeof window === "undefined") {
    return installApi({});
  }
  const win = window;
  const existingApi = findUpApi(win);
  win[storageKey] = installApi(existingApi !== null && existingApi !== void 0 ? existingApi : {});
  return win[storageKey];
}
var { awsuiPlugins, awsuiPluginsInternal } = loadApi();
function installApi(api) {
  var _a, _b;
  (_a = api.awsuiPlugins) !== null && _a !== void 0 ? _a : api.awsuiPlugins = {};
  (_b = api.awsuiPluginsInternal) !== null && _b !== void 0 ? _b : api.awsuiPluginsInternal = {};
  const appLayoutDrawers = new DrawersController();
  api.awsuiPlugins.appLayout = appLayoutDrawers.installPublic(api.awsuiPlugins.appLayout);
  api.awsuiPluginsInternal.appLayout = appLayoutDrawers.installInternal(api.awsuiPluginsInternal.appLayout);
  const alertActions = new ActionButtonsController();
  api.awsuiPlugins.alert = alertActions.installPublic(api.awsuiPlugins.alert);
  api.awsuiPluginsInternal.alert = alertActions.installInternal(api.awsuiPluginsInternal.alert);
  const flashbarActions = new ActionButtonsController();
  api.awsuiPlugins.flashbar = flashbarActions.installPublic(api.awsuiPlugins.flashbar);
  api.awsuiPluginsInternal.flashbar = flashbarActions.installInternal(api.awsuiPluginsInternal.flashbar);
  return api;
}

// node_modules/@cloudscape-design/components/alert/actions-wrapper/index.js
var import_react3 = __toESM(require_react());

// node_modules/@cloudscape-design/components/alert/actions-wrapper/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/alert/actions-wrapper/styles.scoped.css";
var styles_css_default3 = {
  "root": "awsui_root_37gf8_14wux_9"
};

// node_modules/@cloudscape-design/components/alert/actions-wrapper/index.js
function createActionButton(testUtilClasses, action, buttonText, onButtonClick) {
  if (!action && buttonText) {
    action = import_react3.default.createElement(internal_default2, { className: testUtilClasses.actionButton, onClick: onButtonClick, formAction: "none" }, buttonText);
  }
  return action ? import_react3.default.createElement("div", { className: testUtilClasses.actionSlot }, action) : null;
}
function ActionsWrapper({ className: className2, testUtilClasses, action, discoveredActions, buttonText, onButtonClick }) {
  const actionButton = createActionButton(testUtilClasses, action, buttonText, onButtonClick);
  if (!actionButton && discoveredActions.length === 0) {
    return null;
  }
  return import_react3.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default3.root, className2) },
    actionButton,
    discoveredActions
  );
}

// node_modules/@cloudscape-design/components/alert/internal.js
var typeToIcon = {
  error: "status-negative",
  warning: "status-warning",
  success: "status-positive",
  info: "status-info"
};
var useDiscoveredAction = createUseDiscoveredAction(awsuiPluginsInternal.alert.onActionRegistered);
var InternalAlert = import_react4.default.forwardRef((_a, ref) => {
  var { type, statusIconAriaLabel, visible = true, dismissible, dismissAriaLabel, children, header, buttonText, action, onDismiss, onButtonClick, __internalRootRef = null } = _a, rest = __rest(_a, ["type", "statusIconAriaLabel", "visible", "dismissible", "dismissAriaLabel", "children", "header", "buttonText", "action", "onDismiss", "onButtonClick", "__internalRootRef"]);
  const baseProps = getBaseProps(rest);
  const i18n = useInternalI18n("alert");
  const focusRef = (0, import_react4.useRef)(null);
  useForwardFocus(ref, focusRef);
  const [breakpoint, breakpointRef] = useContainerBreakpoints(["xs"]);
  const mergedRef = useMergeRefs(breakpointRef, __internalRootRef);
  const isRefresh = useVisualRefresh();
  const size = isRefresh ? "normal" : header && children ? "big" : "normal";
  const { discoveredActions, headerRef, contentRef } = useDiscoveredAction(type);
  const hasAction = Boolean(action || buttonText || discoveredActions.length);
  const analyticsAttributes = {
    [DATA_ATTR_ANALYTICS_ALERT]: type
  };
  return import_react4.default.createElement(
    "div",
    Object.assign({}, baseProps, analyticsAttributes, { "aria-hidden": !visible, className: clsx_m_default(styles_css_default2.root, { [styles_css_default2.hidden]: !visible }, baseProps.className), ref: mergedRef }),
    import_react4.default.createElement(
      LinkDefaultVariantContext.Provider,
      { value: { defaultVariant: "primary" } },
      import_react4.default.createElement(
        VisualContext,
        { contextName: "alert" },
        import_react4.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default2.alert, styles_css_default2[`type-${type}`], styles_css_default2[`icon-size-${size}`], hasAction && styles_css_default2["with-action"], dismissible && styles_css_default2["with-dismiss"], styles_css_default2[`breakpoint-${breakpoint}`]) },
          import_react4.default.createElement(
            "div",
            { className: styles_css_default2["alert-focus-wrapper"], tabIndex: -1, ref: focusRef },
            import_react4.default.createElement(
              "div",
              { className: clsx_m_default(styles_css_default2.icon, styles_css_default2.text), role: "img", "aria-label": statusIconAriaLabel },
              import_react4.default.createElement(internal_default, { name: typeToIcon[type], size })
            ),
            import_react4.default.createElement(
              "div",
              { className: clsx_m_default(styles_css_default2.message, styles_css_default2.text) },
              header && import_react4.default.createElement("div", { className: styles_css_default2.header, ref: headerRef }, header),
              import_react4.default.createElement("div", { className: styles_css_default2.content, ref: contentRef }, children)
            )
          ),
          import_react4.default.createElement(ActionsWrapper, { className: styles_css_default2.action, testUtilClasses: {
            actionSlot: styles_css_default2["action-slot"],
            actionButton: styles_css_default2["action-button"]
          }, action, discoveredActions, buttonText, onButtonClick: () => fireNonCancelableEvent(onButtonClick) }),
          dismissible && import_react4.default.createElement(
            "div",
            { className: styles_css_default2.dismiss },
            import_react4.default.createElement(InternalButton, { className: styles_css_default2["dismiss-button"], variant: "icon", iconName: "close", formAction: "none", ariaLabel: i18n("dismissAriaLabel", dismissAriaLabel), onClick: () => fireNonCancelableEvent(onDismiss) })
          )
        )
      )
    )
  );
});
var internal_default6 = InternalAlert;

// node_modules/@cloudscape-design/components/alert/index.js
var Alert = import_react5.default.forwardRef((_a, ref) => {
  var { type = "info", visible = true } = _a, props = __rest(_a, ["type", "visible"]);
  const analyticsMetadata = getAnalyticsMetadataProps(props);
  const baseComponentProps = useBaseComponent("Alert", {
    props: { type, visible, dismissible: props.dismissible }
  }, analyticsMetadata);
  const { funnelInteractionId, submissionAttempt, funnelState, errorCount } = useFunnel();
  const { stepNumber, stepNameSelector } = useFunnelStep();
  const { subStepSelector, subStepNameSelector } = useFunnelSubStep();
  (0, import_react5.useEffect)(() => {
    var _a2, _b, _c;
    if (funnelInteractionId && visible && type === "error" && funnelState.current !== "complete") {
      const stepName = getNameFromSelector(stepNameSelector);
      const subStepName = getNameFromSelector(subStepNameSelector);
      errorCount.current++;
      const errorIsVisible = ((_c = (_b = (_a2 = baseComponentProps.__internalRootRef.current) === null || _a2 === void 0 ? void 0 : _a2.getBoundingClientRect()) === null || _b === void 0 ? void 0 : _b.width) !== null && _c !== void 0 ? _c : 0) > 0;
      if (errorIsVisible) {
        if (subStepSelector) {
          FunnelMetrics.funnelSubStepError({
            funnelInteractionId,
            subStepSelector,
            subStepName,
            subStepNameSelector,
            stepNumber,
            stepName,
            stepNameSelector,
            subStepAllSelector: getSubStepAllSelector(),
            instanceIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier,
            errorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext
          });
        } else {
          FunnelMetrics.funnelError({
            funnelInteractionId
          });
        }
      }
      return () => {
        errorCount.current--;
      };
    }
  }, [funnelInteractionId, visible, submissionAttempt, errorCount]);
  return import_react5.default.createElement(internal_default6, Object.assign({ type, visible }, props, baseComponentProps, { ref }));
});
applyDisplayName(Alert, "Alert");
var alert_default = Alert;

// node_modules/@cloudscape-design/components/anchor-navigation/index.js
var import_react8 = __toESM(require_react());

// node_modules/@cloudscape-design/components/anchor-navigation/internal.js
var import_react7 = __toESM(require_react());

// node_modules/@cloudscape-design/components/anchor-navigation/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/anchor-navigation/styles.scoped.css";
var styles_css_default4 = {
  "root": "awsui_root_swimc_yjm0c_99",
  "anchor-list": "awsui_anchor-list_swimc_yjm0c_134",
  "anchor-item": "awsui_anchor-item_swimc_yjm0c_157",
  "anchor-item--active": "awsui_anchor-item--active_swimc_yjm0c_177",
  "anchor-link": "awsui_anchor-link_swimc_yjm0c_194",
  "anchor-link--active": "awsui_anchor-link--active_swimc_yjm0c_236",
  "anchor-link-text": "awsui_anchor-link-text_swimc_yjm0c_243",
  "anchor-link-info": "awsui_anchor-link-info_swimc_yjm0c_247"
};

// node_modules/@cloudscape-design/components/anchor-navigation/test-classes/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/anchor-navigation/test-classes/styles.scoped.css";
var styles_css_default5 = {
  "root": "awsui_root_17oho_5eh15_5",
  "anchor-list": "awsui_anchor-list_17oho_5eh15_9",
  "anchor-item--active": "awsui_anchor-item--active_17oho_5eh15_13",
  "anchor-link": "awsui_anchor-link_17oho_5eh15_17",
  "anchor-link-text": "awsui_anchor-link-text_17oho_5eh15_21",
  "anchor-link-info": "awsui_anchor-link-info_17oho_5eh15_25"
};

// node_modules/@cloudscape-design/components/anchor-navigation/use-scroll-spy.js
var import_react6 = __toESM(require_react());
var isBrowser = typeof window !== "undefined";
function useScrollSpy({ hrefs, scrollSpyOffset, activeHref }) {
  const [currentHref, setCurrentHref] = (0, import_react6.useState)(activeHref);
  const [lastAnchorExists, setLastAnchorExists] = (0, import_react6.useState)(false);
  (0, import_react6.useEffect)(() => {
    setCurrentHref(activeHref);
  }, [activeHref]);
  (0, import_react6.useEffect)(() => {
    var _a;
    setLastAnchorExists(isBrowser && !!document.getElementById((_a = hrefs[hrefs.length - 1]) === null || _a === void 0 ? void 0 : _a.slice(1)));
  }, [hrefs]);
  const getRectByHref = (0, import_react6.useCallback)((href) => {
    var _a;
    return (_a = document.getElementById(href.slice(1))) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
  }, []);
  const isPageBottom = (0, import_react6.useCallback)(() => {
    return lastAnchorExists && Math.ceil(window.scrollY) >= Math.floor(document.body.scrollHeight - window.innerHeight);
  }, [lastAnchorExists]);
  const findHrefInView = (0, import_react6.useCallback)(() => {
    return hrefs.find((href) => {
      const rect = getRectByHref(href);
      return rect && rect.bottom <= window.innerHeight && rect.top >= scrollSpyOffset;
    });
  }, [getRectByHref, scrollSpyOffset, hrefs]);
  const findLastHrefInView = (0, import_react6.useCallback)(() => {
    return [...hrefs].reverse().find((href) => {
      const rect = getRectByHref(href);
      return rect && rect.bottom <= window.innerHeight;
    });
  }, [getRectByHref, hrefs]);
  const handleScroll = (0, import_react6.useCallback)(() => {
    if (activeHref || !isBrowser) {
      return;
    }
    const { scrollY } = window;
    if (document.body.scrollHeight > window.innerHeight && isPageBottom()) {
      setCurrentHref(hrefs[hrefs.length - 1]);
    } else {
      setCurrentHref(findHrefInView() || (scrollY > 0 ? findLastHrefInView() : void 0));
    }
  }, [activeHref, isPageBottom, findHrefInView, findLastHrefInView, hrefs]);
  (0, import_react6.useEffect)(() => {
    if (isBrowser) {
      handleScroll();
      window.addEventListener("scroll", handleScroll, { passive: true });
      return () => {
        window.removeEventListener("scroll", handleScroll);
      };
    }
  }, [handleScroll]);
  return currentHref;
}

// node_modules/@cloudscape-design/components/anchor-navigation/internal.js
function InternalAnchorNavigation(_a) {
  var { anchors, ariaLabelledby, onFollow, onActiveHrefChange, activeHref = "", __internalRootRef = null, scrollSpyOffset = 0 } = _a, props = __rest(_a, ["anchors", "ariaLabelledby", "onFollow", "onActiveHrefChange", "activeHref", "__internalRootRef", "scrollSpyOffset"]);
  const baseProps = getBaseProps(props);
  const hrefs = (0, import_react7.useMemo)(() => anchors.map((anchor) => anchor.href), [anchors]);
  const onFollowHandler = (0, import_react7.useCallback)((anchor, sourceEvent) => {
    fireCancelableEvent(onFollow, anchor, sourceEvent);
  }, [onFollow]);
  const currentActiveHref = useScrollSpy({
    hrefs,
    scrollSpyOffset,
    activeHref
  });
  (0, import_react7.useEffect)(() => {
    if (currentActiveHref) {
      const newActiveAnchor = anchors.find((anchor) => anchor.href === currentActiveHref);
      fireNonCancelableEvent(onActiveHrefChange, newActiveAnchor);
    }
  }, [onActiveHrefChange, anchors, currentActiveHref]);
  return import_react7.default.createElement(
    "nav",
    Object.assign({}, baseProps, { ref: __internalRootRef, "aria-labelledby": ariaLabelledby, className: clsx_m_default(baseProps.className, styles_css_default4.root, styles_css_default5.root) }),
    import_react7.default.createElement("ol", { className: clsx_m_default(styles_css_default4["anchor-list"], styles_css_default5["anchor-list"]) }, anchors.map((anchor, index) => {
      return import_react7.default.createElement(Anchor, { onFollow: onFollowHandler, isActive: anchor.href === currentActiveHref, key: index, index, anchor });
    }))
  );
}
var Anchor = ({ anchor, onFollow, isActive, index }) => {
  checkSafeUrl("AnchorNavigation", anchor.href);
  const onClick = (0, import_react7.useCallback)((event) => {
    if (isPlainLeftClick(event)) {
      onFollow(anchor, event);
    }
  }, [onFollow, anchor]);
  const activeItemClasses = clsx_m_default(styles_css_default4["anchor-item--active"], styles_css_default5["anchor-item--active"]);
  return import_react7.default.createElement(
    "li",
    { "data-itemid": `anchor-item-${index + 1}`, className: clsx_m_default(styles_css_default4["anchor-item"], isActive && activeItemClasses) },
    import_react7.default.createElement(
      "a",
      Object.assign({ onClick, className: clsx_m_default(styles_css_default4["anchor-link"], styles_css_default5["anchor-link"], isActive && styles_css_default4["anchor-link--active"]) }, isActive ? { "aria-current": true } : {}, { href: anchor.href }),
      import_react7.default.createElement("span", { className: clsx_m_default(styles_css_default4["anchor-link-text"], styles_css_default5["anchor-link-text"]), style: { paddingInlineStart: `${anchor.level * 16 + 2}px` } }, anchor.text),
      anchor.info && import_react7.default.createElement("span", { className: clsx_m_default(styles_css_default4["anchor-link-info"], styles_css_default5["anchor-link-info"]) }, anchor.info)
    )
  );
};

// node_modules/@cloudscape-design/components/anchor-navigation/index.js
function AnchorNavigation(_a) {
  var { scrollSpyOffset = 0 } = _a, props = __rest(_a, ["scrollSpyOffset"]);
  const baseComponentProps = useBaseComponent("AnchorNavigation");
  return import_react8.default.createElement(InternalAnchorNavigation, Object.assign({ scrollSpyOffset }, props, baseComponentProps));
}
applyDisplayName(AnchorNavigation, "AnchorNavigation");

// node_modules/@cloudscape-design/components/annotation-context/index.js
var import_react19 = __toESM(require_react());

// node_modules/@cloudscape-design/components/annotation-context/annotation/open-annotation.js
var import_react16 = __toESM(require_react());

// node_modules/@cloudscape-design/components/annotation-context/annotation/annotation-trigger.js
var import_react10 = __toESM(require_react());

// node_modules/@cloudscape-design/components/annotation-context/annotation/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/annotation-context/annotation/styles.scoped.css";
var styles_css_default6 = {
  "arrow": "awsui_arrow_1hpp3_10w1c_99",
  "arrow-outer": "awsui_arrow-outer_1hpp3_10w1c_103",
  "arrow-inner": "awsui_arrow-inner_1hpp3_10w1c_103",
  "arrow-position-right-top": "awsui_arrow-position-right-top_1hpp3_10w1c_144",
  "arrow-position-right-bottom": "awsui_arrow-position-right-bottom_1hpp3_10w1c_144",
  "arrow-position-left-top": "awsui_arrow-position-left-top_1hpp3_10w1c_147",
  "arrow-position-left-bottom": "awsui_arrow-position-left-bottom_1hpp3_10w1c_147",
  "arrow-position-top-center": "awsui_arrow-position-top-center_1hpp3_10w1c_150",
  "arrow-position-top-responsive": "awsui_arrow-position-top-responsive_1hpp3_10w1c_150",
  "arrow-position-bottom-center": "awsui_arrow-position-bottom-center_1hpp3_10w1c_153",
  "arrow-position-bottom-responsive": "awsui_arrow-position-bottom-responsive_1hpp3_10w1c_153",
  "annotation": "awsui_annotation_1hpp3_10w1c_161",
  "next-button": "awsui_next-button_1hpp3_10w1c_162",
  "previous-button": "awsui_previous-button_1hpp3_10w1c_163",
  "finish-button": "awsui_finish-button_1hpp3_10w1c_164",
  "header": "awsui_header_1hpp3_10w1c_165",
  "step-counter-content": "awsui_step-counter-content_1hpp3_10w1c_166",
  "content": "awsui_content_1hpp3_10w1c_167",
  "description": "awsui_description_1hpp3_10w1c_171",
  "actionBar": "awsui_actionBar_1hpp3_10w1c_176",
  "stepCounter": "awsui_stepCounter_1hpp3_10w1c_183",
  "divider": "awsui_divider_1hpp3_10w1c_187",
  "hotspot": "awsui_hotspot_1hpp3_10w1c_191",
  "icon": "awsui_icon_1hpp3_10w1c_258"
};

// node_modules/@cloudscape-design/components/annotation-context/annotation/annotation-icon.js
var import_react9 = __toESM(require_react());
var AnnotationIcon = ({ open }) => {
  if (open) {
    return import_react9.default.createElement(
      "svg",
      { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 16 16", focusable: "false", "aria-hidden": "true", className: styles_css_default6.icon },
      import_react9.default.createElement(
        "g",
        { fill: "none", fillRule: "evenodd", transform: "translate(1 1)" },
        import_react9.default.createElement("circle", { cx: "7", cy: "7", r: "7", strokeWidth: "2" }),
        import_react9.default.createElement("path", { strokeLinecap: "square", strokeWidth: "2.2", d: "M2.5,-1 L2.5,3", transform: "rotate(90 1.75 6.25)" })
      )
    );
  } else {
    return import_react9.default.createElement(
      "svg",
      { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 16 16", focusable: "false", "aria-hidden": "true", className: styles_css_default6.icon },
      import_react9.default.createElement(
        "g",
        { fill: "none", fillRule: "evenodd", transform: "translate(1 1)" },
        import_react9.default.createElement("circle", { cx: "7", cy: "7", r: "7", strokeWidth: "2" }),
        import_react9.default.createElement(
          "g",
          { strokeLinecap: "square", strokeWidth: "2.2", transform: "translate(4.5 5)" },
          import_react9.default.createElement("path", { d: "M2.5,0 L2.5,4", transform: "rotate(90 2.5 2)" }),
          import_react9.default.createElement("path", { d: "M2.5,0 L2.5,4" })
        )
      )
    );
  }
};

// node_modules/@cloudscape-design/components/annotation-context/annotation/annotation-trigger.js
var annotation_trigger_default = import_react10.default.forwardRef(function AnnotationTrigger({ open, onClick: onClickHandler, i18nStrings, taskLocalStepIndex, totalLocalSteps }, ref) {
  const onClick = (0, import_react10.useCallback)((event) => {
    event.preventDefault();
    onClickHandler();
  }, [onClickHandler]);
  return import_react10.default.createElement(
    "button",
    { ref, className: styles_css_default6.hotspot, "aria-haspopup": "dialog", "aria-label": i18nStrings.labelHotspot(open, taskLocalStepIndex !== null && taskLocalStepIndex !== void 0 ? taskLocalStepIndex : 0, totalLocalSteps !== null && totalLocalSteps !== void 0 ? totalLocalSteps : 0), onClick },
    import_react10.default.createElement(AnnotationIcon, { open })
  );
});

// node_modules/@cloudscape-design/components/annotation-context/annotation/annotation-popover.js
var import_react15 = __toESM(require_react());

// node_modules/@cloudscape-design/components/popover/container.js
var import_react12 = __toESM(require_react());

// node_modules/@cloudscape-design/components/popover/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/popover/styles.scoped.css";
var styles_css_default7 = {
  "arrow": "awsui_arrow_xjuzf_ov8et_197",
  "arrow-outer": "awsui_arrow-outer_xjuzf_ov8et_201",
  "arrow-inner": "awsui_arrow-inner_xjuzf_ov8et_201",
  "refresh": "awsui_refresh_xjuzf_ov8et_235",
  "arrow-position-right-top": "awsui_arrow-position-right-top_xjuzf_ov8et_245",
  "arrow-position-right-bottom": "awsui_arrow-position-right-bottom_xjuzf_ov8et_245",
  "arrow-position-left-top": "awsui_arrow-position-left-top_xjuzf_ov8et_248",
  "arrow-position-left-bottom": "awsui_arrow-position-left-bottom_xjuzf_ov8et_248",
  "arrow-position-top-center": "awsui_arrow-position-top-center_xjuzf_ov8et_251",
  "arrow-position-top-right": "awsui_arrow-position-top-right_xjuzf_ov8et_251",
  "arrow-position-top-left": "awsui_arrow-position-top-left_xjuzf_ov8et_251",
  "arrow-position-top-responsive": "awsui_arrow-position-top-responsive_xjuzf_ov8et_251",
  "arrow-position-bottom-center": "awsui_arrow-position-bottom-center_xjuzf_ov8et_254",
  "arrow-position-bottom-right": "awsui_arrow-position-bottom-right_xjuzf_ov8et_254",
  "arrow-position-bottom-left": "awsui_arrow-position-bottom-left_xjuzf_ov8et_254",
  "arrow-position-bottom-responsive": "awsui_arrow-position-bottom-responsive_xjuzf_ov8et_254",
  "body": "awsui_body_xjuzf_ov8et_356",
  "body-overflow-visible": "awsui_body-overflow-visible_xjuzf_ov8et_395",
  "has-dismiss": "awsui_has-dismiss_xjuzf_ov8et_399",
  "dismiss": "awsui_dismiss_xjuzf_ov8et_404",
  "dismiss-control": "awsui_dismiss-control_xjuzf_ov8et_412",
  "header-row": "awsui_header-row_xjuzf_ov8et_416",
  "header": "awsui_header_xjuzf_ov8et_416",
  "content": "awsui_content_xjuzf_ov8et_442",
  "content-overflow-visible": "awsui_content-overflow-visible_xjuzf_ov8et_450",
  "container": "awsui_container_xjuzf_ov8et_552",
  "container-body": "awsui_container-body_xjuzf_ov8et_560",
  "container-body-variant-annotation": "awsui_container-body-variant-annotation_xjuzf_ov8et_603",
  "container-body-size-small": "awsui_container-body-size-small_xjuzf_ov8et_608",
  "fixed-width": "awsui_fixed-width_xjuzf_ov8et_611",
  "container-body-size-medium": "awsui_container-body-size-medium_xjuzf_ov8et_615",
  "container-body-size-large": "awsui_container-body-size-large_xjuzf_ov8et_622",
  "container-arrow": "awsui_container-arrow_xjuzf_ov8et_634",
  "container-arrow-position-right-top": "awsui_container-arrow-position-right-top_xjuzf_ov8et_638",
  "container-arrow-position-right-bottom": "awsui_container-arrow-position-right-bottom_xjuzf_ov8et_638",
  "container-arrow-position-left-top": "awsui_container-arrow-position-left-top_xjuzf_ov8et_654",
  "container-arrow-position-left-bottom": "awsui_container-arrow-position-left-bottom_xjuzf_ov8et_654",
  "container-arrow-position-top-center": "awsui_container-arrow-position-top-center_xjuzf_ov8et_670",
  "container-arrow-position-top-right": "awsui_container-arrow-position-top-right_xjuzf_ov8et_670",
  "container-arrow-position-top-left": "awsui_container-arrow-position-top-left_xjuzf_ov8et_670",
  "container-arrow-position-top-responsive": "awsui_container-arrow-position-top-responsive_xjuzf_ov8et_670",
  "container-arrow-position-bottom-center": "awsui_container-arrow-position-bottom-center_xjuzf_ov8et_686",
  "container-arrow-position-bottom-right": "awsui_container-arrow-position-bottom-right_xjuzf_ov8et_690",
  "container-arrow-position-bottom-left": "awsui_container-arrow-position-bottom-left_xjuzf_ov8et_694",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_xjuzf_ov8et_1",
  "root": "awsui_root_xjuzf_ov8et_840",
  "trigger": "awsui_trigger_xjuzf_ov8et_876",
  "trigger-type-text": "awsui_trigger-type-text_xjuzf_ov8et_883",
  "trigger-inner-text": "awsui_trigger-inner-text_xjuzf_ov8et_918",
  "popover-inline-content": "awsui_popover-inline-content_xjuzf_ov8et_922"
};

// node_modules/@cloudscape-design/components/popover/use-popover-position.js
var import_react11 = __toESM(require_react());

// node_modules/@cloudscape-design/components/popover/utils/positions.js
var ARROW_OFFSET = 12;
var PRIORITY_MAPPING = {
  top: [
    "top-center",
    "top-right",
    "top-left",
    "bottom-center",
    "bottom-right",
    "bottom-left",
    "right-top",
    "right-bottom",
    "left-top",
    "left-bottom"
  ],
  bottom: [
    "bottom-center",
    "bottom-right",
    "bottom-left",
    "top-center",
    "top-right",
    "top-left",
    "right-top",
    "right-bottom",
    "left-top",
    "left-bottom"
  ],
  left: [
    "left-top",
    "left-bottom",
    "right-top",
    "right-bottom",
    "bottom-center",
    "top-center",
    "bottom-left",
    "top-left",
    "bottom-right",
    "top-right"
  ],
  right: [
    "right-top",
    "right-bottom",
    "left-top",
    "left-bottom",
    "bottom-center",
    "top-center",
    "bottom-right",
    "top-right",
    "bottom-left",
    "top-left"
  ]
};
var RECTANGLE_CALCULATIONS = {
  "top-center": ({ body, trigger, arrow: arrow2 }) => {
    return {
      insetBlockStart: trigger.insetBlockStart - body.blockSize - arrow2.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize / 2 - body.inlineSize / 2,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "top-right": ({ body, trigger, arrow: arrow2 }) => {
    return {
      insetBlockStart: trigger.insetBlockStart - body.blockSize - arrow2.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize / 2 - ARROW_OFFSET - arrow2.inlineSize / 2,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "top-left": ({ body, trigger, arrow: arrow2 }) => {
    return {
      insetBlockStart: trigger.insetBlockStart - body.blockSize - arrow2.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize / 2 + ARROW_OFFSET + arrow2.inlineSize / 2 - body.inlineSize,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "bottom-center": ({ body, trigger, arrow: arrow2 }) => {
    return {
      insetBlockStart: trigger.insetBlockStart + trigger.blockSize + arrow2.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize / 2 - body.inlineSize / 2,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "bottom-right": ({ body, trigger, arrow: arrow2 }) => {
    return {
      insetBlockStart: trigger.insetBlockStart + trigger.blockSize + arrow2.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize / 2 - ARROW_OFFSET - arrow2.inlineSize / 2,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "bottom-left": ({ body, trigger, arrow: arrow2 }) => {
    return {
      insetBlockStart: trigger.insetBlockStart + trigger.blockSize + arrow2.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize / 2 + ARROW_OFFSET + arrow2.inlineSize / 2 - body.inlineSize,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "right-top": ({ body, trigger, arrow: arrow2 }) => {
    return {
      insetBlockStart: trigger.insetBlockStart + trigger.blockSize / 2 - ARROW_OFFSET - arrow2.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize + arrow2.blockSize,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "right-bottom": ({ body, trigger, arrow: arrow2 }) => {
    return {
      insetBlockStart: trigger.insetBlockStart + trigger.blockSize / 2 - body.blockSize + ARROW_OFFSET + arrow2.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize + arrow2.blockSize,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "left-top": ({ body, trigger, arrow: arrow2 }) => {
    return {
      insetBlockStart: trigger.insetBlockStart + trigger.blockSize / 2 - ARROW_OFFSET - arrow2.blockSize,
      insetInlineStart: trigger.insetInlineStart - body.inlineSize - arrow2.blockSize,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "left-bottom": ({ body, trigger, arrow: arrow2 }) => {
    return {
      insetBlockStart: trigger.insetBlockStart + trigger.blockSize / 2 - body.blockSize + ARROW_OFFSET + arrow2.blockSize,
      insetInlineStart: trigger.insetInlineStart - body.inlineSize - arrow2.blockSize,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  }
};
function fitIntoContainer(inner, outer) {
  let { insetInlineStart, inlineSize, insetBlockStart, blockSize } = inner;
  if (insetInlineStart < outer.insetInlineStart) {
    inlineSize = insetInlineStart + inlineSize - outer.insetInlineStart;
    insetInlineStart = outer.insetInlineStart;
  } else if (insetInlineStart + inlineSize > outer.insetInlineStart + outer.inlineSize) {
    inlineSize = outer.insetInlineStart + outer.inlineSize - insetInlineStart;
  }
  if (insetBlockStart < outer.insetBlockStart) {
    blockSize = insetBlockStart + blockSize - outer.insetBlockStart;
    insetBlockStart = outer.insetBlockStart;
  } else if (insetBlockStart + blockSize > outer.insetBlockStart + outer.blockSize) {
    blockSize = outer.insetBlockStart + outer.blockSize - insetBlockStart;
  }
  return { insetInlineStart, inlineSize, insetBlockStart, blockSize };
}
function getTallestRect(rect1, rect2) {
  return rect1.blockSize >= rect2.blockSize ? rect1 : rect2;
}
function getIntersection(rectangles) {
  let boundingBox = null;
  for (const currentRect of rectangles) {
    if (!boundingBox) {
      boundingBox = currentRect;
      continue;
    }
    const insetInlineStart = Math.max(boundingBox.insetInlineStart, currentRect.insetInlineStart);
    const insetBlockStart = Math.max(boundingBox.insetBlockStart, currentRect.insetBlockStart);
    const insetInlineEnd = Math.min(boundingBox.insetInlineStart + boundingBox.inlineSize, currentRect.insetInlineStart + currentRect.inlineSize);
    const insetBlockEnd = Math.min(boundingBox.insetBlockStart + boundingBox.blockSize, currentRect.insetBlockStart + currentRect.blockSize);
    if (insetInlineEnd < insetInlineStart || insetBlockEnd < insetBlockStart) {
      return null;
    }
    boundingBox = {
      insetInlineStart,
      insetBlockStart,
      inlineSize: insetInlineEnd - insetInlineStart,
      blockSize: insetBlockEnd - insetBlockStart
    };
  }
  return boundingBox;
}
function calculatePosition({
  preferredPosition,
  fixedInternalPosition,
  trigger,
  arrow: arrow2,
  body,
  container,
  viewport,
  // the popover is only bound by the viewport if it is rendered in a portal
  renderWithPortal,
  allowVerticalOverflow
}) {
  let bestOption = null;
  const preferredInternalPositions = fixedInternalPosition ? [fixedInternalPosition] : PRIORITY_MAPPING[preferredPosition];
  for (const internalPosition2 of preferredInternalPositions) {
    const rect2 = RECTANGLE_CALCULATIONS[internalPosition2]({ body, trigger, arrow: arrow2 });
    const visibleArea = renderWithPortal ? getIntersection([rect2, viewport]) : getIntersection([rect2, viewport, container]);
    const fitsWithoutOverflow = visibleArea && visibleArea.inlineSize === body.inlineSize && visibleArea.blockSize === body.blockSize;
    if (fitsWithoutOverflow) {
      return { internalPosition: internalPosition2, rect: rect2 };
    }
    const newOption = { rect: rect2, internalPosition: internalPosition2, visibleArea };
    bestOption = getBestOption(newOption, bestOption);
  }
  const internalPosition = (bestOption === null || bestOption === void 0 ? void 0 : bestOption.internalPosition) || "right-top";
  const rect = RECTANGLE_CALCULATIONS[internalPosition]({ body, trigger, arrow: arrow2 });
  const tallestBoundingContainer = getTallestRect(viewport, container);
  const boundingContainer = allowVerticalOverflow && isTopOrBottom(internalPosition) ? {
    insetBlockStart: tallestBoundingContainer.insetBlockStart,
    blockSize: tallestBoundingContainer.blockSize,
    insetInlineStart: viewport.insetInlineStart,
    inlineSize: viewport.inlineSize
  } : viewport;
  const optimizedRect = fitIntoContainer(rect, boundingContainer);
  const scrollable = optimizedRect.blockSize < rect.blockSize;
  return { internalPosition, rect: optimizedRect, scrollable };
}
function getBestOption(option1, option2) {
  if (!(option2 === null || option2 === void 0 ? void 0 : option2.visibleArea)) {
    return option1;
  }
  if (!option1.visibleArea) {
    return option2;
  }
  if (option1.visibleArea.inlineSize === option2.visibleArea.inlineSize) {
    return option1.visibleArea.blockSize > option2.visibleArea.blockSize ? option1 : option2;
  }
  return option1.visibleArea.inlineSize > option2.visibleArea.inlineSize ? option1 : option2;
}
function getOffsetDimensions(element) {
  return { offsetHeight: element.offsetHeight, offsetWidth: element.offsetWidth };
}
function getDimensions(element) {
  const computedStyle = getComputedStyle(element);
  return {
    inlineSize: parseFloat(computedStyle.inlineSize),
    blockSize: parseFloat(computedStyle.blockSize)
  };
}
function isTopOrBottom(internalPosition) {
  return ["top", "bottom"].includes(internalPosition.split("-")[0]);
}

// node_modules/@cloudscape-design/components/popover/use-popover-position.js
function usePopoverPosition({ popoverRef, bodyRef, arrowRef, trackRef, contentRef, allowScrollToFit, allowVerticalOverflow, preferredPosition, renderWithPortal, keepPosition }) {
  const previousInternalPositionRef = (0, import_react11.useRef)(null);
  const [popoverStyle, setPopoverStyle] = (0, import_react11.useState)({});
  const [internalPosition, setInternalPosition] = (0, import_react11.useState)(null);
  const positionHandlerRef = (0, import_react11.useRef)(() => {
  });
  const updatePositionHandler = (0, import_react11.useCallback)((onContentResize = false) => {
    var _a;
    if (!trackRef.current || !popoverRef.current || !bodyRef.current || !contentRef.current || !arrowRef.current) {
      return;
    }
    const popover = popoverRef.current;
    const body = bodyRef.current;
    const arrow2 = arrowRef.current;
    const document2 = popover.ownerDocument;
    const track = trackRef.current;
    const { offsetWidth, offsetHeight } = getOffsetDimensions(popover);
    if (offsetWidth === 0 || offsetHeight === 0 || !nodeContains(document2.body, track)) {
      return;
    }
    const prevInsetBlockStart = popover.style.insetBlockStart;
    const prevInsetInlineStart = popover.style.insetInlineStart;
    popover.style.insetBlockStart = "0";
    popover.style.insetInlineStart = "0";
    body.style.maxBlockSize = "";
    body.style.overflowX = "";
    body.style.overflowY = "";
    const viewportRect = getViewportRect(document2.defaultView);
    const trackRect = getLogicalBoundingClientRect(track);
    const arrowRect = getDimensions(arrow2);
    const containingBlock = getContainingBlock(popover);
    const containingBlockRect = containingBlock ? getLogicalBoundingClientRect(containingBlock) : viewportRect;
    const bodyBorderWidth = getBorderWidth(body);
    const contentRect = getLogicalBoundingClientRect(contentRef.current);
    const contentBoundingBox = {
      inlineSize: contentRect.inlineSize + 2 * bodyBorderWidth,
      blockSize: contentRect.blockSize + 2 * bodyBorderWidth
    };
    const shouldKeepPosition = keepPosition && onContentResize && !!previousInternalPositionRef.current;
    const fixedInternalPosition = (_a = shouldKeepPosition && previousInternalPositionRef.current) !== null && _a !== void 0 ? _a : void 0;
    const { scrollable, internalPosition: newInternalPosition, rect } = calculatePosition({
      preferredPosition,
      fixedInternalPosition,
      trigger: trackRect,
      arrow: arrowRect,
      body: contentBoundingBox,
      container: containingBlock ? containingBlockRect : getDocumentRect(document2),
      viewport: viewportRect,
      renderWithPortal,
      allowVerticalOverflow
    });
    const popoverOffset = toRelativePosition(rect, containingBlockRect);
    const trackRelativeOffset = toRelativePosition(popoverOffset, toRelativePosition(trackRect, containingBlockRect));
    popover.style.insetBlockStart = prevInsetBlockStart;
    popover.style.insetInlineStart = prevInsetInlineStart;
    if (scrollable) {
      body.style.maxBlockSize = rect.blockSize + "px";
      body.style.overflowX = "hidden";
      body.style.overflowY = "auto";
    }
    previousInternalPositionRef.current = newInternalPosition;
    setInternalPosition(newInternalPosition);
    const shouldScroll = allowScrollToFit && !shouldKeepPosition;
    const insetBlockStart = shouldScroll ? popoverOffset.insetBlockStart + calculateScroll(rect) : popoverOffset.insetBlockStart;
    setPopoverStyle({ insetBlockStart, insetInlineStart: popoverOffset.insetInlineStart });
    if (shouldScroll) {
      const scrollableParent = getFirstScrollableParent(popover);
      scrollRectangleIntoView(rect, scrollableParent);
    }
    positionHandlerRef.current = () => {
      const newTrackOffset = toRelativePosition(getLogicalBoundingClientRect(track), containingBlock ? getLogicalBoundingClientRect(containingBlock) : viewportRect);
      setPopoverStyle({
        insetBlockStart: newTrackOffset.insetBlockStart + trackRelativeOffset.insetBlockStart,
        insetInlineStart: newTrackOffset.insetInlineStart + trackRelativeOffset.insetInlineStart
      });
    };
  }, [
    trackRef,
    popoverRef,
    bodyRef,
    contentRef,
    arrowRef,
    keepPosition,
    allowScrollToFit,
    preferredPosition,
    renderWithPortal,
    allowVerticalOverflow
  ]);
  return { updatePositionHandler, popoverStyle, internalPosition, positionHandlerRef };
}
function getBorderWidth(element) {
  return parseInt(getComputedStyle(element).borderWidth) || 0;
}
function toRelativePosition(element, parent) {
  return {
    insetBlockStart: element.insetBlockStart - parent.insetBlockStart,
    insetInlineStart: element.insetInlineStart - parent.insetInlineStart
  };
}
function getViewportRect(window2) {
  return {
    insetBlockStart: 0,
    insetInlineStart: 0,
    inlineSize: window2.innerWidth,
    blockSize: window2.innerHeight
  };
}
function getDocumentRect(document2) {
  const { insetBlockStart, insetInlineStart } = getLogicalBoundingClientRect(document2.documentElement);
  return {
    insetBlockStart,
    insetInlineStart,
    inlineSize: document2.documentElement.scrollWidth,
    blockSize: document2.documentElement.scrollHeight
  };
}

// node_modules/@cloudscape-design/components/popover/container.js
function PopoverContainer({ position, trackRef, trackKey, arrow: arrow2, children, zIndex, renderWithPortal, size, fixedWidth, variant, keepPosition, allowScrollToFit, allowVerticalOverflow }) {
  const bodyRef = (0, import_react12.useRef)(null);
  const contentRef = (0, import_react12.useRef)(null);
  const popoverRef = (0, import_react12.useRef)(null);
  const arrowRef = (0, import_react12.useRef)(null);
  const isRefresh = useVisualRefresh();
  const { updatePositionHandler, popoverStyle, internalPosition, positionHandlerRef } = usePopoverPosition({
    popoverRef,
    bodyRef,
    arrowRef,
    trackRef,
    contentRef,
    allowScrollToFit,
    allowVerticalOverflow,
    preferredPosition: position,
    renderWithPortal,
    keepPosition
  });
  (0, import_react12.useLayoutEffect)(() => {
    updatePositionHandler();
  }, [updatePositionHandler, trackKey]);
  useResizeObserver(contentRef, () => {
    updatePositionHandler(true);
  });
  (0, import_react12.useLayoutEffect)(() => {
    const onClick = (event) => {
      if (
        // Do not update position if keepPosition is true.
        keepPosition || // If the click was on the trigger, this will make the popover appear or disappear,
        // so no need to update its position either in this case.
        nodeContains(trackRef.current, event.target)
      ) {
        return;
      }
      requestAnimationFrame(() => {
        updatePositionHandler();
      });
    };
    const updatePositionOnResize = () => requestAnimationFrame(() => updatePositionHandler());
    const refreshPosition = () => requestAnimationFrame(() => positionHandlerRef.current());
    window.addEventListener("click", onClick);
    window.addEventListener("resize", updatePositionOnResize);
    window.addEventListener("scroll", refreshPosition, true);
    return () => {
      window.removeEventListener("click", onClick);
      window.removeEventListener("resize", updatePositionOnResize);
      window.removeEventListener("scroll", refreshPosition, true);
    };
  }, [keepPosition, positionHandlerRef, trackRef, updatePositionHandler]);
  return import_react12.default.createElement(
    "div",
    { ref: popoverRef, style: Object.assign(Object.assign({}, popoverStyle), { zIndex }), className: clsx_m_default(styles_css_default7.container, isRefresh && styles_css_default7.refresh) },
    import_react12.default.createElement("div", { ref: arrowRef, className: clsx_m_default(styles_css_default7[`container-arrow`], styles_css_default7[`container-arrow-position-${internalPosition}`]), "aria-hidden": true }, arrow2(internalPosition)),
    import_react12.default.createElement(
      "div",
      { ref: bodyRef, className: clsx_m_default(styles_css_default7["container-body"], styles_css_default7[`container-body-size-${size}`], {
        [styles_css_default7["fixed-width"]]: fixedWidth,
        [styles_css_default7[`container-body-variant-${variant}`]]: variant
      }) },
      import_react12.default.createElement("div", { ref: contentRef }, children)
    )
  );
}

// node_modules/@cloudscape-design/components/popover/body.js
var import_react14 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/focus-lock/index.js
var import_react13 = __toESM(require_react());
function FocusLock({ className: className2, disabled, autoFocus, restoreFocus, children }, ref) {
  const returnFocusToRef = (0, import_react13.useRef)(null);
  const containerRef = (0, import_react13.useRef)(null);
  const focusFirst = () => {
    var _a;
    if (containerRef.current) {
      (_a = getFirstFocusable(containerRef.current)) === null || _a === void 0 ? void 0 : _a.focus();
    }
  };
  const focusLast = () => {
    var _a;
    if (containerRef.current) {
      (_a = getLastFocusable(containerRef.current)) === null || _a === void 0 ? void 0 : _a.focus();
    }
  };
  (0, import_react13.useEffect)(() => {
    if (autoFocus && !disabled) {
      returnFocusToRef.current = document.activeElement;
      focusFirst();
    }
  }, [autoFocus, disabled]);
  const [previouslyDisabled, setPreviouslyDisabled] = (0, import_react13.useState)(!!disabled);
  (0, import_react13.useEffect)(() => {
    var _a;
    if (previouslyDisabled !== !!disabled) {
      setPreviouslyDisabled(!!disabled);
      if (restoreFocus && disabled) {
        (_a = returnFocusToRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        returnFocusToRef.current = null;
      }
    }
  }, [previouslyDisabled, disabled, restoreFocus]);
  const restoreFocusHandler = (0, import_react13.useCallback)((elem) => {
    var _a;
    if (elem === null && restoreFocus) {
      (_a = returnFocusToRef.current) === null || _a === void 0 ? void 0 : _a.focus();
      returnFocusToRef.current = null;
    }
  }, [restoreFocus]);
  (0, import_react13.useImperativeHandle)(ref, () => ({ focusFirst }));
  const mergedRef = useMergeRefs(containerRef, restoreFocusHandler);
  return import_react13.default.createElement(
    import_react13.default.Fragment,
    null,
    import_react13.default.createElement(TabTrap, { disabled, focusNextCallback: focusLast }),
    import_react13.default.createElement("div", { className: className2, ref: mergedRef }, children),
    import_react13.default.createElement(TabTrap, { disabled, focusNextCallback: focusFirst })
  );
}
var focus_lock_default = import_react13.default.forwardRef(FocusLock);

// node_modules/@cloudscape-design/components/popover/body.js
function PopoverBody({ dismissButton: showDismissButton, dismissAriaLabel, header, children, onDismiss, variant, overflowVisible, className: className2, ariaLabelledby }) {
  const i18n = useInternalI18n("popover");
  const labelledById = useUniqueId("awsui-popover-");
  const dismissButtonFocused = (0, import_react14.useRef)(false);
  const dismissButtonRef = (0, import_react14.useRef)(null);
  const onKeyDown = (0, import_react14.useCallback)((event) => {
    if (event.keyCode === KeyCode.escape) {
      event.stopPropagation();
      onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss();
    }
  }, [onDismiss]);
  (0, import_react14.useEffect)(() => {
    var _a;
    if (showDismissButton && !dismissButtonFocused.current) {
      (_a = dismissButtonRef.current) === null || _a === void 0 ? void 0 : _a.focus({ preventScroll: true });
    }
    dismissButtonFocused.current = showDismissButton;
  }, [showDismissButton]);
  const dismissButton2 = (showDismissButton !== null && showDismissButton !== void 0 ? showDismissButton : null) && import_react14.default.createElement(
    "div",
    { className: styles_css_default7.dismiss },
    import_react14.default.createElement(InternalButton, { variant: "icon", formAction: "none", iconName: "close", className: styles_css_default7["dismiss-control"], ariaLabel: i18n("dismissAriaLabel", dismissAriaLabel), onClick: () => onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss(), ref: dismissButtonRef })
  );
  const isDialog = showDismissButton;
  const shouldTrapFocus = showDismissButton && variant !== "annotation";
  const dialogProps = isDialog ? {
    role: "dialog",
    "aria-modal": shouldTrapFocus ? true : void 0,
    "aria-labelledby": ariaLabelledby !== null && ariaLabelledby !== void 0 ? ariaLabelledby : header ? labelledById : void 0
  } : {};
  return import_react14.default.createElement(
    "div",
    Object.assign({ className: clsx_m_default(styles_css_default7.body, className2, {
      [styles_css_default7["body-overflow-visible"]]: overflowVisible === "both"
    }), onKeyDown }, dialogProps),
    import_react14.default.createElement(
      focus_lock_default,
      { disabled: !shouldTrapFocus, autoFocus: false },
      header && import_react14.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default7["header-row"], showDismissButton && styles_css_default7["has-dismiss"]) },
        dismissButton2,
        import_react14.default.createElement(
          "div",
          { className: styles_css_default7.header, id: labelledById },
          import_react14.default.createElement("h2", null, header)
        )
      ),
      import_react14.default.createElement(
        "div",
        { className: !header && showDismissButton ? styles_css_default7["has-dismiss"] : void 0 },
        !header && dismissButton2,
        import_react14.default.createElement("div", { className: clsx_m_default(styles_css_default7.content, { [styles_css_default7["content-overflow-visible"]]: !!overflowVisible }) }, children)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/annotation-context/annotation/annotation-popover.js
var arrow = (position) => import_react15.default.createElement(
  "div",
  { className: clsx_m_default(styles_css_default6.arrow, styles_css_default6[`arrow-position-${position}`]) },
  import_react15.default.createElement("div", { className: styles_css_default6["arrow-outer"] }),
  import_react15.default.createElement("div", { className: styles_css_default6["arrow-inner"] })
);
function AnnotationPopover({ title, content, alert, direction = "top", taskLocalStepIndex, totalLocalSteps, showPreviousButton, showFinishButton, onDismiss, nextButtonEnabled, onNextButtonClick, onFinish, trackRef, previousButtonEnabled, onPreviousButtonClick, i18nStrings }) {
  (0, import_react15.useEffect)(() => {
    var _a;
    scrollElementIntoView((_a = trackRef.current) !== null && _a !== void 0 ? _a : void 0);
  }, [trackRef]);
  const popoverHeaderId = useUniqueId("poppver-header-");
  const stepCounterId = useUniqueId("step-counter-");
  return import_react15.default.createElement(
    PopoverContainer,
    { size: "medium", fixedWidth: false, position: direction, trackRef, trackKey: taskLocalStepIndex, variant: "annotation", arrow, zIndex: 1e3 },
    import_react15.default.createElement(
      PopoverBody,
      {
        dismissButton: true,
        dismissAriaLabel: i18nStrings.labelDismissAnnotation,
        header: import_react15.default.createElement(InternalBox, { id: popoverHeaderId, color: "text-body-secondary", fontSize: "body-s", margin: { top: "xxxs" }, className: styles_css_default6.header }, title),
        onDismiss,
        className: styles_css_default6.annotation,
        variant: "annotation",
        overflowVisible: "content",
        // create new dialog to have the native dialog behavior of the screen readers
        key: taskLocalStepIndex,
        ariaLabelledby: joinStrings(popoverHeaderId, stepCounterId)
      },
      import_react15.default.createElement(
        InternalSpaceBetween,
        { size: "s" },
        import_react15.default.createElement(
          "div",
          { className: styles_css_default6.description },
          import_react15.default.createElement(InternalBox, { className: styles_css_default6.content }, content)
        ),
        alert && import_react15.default.createElement(internal_default6, { type: "warning" }, alert),
        import_react15.default.createElement(
          InternalSpaceBetween,
          { size: "s" },
          import_react15.default.createElement("div", { className: styles_css_default6.divider }),
          import_react15.default.createElement(
            "div",
            { className: styles_css_default6.actionBar },
            import_react15.default.createElement(
              "div",
              { className: styles_css_default6.stepCounter },
              import_react15.default.createElement(InternalBox, { id: stepCounterId, className: styles_css_default6["step-counter-content"], color: "text-body-secondary", fontSize: "body-s" }, i18nStrings.stepCounterText(taskLocalStepIndex !== null && taskLocalStepIndex !== void 0 ? taskLocalStepIndex : 0, totalLocalSteps !== null && totalLocalSteps !== void 0 ? totalLocalSteps : 0))
            ),
            import_react15.default.createElement(
              InternalSpaceBetween,
              { size: "xs", direction: "horizontal" },
              showPreviousButton && import_react15.default.createElement(InternalButton, { variant: "link", onClick: onPreviousButtonClick, disabled: !previousButtonEnabled, formAction: "none", ariaLabel: i18nStrings.previousButtonText, className: styles_css_default6["previous-button"] }, i18nStrings.previousButtonText),
              showFinishButton ? import_react15.default.createElement(InternalButton, { onClick: onFinish, formAction: "none", ariaLabel: i18nStrings.finishButtonText, className: styles_css_default6["finish-button"] }, i18nStrings.finishButtonText) : import_react15.default.createElement(InternalButton, { onClick: onNextButtonClick, disabled: !nextButtonEnabled, formAction: "none", ariaLabel: i18nStrings.nextButtonText, className: styles_css_default6["next-button"] }, i18nStrings.nextButtonText)
            )
          )
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/annotation-context/annotation/open-annotation.js
function OpenAnnotation({ title, content, alert, direction, showPreviousButton, showFinishButton, taskLocalStepIndex, totalLocalSteps, onDismiss, nextButtonEnabled, onNextButtonClick, onFinish, previousButtonEnabled, onPreviousButtonClick, i18nStrings }) {
  const trackRef = (0, import_react16.useRef)(null);
  return import_react16.default.createElement(
    import_react16.default.Fragment,
    null,
    import_react16.default.createElement(annotation_trigger_default, { open: true, onClick: onDismiss, i18nStrings, ref: trackRef, totalLocalSteps, taskLocalStepIndex }),
    import_react16.default.createElement(AnnotationPopover, { trackRef, previousButtonEnabled, showPreviousButton, showFinishButton, totalLocalSteps, i18nStrings, nextButtonEnabled, onDismiss, onFinish, onNextButtonClick, onPreviousButtonClick, taskLocalStepIndex, direction, title, content, alert })
  );
}

// node_modules/@cloudscape-design/components/annotation-context/annotation/closed-annotation.js
var import_react17 = __toESM(require_react());
function ClosedAnnotation({ globalStepIndex, onOpen, i18nStrings, focusOnRender, totalLocalSteps, taskLocalStepIndex }) {
  const [hotspotRef, setHotspotRef] = (0, import_react17.useState)(null);
  const onClick = (0, import_react17.useCallback)(() => {
    onOpen(globalStepIndex);
  }, [globalStepIndex, onOpen]);
  (0, import_react17.useEffect)(() => {
    if (focusOnRender && hotspotRef) {
      hotspotRef.focus();
    }
  }, [focusOnRender, hotspotRef]);
  return import_react17.default.createElement(annotation_trigger_default, { open: false, onClick, i18nStrings, ref: setHotspotRef, totalLocalSteps, taskLocalStepIndex });
}

// node_modules/@cloudscape-design/components/annotation-context/context.js
var import_react18 = __toESM(require_react());
var defaultContext = {
  getContentForId: () => null,
  registerHotspot() {
  },
  unregisterHotspot() {
  },
  currentStepIndex: 0,
  currentTutorial: null,
  onStartTutorial() {
  },
  onExitTutorial() {
  }
};
var hotspotContext = import_react18.default.createContext(defaultContext);

// node_modules/@cloudscape-design/components/annotation-context/utils.js
function getStepInfo(annotations, index) {
  if (index >= 0) {
    let taskIndex = 0;
    for (const task of annotations) {
      if (task.steps.length <= index) {
        index -= task.steps.length;
        taskIndex++;
        continue;
      }
      return { task, step: task.steps[index], localIndex: index, taskIndex };
    }
  }
  return { task: void 0, step: void 0, localIndex: 0, taskIndex: 0 };
}

// node_modules/@cloudscape-design/components/annotation-context/index.js
var emptyTasks = [];
function AnnotationContext({ currentTutorial, children, onStepChange, onFinish: onFinishHandler, onStartTutorial, onExitTutorial, i18nStrings }) {
  var _a, _b, _c, _d;
  useTelemetry("AnnotationContext");
  const [open, setOpen] = (0, import_react19.useState)(true);
  const [currentStepIndex, setCurrentStepIndex] = (0, import_react19.useState)(0);
  (0, import_react19.useEffect)(() => {
    setCurrentStepIndex(0);
    setOpen(true);
  }, [currentTutorial, setOpen]);
  const [availableHotspots, setAvailableHotspots] = (0, import_react19.useState)({});
  const availableHotspotsRef = (0, import_react19.useRef)(availableHotspots);
  const annotations = currentTutorial ? currentTutorial.tasks : emptyTasks;
  const { task, step, localIndex, taskIndex } = getStepInfo(annotations, currentStepIndex);
  const currentId = step === null || step === void 0 ? void 0 : step.hotspotId;
  const totalStepCount = annotations.map((a2) => a2.steps.length).reduce((a2, b) => a2 + b, 0);
  const id2index = (0, import_react19.useMemo)(() => {
    const mapping = {};
    let counter = 0;
    for (const annotation of annotations) {
      for (const step2 of annotation.steps) {
        if (mapping[step2.hotspotId] === void 0) {
          mapping[step2.hotspotId] = counter;
        }
        counter++;
      }
    }
    return mapping;
  }, [annotations]);
  const openNextStep = (0, import_react19.useCallback)(() => {
    const newStepIndex = Math.min(currentStepIndex + 1, totalStepCount);
    setCurrentStepIndex(newStepIndex);
    fireNonCancelableEvent(onStepChange, { step: newStepIndex, reason: "next" });
  }, [currentStepIndex, onStepChange, totalStepCount]);
  const openPreviousStep = (0, import_react19.useCallback)(() => {
    const newStepIndex = Math.max(currentStepIndex - 1, 0);
    setCurrentStepIndex(newStepIndex);
    fireNonCancelableEvent(onStepChange, { step: newStepIndex, reason: "previous" });
  }, [onStepChange, currentStepIndex]);
  const onFinish = (0, import_react19.useCallback)(() => fireNonCancelableEvent(onFinishHandler), [onFinishHandler]);
  const isCurrentHotspotAvailable = currentId ? availableHotspots[currentId] : null;
  (0, import_react19.useEffect)(() => {
    if (!currentId || availableHotspotsRef.current[currentId]) {
      return;
    }
    const findNearestHotspot = () => {
      let nearestHotspot2 = void 0;
      let nearestDistance = Infinity;
      for (const hotspotId of Object.keys(availableHotspotsRef.current)) {
        const distanceFromCurrentHotspot = Math.abs(id2index[hotspotId] - currentStepIndex);
        if (distanceFromCurrentHotspot < nearestDistance) {
          nearestDistance = distanceFromCurrentHotspot;
          nearestHotspot2 = hotspotId;
        }
      }
      return nearestHotspot2;
    };
    const nearestHotspot = findNearestHotspot();
    if (nearestHotspot) {
      const newStepIndex = id2index[nearestHotspot];
      setCurrentStepIndex(newStepIndex);
      setOpen(true);
      fireNonCancelableEvent(onStepChange, { step: newStepIndex, reason: "auto-fallback" });
    }
  }, [annotations, isCurrentHotspotAvailable, currentId, currentStepIndex, id2index, onStepChange]);
  const onDismiss = (0, import_react19.useCallback)(() => {
    setOpen(false);
  }, [setOpen]);
  const onOpen = (0, import_react19.useCallback)((stepIndex) => {
    setCurrentStepIndex(stepIndex);
    fireNonCancelableEvent(onStepChange, { step: stepIndex, reason: "open" });
    setOpen(true);
  }, [onStepChange, setOpen]);
  const idOfPreviousHotspot = (_a = getStepInfo(annotations, currentStepIndex - 1).step) === null || _a === void 0 ? void 0 : _a.hotspotId;
  const idOfNextHotspot = (_b = getStepInfo(annotations, currentStepIndex + 1).step) === null || _b === void 0 ? void 0 : _b.hotspotId;
  const previousHotspotIsAvailable = (_c = idOfPreviousHotspot !== void 0 && availableHotspots[idOfPreviousHotspot]) !== null && _c !== void 0 ? _c : false;
  const nextHotspotIsAvailable = (_d = idOfNextHotspot !== void 0 && availableHotspots[idOfNextHotspot]) !== null && _d !== void 0 ? _d : false;
  const getContentForId = (0, import_react19.useCallback)((id, direction) => {
    if (currentTutorial === null || currentTutorial === void 0 ? void 0 : currentTutorial.completed) {
      return null;
    }
    const globalStepIndex = id2index[id];
    if (globalStepIndex === void 0) {
      return null;
    }
    if (!task || !step || !open || id !== currentId) {
      const { task: currentTask, localIndex: currentStepIndex2 } = getStepInfo(annotations, globalStepIndex);
      return import_react19.default.createElement(ClosedAnnotation, { globalStepIndex, i18nStrings, onOpen, focusOnRender: id === currentId, totalLocalSteps: currentTask ? currentTask.steps.length : 0, taskLocalStepIndex: currentStepIndex2 });
    }
    return import_react19.default.createElement(OpenAnnotation, { i18nStrings, direction, title: i18nStrings.taskTitle(taskIndex, task.title), content: step.content, alert: step.warningAlert, showPreviousButton: currentStepIndex !== 0, showFinishButton: currentStepIndex + 1 === totalStepCount, taskLocalStepIndex: localIndex, totalLocalSteps: task.steps.length, nextButtonEnabled: nextHotspotIsAvailable, onNextButtonClick: openNextStep, onFinish, previousButtonEnabled: previousHotspotIsAvailable, onPreviousButtonClick: openPreviousStep, onDismiss });
  }, [
    id2index,
    currentTutorial,
    task,
    step,
    open,
    currentId,
    currentStepIndex,
    i18nStrings,
    taskIndex,
    localIndex,
    totalStepCount,
    nextHotspotIsAvailable,
    openNextStep,
    onFinish,
    previousHotspotIsAvailable,
    openPreviousStep,
    onDismiss,
    onOpen,
    annotations
  ]);
  const registerHotspot = (0, import_react19.useCallback)(
    (id) => {
      if (!id2index || id2index[id] === void 0) {
        return;
      }
      availableHotspotsRef.current = Object.assign(Object.assign({}, availableHotspotsRef.current), { [id]: true });
      setAvailableHotspots((availableHotspots2) => {
        if (availableHotspots2[id]) {
          return availableHotspots2;
        }
        return Object.assign(Object.assign({}, availableHotspots2), { [id]: true });
      });
    },
    // We need to react on id2index changes for registering new hotspots when the map changes.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [id2index]
  );
  const unregisterHotspot = (0, import_react19.useCallback)((id) => {
    if (!availableHotspotsRef.current[id]) {
      return;
    }
    availableHotspotsRef.current = removeKey(id, availableHotspotsRef.current);
    setAvailableHotspots((availableHotspots2) => {
      if (!availableHotspots2[id]) {
        return availableHotspots2;
      }
      return removeKey(id, availableHotspots2);
    });
  }, []);
  const context = {
    getContentForId,
    registerHotspot,
    unregisterHotspot,
    onStartTutorial,
    onExitTutorial,
    currentStepIndex,
    currentTutorial
  };
  return import_react19.default.createElement(hotspotContext.Provider, { value: context }, children);
}
applyDisplayName(AnnotationContext, "AnnotationContext");
function removeKey(key2, object2) {
  const _a = object2, _b = key2, _ = _a[_b], remainingObject = __rest(_a, [typeof _b === "symbol" ? _b : _b + ""]);
  return remainingObject;
}

// node_modules/@cloudscape-design/components/app-layout/index.js
var import_react69 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/widget.js
var import_react66 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/implementation.js
var import_react65 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/classic.js
var import_react48 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/notifications/index.js
var import_react20 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/notifications/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/app-layout/notifications/styles.scoped.css";
var styles_css_default8 = {
  "notifications": "awsui_notifications_1hmm4_1xs0q_9",
  "notifications-sticky": "awsui_notifications-sticky_1hmm4_1xs0q_10",
  "no-content-paddings": "awsui_no-content-paddings_1hmm4_1xs0q_25"
};

// node_modules/@cloudscape-design/components/app-layout/notifications/index.js
var Notifications = import_react20.default.forwardRef((_a, ref) => {
  var _b, _c;
  var { sticky, disableContentPaddings } = _a, props = __rest(_a, ["sticky", "disableContentPaddings"]);
  return sticky ? import_react20.default.createElement(
    "div",
    { ref, className: styles_css_default8["notifications-sticky"], style: { top: props.topOffset } },
    import_react20.default.createElement("div", { role: "region", className: clsx_m_default(props.testUtilsClassName, disableContentPaddings && styles_css_default8["no-content-paddings"]), "aria-label": (_b = props.labels) === null || _b === void 0 ? void 0 : _b.notifications }, props.children)
  ) : import_react20.default.createElement("div", { role: "region", ref, className: clsx_m_default(props.testUtilsClassName, styles_css_default8.notifications, disableContentPaddings && styles_css_default8["no-content-paddings"]), "aria-label": (_c = props.labels) === null || _c === void 0 ? void 0 : _c.notifications }, props.children);
});

// node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/index.js
var import_react37 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/toggles/index.js
var import_react21 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/toggles/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/app-layout/toggles/styles.scoped.css";
var styles_css_default9 = {
  "toggle-button": "awsui_toggle-button_16w0h_1lkgf_99",
  "close-button": "awsui_close-button_16w0h_1lkgf_134"
};

// node_modules/@cloudscape-design/components/app-layout/toggles/index.js
var togglesConfig = {
  navigation: {
    TagName: "nav",
    iconName: "menu",
    getLabels: (labels = {}) => ({
      mainLabel: labels.navigation,
      openLabel: labels.navigationToggle,
      closeLabel: labels.navigationClose
    })
  },
  tools: {
    TagName: "aside",
    iconName: "status-info",
    getLabels: (labels = {}) => ({
      mainLabel: labels.tools,
      openLabel: labels.toolsToggle,
      closeLabel: labels.toolsClose
    })
  }
};
var ToggleButton = import_react21.default.forwardRef(({ className: className2, ariaLabel, ariaExpanded, ariaControls, iconName, iconSvg, disabled, testId, onClick, badge }, ref) => {
  return import_react21.default.createElement(
    "button",
    { ref, className: clsx_m_default(className2, styles_css_default9["toggle-button"]), "aria-label": ariaLabel, type: "button", onClick, disabled, "aria-expanded": ariaExpanded, "aria-haspopup": ariaExpanded ? void 0 : true, "aria-controls": ariaControls, "data-testid": testId },
    import_react21.default.createElement(internal_default, { svg: iconSvg, name: iconName, badge })
  );
});
var CloseButton = import_react21.default.forwardRef(({ className: className2, ariaLabel, onClick }, ref) => {
  return import_react21.default.createElement(
    "span",
    { className: styles_css_default9["close-button"] },
    import_react21.default.createElement(InternalButton, { ref, className: className2, ariaLabel, variant: "icon", formAction: "none", iconName: "close", onClick })
  );
});

// node_modules/@cloudscape-design/components/app-layout/drawer/overflow-menu.js
var import_react34 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/internal.js
var import_react33 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/button-dropdown/styles.scoped.css";
var styles_css_default10 = {
  "button-dropdown": "awsui_button-dropdown_sne0l_17rq9_99",
  "items-list-container": "awsui_items-list-container_sne0l_17rq9_103",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_sne0l_17rq9_1",
  "rotate-up": "awsui_rotate-up_sne0l_17rq9_122",
  "rotate-down": "awsui_rotate-down_sne0l_17rq9_137",
  "header": "awsui_header_sne0l_17rq9_152",
  "title": "awsui_title_sne0l_17rq9_163",
  "description": "awsui_description_sne0l_17rq9_164",
  "split-trigger-wrapper": "awsui_split-trigger-wrapper_sne0l_17rq9_168",
  "trigger-item": "awsui_trigger-item_sne0l_17rq9_171",
  "trigger-button": "awsui_trigger-button_sne0l_17rq9_174",
  "visual-refresh": "awsui_visual-refresh_sne0l_17rq9_185",
  "split-trigger": "awsui_split-trigger_sne0l_17rq9_168",
  "dropdown-trigger": "awsui_dropdown-trigger_sne0l_17rq9_193",
  "test-utils-button-trigger": "awsui_test-utils-button-trigger_sne0l_17rq9_197"
};

// node_modules/@cloudscape-design/components/button-dropdown/items-list.js
var import_react31 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/item-element/index.js
var import_react26 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/utils/utils.js
var isItemGroup = (item) => item && item.items !== void 0;
var isLinkItem = (item) => item && item.href !== void 0;
var getItemTarget = (item) => item.external ? "_blank" : void 0;
function indexIncludes(source, target) {
  for (let index = 0; index < source.length; index++) {
    if (source[index] !== target[index]) {
      return false;
    }
  }
  return true;
}
function indexEquals(left, right) {
  if (left.length !== right.length) {
    return false;
  }
  for (let index = 0; index < left.length; index++) {
    if (left[index] !== right[index]) {
      return false;
    }
  }
  return true;
}

// node_modules/@cloudscape-design/components/button-dropdown/item-element/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/button-dropdown/item-element/styles.scoped.css";
var styles_css_default11 = {
  "item-element": "awsui_item-element_93a1u_goggu_99",
  "disabled": "awsui_disabled_93a1u_goggu_111",
  "show-divider": "awsui_show-divider_93a1u_goggu_118",
  "highlighted": "awsui_highlighted_93a1u_goggu_121",
  "is-focused": "awsui_is-focused_93a1u_goggu_136",
  "menu-item": "awsui_menu-item_93a1u_goggu_141",
  "has-category-header": "awsui_has-category-header_93a1u_goggu_155",
  "icon": "awsui_icon_93a1u_goggu_159",
  "external-icon": "awsui_external-icon_93a1u_goggu_164"
};

// node_modules/@cloudscape-design/components/button-dropdown/tooltip.js
var import_react24 = __toESM(require_react());

// node_modules/@cloudscape-design/components/popover/arrow.js
var import_react22 = __toESM(require_react());
var Arrow = (props) => {
  const isVisualRefresh = useVisualRefresh();
  return import_react22.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default7.arrow, props.position && styles_css_default7[`arrow-position-${props.position}`]) },
    import_react22.default.createElement("div", { className: styles_css_default7["arrow-outer"] }),
    import_react22.default.createElement("div", { className: clsx_m_default(styles_css_default7["arrow-inner"], isVisualRefresh && styles_css_default7.refresh) })
  );
};
var arrow_default = import_react22.default.memo(Arrow);

// node_modules/@cloudscape-design/components/internal/components/portal/index.js
var import_react23 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
function manageDefaultContainer(setState) {
  const newContainer = document.createElement("div");
  document.body.appendChild(newContainer);
  setState(newContainer);
  return () => {
    document.body.removeChild(newContainer);
  };
}
function manageAsyncContainer(getContainer, removeContainer, setState) {
  let newContainer;
  getContainer().then((container) => {
    newContainer = container;
    setState(container);
  }, (error) => {
    console.warn("[AwsUi] [portal]: failed to load portal root", error);
  });
  return () => {
    removeContainer(newContainer);
  };
}
function Portal({ container, getContainer, removeContainer, children }) {
  const [activeContainer, setActiveContainer] = (0, import_react23.useState)(container !== null && container !== void 0 ? container : null);
  (0, import_react23.useLayoutEffect)(() => {
    if (container) {
      setActiveContainer(container);
      return;
    }
    if (isDevelopment) {
      if (getContainer && !removeContainer) {
        warnOnce("portal", "`removeContainer` is required when `getContainer` is provided");
      }
      if (!getContainer && removeContainer) {
        warnOnce("portal", "`getContainer` is required when `removeContainer` is provided");
      }
    }
    if (getContainer && removeContainer) {
      return manageAsyncContainer(getContainer, removeContainer, setActiveContainer);
    }
    return manageDefaultContainer(setActiveContainer);
  }, [container, getContainer, removeContainer]);
  return activeContainer && (0, import_react_dom.createPortal)(children, activeContainer);
}

// node_modules/@cloudscape-design/components/button-dropdown/tooltip.js
var DEFAULT_OPEN_TIMEOUT_IN_MS = 120;
function Tooltip({ children, content, position = "right" }) {
  const ref = (0, import_react24.useRef)(null);
  const isReducedMotion = useReducedMotion(ref);
  const { open, triggerProps } = useTooltipOpen(isReducedMotion ? 0 : DEFAULT_OPEN_TIMEOUT_IN_MS);
  const portalClasses = usePortalModeClasses(ref);
  return import_react24.default.createElement(
    "span",
    Object.assign({ ref }, triggerProps),
    children,
    open && import_react24.default.createElement(
      Portal,
      null,
      import_react24.default.createElement(
        "span",
        { className: portalClasses },
        import_react24.default.createElement(
          PopoverContainer,
          { size: "small", fixedWidth: false, position, trackRef: ref, arrow: (position2) => import_react24.default.createElement(arrow_default, { position: position2 }), renderWithPortal: true, zIndex: 7e3 },
          import_react24.default.createElement(
            PopoverBody,
            { dismissButton: false, dismissAriaLabel: void 0, header: null, onDismiss: () => {
            }, overflowVisible: "both" },
            import_react24.default.createElement("span", { "data-testid": "button-dropdown-disabled-reason", role: "tooltip" }, content)
          )
        )
      )
    )
  );
}
function useTooltipOpen(timeout) {
  const handle = (0, import_react24.useRef)();
  const [isOpen, setIsOpen] = (0, import_react24.useState)(false);
  const close = () => {
    clearTimeout(handle.current);
    setIsOpen(false);
  };
  const open = () => setIsOpen(true);
  const openDelayed = () => {
    handle.current = setTimeout(open, timeout);
  };
  const onKeyDown = (e) => {
    if (isOpen && isEscape(e.key)) {
      e.preventDefault();
      e.stopPropagation();
      close();
    }
  };
  const onFocus = openDelayed;
  const onBlur = close;
  return {
    open: isOpen,
    triggerProps: {
      onBlur,
      onFocus,
      onKeyDown
    }
  };
}
var isEscape = (key2) => key2 === "Escape" || key2 === "Esc";

// node_modules/@cloudscape-design/components/button-dropdown/utils/use-hidden-description.js
var import_react25 = __toESM(require_react());
function useHiddenDescription(description) {
  const id = useUniqueId();
  return {
    targetProps: {
      "aria-describedby": description ? id : void 0
    },
    descriptionEl: description ? import_react25.default.createElement("span", { id, hidden: true }, description) : null
  };
}

// node_modules/@cloudscape-design/components/button-dropdown/utils/menu-item.js
var getMenuItemProps = ({ disabled, parent, expanded }) => ({
  role: "menuitem",
  "aria-disabled": disabled ? "true" : void 0,
  "aria-haspopup": parent ? "true" : void 0,
  "aria-expanded": expanded ? "true" : parent ? "false" : void 0
});

// node_modules/@cloudscape-design/components/button-dropdown/item-element/index.js
var ItemElement = ({ item, disabled, onItemActivate, highlighted, highlightItem, showDivider, hasCategoryHeader, isKeyboardHighlighted = false, variant = "normal" }) => {
  const isLink = isLinkItem(item);
  const onClick = (event) => {
    event.stopPropagation();
    if (!isLink) {
      event.preventDefault();
    }
    if (!disabled) {
      onItemActivate(item, event);
    }
  };
  const onHover = () => {
    highlightItem(item);
  };
  return import_react26.default.createElement(
    "li",
    { className: clsx_m_default(styles_css_default11["item-element"], styles_css_default11[`variant-${variant}`], {
      [styles_css_default11.highlighted]: highlighted,
      [styles_css_default11.disabled]: disabled,
      [styles_css_default11["has-category-header"]]: hasCategoryHeader,
      [styles_css_default11["show-divider"]]: showDivider,
      [styles_css_default11["is-focused"]]: isKeyboardHighlighted
    }), role: "presentation", "data-testid": item.id, "data-description": item.description, onClick, onMouseEnter: onHover, onTouchStart: onHover },
    import_react26.default.createElement(MenuItem, { item, disabled, highlighted })
  );
};
function MenuItem({ item, disabled, highlighted }) {
  const menuItemRef = (0, import_react26.useRef)(null);
  (0, import_react26.useEffect)(() => {
    if (highlighted && menuItemRef.current) {
      menuItemRef.current.focus();
    }
  }, [highlighted]);
  const isDisabledWithReason = disabled && item.disabledReason;
  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);
  const menuItemProps = Object.assign(Object.assign({
    className: styles_css_default11["menu-item"],
    lang: item.lang,
    ref: menuItemRef,
    // We are using the roving tabindex technique to manage the focus state of the dropdown.
    // The current element will always have tabindex=0 which means that it can be tabbed to,
    // while all other items have tabindex=-1 so we can focus them when necessary.
    tabIndex: highlighted ? 0 : -1
  }, getMenuItemProps({ disabled })), isDisabledWithReason ? targetProps : {});
  const menuItem = isLinkItem(item) ? import_react26.default.createElement(
    "a",
    Object.assign({}, menuItemProps, { href: !disabled ? item.href : void 0, target: getItemTarget(item), rel: item.external ? "noopener noreferrer" : void 0 }),
    import_react26.default.createElement(MenuItemContent, { item, disabled })
  ) : import_react26.default.createElement(
    "span",
    Object.assign({}, menuItemProps),
    import_react26.default.createElement(MenuItemContent, { item, disabled })
  );
  const { position } = useDropdownContext();
  const tooltipPosition = position === "bottom-left" || position === "top-left" ? "left" : "right";
  return isDisabledWithReason ? import_react26.default.createElement(
    Tooltip,
    { content: item.disabledReason, position: tooltipPosition },
    menuItem,
    descriptionEl
  ) : menuItem;
}
var MenuItemContent = ({ item, disabled }) => {
  const hasIcon = !!(item.iconName || item.iconUrl || item.iconSvg);
  const hasExternal = isLinkItem(item) && item.external;
  return import_react26.default.createElement(
    import_react26.default.Fragment,
    null,
    hasIcon && import_react26.default.createElement(MenuItemIcon, { name: item.iconName, url: item.iconUrl, svg: item.iconSvg, alt: item.iconAlt, badge: item.badge }),
    " ",
    item.text,
    " ",
    hasExternal && import_react26.default.createElement(ExternalIcon, { disabled, ariaLabel: item.externalIconAriaLabel })
  );
};
var MenuItemIcon = (props) => import_react26.default.createElement(
  "span",
  { className: styles_css_default11.icon },
  import_react26.default.createElement(internal_default, Object.assign({}, props))
);
var ExternalIcon = ({ disabled, ariaLabel }) => {
  const icon = import_react26.default.createElement(internal_default, { variant: disabled ? "disabled" : "normal", name: "external" });
  return import_react26.default.createElement("span", { className: styles_css_default11["external-icon"], role: ariaLabel ? "img" : void 0, "aria-label": ariaLabel }, icon);
};
var item_element_default = ItemElement;

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/expandable-category-element.js
var import_react27 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/button-dropdown/category-elements/styles.scoped.css";
var styles_css_default12 = {
  "header": "awsui_header_16mm3_w5lmn_99",
  "disabled": "awsui_disabled_16mm3_w5lmn_116",
  "expandable-header": "awsui_expandable-header_16mm3_w5lmn_120",
  "rolled-down": "awsui_rolled-down_16mm3_w5lmn_131",
  "highlighted": "awsui_highlighted_16mm3_w5lmn_134",
  "is-focused": "awsui_is-focused_16mm3_w5lmn_152",
  "category": "awsui_category_16mm3_w5lmn_157",
  "expandable": "awsui_expandable_16mm3_w5lmn_120",
  "variant-navigation": "awsui_variant-navigation_16mm3_w5lmn_172",
  "expand-icon": "awsui_expand-icon_16mm3_w5lmn_179",
  "expand-icon-up": "awsui_expand-icon-up_16mm3_w5lmn_186",
  "expand-icon-right": "awsui_expand-icon-right_16mm3_w5lmn_189",
  "items-list-container": "awsui_items-list-container_16mm3_w5lmn_206",
  "in-dropdown": "awsui_in-dropdown_16mm3_w5lmn_215"
};

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/expandable-category-element.js
var ExpandableCategoryElement = ({ item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, disabled, expandToViewport, variant }) => {
  const highlighted = isHighlighted(item);
  const expanded = isExpanded(item);
  const isKeyboardHighlighted = isKeyboardHighlight(item);
  const triggerRef = import_react27.default.useRef(null);
  const ref = (0, import_react27.useRef)(null);
  (0, import_react27.useEffect)(() => {
    if (triggerRef.current && highlighted && !expanded) {
      triggerRef.current.focus();
    }
  }, [expanded, highlighted]);
  const onClick = (event) => {
    var _a;
    if (!disabled) {
      event.preventDefault();
      onGroupToggle(item, event);
      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }
  };
  const onHover = () => {
    highlightItem(item);
  };
  const isDisabledWithReason = !!item.disabledReason && item.disabled;
  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);
  const trigger = item.text && import_react27.default.createElement(
    "span",
    Object.assign({
      className: clsx_m_default(styles_css_default12.header, styles_css_default12["expandable-header"], styles_css_default12[`variant-${variant}`], {
        [styles_css_default12.disabled]: disabled,
        [styles_css_default12.highlighted]: highlighted,
        [styles_css_default12["is-focused"]]: isKeyboardHighlighted
      }),
      // We are using the roving tabindex technique to manage the focus state of the dropdown.
      // The current element will always have tabindex=0 which means that it can be tabbed to,
      // while all other items have tabindex=-1 so we can focus them when necessary.
      tabIndex: highlighted ? 0 : -1,
      ref: triggerRef
    }, getMenuItemProps({ parent: true, expanded, disabled }), isDisabledWithReason ? targetProps : {}),
    item.text,
    import_react27.default.createElement(
      "span",
      { className: clsx_m_default(styles_css_default12["expand-icon"], styles_css_default12["expand-icon-right"]) },
      import_react27.default.createElement(internal_default, { name: "caret-down-filled" })
    )
  );
  let content;
  if (isDisabledWithReason) {
    content = import_react27.default.createElement(
      Tooltip,
      { content: item.disabledReason },
      trigger,
      descriptionEl
    );
  } else if (disabled) {
    content = trigger;
  } else {
    content = import_react27.default.createElement(dropdown_default, { open: expanded, stretchWidth: false, interior: true, expandToViewport, trigger }, item.items && expanded && import_react27.default.createElement(
      "ul",
      { role: "menu", "aria-label": item.text, className: clsx_m_default(styles_css_default12["items-list-container"], styles_css_default12["in-dropdown"]) },
      import_react27.default.createElement(ItemsList, { items: item.items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, variant })
    ));
  }
  return import_react27.default.createElement("li", { className: clsx_m_default(styles_css_default12.category, styles_css_default12[`variant-${variant}`], styles_css_default12.expandable, {
    [styles_css_default12.expanded]: expanded,
    [styles_css_default12.disabled]: disabled,
    [styles_css_default12.highlighted]: highlighted
  }), role: "presentation", "data-testid": item.id, ref, onClick, onMouseEnter: onHover, onTouchStart: onHover }, content);
};
var expandable_category_element_default = ExpandableCategoryElement;

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/category-element.js
var import_react28 = __toESM(require_react());
var CategoryElement = ({ item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, disabled, variant }) => {
  return import_react28.default.createElement(
    "li",
    { className: clsx_m_default(styles_css_default12.category, styles_css_default12[`variant-${variant}`], disabled && styles_css_default12.disabled), role: "presentation", "aria-disabled": disabled ? "true" : void 0 },
    item.text && import_react28.default.createElement("p", { className: clsx_m_default(styles_css_default12.header, { [styles_css_default12.disabled]: disabled }), "aria-hidden": "true" }, item.text),
    import_react28.default.createElement("ul", { className: clsx_m_default(styles_css_default12["items-list-container"]), role: "group", "aria-label": item.text }, item.items && import_react28.default.createElement(ItemsList, { items: item.items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, categoryDisabled: disabled, hasCategoryHeader: !!item.text, variant }))
  );
};
var category_element_default = CategoryElement;

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/mobile-expandable-category-element.js
var import_react30 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/mobile-expandable-group.js
var import_react29 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/styles.scoped.css";
var styles_css_default13 = {
  "root": "awsui_root_14cnr_1ev1z_99",
  "trigger": "awsui_trigger_14cnr_1ev1z_136",
  "dropdown": "awsui_dropdown_14cnr_1ev1z_139",
  "nowrap": "awsui_nowrap_14cnr_1ev1z_150",
  "open": "awsui_open_14cnr_1ev1z_153"
};

// node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/mobile-expandable-group.js
var MobileExpandableGroup = ({ children, trigger, open }) => {
  return import_react29.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default13.root) },
    import_react29.default.createElement("div", { className: styles_css_default13.trigger }, trigger),
    import_react29.default.createElement("div", { className: clsx_m_default(styles_css_default13.dropdown, { [styles_css_default13.open]: open }), "data-open": open }, children)
  );
};
var mobile_expandable_group_default = MobileExpandableGroup;

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/mobile-expandable-category-element.js
var MobileExpandableCategoryElement = ({ item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, disabled, variant }) => {
  const highlighted = isHighlighted(item);
  const expanded = isExpanded(item);
  const isKeyboardHighlighted = isKeyboardHighlight(item);
  const triggerRef = import_react30.default.useRef(null);
  (0, import_react30.useEffect)(() => {
    if (triggerRef.current && highlighted && !expanded) {
      triggerRef.current.focus();
    }
  }, [expanded, highlighted]);
  const onClick = (e) => {
    if (!disabled) {
      e.preventDefault();
      onGroupToggle(item, e);
    }
  };
  const onHover = () => {
    highlightItem(item);
  };
  const isDisabledWithReason = !!item.disabledReason && item.disabled;
  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);
  const trigger = item.text && import_react30.default.createElement(
    "span",
    Object.assign({
      className: clsx_m_default(styles_css_default12.header, styles_css_default12["expandable-header"], styles_css_default12[`variant-${variant}`], {
        [styles_css_default12.highlighted]: highlighted,
        [styles_css_default12["rolled-down"]]: expanded,
        [styles_css_default12.disabled]: disabled,
        [styles_css_default12["is-focused"]]: isKeyboardHighlighted
      }),
      // We are using the roving tabindex technique to manage the focus state of the dropdown.
      // The current element will always have tabindex=0 which means that it can be tabbed to,
      // while all other items have tabindex=-1 so we can focus them when necessary.
      tabIndex: highlighted ? 0 : -1,
      ref: triggerRef
    }, getMenuItemProps({ parent: true, disabled, expanded }), isDisabledWithReason ? targetProps : {}),
    item.text,
    import_react30.default.createElement(
      "span",
      { className: clsx_m_default(styles_css_default12["expand-icon"], {
        [styles_css_default12["expand-icon-up"]]: expanded
      }) },
      import_react30.default.createElement(internal_default, { name: "caret-down-filled" })
    )
  );
  let content;
  if (isDisabledWithReason) {
    content = import_react30.default.createElement(
      import_react30.default.Fragment,
      null,
      descriptionEl,
      import_react30.default.createElement(Tooltip, { content: item.disabledReason }, trigger)
    );
  } else if (disabled) {
    content = trigger;
  } else {
    content = import_react30.default.createElement(mobile_expandable_group_default, { open: expanded, trigger }, item.items && expanded && import_react30.default.createElement(
      "ul",
      { role: "menu", "aria-label": item.text, className: clsx_m_default(styles_css_default12["items-list-container"]) },
      import_react30.default.createElement(ItemsList, { items: item.items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, hasCategoryHeader: true, variant })
    ));
  }
  return import_react30.default.createElement("li", { className: clsx_m_default(styles_css_default12.category, styles_css_default12[`variant-${variant}`], styles_css_default12.expandable, {
    [styles_css_default12.expanded]: expanded,
    [styles_css_default12.disabled]: disabled,
    [styles_css_default12.highlighted]: highlighted || expanded,
    [styles_css_default12.expandable]: true
  }), role: "presentation", onClick, onMouseEnter: onHover, onTouchStart: onHover, "data-testid": item.id }, content);
};
var mobile_expandable_category_element_default = MobileExpandableCategoryElement;

// node_modules/@cloudscape-design/components/button-dropdown/items-list.js
function ItemsList({ items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, categoryDisabled = false, hasExpandableGroups = false, hasCategoryHeader = false, expandToViewport = false, variant = "normal" }) {
  const isMobile = useMobile();
  const elements = items.map((item, index) => {
    var _a, _b, _c, _d;
    if (!isItemGroup(item)) {
      const showDivider = index === items.length - 1 && !lastInDropdown || isItemGroup(items[index + 1]);
      return import_react31.default.createElement(item_element_default, { key: index, item, onItemActivate, disabled: (_a = item.disabled) !== null && _a !== void 0 ? _a : categoryDisabled, highlighted: isHighlighted(item), isKeyboardHighlighted: isKeyboardHighlight(item), highlightItem, showDivider, hasCategoryHeader, variant });
    }
    if (hasExpandableGroups) {
      return item.text ? isMobile ? import_react31.default.createElement(mobile_expandable_category_element_default, { key: index, item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown: lastInDropdown && index === items.length - 1, highlightItem, disabled: (_b = item.disabled) !== null && _b !== void 0 ? _b : false, variant }) : import_react31.default.createElement(expandable_category_element_default, { key: index, item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown: true, highlightItem, disabled: (_c = item.disabled) !== null && _c !== void 0 ? _c : false, expandToViewport, variant }) : null;
    }
    return import_react31.default.createElement(category_element_default, { key: index, item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown: lastInDropdown && index === items.length - 1, highlightItem, disabled: (_d = item.disabled) !== null && _d !== void 0 ? _d : false, variant });
  });
  return import_react31.default.createElement(import_react31.default.Fragment, null, elements);
}

// node_modules/@cloudscape-design/components/button-dropdown/utils/use-highlighted-menu.js
var import_react32 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/utils/create-items-tree.js
function createItemsTree(items) {
  const itemToIndex = /* @__PURE__ */ new Map();
  const indexToItem = /* @__PURE__ */ new Map();
  const flatIndices = [];
  traverseItems(items, (item, index) => {
    const indexKey = stringifyIndex(index);
    itemToIndex.set(item, indexKey);
    indexToItem.set(indexKey, item);
    flatIndices.push(indexKey);
  });
  return {
    getItem: (index) => {
      const indexKey = stringifyIndex(index);
      return indexToItem.get(indexKey) || null;
    },
    getItemIndex: (item) => {
      const indexKey = itemToIndex.get(item);
      if (!indexKey) {
        throw new Error("Invariant violation: item is not found.");
      }
      return parseIndex(indexKey);
    },
    getSequentialIndex: (index, direction) => {
      const indexKey = stringifyIndex(index);
      const position = flatIndices.indexOf(indexKey);
      const nextIndexKey = flatIndices[position + direction];
      if (!nextIndexKey) {
        return null;
      }
      return parseIndex(nextIndexKey);
    },
    getParentIndex: (item) => {
      const indexKey = itemToIndex.get(item);
      if (!indexKey) {
        throw new Error("Invariant violation: item is not found.");
      }
      const index = parseIndex(indexKey);
      if (index.length === 1) {
        return null;
      }
      return index.slice(0, index.length - 1);
    }
  };
}
function traverseItems(items, act, parentIndex = []) {
  items.forEach((item, index) => {
    const itemIndex = [...parentIndex, index];
    act(item, itemIndex);
    if (isItemGroup(item)) {
      traverseItems(item.items, act, itemIndex);
    }
  });
}
function stringifyIndex(index) {
  return index.join("-");
}
function parseIndex(index) {
  return index.split("-").map((it) => parseInt(it));
}

// node_modules/@cloudscape-design/components/button-dropdown/utils/move-highlight.js
function moveHighlight({ startIndex, expandedIndex, getNext, hasExpandableGroups, isInRestrictedView }) {
  const tryMove = (currentIndex) => {
    var _a;
    const next = getNext(currentIndex);
    if (!next) {
      return null;
    }
    if (((_a = next.parent) === null || _a === void 0 ? void 0 : _a.disabled) && hasExpandableGroups) {
      return tryMove(next.index);
    }
    if (isItemGroup(next.item) && !hasExpandableGroups) {
      return tryMove(next.index);
    }
    if (hasExpandableGroups && !isInRestrictedView && !isSameParent(startIndex, next.index)) {
      return tryMove(next.index);
    }
    if (hasExpandableGroups && isInRestrictedView && !isSameLevel(next.index, expandedIndex) && !isIncluded(expandedIndex, next.index)) {
      return tryMove(next.index);
    }
    return next.index;
  };
  return tryMove(startIndex);
}
function isSameParent(left, right) {
  return indexEquals(left.slice(0, -1), right.slice(0, -1));
}
function isSameLevel(left, right) {
  return left.length === right.length;
}
function isIncluded(parent, child) {
  return indexEquals(parent, child.slice(0, -1));
}

// node_modules/@cloudscape-design/components/button-dropdown/utils/use-highlighted-menu.js
function useHighlightedMenu({ items, hasExpandableGroups, isInRestrictedView = false }) {
  const [targetIndex, setTargetIndex] = (0, import_react32.useState)([]);
  const [expandedIndex, setExpandedIndex] = (0, import_react32.useState)([]);
  const [isUsingMouse, setIsUsingMouse] = (0, import_react32.useState)(true);
  const { getItem, getItemIndex, getSequentialIndex, getParentIndex } = (0, import_react32.useMemo)(() => createItemsTree(items), [items]);
  const targetItem = (0, import_react32.useMemo)(() => getItem(targetIndex), [targetIndex, getItem]);
  const isHighlighted = (0, import_react32.useCallback)((item) => {
    const index = getItemIndex(item);
    return indexIncludes(index, targetIndex);
  }, [targetIndex, getItemIndex]);
  const isKeyboardHighlight = (0, import_react32.useCallback)((item) => {
    const index = getItemIndex(item);
    return !isUsingMouse && indexEquals(index, targetIndex);
  }, [targetIndex, getItemIndex, isUsingMouse]);
  const isExpanded = (0, import_react32.useCallback)((group) => {
    const index = getItemIndex(group);
    return indexIncludes(index, expandedIndex);
  }, [expandedIndex, getItemIndex]);
  const moveHighlight2 = (0, import_react32.useCallback)((direction) => {
    const getNext = (index) => {
      const nextIndex2 = getSequentialIndex(index, direction);
      const item = getItem(nextIndex2 || [-1]);
      if (!nextIndex2 || !item) {
        return null;
      }
      const parentIndex = getParentIndex(item);
      const parentItem = parentIndex && getItem(parentIndex);
      return { index: nextIndex2, item, parent: parentItem || void 0 };
    };
    const nextIndex = moveHighlight({
      startIndex: targetIndex,
      expandedIndex,
      getNext,
      hasExpandableGroups,
      isInRestrictedView
    });
    if (nextIndex) {
      setTargetIndex(nextIndex);
    }
  }, [targetIndex, expandedIndex, getItem, getSequentialIndex, getParentIndex, hasExpandableGroups, isInRestrictedView]);
  const highlightItem = (0, import_react32.useCallback)((item) => {
    setTargetIndex(getItemIndex(item));
  }, [getItemIndex]);
  const expandGroup = (0, import_react32.useCallback)((group) => {
    const groupIndex = group ? getItemIndex(group) : targetIndex;
    const firstChildIndex = [...groupIndex, 0];
    setTargetIndex(isInRestrictedView ? groupIndex : firstChildIndex);
    setExpandedIndex(groupIndex);
  }, [targetIndex, getItemIndex, isInRestrictedView]);
  const collapseGroup = (0, import_react32.useCallback)(() => {
    if (expandedIndex.length > 0) {
      setTargetIndex(expandedIndex);
      setExpandedIndex(expandedIndex.slice(0, -1));
    }
  }, [expandedIndex]);
  const reset = (0, import_react32.useCallback)(() => {
    setTargetIndex([]);
    setExpandedIndex([]);
  }, []);
  return {
    targetItem,
    isHighlighted,
    isKeyboardHighlight,
    isExpanded,
    moveHighlight: moveHighlight2,
    highlightItem,
    expandGroup,
    collapseGroup,
    reset,
    setIsUsingMouse
  };
}

// node_modules/@cloudscape-design/components/button-dropdown/utils/use-button-dropdown.js
function useButtonDropdown({ items, onItemClick, onItemFollow, onReturnFocus, hasExpandableGroups, isInRestrictedView = false, expandToViewport = false }) {
  const { targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, moveHighlight: moveHighlight2, expandGroup, collapseGroup, reset, setIsUsingMouse } = useHighlightedMenu({
    items,
    hasExpandableGroups,
    isInRestrictedView
  });
  const _a = useOpenState({ onClose: reset }), { isOpen, closeDropdown } = _a, openStateProps = __rest(_a, ["isOpen", "closeDropdown"]);
  const toggleDropdown = (options = {}) => {
    var _a2;
    const moveHighlightOnOpen = (_a2 = options.moveHighlightOnOpen) !== null && _a2 !== void 0 ? _a2 : true;
    if (!isOpen && moveHighlightOnOpen) {
      moveHighlight2(1);
    }
    openStateProps.toggleDropdown();
  };
  const onGroupToggle = (item) => !isExpanded(item) ? expandGroup(item) : collapseGroup();
  const onItemActivate = (item, event) => {
    const details = {
      id: item.id || "undefined",
      href: item.href,
      external: item.external,
      target: getItemTarget(item)
    };
    if (onItemFollow && item.href && isPlainLeftClick(event)) {
      fireCancelableEvent(onItemFollow, details, event);
    }
    if (onItemClick) {
      fireCancelableEvent(onItemClick, details, event);
    }
    onReturnFocus();
    closeDropdown();
  };
  const doVerticalNavigation = (direction) => {
    if (isOpen) {
      moveHighlight2(direction);
    }
  };
  const openAndSelectFirst = (event) => {
    toggleDropdown();
    event.preventDefault();
  };
  const actOnParentDropdown = (event) => {
    if (!targetItem) {
      if (isOpen && !isInRestrictedView) {
        toggleDropdown();
      } else {
        openAndSelectFirst(event);
      }
    } else {
      if (isItemGroup(targetItem)) {
        onGroupToggle(targetItem, event);
      } else {
        onItemActivate(targetItem, event);
      }
    }
  };
  const activate = (event, isEnter) => {
    setIsUsingMouse(false);
    if (targetItem && isLinkItem(targetItem) && isEnter) {
      return;
    }
    event.preventDefault();
    actOnParentDropdown(event);
  };
  const onKeyDown = (event) => {
    setIsUsingMouse(false);
    switch (event.keyCode) {
      case KeyCode.down: {
        doVerticalNavigation(1);
        event.preventDefault();
        break;
      }
      case KeyCode.up: {
        doVerticalNavigation(-1);
        event.preventDefault();
        break;
      }
      case KeyCode.space: {
        event.preventDefault();
        break;
      }
      case KeyCode.enter: {
        if (!(targetItem === null || targetItem === void 0 ? void 0 : targetItem.disabled)) {
          activate(event, true);
        }
        break;
      }
      case KeyCode.left:
      case KeyCode.right: {
        if (targetItem && !targetItem.disabled && isItemGroup(targetItem) && !isExpanded(targetItem)) {
          expandGroup();
        } else if (hasExpandableGroups) {
          collapseGroup();
        }
        event.preventDefault();
        break;
      }
      case KeyCode.escape: {
        onReturnFocus();
        closeDropdown();
        event.preventDefault();
        if (isOpen) {
          event.stopPropagation();
        }
        break;
      }
      case KeyCode.tab: {
        if (expandToViewport) {
          onReturnFocus();
        }
        closeDropdown();
        break;
      }
    }
  };
  const onKeyUp = (event) => {
    if (event.keyCode === KeyCode.space && !(targetItem === null || targetItem === void 0 ? void 0 : targetItem.disabled)) {
      activate(event);
    }
  };
  return {
    isOpen,
    targetItem,
    isHighlighted,
    isKeyboardHighlight,
    isExpanded,
    highlightItem,
    onKeyDown,
    onKeyUp,
    onItemActivate,
    onGroupToggle,
    toggleDropdown,
    closeDropdown,
    setIsUsingMouse
  };
}

// node_modules/@cloudscape-design/components/button-dropdown/internal.js
var InternalButtonDropdown = import_react33.default.forwardRef((_a, ref) => {
  var _b;
  var { items, variant = "normal", loading = false, loadingText, disabled = false, expandableGroups = false, children, onItemClick, onItemFollow, customTriggerBuilder, expandToViewport, ariaLabel, title, description, preferCenter, mainAction, __internalRootRef } = _a, props = __rest(_a, ["items", "variant", "loading", "loadingText", "disabled", "expandableGroups", "children", "onItemClick", "onItemFollow", "customTriggerBuilder", "expandToViewport", "ariaLabel", "title", "description", "preferCenter", "mainAction", "__internalRootRef"]);
  const isInRestrictedView = useMobile();
  const dropdownId = useUniqueId("dropdown");
  for (const item of items) {
    checkSafeUrl("ButtonDropdown", item.href);
  }
  if (mainAction) {
    checkSafeUrl("ButtonDropdown", mainAction.href);
  }
  if (isDevelopment) {
    if (mainAction && variant !== "primary" && variant !== "normal") {
      warnOnce("ButtonDropdown", 'Main action is only supported for "primary" and "normal" component variant.');
    }
  }
  const isMainAction = mainAction && (variant === "primary" || variant === "normal");
  const isVisualRefresh = useVisualRefresh();
  const { isOpen, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, onKeyDown, onKeyUp, onItemActivate, onGroupToggle, toggleDropdown, closeDropdown, setIsUsingMouse } = useButtonDropdown({
    items,
    onItemClick,
    onItemFollow,
    // Scroll is unnecessary when moving focus back to the dropdown trigger.
    onReturnFocus: () => {
      var _a2;
      return (_a2 = triggerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus({ preventScroll: true });
    },
    expandToViewport,
    hasExpandableGroups: expandableGroups,
    isInRestrictedView
  });
  const handleMouseEvent = () => {
    setIsUsingMouse(true);
  };
  const baseProps = getBaseProps(props);
  const mainActionRef = (0, import_react33.useRef)(null);
  const triggerRef = (0, import_react33.useRef)(null);
  useForwardFocus(ref, isMainAction ? mainActionRef : triggerRef);
  const clickHandler = () => {
    if (!loading && !disabled) {
      toggleDropdown({ moveHighlightOnOpen: !isInRestrictedView });
    }
  };
  const canBeOpened = !loading && !disabled;
  const triggerVariant = variant === "navigation" ? void 0 : variant === "inline-icon" ? "inline-icon" : variant;
  const iconProps = variant === "icon" || variant === "inline-icon" ? {
    iconName: "ellipsis"
  } : {
    iconName: "caret-down-filled",
    iconAlign: "right",
    __iconClass: canBeOpened && isOpen ? styles_css_default10["rotate-up"] : styles_css_default10["rotate-down"]
  };
  const baseTriggerProps = Object.assign(Object.assign({ className: clsx_m_default(styles_css_default10["trigger-button"], styles_css_default10["test-utils-button-trigger"]) }, iconProps), {
    variant: triggerVariant,
    loading,
    loadingText,
    disabled,
    onClick: (event) => {
      event.preventDefault();
      clickHandler();
    },
    ariaLabel,
    ariaExpanded: canBeOpened && isOpen,
    formAction: "none",
    __nativeAttributes: {
      "aria-haspopup": true
    }
  });
  const triggerId = useUniqueId("awsui-button-dropdown__trigger");
  const triggerHasBadge = () => {
    const flatItems = items.flatMap((item) => {
      if ("items" in item) {
        return item.items;
      }
      return item;
    });
    return variant === "icon" && !!(flatItems === null || flatItems === void 0 ? void 0 : flatItems.find((item) => {
      if ("badge" in item) {
        return item.badge;
      }
    }));
  };
  let trigger = null;
  if (customTriggerBuilder) {
    trigger = import_react33.default.createElement("div", { className: styles_css_default10["dropdown-trigger"] }, customTriggerBuilder({
      testUtilsClass: styles_css_default10["test-utils-button-trigger"],
      ariaExpanded: canBeOpened && isOpen,
      onClick: clickHandler,
      triggerRef,
      ariaLabel,
      disabled,
      isOpen
    }));
  } else if (isMainAction) {
    const { text, iconName, iconAlt, iconSvg, iconUrl, external, externalIconAriaLabel } = mainAction, mainActionProps = __rest(mainAction, ["text", "iconName", "iconAlt", "iconSvg", "iconUrl", "external", "externalIconAriaLabel"]);
    const mainActionIconProps = external ? { iconName: "external", iconAlign: "right" } : { iconName, iconAlt, iconSvg, iconUrl };
    const mainActionAriaLabel = externalIconAriaLabel ? `${(_b = mainAction.ariaLabel) !== null && _b !== void 0 ? _b : mainAction.text} ${mainAction.externalIconAriaLabel}` : void 0;
    trigger = import_react33.default.createElement(
      "div",
      { role: "group", "aria-label": ariaLabel, className: styles_css_default10["split-trigger-wrapper"] },
      import_react33.default.createElement(
        "div",
        {
          className: clsx_m_default(styles_css_default10["trigger-item"], styles_css_default10["split-trigger"]),
          // Close dropdown upon main action click unless event is cancelled.
          onClick: closeDropdown,
          // Prevent keyboard events from propagation to the button dropdown handler.
          onKeyDown: (e) => e.stopPropagation(),
          onKeyUp: (e) => e.stopPropagation()
        },
        import_react33.default.createElement(InternalButton, Object.assign({ ref: mainActionRef }, mainActionProps, mainActionIconProps, { className: styles_css_default10["trigger-button"], variant, ariaLabel: mainActionAriaLabel, formAction: "none" }), text)
      ),
      import_react33.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default10["trigger-item"], styles_css_default10["dropdown-trigger"], isVisualRefresh && styles_css_default10["visual-refresh"]) },
        import_react33.default.createElement(InternalButton, Object.assign({ ref: triggerRef }, baseTriggerProps))
      )
    );
  } else {
    trigger = import_react33.default.createElement(
      "div",
      { className: styles_css_default10["dropdown-trigger"] },
      import_react33.default.createElement(InternalButton, Object.assign({ ref: triggerRef, id: triggerId }, baseTriggerProps, { badge: triggerHasBadge() }), children)
    );
  }
  const hasHeader = title || description;
  const headerId = useUniqueId("awsui-button-dropdown__header");
  const shouldLabelWithTrigger = !ariaLabel && !mainAction && variant !== "icon" && variant !== "inline-icon";
  const { loadingButtonCount } = useFunnel();
  (0, import_react33.useEffect)(() => {
    if (loading) {
      loadingButtonCount.current++;
      return () => {
        loadingButtonCount.current--;
      };
    }
  }, [loading, loadingButtonCount]);
  return import_react33.default.createElement(
    "div",
    Object.assign({}, baseProps, { onKeyDown, onKeyUp, onMouseDown: handleMouseEvent, onMouseMove: handleMouseEvent, className: clsx_m_default(styles_css_default10["button-dropdown"], styles_css_default10[`variant-${variant}`], baseProps.className), "aria-owns": expandToViewport && isOpen ? dropdownId : void 0, ref: __internalRootRef }),
    import_react33.default.createElement(
      dropdown_default,
      { open: canBeOpened && isOpen, stretchWidth: false, stretchTriggerHeight: variant === "navigation", expandToViewport, preferCenter, onDropdownClose: () => toggleDropdown(), trigger, dropdownId },
      hasHeader && import_react33.default.createElement(
        "div",
        { className: styles_css_default10.header, id: headerId },
        title && import_react33.default.createElement(
          "div",
          { className: styles_css_default10.title },
          import_react33.default.createElement(InternalBox, { fontSize: "heading-s", fontWeight: "bold", color: "inherit", tagOverride: "h2", margin: { vertical: "n", horizontal: "n" } }, title)
        ),
        description && import_react33.default.createElement(
          InternalBox,
          { fontSize: "body-s" },
          import_react33.default.createElement("span", { className: styles_css_default10.description }, description)
        )
      ),
      import_react33.default.createElement(
        options_list_default,
        { open: canBeOpened && isOpen, position: "static", role: "menu", decreaseBlockMargin: true, ariaLabel, ariaLabelledby: hasHeader ? headerId : shouldLabelWithTrigger ? triggerId : void 0, statusType: "finished" },
        import_react33.default.createElement(ItemsList, { items, onItemActivate, onGroupToggle, hasExpandableGroups: expandableGroups, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown: true, highlightItem, expandToViewport, variant })
      )
    )
  );
});
var internal_default7 = InternalButtonDropdown;

// node_modules/@cloudscape-design/components/app-layout/test-classes/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/app-layout/test-classes/styles.scoped.css";
var styles_css_default14 = {
  "root": "awsui_root_1fj9k_3pu9z_5",
  "navigation": "awsui_navigation_1fj9k_3pu9z_9",
  "navigation-toggle": "awsui_navigation-toggle_1fj9k_3pu9z_13",
  "navigation-close": "awsui_navigation-close_1fj9k_3pu9z_17",
  "content": "awsui_content_1fj9k_3pu9z_21",
  "notifications": "awsui_notifications_1fj9k_3pu9z_25",
  "breadcrumbs": "awsui_breadcrumbs_1fj9k_3pu9z_29",
  "tools": "awsui_tools_1fj9k_3pu9z_33",
  "tools-close": "awsui_tools-close_1fj9k_3pu9z_37",
  "tools-toggle": "awsui_tools-toggle_1fj9k_3pu9z_41",
  "drawer-closed": "awsui_drawer-closed_1fj9k_3pu9z_45",
  "mobile-bar": "awsui_mobile-bar_1fj9k_3pu9z_49",
  "disable-body-scroll-root": "awsui_disable-body-scroll-root_1fj9k_3pu9z_53",
  "drawers-trigger": "awsui_drawers-trigger_1fj9k_3pu9z_57",
  "active-drawer": "awsui_active-drawer_1fj9k_3pu9z_61",
  "active-drawer-close-button": "awsui_active-drawer-close-button_1fj9k_3pu9z_65",
  "overflow-menu": "awsui_overflow-menu_1fj9k_3pu9z_69",
  "drawers-slider": "awsui_drawers-slider_1fj9k_3pu9z_73"
};

// node_modules/@cloudscape-design/components/app-layout/drawer/overflow-menu.js
function OverflowMenu({ items, onItemClick, customTriggerBuilder, ariaLabel }) {
  return import_react34.default.createElement(internal_default7, { items: items.map((item) => ({
    id: item.id,
    text: item.ariaLabels.drawerName,
    iconName: item.trigger.iconName,
    iconSvg: item.trigger.iconSvg,
    badge: item.badge
  })), className: styles_css_default14["overflow-menu"], onItemClick, ariaLabel, variant: "icon", customTriggerBuilder, expandToViewport: true });
}

// node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/styles.scoped.css";
var styles_css_default15 = {
  "block-body-scroll": "awsui_block-body-scroll_19d8l_c90gb_103",
  "mobile-bar": "awsui_mobile-bar_19d8l_c90gb_107",
  "mobile-bar-breadcrumbs": "awsui_mobile-bar-breadcrumbs_19d8l_c90gb_120",
  "mobile-toggle": "awsui_mobile-toggle_19d8l_c90gb_127",
  "mobile-toggle-type-navigation": "awsui_mobile-toggle-type-navigation_19d8l_c90gb_136",
  "mobile-toggle-type-tools": "awsui_mobile-toggle-type-tools_19d8l_c90gb_139",
  "mobile-toggle-type-drawer": "awsui_mobile-toggle-type-drawer_19d8l_c90gb_139",
  "drawers-container": "awsui_drawers-container_19d8l_c90gb_146"
};

// node_modules/@cloudscape-design/components/app-layout/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/app-layout/styles.scoped.css";
var styles_css_default16 = {
  "resize-active": "awsui_resize-active_lm6vo_1lt83_104",
  "resize-side": "awsui_resize-side_lm6vo_1lt83_110",
  "resize-bottom": "awsui_resize-bottom_lm6vo_1lt83_113",
  "with-motion": "awsui_with-motion_lm6vo_1lt83_118",
  "root": "awsui_root_lm6vo_1lt83_133",
  "root-no-scroll": "awsui_root-no-scroll_lm6vo_1lt83_140",
  "layout": "awsui_layout_lm6vo_1lt83_145",
  "layout-no-scroll": "awsui_layout-no-scroll_lm6vo_1lt83_151",
  "layout-main": "awsui_layout-main_lm6vo_1lt83_155",
  "layout-main-scrollable": "awsui_layout-main-scrollable_lm6vo_1lt83_161",
  "unfocusable": "awsui_unfocusable_lm6vo_1lt83_166",
  "breadcrumbs-desktop": "awsui_breadcrumbs-desktop_lm6vo_1lt83_170",
  "content-header-wrapper": "awsui_content-header-wrapper_lm6vo_1lt83_175",
  "content-wrapper": "awsui_content-wrapper_lm6vo_1lt83_179",
  "content-overlapped": "awsui_content-overlapped_lm6vo_1lt83_183",
  "content-extra-top-padding": "awsui_content-extra-top-padding_lm6vo_1lt83_187"
};

// node_modules/@cloudscape-design/components/app-layout/drawer/drawers-helpers.js
function splitItems(maybeItems, splitIndex, activeId) {
  const items = maybeItems !== null && maybeItems !== void 0 ? maybeItems : [];
  const visibleItems = items.slice(0, splitIndex);
  const overflowItems = items.slice(splitIndex);
  if (overflowItems.length === 1) {
    return { visibleItems: items, overflowItems: [] };
  }
  if (activeId && overflowItems.length > 0 && visibleItems.length > 0) {
    const activeInOverflow = overflowItems.find((item) => item.id === activeId);
    if (activeInOverflow) {
      overflowItems.splice(overflowItems.indexOf(activeInOverflow), 1);
      overflowItems.unshift(visibleItems.pop());
      visibleItems.push(activeInOverflow);
    }
  }
  return { visibleItems, overflowItems };
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-drawers.js
var import_react36 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/runtime-api.js
var import_react35 = __toESM(require_react());
function convertRuntimeDrawers(drawers) {
  const converted = drawers.map((_a) => {
    var _b;
    var { mountContent, unmountContent, trigger } = _a, runtimeDrawer = __rest(_a, ["mountContent", "unmountContent", "trigger"]);
    return Object.assign(Object.assign({}, runtimeDrawer), { ariaLabels: Object.assign({ drawerName: (_b = runtimeDrawer.ariaLabels.content) !== null && _b !== void 0 ? _b : "" }, runtimeDrawer.ariaLabels), trigger: {
      iconSvg: (
        // eslint-disable-next-line react/no-danger
        import_react35.default.createElement("span", { dangerouslySetInnerHTML: { __html: trigger.iconSvg } })
      )
    }, content: import_react35.default.createElement(RuntimeContentWrapper, { key: runtimeDrawer.id, mountContent, unmountContent }), onResize: (event) => {
      fireNonCancelableEvent(runtimeDrawer.onResize, { size: event.detail.size, id: runtimeDrawer.id });
    } });
  });
  const sorted = sortByPriority(converted);
  return {
    before: sorted.filter((item) => {
      var _a;
      return ((_a = item.orderPriority) !== null && _a !== void 0 ? _a : 0) > 0;
    }),
    after: sorted.filter((item) => {
      var _a;
      return ((_a = item.orderPriority) !== null && _a !== void 0 ? _a : 0) <= 0;
    })
  };
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-drawers.js
var TOOLS_DRAWER_ID = "awsui-internal-tools";
function getToolsDrawerItem(props) {
  if (props.toolsHide) {
    return null;
  }
  const { iconName, getLabels } = togglesConfig.tools;
  const { mainLabel, closeLabel, openLabel } = getLabels(props.ariaLabels);
  return {
    id: TOOLS_DRAWER_ID,
    content: props.tools,
    resizable: false,
    ariaLabels: {
      triggerButton: openLabel,
      closeButton: closeLabel,
      drawerName: mainLabel !== null && mainLabel !== void 0 ? mainLabel : ""
    },
    trigger: {
      iconName
    }
  };
}
function useRuntimeDrawers(disableRuntimeDrawers, activeDrawerId, onActiveDrawerChange) {
  const [runtimeDrawers, setRuntimeDrawers] = (0, import_react36.useState)({ before: [], after: [] });
  const onActiveDrawerChangeStable = useStableCallback(onActiveDrawerChange);
  const drawerWasOpenRef = (0, import_react36.useRef)(false);
  drawerWasOpenRef.current = drawerWasOpenRef.current || !!activeDrawerId;
  (0, import_react36.useEffect)(() => {
    if (disableRuntimeDrawers) {
      return;
    }
    const unsubscribe = awsuiPluginsInternal.appLayout.onDrawersRegistered((drawers) => {
      setRuntimeDrawers(convertRuntimeDrawers(drawers));
      if (!drawerWasOpenRef.current) {
        const defaultActiveDrawer = sortByPriority(drawers).find((drawer) => drawer.defaultActive);
        if (defaultActiveDrawer) {
          onActiveDrawerChangeStable(defaultActiveDrawer.id);
        }
      }
    });
    return () => {
      unsubscribe();
      setRuntimeDrawers({ before: [], after: [] });
    };
  }, [disableRuntimeDrawers, onActiveDrawerChangeStable]);
  return runtimeDrawers;
}
function applyToolsDrawer(toolsProps, runtimeDrawers) {
  const drawers = [...runtimeDrawers.before, ...runtimeDrawers.after];
  if (drawers.length === 0) {
    return null;
  }
  const toolsItem = getToolsDrawerItem(toolsProps);
  if (toolsItem) {
    drawers.unshift(toolsItem);
  }
  return drawers;
}
function useDrawers({ drawers, activeDrawerId: controlledActiveDrawerId, onDrawerChange, __disableRuntimeDrawers: disableRuntimeDrawers }, ariaLabels, toolsProps) {
  var _a, _b, _c, _d;
  const [activeDrawerId = null, setActiveDrawerId] = useControllable(controlledActiveDrawerId, onDrawerChange, null, {
    componentName: "AppLayout",
    controlledProp: "activeDrawerId",
    changeHandler: "onChange"
  });
  const [drawerSizes, setDrawerSizes] = (0, import_react36.useState)({});
  function onActiveDrawerResize({ id, size }) {
    setDrawerSizes((oldSizes) => Object.assign(Object.assign({}, oldSizes), { [id]: size }));
    fireNonCancelableEvent(activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.onResize, { id, size });
  }
  function onActiveDrawerChange(newDrawerId) {
    setActiveDrawerId(newDrawerId);
    if (hasOwnDrawers) {
      fireNonCancelableEvent(onDrawerChange, { activeDrawerId: newDrawerId });
    } else if (!toolsProps.toolsHide) {
      toolsProps.onToolsToggle(newDrawerId === TOOLS_DRAWER_ID);
    }
  }
  const hasOwnDrawers = !!drawers;
  const runtimeDrawers = useRuntimeDrawers(disableRuntimeDrawers, activeDrawerId, onActiveDrawerChange);
  const combinedDrawers = drawers ? [...runtimeDrawers.before, ...drawers, ...runtimeDrawers.after] : applyToolsDrawer(toolsProps, runtimeDrawers);
  let activeDrawerIdResolved = (toolsProps === null || toolsProps === void 0 ? void 0 : toolsProps.toolsOpen) && !hasOwnDrawers ? TOOLS_DRAWER_ID : activeDrawerId;
  const activeDrawer = combinedDrawers === null || combinedDrawers === void 0 ? void 0 : combinedDrawers.find((drawer) => drawer.id === activeDrawerIdResolved);
  activeDrawerIdResolved = (_a = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) !== null && _a !== void 0 ? _a : null;
  const activeDrawerSize = activeDrawerIdResolved ? (_c = (_b = drawerSizes[activeDrawerIdResolved]) !== null && _b !== void 0 ? _b : activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize) !== null && _c !== void 0 ? _c : toolsProps.toolsWidth : toolsProps.toolsWidth;
  const minDrawerSize = Math.min((_d = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize) !== null && _d !== void 0 ? _d : 290, 290);
  return {
    ariaLabelsWithDrawers: ariaLabels,
    drawers: combinedDrawers || void 0,
    activeDrawer,
    activeDrawerId: activeDrawerIdResolved,
    activeDrawerSize,
    minDrawerSize,
    onActiveDrawerChange,
    onActiveDrawerResize
  };
}

// node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/index.js
var MobileToggle = import_react37.default.forwardRef(({ className: className2, ariaLabels, type, disabled, onClick }, ref) => {
  const { TagName, iconName, getLabels } = togglesConfig[type];
  const { mainLabel, openLabel } = getLabels(ariaLabels);
  return import_react37.default.createElement(
    TagName,
    { className: clsx_m_default(styles_css_default15["mobile-toggle"], styles_css_default15[`mobile-toggle-type-${type}`]), "aria-hidden": disabled, "aria-label": mainLabel, onClick: (e) => e.target === e.currentTarget && onClick() },
    import_react37.default.createElement(ToggleButton, { ref, className: className2, iconName, onClick, ariaLabel: openLabel, disabled, ariaExpanded: disabled })
  );
});
function MobileToolbar({ ariaLabels, toggleRefs, topOffset, navigationHide, toolsHide, anyPanelOpen, unfocusable, drawers, activeDrawerId, children, onNavigationOpen, onToolsOpen, onDrawerChange, mobileBarRef }) {
  (0, import_react37.useEffect)(() => {
    if (anyPanelOpen) {
      document.body.classList.add(styles_css_default15["block-body-scroll"]);
      return () => {
        document.body.classList.remove(styles_css_default15["block-body-scroll"]);
      };
    } else {
      document.body.classList.remove(styles_css_default15["block-body-scroll"]);
    }
  }, [anyPanelOpen]);
  const { overflowItems, visibleItems } = splitItems(drawers, 2, activeDrawerId);
  const overflowMenuHasBadge = !!overflowItems.find((item) => item.badge);
  return import_react37.default.createElement(
    "div",
    { ref: mobileBarRef, className: clsx_m_default(styles_css_default15["mobile-bar"], styles_css_default14["mobile-bar"], unfocusable && styles_css_default16.unfocusable), style: { top: topOffset } },
    !navigationHide && import_react37.default.createElement(MobileToggle, { ref: toggleRefs.navigation, type: "navigation", className: styles_css_default14["navigation-toggle"], ariaLabels, disabled: anyPanelOpen, onClick: onNavigationOpen }),
    import_react37.default.createElement("div", { className: styles_css_default15["mobile-bar-breadcrumbs"] }, children && import_react37.default.createElement("div", { className: styles_css_default14.breadcrumbs }, children)),
    !toolsHide && !drawers && import_react37.default.createElement(MobileToggle, { ref: toggleRefs.tools, type: "tools", className: styles_css_default14["tools-toggle"], ariaLabels, disabled: anyPanelOpen, onClick: onToolsOpen }),
    drawers && import_react37.default.createElement(
      "aside",
      { "aria-label": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawers, role: "region" },
      import_react37.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default15["drawers-container"]), role: "toolbar", "aria-orientation": "horizontal" },
        visibleItems.map((item, index) => {
          var _a;
          return import_react37.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default15["mobile-toggle"], styles_css_default15["mobile-toggle-type-drawer"]), key: index, onClick: () => onDrawerChange(item.id) },
            import_react37.default.createElement(ToggleButton, { className: clsx_m_default(styles_css_default14["drawers-trigger"], item.id === TOOLS_DRAWER_ID && styles_css_default14["tools-toggle"]), iconName: item.trigger.iconName, iconSvg: item.trigger.iconSvg, badge: item.badge, ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton, ariaExpanded: activeDrawerId === item.id, testId: `awsui-app-layout-trigger-${item.id}` })
          );
        }),
        overflowItems.length > 0 && import_react37.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default15["mobile-toggle"], styles_css_default15["mobile-toggle-type-drawer"]) },
          import_react37.default.createElement(OverflowMenu, { ariaLabel: overflowMenuHasBadge ? ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflowWithBadge : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflow, items: overflowItems, onItemClick: ({ detail }) => onDrawerChange(detail.id) })
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-focus-control.js
var import_react38 = __toESM(require_react());
function useFocusControl(isOpen, restoreFocus = false, activeDrawerId) {
  const refs = {
    toggle: (0, import_react38.useRef)(null),
    close: (0, import_react38.useRef)(null),
    slider: (0, import_react38.useRef)(null)
  };
  const previousFocusedElement = (0, import_react38.useRef)();
  const shouldFocus = (0, import_react38.useRef)(false);
  const doFocus = () => {
    var _a, _b, _c;
    if (!shouldFocus.current) {
      return;
    }
    if (isOpen) {
      previousFocusedElement.current = document.activeElement !== document.body ? document.activeElement : void 0;
      if (refs.slider.current) {
        (_a = refs.slider.current) === null || _a === void 0 ? void 0 : _a.focus();
      } else {
        (_b = refs.close.current) === null || _b === void 0 ? void 0 : _b.focus();
      }
    } else {
      if (restoreFocus && previousFocusedElement.current && document.contains(previousFocusedElement.current)) {
        previousFocusedElement.current.focus();
        previousFocusedElement.current = void 0;
      } else {
        (_c = refs.toggle.current) === null || _c === void 0 ? void 0 : _c.focus();
      }
    }
    shouldFocus.current = false;
  };
  const setFocus = (force) => {
    shouldFocus.current = true;
    if (force && isOpen) {
      doFocus();
    }
  };
  (0, import_react38.useEffect)(doFocus, [isOpen, activeDrawerId]);
  const loseFocus = (0, import_react38.useCallback)(() => {
    previousFocusedElement.current = void 0;
  }, []);
  return {
    refs,
    setFocus,
    loseFocus
  };
}

// node_modules/@cloudscape-design/components/split-panel/utils/size-utils.js
var CONSTRAINED_PAGE_HEIGHT = 400;
var MAIN_PANEL_MIN_HEIGHT = 250;
var CONSTRAINED_MAIN_PANEL_MIN_HEIGHT = 40;
function getSplitPanelDefaultSize(position) {
  if (typeof document === "undefined") {
    return 0;
  }
  return position === "side" ? document.documentElement.clientWidth / 3 : document.documentElement.clientHeight / 2;
}
function getLimitedValue(min3, value, max3) {
  if (min3 > max3) {
    return min3;
  }
  if (value < min3) {
    return min3;
  }
  if (value > max3) {
    return max3;
  }
  return value;
}

// node_modules/@cloudscape-design/components/app-layout/content-wrapper/index.js
var import_react39 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/content-wrapper/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/app-layout/content-wrapper/styles.scoped.css";
var styles_css_default17 = {
  "content-wrapper": "awsui_content-wrapper_zycdx_1ocfz_103",
  "content-wrapper-mobile": "awsui_content-wrapper-mobile_zycdx_1ocfz_107",
  "content-type-dashboard": "awsui_content-type-dashboard_zycdx_1ocfz_112"
};

// node_modules/@cloudscape-design/components/app-layout/content-wrapper/index.js
var ContentWrapper = import_react39.default.forwardRef(({ className: className2, contentType, children, toolsPadding, disablePaddings, navigationPadding, isMobile, contentWidthStyles }, ref) => {
  if (disablePaddings) {
    return import_react39.default.createElement("div", { className: className2, ref }, children);
  }
  return import_react39.default.createElement(
    "div",
    { ref, className: clsx_m_default(styles_css_default17["content-wrapper"], !navigationPadding && styles_css_default17["content-wrapper-no-navigation-padding"], !toolsPadding && styles_css_default17["content-wrapper-no-tools-padding"], isMobile && styles_css_default17["content-wrapper-mobile"]) },
    import_react39.default.createElement("div", { style: contentWidthStyles, className: clsx_m_default(className2, styles_css_default17[`content-type-${contentType}`]) }, children)
  );
});
var content_wrapper_default = ContentWrapper;

// node_modules/@cloudscape-design/components/app-layout/drawer/index.js
var import_react40 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/drawer/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/app-layout/drawer/styles.scoped.css";
var styles_css_default18 = {
  "toggle": "awsui_toggle_1uo6m_1740t_103",
  "drawer-triggers": "awsui_drawer-triggers_1uo6m_1740t_109",
  "drawer": "awsui_drawer_1uo6m_1740t_109",
  "drawer-mobile": "awsui_drawer-mobile_1uo6m_1740t_119",
  "drawer-closed": "awsui_drawer-closed_1uo6m_1740t_122",
  "drawer-content": "awsui_drawer-content_1uo6m_1740t_129",
  "drawer-content-clickable": "awsui_drawer-content-clickable_1uo6m_1740t_141",
  "drawer-resize-content": "awsui_drawer-resize-content_1uo6m_1740t_151",
  "drawer-triggers-wrapper": "awsui_drawer-triggers-wrapper_1uo6m_1740t_157",
  "drawer-trigger": "awsui_drawer-trigger_1uo6m_1740t_109",
  "drawer-trigger-active": "awsui_drawer-trigger-active_1uo6m_1740t_176",
  "hide": "awsui_hide_1uo6m_1740t_184"
};

// node_modules/@cloudscape-design/components/app-layout/drawer/index.js
var Drawer = import_react40.default.forwardRef(({ id, contentClassName, toggleClassName, closeClassName, width, type, toggleRefs, topOffset, bottomOffset, ariaLabels, children, hideOpenButton, isOpen, isHidden, isMobile, onToggle, onClick, onLoseFocus, resizeHandle }, ref) => {
  const openButtonWrapperRef = (0, import_react40.useRef)(null);
  const { TagName, iconName } = togglesConfig[type];
  const { mainLabel, closeLabel, openLabel } = ariaLabels;
  const drawerContentWidthOpen = isMobile ? void 0 : width;
  const drawerContentWidth = isOpen ? drawerContentWidthOpen : void 0;
  const regularOpenButton = import_react40.default.createElement(
    TagName,
    { ref: openButtonWrapperRef, "aria-label": mainLabel, className: styles_css_default18.toggle, "aria-hidden": isOpen },
    import_react40.default.createElement(ToggleButton, { ref: toggleRefs.toggle, className: toggleClassName, iconName, ariaLabel: openLabel, onClick: () => onToggle(true), ariaExpanded: isOpen ? void 0 : false })
  );
  return import_react40.default.createElement(
    "div",
    { ref, className: clsx_m_default(styles_css_default18.drawer, {
      [styles_css_default18.hide]: isHidden,
      [styles_css_default18["drawer-closed"]]: !isOpen,
      [styles_css_default14["drawer-closed"]]: !isOpen,
      [styles_css_default18["drawer-mobile"]]: isMobile
    }), style: { width: drawerContentWidth }, onBlur: onLoseFocus ? (e) => {
      if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {
        onLoseFocus(e);
      }
    } : void 0, onClick: (event) => {
      var _a;
      if (onClick) {
        onClick(event);
      }
      if (!isOpen) {
        if (openButtonWrapperRef.current === event.target || !((_a = openButtonWrapperRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {
          onToggle(true);
        }
      }
    } },
    import_react40.default.createElement(
      "div",
      { id, style: { width: drawerContentWidth, top: topOffset, bottom: bottomOffset }, className: clsx_m_default(styles_css_default18["drawer-content"], styles_css_default18["drawer-content-clickable"], contentClassName) },
      !isMobile && !hideOpenButton && regularOpenButton,
      import_react40.default.createElement(
        TagName,
        { className: clsx_m_default(resizeHandle && styles_css_default18["drawer-resize-content"]), "aria-label": mainLabel, "aria-hidden": !isOpen },
        !isMobile && isOpen && resizeHandle,
        import_react40.default.createElement(CloseButton, { ref: toggleRefs.close, className: closeClassName, ariaLabel: closeLabel, onClick: () => {
          onToggle(false);
        } }),
        children
      )
    )
  );
});
var DrawerTrigger = import_react40.default.forwardRef(({ testUtilsClassName, ariaLabel, ariaExpanded, ariaControls, badge, itemId, isActive, trigger, onClick }, ref) => import_react40.default.createElement(
  "div",
  { className: clsx_m_default(styles_css_default18["drawer-trigger"], isActive && styles_css_default18["drawer-trigger-active"]), onClick },
  import_react40.default.createElement(ToggleButton, { ref, className: testUtilsClassName, iconName: trigger.iconName, iconSvg: trigger.iconSvg, ariaLabel, ariaExpanded, ariaControls, badge, testId: itemId && `awsui-app-layout-trigger-${itemId}` })
));
var DrawerTriggersBar = ({ isMobile, topOffset, bottomOffset, activeDrawerId, ariaLabels, drawers, drawerRefs, onDrawerChange }) => {
  const containerRef = import_react40.default.useRef(null);
  const previousActiveDrawerId = (0, import_react40.useRef)(activeDrawerId);
  const [containerHeight, triggersContainerRef] = useContainerQuery((rect) => rect.contentBoxHeight);
  const isCompactMode = useDensityMode(containerRef) === "compact";
  if (activeDrawerId) {
    previousActiveDrawerId.current = activeDrawerId;
  }
  const getIndexOfOverflowItem = () => {
    if (containerHeight) {
      const ITEM_HEIGHT = isCompactMode ? 34 : 38;
      const overflowSpot = containerHeight / 1.5;
      const index = Math.floor(overflowSpot / ITEM_HEIGHT);
      return index;
    }
    return 0;
  };
  const { visibleItems, overflowItems } = splitItems(drawers, getIndexOfOverflowItem(), activeDrawerId);
  const overflowMenuHasBadge = !!overflowItems.find((item) => item.badge);
  return import_react40.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default18.drawer, styles_css_default18["drawer-closed"], styles_css_default14["drawer-closed"], {
      [styles_css_default18["drawer-mobile"]]: isMobile,
      [styles_css_default18.hide]: drawers.length === 1 && !!activeDrawerId
    }), ref: containerRef },
    import_react40.default.createElement("div", { ref: triggersContainerRef, style: { top: topOffset, bottom: bottomOffset }, className: clsx_m_default(styles_css_default18["drawer-content"], {
      [styles_css_default18["drawer-content-clickable"]]: drawers.length === 1
    }), onClick: drawers.length === 1 ? () => onDrawerChange(drawers[0].id !== activeDrawerId ? drawers[0].id : null) : void 0 }, !isMobile && import_react40.default.createElement(
      "aside",
      { "aria-label": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawers, role: "region" },
      import_react40.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default18["drawer-triggers-wrapper"]), role: "toolbar", "aria-orientation": "vertical" },
        visibleItems.map((item, index) => {
          var _a;
          return import_react40.default.createElement(DrawerTrigger, { key: index, testUtilsClassName: clsx_m_default(styles_css_default14["drawers-trigger"], item.id === TOOLS_DRAWER_ID && styles_css_default14["tools-toggle"]), ariaExpanded: activeDrawerId === item.id, ref: item.id === previousActiveDrawerId.current ? drawerRefs.toggle : void 0, ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton, ariaControls: activeDrawerId === item.id ? item.id : void 0, trigger: item.trigger, badge: item.badge, itemId: item.id, isActive: activeDrawerId === item.id, onClick: drawers.length !== 1 ? () => onDrawerChange(item.id !== activeDrawerId ? item.id : null) : void 0 });
        }),
        overflowItems.length > 0 && import_react40.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default18["drawer-trigger"]) },
          import_react40.default.createElement(OverflowMenu, { ariaLabel: overflowMenuHasBadge ? ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflowWithBadge : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflow, items: overflowItems, onItemClick: ({ detail }) => onDrawerChange(detail.id) })
        )
      )
    ))
  );
};

// node_modules/@cloudscape-design/components/app-layout/drawer/resizable-drawer.js
var import_react43 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/utils/use-pointer-events.js
var import_react41 = __toESM(require_react());
var usePointerEvents = ({ position, panelRef, handleRef, onResize, hasTransitions = false }) => {
  const onDocumentPointerMove = (0, import_react41.useCallback)((event) => {
    if (!panelRef || !panelRef.current || !handleRef || !handleRef.current) {
      return;
    }
    panelRef.current.classList.remove(styles_css_default16["with-motion"]);
    if (position === "side") {
      const mouseClientX = event.clientX || 0;
      const handleOffset = handleRef.current.getBoundingClientRect().width / 2;
      const width = panelRef.current.getBoundingClientRect().right - mouseClientX + handleOffset;
      onResize(width);
    } else {
      const mouseClientY = event.clientY || 0;
      const handleOffset = handleRef.current.getBoundingClientRect().height / 2;
      const height = panelRef.current.getBoundingClientRect().bottom - mouseClientY + handleOffset;
      onResize(height);
    }
  }, [position, panelRef, handleRef, onResize]);
  const onDocumentPointerUp = (0, import_react41.useCallback)(() => {
    if (!panelRef || !panelRef.current) {
      return;
    }
    if (hasTransitions) {
      panelRef.current.classList.add(styles_css_default16["with-motion"]);
    }
    document.body.classList.remove(styles_css_default16["resize-active"]);
    document.body.classList.remove(styles_css_default16[`resize-${position}`]);
    document.removeEventListener("pointerup", onDocumentPointerUp);
    document.removeEventListener("pointermove", onDocumentPointerMove);
  }, [panelRef, onDocumentPointerMove, position, hasTransitions]);
  const onSliderPointerDown = (0, import_react41.useCallback)(() => {
    document.body.classList.add(styles_css_default16["resize-active"]);
    document.body.classList.add(styles_css_default16[`resize-${position}`]);
    document.addEventListener("pointerup", onDocumentPointerUp);
    document.addEventListener("pointermove", onDocumentPointerMove);
  }, [onDocumentPointerMove, onDocumentPointerUp, position]);
  return onSliderPointerDown;
};

// node_modules/@cloudscape-design/components/app-layout/utils/use-keyboard-events.js
var KEYBOARD_SINGLE_STEP_SIZE = 10;
var KEYBOARD_MULTIPLE_STEPS_SIZE = 60;
var getCurrentSize = (panelRef) => {
  if (!panelRef || !panelRef.current) {
    return {
      panelHeight: 0,
      panelWidth: 0
    };
  }
  return {
    panelHeight: panelRef.current.clientHeight,
    panelWidth: panelRef.current.clientWidth
  };
};
var useKeyboardEvents = ({ position, onResize, panelRef }) => {
  return (event) => {
    let currentSize;
    let maxSize;
    const { panelHeight, panelWidth } = getCurrentSize(panelRef);
    if (position === "side") {
      currentSize = panelWidth;
      maxSize = window.innerWidth;
    } else {
      currentSize = panelHeight;
      maxSize = window.innerHeight;
    }
    const primaryGrowKey = position === "bottom" ? KeyCode.up : KeyCode.left;
    const primaryShrinkKey = position === "bottom" ? KeyCode.down : KeyCode.right;
    const altGrowKey = position === "bottom" ? KeyCode.right : KeyCode.down;
    const altShrinkKey = position === "bottom" ? KeyCode.left : KeyCode.up;
    let isEventHandled = true;
    switch (event.keyCode) {
      case primaryGrowKey:
      case altGrowKey:
        onResize(currentSize + KEYBOARD_SINGLE_STEP_SIZE);
        break;
      case primaryShrinkKey:
      case altShrinkKey:
        onResize(currentSize - KEYBOARD_SINGLE_STEP_SIZE);
        break;
      case KeyCode.pageUp:
        onResize(currentSize + KEYBOARD_MULTIPLE_STEPS_SIZE);
        break;
      case KeyCode.pageDown:
        onResize(currentSize - KEYBOARD_MULTIPLE_STEPS_SIZE);
        break;
      case KeyCode.home:
        onResize(maxSize);
        break;
      case KeyCode.end:
        onResize(0);
        break;
      default:
        isEventHandled = false;
    }
    if (isEventHandled) {
      event.preventDefault();
      event.stopPropagation();
    }
  };
};

// node_modules/@cloudscape-design/components/split-panel/icons/resize-handler.js
var import_react42 = __toESM(require_react());
var ResizeHandler = ({ className: className2 }) => import_react42.default.createElement(
  "svg",
  { focusable: false, className: className2, xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 16 16" },
  import_react42.default.createElement("line", { strokeWidth: "2", x1: "2", y1: "5", x2: "14", y2: "5" }),
  import_react42.default.createElement("line", { strokeWidth: "2", x1: "14", y1: "10", x2: "2", y2: "10" })
);
var resize_handler_default = ResizeHandler;

// node_modules/@cloudscape-design/components/split-panel/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/split-panel/styles.scoped.css";
var styles_css_default19 = {
  "drawer": "awsui_drawer_1r9lg_5jcsd_201",
  "refresh": "awsui_refresh_1r9lg_5jcsd_201",
  "animating": "awsui_animating_1r9lg_5jcsd_215",
  "preference-icon--layout-border": "awsui_preference-icon--layout-border_1r9lg_5jcsd_238",
  "preference-icon--layout-background": "awsui_preference-icon--layout-background_1r9lg_5jcsd_242",
  "preference-icon--layout-header": "awsui_preference-icon--layout-header_1r9lg_5jcsd_245",
  "preference-icon--border": "awsui_preference-icon--border_1r9lg_5jcsd_248",
  "preference-icon--primary-button": "awsui_preference-icon--primary-button_1r9lg_5jcsd_252",
  "preference-icon--secondary": "awsui_preference-icon--secondary_1r9lg_5jcsd_255",
  "preference-icon--disabled-element": "awsui_preference-icon--disabled-element_1r9lg_5jcsd_258",
  "preference-icon--separator": "awsui_preference-icon--separator_1r9lg_5jcsd_261",
  "preference-icon--focus-text": "awsui_preference-icon--focus-text_1r9lg_5jcsd_264",
  "preference-icon-refresh--layout-top": "awsui_preference-icon-refresh--layout-top_1r9lg_5jcsd_268",
  "preference-icon-refresh--layout-main": "awsui_preference-icon-refresh--layout-main_1r9lg_5jcsd_271",
  "preference-icon-refresh--primary": "awsui_preference-icon-refresh--primary_1r9lg_5jcsd_274",
  "preference-icon-refresh--disabled": "awsui_preference-icon-refresh--disabled_1r9lg_5jcsd_277",
  "preference-icon-refresh--column-header": "awsui_preference-icon-refresh--column-header_1r9lg_5jcsd_280",
  "preference-icon-refresh--window": "awsui_preference-icon-refresh--window_1r9lg_5jcsd_283",
  "preference-icon-refresh--secondary": "awsui_preference-icon-refresh--secondary_1r9lg_5jcsd_287",
  "preference-icon-refresh--default": "awsui_preference-icon-refresh--default_1r9lg_5jcsd_290",
  "preference-icon-refresh--separator": "awsui_preference-icon-refresh--separator_1r9lg_5jcsd_293",
  "preference-icon-refresh--input-default": "awsui_preference-icon-refresh--input-default_1r9lg_5jcsd_296",
  "preference-icon-refresh--heading": "awsui_preference-icon-refresh--heading_1r9lg_5jcsd_299",
  "root": "awsui_root_1r9lg_5jcsd_303",
  "preferences-button": "awsui_preferences-button_1r9lg_5jcsd_338",
  "close-button": "awsui_close-button_1r9lg_5jcsd_342",
  "drawer-closed": "awsui_drawer-closed_1r9lg_5jcsd_354",
  "drawer-content-side": "awsui_drawer-content-side_1r9lg_5jcsd_359",
  "drawer-content-bottom": "awsui_drawer-content-bottom_1r9lg_5jcsd_375",
  "position-bottom": "awsui_position-bottom_1r9lg_5jcsd_381",
  "position-side": "awsui_position-side_1r9lg_5jcsd_408",
  "slider": "awsui_slider_1r9lg_5jcsd_414",
  "slider-side": "awsui_slider-side_1r9lg_5jcsd_449",
  "slider-wrapper-bottom": "awsui_slider-wrapper-bottom_1r9lg_5jcsd_456",
  "slider-wrapper-side": "awsui_slider-wrapper-side_1r9lg_5jcsd_467",
  "open-button": "awsui_open-button_1r9lg_5jcsd_478",
  "open-button-side": "awsui_open-button-side_1r9lg_5jcsd_482",
  "slider-icon": "awsui_slider-icon_1r9lg_5jcsd_491",
  "slider-icon-bottom": "awsui_slider-icon-bottom_1r9lg_5jcsd_497",
  "slider-icon-side": "awsui_slider-icon-side_1r9lg_5jcsd_501",
  "pane-header-wrapper-bottom": "awsui_pane-header-wrapper-bottom_1r9lg_5jcsd_505",
  "drawer-mobile": "awsui_drawer-mobile_1r9lg_5jcsd_516",
  "drawer-disable-content-paddings": "awsui_drawer-disable-content-paddings_1r9lg_5jcsd_520",
  "content-bottom": "awsui_content-bottom_1r9lg_5jcsd_529",
  "pane-bottom-center-align": "awsui_pane-bottom-center-align_1r9lg_5jcsd_545",
  "pane-bottom-content-nav-padding": "awsui_pane-bottom-content-nav-padding_1r9lg_5jcsd_550",
  "pane-bottom-content-tools-padding": "awsui_pane-bottom-content-tools-padding_1r9lg_5jcsd_554",
  "content-bottom-max-width": "awsui_content-bottom-max-width_1r9lg_5jcsd_558",
  "content-side": "awsui_content-side_1r9lg_5jcsd_563",
  "pane-header-wrapper-side": "awsui_pane-header-wrapper-side_1r9lg_5jcsd_573",
  "pane-content-wrapper-side": "awsui_pane-content-wrapper-side_1r9lg_5jcsd_579",
  "header": "awsui_header_1r9lg_5jcsd_586",
  "header-text": "awsui_header-text_1r9lg_5jcsd_596",
  "header-actions": "awsui_header-actions_1r9lg_5jcsd_609",
  "divider": "awsui_divider_1r9lg_5jcsd_617"
};

// node_modules/@cloudscape-design/components/app-layout/drawer/resizable-drawer.js
var ResizableDrawer = (_a) => {
  var _b, _c, _d, _e;
  var { onResize, maxWidth, minWidth, refs, activeDrawer, toolsContent } = _a, props = __rest(_a, ["onResize", "maxWidth", "minWidth", "refs", "activeDrawer", "toolsContent"]);
  const { isOpen, children, width, isMobile } = props;
  const clampedWidth = getLimitedValue(minWidth, width, maxWidth);
  const relativeSize = (clampedWidth - minWidth) / (maxWidth - minWidth) * 100;
  const setSidePanelWidth = (newWidth) => {
    const size = getLimitedValue(minWidth, newWidth, maxWidth);
    const id = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id;
    if (isOpen && id && maxWidth >= minWidth) {
      onResize({ size, id });
    }
  };
  const drawerRefObject = (0, import_react43.useRef)(null);
  const sizeControlProps = {
    position: "side",
    panelRef: drawerRefObject,
    handleRef: refs.slider,
    onResize: setSidePanelWidth
  };
  const onSliderPointerDown = usePointerEvents(sizeControlProps);
  const onKeyDown = useKeyboardEvents(sizeControlProps);
  const resizeHandle = import_react43.default.createElement(
    "div",
    { ref: refs.slider, role: "slider", tabIndex: 0, "aria-label": (_b = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.resizeHandle, "aria-valuemax": 100, "aria-valuemin": 0, "aria-valuenow": relativeSize, className: clsx_m_default(styles_css_default19.slider, styles_css_default19[`slider-side`], styles_css_default14["drawers-slider"]), onKeyDown, onPointerDown: onSliderPointerDown },
    import_react43.default.createElement(resize_handler_default, { className: clsx_m_default(styles_css_default19["slider-icon"], styles_css_default19[`slider-icon-side`]) })
  );
  return import_react43.default.createElement(
    Drawer,
    Object.assign({}, props, { id: activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id, width: clampedWidth, ref: drawerRefObject, isHidden: !activeDrawer, resizeHandle: !isMobile && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.resizable) && import_react43.default.createElement("div", { className: styles_css_default19["slider-wrapper-side"] }, resizeHandle), ariaLabels: {
      openLabel: (_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.triggerButton,
      mainLabel: (_d = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _d === void 0 ? void 0 : _d.drawerName,
      closeLabel: (_e = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _e === void 0 ? void 0 : _e.closeButton
    } }),
    toolsContent && import_react43.default.createElement("div", { className: clsx_m_default((activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) !== TOOLS_DRAWER_ID && styles_css_default18.hide) }, toolsContent),
    (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) !== TOOLS_DRAWER_ID ? children : null
  );
};

// node_modules/@cloudscape-design/components/app-layout/split-panel/constants.js
var SPLIT_PANEL_MIN_HEIGHT = 160;
var SPLIT_PANEL_MIN_WIDTH = 280;

// node_modules/@cloudscape-design/components/app-layout/split-panel/drawer.js
var import_react45 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/split-panel/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/app-layout/split-panel/styles.scoped.css";
var styles_css_default20 = {
  "drawer-displayed": "awsui_drawer-displayed_1lh3u_1yevz_103",
  "drawer-content": "awsui_drawer-content_1lh3u_1yevz_107"
};

// node_modules/@cloudscape-design/components/internal/context/split-panel-context.js
var import_react44 = __toESM(require_react());
var SplitPanelContext = (0, import_react44.createContext)(null);
var SplitPanelContextProvider = SplitPanelContext.Provider;
function useSplitPanelContext() {
  const ctx = (0, import_react44.useContext)(SplitPanelContext);
  if (!ctx) {
    throw new Error("Split panel can only be used inside app layout");
  }
  return ctx;
}

// node_modules/@cloudscape-design/components/app-layout/split-panel/drawer.js
function SideSplitPanelDrawer({ displayed, children }) {
  const { isOpen, size, topOffset, bottomOffset } = useSplitPanelContext();
  const width = isOpen && children ? size : void 0;
  return import_react45.default.createElement(
    "div",
    { className: clsx_m_default(displayed && styles_css_default20["drawer-displayed"]), style: { width }, "data-testid": "side-split-panel-drawer" },
    import_react45.default.createElement("div", { className: styles_css_default20["drawer-content"], style: { width, top: topOffset, bottom: bottomOffset } }, children)
  );
}

// node_modules/@cloudscape-design/components/app-layout/split-panel/provider.js
var import_react46 = __toESM(require_react());
function SplitPanelProvider(_a) {
  var { children, size, getMaxHeight, maxWidth, onResize } = _a, rest = __rest(_a, ["children", "size", "getMaxHeight", "maxWidth", "onResize"]);
  const { position, reportSize, isOpen } = rest;
  const [maxHeight, setMaxHeight] = (0, import_react46.useState)(size);
  const minSize = position === "bottom" ? SPLIT_PANEL_MIN_HEIGHT : SPLIT_PANEL_MIN_WIDTH;
  const maxSize = position === "bottom" ? maxHeight : maxWidth;
  const cappedSize = getLimitedValue(minSize, size, maxSize);
  const relativeSize = (size - minSize) / (maxSize - minSize) * 100;
  const onResizeWithValidation = (newSize) => {
    const maxSize2 = position === "side" ? maxWidth : getMaxHeight();
    const isResizeValid = position === "side" ? maxSize2 >= SPLIT_PANEL_MIN_WIDTH : maxSize2 >= SPLIT_PANEL_MIN_HEIGHT;
    if (isOpen && isResizeValid) {
      onResize(getLimitedValue(minSize, newSize, maxSize2));
    }
  };
  (0, import_react46.useEffect)(() => {
    if (position !== "bottom") {
      return;
    }
    const handle = requestAnimationFrame(() => setMaxHeight(getMaxHeight()));
    return () => cancelAnimationFrame(handle);
  }, [size, minSize, position, getMaxHeight]);
  (0, import_react46.useEffect)(() => {
    reportSize(cappedSize);
  }, [reportSize, cappedSize]);
  (0, import_react46.useEffect)(() => {
    if (position !== "bottom") {
      return;
    }
    const handler = () => setMaxHeight(getMaxHeight());
    window.addEventListener("resize", handler);
    return () => window.removeEventListener("resize", handler);
  }, [position, getMaxHeight]);
  return import_react46.default.createElement(SplitPanelContextProvider, { value: Object.assign(Object.assign({}, rest), { size: cappedSize, relativeSize, onResize: onResizeWithValidation }) }, children);
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-split-panel-focus-control.js
var import_react47 = __toESM(require_react());
function useSplitPanelFocusControl(dependencies) {
  const refs = {
    toggle: (0, import_react47.useRef)(null),
    slider: (0, import_react47.useRef)(null),
    preferences: (0, import_react47.useRef)(null)
  };
  const lastInteraction = (0, import_react47.useRef)(null);
  (0, import_react47.useEffect)(() => {
    var _a, _b, _c, _d;
    switch ((_a = lastInteraction.current) === null || _a === void 0 ? void 0 : _a.type) {
      case "open":
        (_b = refs.slider.current) === null || _b === void 0 ? void 0 : _b.focus();
        break;
      case "close":
        (_c = refs.toggle.current) === null || _c === void 0 ? void 0 : _c.focus();
        break;
      case "position":
        (_d = refs.preferences.current) === null || _d === void 0 ? void 0 : _d.focus();
        break;
    }
    lastInteraction.current = null;
  }, dependencies);
  return {
    refs,
    setLastInteraction: (interaction) => lastInteraction.current = interaction
  };
}

// node_modules/@cloudscape-design/components/app-layout/classic.js
var ClassicAppLayout = import_react48.default.forwardRef((_a, ref) => {
  var _b, _c, _d, _e, _f, _g;
  var { navigation, navigationWidth, navigationHide, navigationOpen, tools, toolsWidth, toolsHide, toolsOpen: controlledToolsOpen, breadcrumbs, notifications, stickyNotifications, contentHeader, disableContentHeaderOverlap, content, contentType, disableContentPaddings, disableBodyScroll, maxContentWidth, minContentWidth, placement, ariaLabels, splitPanel, splitPanelSize: controlledSplitPanelSize, splitPanelOpen: controlledSplitPanelOpen, splitPanelPreferences: controlledSplitPanelPreferences, onSplitPanelPreferencesChange, onSplitPanelResize, onSplitPanelToggle, onNavigationChange, onToolsChange, drawers: controlledDrawers, onDrawerChange, activeDrawerId: controlledActiveDrawerId } = _a, rest = __rest(_a, ["navigation", "navigationWidth", "navigationHide", "navigationOpen", "tools", "toolsWidth", "toolsHide", "toolsOpen", "breadcrumbs", "notifications", "stickyNotifications", "contentHeader", "disableContentHeaderOverlap", "content", "contentType", "disableContentPaddings", "disableBodyScroll", "maxContentWidth", "minContentWidth", "placement", "ariaLabels", "splitPanel", "splitPanelSize", "splitPanelOpen", "splitPanelPreferences", "onSplitPanelPreferencesChange", "onSplitPanelResize", "onSplitPanelToggle", "onNavigationChange", "onToolsChange", "drawers", "onDrawerChange", "activeDrawerId"]);
  const __embeddedViewMode = Boolean(rest.__embeddedViewMode);
  const rootRef = (0, import_react48.useRef)(null);
  const isMobile = useMobile();
  const [toolsOpen = false, setToolsOpen] = useControllable(controlledToolsOpen, onToolsChange, false, {
    componentName: "AppLayout",
    controlledProp: "toolsOpen",
    changeHandler: "onToolsChange"
  });
  const onToolsToggle = (open) => {
    setToolsOpen(open);
    focusToolsButtons();
    fireNonCancelableEvent(onToolsChange, { open });
  };
  const { drawers, activeDrawer, minDrawerSize, activeDrawerSize, activeDrawerId, ariaLabelsWithDrawers, onActiveDrawerChange, onActiveDrawerResize } = useDrawers(Object.assign({ drawers: controlledDrawers, onDrawerChange, activeDrawerId: controlledActiveDrawerId }, rest), ariaLabels, {
    ariaLabels,
    tools,
    toolsOpen,
    toolsHide,
    toolsWidth,
    onToolsToggle
  });
  ariaLabels = ariaLabelsWithDrawers;
  const hasDrawers = !!drawers;
  const { refs: navigationRefs, setFocus: focusNavButtons } = useFocusControl(navigationOpen);
  const { refs: toolsRefs, setFocus: focusToolsButtons, loseFocus: loseToolsFocus } = useFocusControl(toolsOpen || activeDrawer !== void 0, true);
  const { refs: drawerRefs, setFocus: focusDrawersButtons, loseFocus: loseDrawersFocus } = useFocusControl(!!activeDrawerId, true, activeDrawerId);
  const onNavigationToggle = useStableCallback((open) => {
    focusNavButtons();
    fireNonCancelableEvent(onNavigationChange, { open });
  });
  const onNavigationClick = (event) => {
    const hasLink = findUpUntil2(event.target, (node) => node.tagName === "A" && !!node.href);
    if (hasLink) {
      onNavigationToggle(false);
    }
  };
  (0, import_react48.useEffect)(() => {
    if (isMobile) {
      onNavigationToggle(false);
    }
  }, [isMobile, onNavigationToggle]);
  const navigationVisible = !navigationHide && navigationOpen;
  const toolsVisible = !toolsHide && toolsOpen;
  const [headerFooterHeight, setHeaderFooterHeight] = (0, import_react48.useState)(0);
  (0, import_react48.useEffect)(() => {
    const id = requestAnimationFrame(() => setHeaderFooterHeight(placement.top + placement.bottom));
    return () => cancelAnimationFrame(id);
  }, [placement.top, placement.bottom]);
  const contentHeightStyle = {
    [disableBodyScroll ? "height" : "minHeight"]: `calc(100vh - ${headerFooterHeight}px)`
  };
  const [notificationsHeight, notificationsRef] = useContainerQuery((rect) => rect.contentBoxHeight);
  const anyPanelOpen = navigationVisible || toolsVisible || !!activeDrawer;
  const hasRenderedNotifications = notificationsHeight ? notificationsHeight > 0 : false;
  const stickyNotificationsHeight = stickyNotifications ? notificationsHeight : null;
  const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(controlledSplitPanelPreferences, onSplitPanelPreferencesChange, void 0, {
    componentName: "AppLayout",
    controlledProp: "splitPanelPreferences",
    changeHandler: "onSplitPanelPreferencesChange"
  });
  const [splitPanelOpen = false, setSplitPanelOpen] = useControllable(controlledSplitPanelOpen, onSplitPanelToggle, false, {
    componentName: "AppLayout",
    controlledProp: "splitPanelOpen",
    changeHandler: "onSplitPanelToggle"
  });
  const splitPanelPosition = (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) || "bottom";
  const [splitPanelReportedToggle, setSplitPanelReportedToggle] = (0, import_react48.useState)({
    displayed: false,
    ariaLabel: void 0
  });
  const splitPanelDisplayed = !!(splitPanel && (splitPanelReportedToggle.displayed || splitPanelOpen));
  const closedDrawerWidth = 40;
  const effectiveNavigationWidth = navigationHide ? 0 : navigationOpen ? navigationWidth : closedDrawerWidth;
  const getEffectiveToolsWidth = () => {
    if (activeDrawer && activeDrawerSize) {
      return activeDrawerSize;
    }
    if (toolsHide || drawers) {
      return 0;
    }
    if (toolsOpen) {
      return toolsWidth;
    }
    return closedDrawerWidth;
  };
  const effectiveToolsWidth = getEffectiveToolsWidth();
  const defaultSplitPanelSize = getSplitPanelDefaultSize(splitPanelPosition);
  const [splitPanelSize = defaultSplitPanelSize, setSplitPanelSize] = useControllable(controlledSplitPanelSize, onSplitPanelResize, defaultSplitPanelSize, {
    componentName: "AppLayout",
    controlledProp: "splitPanelSize",
    changeHandler: "onSplitPanelResize"
  });
  const mainContentRef = (0, import_react48.useRef)(null);
  const legacyScrollRootRef = (0, import_react48.useRef)(null);
  const { refs: splitPanelRefs, setLastInteraction: setSplitPanelLastInteraction } = useSplitPanelFocusControl([
    splitPanelPreferences,
    splitPanelOpen
  ]);
  const onSplitPanelPreferencesSet = (0, import_react48.useCallback)((detail) => {
    setSplitPanelPreferences(detail);
    setSplitPanelLastInteraction({ type: "position" });
    fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);
  }, [setSplitPanelPreferences, onSplitPanelPreferencesChange, setSplitPanelLastInteraction]);
  const onSplitPanelSizeSet = (0, import_react48.useCallback)((newSize) => {
    setSplitPanelSize(newSize);
    fireNonCancelableEvent(onSplitPanelResize, { size: newSize });
  }, [setSplitPanelSize, onSplitPanelResize]);
  const onSplitPanelToggleHandler = (0, import_react48.useCallback)(() => {
    setSplitPanelOpen(!splitPanelOpen);
    setSplitPanelLastInteraction({ type: splitPanelOpen ? "close" : "open" });
    fireNonCancelableEvent(onSplitPanelToggle, { open: !splitPanelOpen });
  }, [setSplitPanelOpen, splitPanelOpen, onSplitPanelToggle, setSplitPanelLastInteraction]);
  const getSplitPanelMaxHeight = useStableCallback(() => {
    if (typeof document === "undefined") {
      return 0;
    } else if (disableBodyScroll && legacyScrollRootRef.current) {
      const availableHeight = legacyScrollRootRef.current.clientHeight;
      return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight : availableHeight - MAIN_PANEL_MIN_HEIGHT;
    } else {
      const availableHeight = document.documentElement.clientHeight - placement.top - placement.bottom;
      return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight - CONSTRAINED_MAIN_PANEL_MIN_HEIGHT : availableHeight - MAIN_PANEL_MIN_HEIGHT;
    }
  });
  const rightDrawerBarWidth = drawers ? drawers.length > 1 ? closedDrawerWidth : 0 : 0;
  const contentPadding = 80;
  const resizableSpaceAvailable = Math.max(0, placement.width - effectiveNavigationWidth - minContentWidth - contentPadding - rightDrawerBarWidth);
  const isSplitPanelForcedPosition = isMobile || resizableSpaceAvailable - effectiveToolsWidth < SPLIT_PANEL_MIN_WIDTH;
  const finalSplitPanePosition = isSplitPanelForcedPosition ? "bottom" : splitPanelPosition;
  const splitPaneAvailableOnTheSide = splitPanelDisplayed && finalSplitPanePosition === "side";
  const sideSplitPanelSize = splitPaneAvailableOnTheSide ? splitPanelOpen ? splitPanelSize : closedDrawerWidth : 0;
  const splitPanelMaxWidth = Math.max(0, resizableSpaceAvailable - effectiveToolsWidth);
  const drawerMaxSize = Math.max(0, resizableSpaceAvailable - sideSplitPanelSize);
  const navigationClosedWidth = navigationHide || isMobile ? 0 : closedDrawerWidth;
  const contentMaxWidthStyle = !isMobile ? { maxWidth: maxContentWidth } : void 0;
  const [splitPanelReportedSize, setSplitPanelReportedSize] = (0, import_react48.useState)(0);
  const [splitPanelReportedHeaderHeight, setSplitPanelReportedHeaderHeight] = (0, import_react48.useState)(0);
  const splitPanelContextProps = {
    topOffset: placement.top + (finalSplitPanePosition === "bottom" ? stickyNotificationsHeight || 0 : 0),
    bottomOffset: placement.bottom,
    leftOffset: placement.left + (isMobile ? 0 : !navigationHide && navigationOpen ? navigationWidth : navigationClosedWidth),
    rightOffset: isMobile ? 0 : placement.right + effectiveToolsWidth + rightDrawerBarWidth,
    position: finalSplitPanePosition,
    size: splitPanelSize,
    maxWidth: splitPanelMaxWidth,
    getMaxHeight: getSplitPanelMaxHeight,
    disableContentPaddings,
    contentWidthStyles: contentMaxWidthStyle,
    isOpen: splitPanelOpen,
    isForcedPosition: isSplitPanelForcedPosition,
    onResize: onSplitPanelSizeSet,
    onToggle: onSplitPanelToggleHandler,
    onPreferencesChange: onSplitPanelPreferencesSet,
    setSplitPanelToggle: setSplitPanelReportedToggle,
    reportSize: setSplitPanelReportedSize,
    reportHeaderHeight: setSplitPanelReportedHeaderHeight,
    refs: splitPanelRefs
  };
  const splitPanelWrapped = splitPanel && import_react48.default.createElement(SplitPanelProvider, Object.assign({}, splitPanelContextProps), finalSplitPanePosition === "side" ? import_react48.default.createElement(SideSplitPanelDrawer, { displayed: splitPanelDisplayed }, splitPanel) : splitPanel);
  const contentWrapperProps = {
    contentType,
    navigationPadding: navigationHide || !!navigationOpen,
    contentWidthStyles: !isMobile ? { minWidth: minContentWidth, maxWidth: maxContentWidth } : void 0,
    toolsPadding: (
      // tools padding is displayed in one of the three cases
      // 1. Nothing on the that screen edge (no tools panel and no split panel)
      toolsHide || hasDrawers && !activeDrawer && (!splitPanelDisplayed || finalSplitPanePosition !== "side") || // 2. Tools panel is present and open
      toolsVisible || // 3. Split panel is open in side position
      splitPaneAvailableOnTheSide && splitPanelOpen
    ),
    isMobile
  };
  (0, import_react48.useImperativeHandle)(ref, () => ({
    openTools: () => onToolsToggle(true),
    closeNavigationIfNecessary: () => {
      if (isMobile) {
        onNavigationToggle(false);
      }
    },
    focusToolsClose: () => {
      if (hasDrawers) {
        focusDrawersButtons(true);
      } else {
        focusToolsButtons(true);
      }
    },
    focusActiveDrawer: () => focusDrawersButtons(true),
    focusSplitPanel: () => {
      var _a2;
      return (_a2 = splitPanelRefs.slider.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  }));
  const splitPanelBottomOffset = (_b = !splitPanelDisplayed || finalSplitPanePosition !== "bottom" ? void 0 : splitPanelOpen ? splitPanelReportedSize : splitPanelReportedHeaderHeight) !== null && _b !== void 0 ? _b : void 0;
  const [mobileBarHeight, mobileBarRef] = useContainerQuery((rect) => rect.contentBoxHeight);
  return import_react48.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default16.root, styles_css_default14.root, disableBodyScroll && styles_css_default16["root-no-scroll"]), ref: rootRef, style: contentHeightStyle },
    isMobile && !__embeddedViewMode && (!toolsHide || !navigationHide || breadcrumbs) && import_react48.default.createElement(MobileToolbar, { anyPanelOpen, toggleRefs: { navigation: navigationRefs.toggle, tools: toolsRefs.toggle }, topOffset: placement.top, ariaLabels, navigationHide, toolsHide, onNavigationOpen: () => onNavigationToggle(true), onToolsOpen: () => onToolsToggle(true), unfocusable: anyPanelOpen, mobileBarRef, drawers, activeDrawerId, onDrawerChange: (newDrawerId) => {
      onActiveDrawerChange(newDrawerId);
      if (newDrawerId !== activeDrawerId) {
        focusToolsButtons();
        focusDrawersButtons();
      }
    } }, breadcrumbs),
    import_react48.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default16.layout, disableBodyScroll && styles_css_default16["layout-no-scroll"]) },
      !navigationHide && import_react48.default.createElement(Drawer, { contentClassName: styles_css_default14.navigation, toggleClassName: styles_css_default14["navigation-toggle"], closeClassName: styles_css_default14["navigation-close"], ariaLabels: togglesConfig.navigation.getLabels(ariaLabels), bottomOffset: placement.bottom, topOffset: placement.top, isMobile, isOpen: navigationOpen, onClick: isMobile ? onNavigationClick : void 0, onToggle: onNavigationToggle, toggleRefs: navigationRefs, type: "navigation", width: navigationWidth }, navigation),
      import_react48.default.createElement(
        "main",
        { ref: legacyScrollRootRef, className: clsx_m_default(styles_css_default16["layout-main"], {
          [styles_css_default16["layout-main-scrollable"]]: disableBodyScroll,
          [styles_css_default14["disable-body-scroll-root"]]: disableBodyScroll,
          [styles_css_default16.unfocusable]: isMobile && anyPanelOpen
        }) },
        import_react48.default.createElement(
          "div",
          { style: {
            marginBottom: splitPanelBottomOffset
          } },
          notifications && import_react48.default.createElement(Notifications, { disableContentPaddings, testUtilsClassName: styles_css_default14.notifications, labels: ariaLabels, topOffset: disableBodyScroll ? 0 : placement.top, sticky: !isMobile && stickyNotifications, ref: notificationsRef }, notifications),
          (!isMobile && breadcrumbs || contentHeader) && import_react48.default.createElement(
            content_wrapper_default,
            Object.assign({}, contentWrapperProps),
            !isMobile && breadcrumbs && import_react48.default.createElement("div", { className: clsx_m_default(styles_css_default14.breadcrumbs, styles_css_default16["breadcrumbs-desktop"]) }, breadcrumbs),
            contentHeader && import_react48.default.createElement("div", { className: clsx_m_default(styles_css_default16["content-header-wrapper"], !hasRenderedNotifications && (isMobile || !breadcrumbs) && styles_css_default16["content-extra-top-padding"], !hasRenderedNotifications && !breadcrumbs && styles_css_default16["content-header-wrapper-first-child"], !disableContentHeaderOverlap && styles_css_default16["content-header-wrapper-overlapped"]) }, contentHeader)
          ),
          import_react48.default.createElement(
            content_wrapper_default,
            Object.assign({}, contentWrapperProps, {
              ref: mainContentRef,
              disablePaddings: disableContentPaddings,
              // eslint-disable-next-line react/forbid-component-props
              className: clsx_m_default(!disableContentPaddings && styles_css_default16["content-wrapper"], !disableContentPaddings && (isMobile || !breadcrumbs) && !contentHeader && styles_css_default16["content-extra-top-padding"], styles_css_default14.content, !disableContentHeaderOverlap && contentHeader && styles_css_default16["content-overlapped"], !hasRenderedNotifications && !breadcrumbs && !isMobile && !contentHeader && styles_css_default16["content-wrapper-first-child"])
            }),
            import_react48.default.createElement(AppLayoutContext.Provider, { value: {
              stickyOffsetTop: (
                // We don't support the table header being sticky in case the deprecated disableBodyScroll is enabled,
                // therefore we ensure the table header scrolls out of view by offseting a large enough value (9999px)
                (disableBodyScroll ? isMobile ? -9999 : 0 : placement.top) + (isMobile ? 0 : stickyNotificationsHeight !== null ? stickyNotificationsHeight : 0)
              ),
              stickyOffsetBottom: placement.bottom + (splitPanelBottomOffset || 0),
              mobileBarHeight: mobileBarHeight !== null && mobileBarHeight !== void 0 ? mobileBarHeight : 0
            } }, content)
          )
        ),
        finalSplitPanePosition === "bottom" && splitPanelWrapped
      ),
      finalSplitPanePosition === "side" && splitPanelWrapped,
      hasDrawers ? import_react48.default.createElement(ResizableDrawer, { contentClassName: clsx_m_default(activeDrawerId && styles_css_default14["active-drawer"], activeDrawerId === TOOLS_DRAWER_ID && styles_css_default14.tools), toggleClassName: styles_css_default14["tools-toggle"], closeClassName: clsx_m_default(styles_css_default14["active-drawer-close-button"], activeDrawerId === TOOLS_DRAWER_ID && styles_css_default14["tools-close"]), ariaLabels: {
        openLabel: (_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.triggerButton,
        closeLabel: (_d = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _d === void 0 ? void 0 : _d.closeButton,
        mainLabel: (_e = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _e === void 0 ? void 0 : _e.drawerName,
        resizeHandle: (_f = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _f === void 0 ? void 0 : _f.resizeHandle
      }, minWidth: minDrawerSize, maxWidth: drawerMaxSize, width: activeDrawerSize, bottomOffset: placement.bottom, topOffset: placement.top, isMobile, onToggle: (isOpen) => {
        if (!isOpen) {
          focusToolsButtons();
          focusDrawersButtons();
          onActiveDrawerChange(null);
        }
      }, isOpen: true, hideOpenButton: true, toggleRefs: drawerRefs, type: "tools", onLoseFocus: loseDrawersFocus, activeDrawer, onResize: (changeDetail) => onActiveDrawerResize(changeDetail), refs: drawerRefs, toolsContent: (_g = drawers === null || drawers === void 0 ? void 0 : drawers.find((drawer) => drawer.id === TOOLS_DRAWER_ID)) === null || _g === void 0 ? void 0 : _g.content }, activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.content) : !toolsHide && import_react48.default.createElement(Drawer, { contentClassName: styles_css_default14.tools, toggleClassName: styles_css_default14["tools-toggle"], closeClassName: styles_css_default14["tools-close"], ariaLabels: togglesConfig.tools.getLabels(ariaLabels), width: toolsWidth, bottomOffset: placement.bottom, topOffset: placement.top, isMobile, onToggle: onToolsToggle, isOpen: toolsOpen, toggleRefs: toolsRefs, type: "tools", onLoseFocus: loseToolsFocus }, tools),
      hasDrawers && drawers.length > 0 && import_react48.default.createElement(DrawerTriggersBar, { drawerRefs, bottomOffset: placement.bottom, topOffset: placement.top, isMobile, drawers, activeDrawerId, onDrawerChange: (newDrawerId) => {
        if (activeDrawerId !== newDrawerId) {
          focusToolsButtons();
          focusDrawersButtons();
        }
        onActiveDrawerChange(newDrawerId);
      }, ariaLabels })
    )
  );
});
var classic_default = ClassicAppLayout;

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/index.js
var import_react64 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/context.js
var import_react52 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/split-panel.js
var import_react49 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/app-layout/visual-refresh/styles.scoped.css";
var styles_css_default21 = {
  "background": "awsui_background_hyvsj_1t7qb_99",
  "scrolling-background": "awsui_scrolling-background_hyvsj_1t7qb_102",
  "sticky-background": "awsui_sticky-background_hyvsj_1t7qb_108",
  "has-sticky-notifications": "awsui_has-sticky-notifications_hyvsj_1t7qb_116",
  "breadcrumbs": "awsui_breadcrumbs_hyvsj_1t7qb_129",
  "has-sticky-background": "awsui_has-sticky-background_hyvsj_1t7qb_139",
  "drawers-container": "awsui_drawers-container_hyvsj_1t7qb_151",
  "has-open-drawer": "awsui_has-open-drawer_hyvsj_1t7qb_162",
  "disable-body-scroll": "awsui_disable-body-scroll_hyvsj_1t7qb_185",
  "drawers-desktop-triggers-container": "awsui_drawers-desktop-triggers-container_hyvsj_1t7qb_190",
  "has-multiple-triggers": "awsui_has-multiple-triggers_hyvsj_1t7qb_231",
  "drawers-mobile-triggers-container": "awsui_drawers-mobile-triggers-container_hyvsj_1t7qb_241",
  "drawers-trigger-content": "awsui_drawers-trigger-content_hyvsj_1t7qb_245",
  "drawers-trigger-overflow": "awsui_drawers-trigger-overflow_hyvsj_1t7qb_259",
  "drawers-trigger": "awsui_drawers-trigger_hyvsj_1t7qb_245",
  "drawer": "awsui_drawer_hyvsj_1t7qb_151",
  "drawer-content-container": "awsui_drawer-content-container_hyvsj_1t7qb_290",
  "drawer-close-button": "awsui_drawer-close-button_hyvsj_1t7qb_299",
  "drawer-content": "awsui_drawer-content_hyvsj_1t7qb_290",
  "drawer-content-hidden": "awsui_drawer-content-hidden_hyvsj_1t7qb_307",
  "drawer-slider": "awsui_drawer-slider_hyvsj_1t7qb_310",
  "is-drawer-open": "awsui_is-drawer-open_hyvsj_1t7qb_317",
  "content": "awsui_content_hyvsj_1t7qb_343",
  "layout": "awsui_layout_hyvsj_1t7qb_364",
  "has-max-content-width": "awsui_has-max-content-width_hyvsj_1t7qb_445",
  "content-type-dashboard": "awsui_content-type-dashboard_hyvsj_1t7qb_460",
  "content-type-table": "awsui_content-type-table_hyvsj_1t7qb_474",
  "content-type-cards": "awsui_content-type-cards_hyvsj_1t7qb_474",
  "is-overlap-disabled": "awsui_is-overlap-disabled_hyvsj_1t7qb_480",
  "is-hide-mobile-toolbar": "awsui_is-hide-mobile-toolbar_hyvsj_1t7qb_483",
  "has-content-gap-left": "awsui_has-content-gap-left_hyvsj_1t7qb_515",
  "has-content-gap-right": "awsui_has-content-gap-right_hyvsj_1t7qb_518",
  "content-first-child-notifications": "awsui_content-first-child-notifications_hyvsj_1t7qb_528",
  "has-breadcrumbs": "awsui_has-breadcrumbs_hyvsj_1t7qb_531",
  "content-first-child-header": "awsui_content-first-child-header_hyvsj_1t7qb_534",
  "has-header": "awsui_has-header_hyvsj_1t7qb_534",
  "content-first-child-main": "awsui_content-first-child-main_hyvsj_1t7qb_552",
  "disable-content-paddings": "awsui_disable-content-paddings_hyvsj_1t7qb_552",
  "has-split-panel": "awsui_has-split-panel_hyvsj_1t7qb_589",
  "split-panel-position-bottom": "awsui_split-panel-position-bottom_hyvsj_1t7qb_589",
  "block-body-scroll": "awsui_block-body-scroll_hyvsj_1t7qb_605",
  "unfocusable": "awsui_unfocusable_hyvsj_1t7qb_610",
  "container": "awsui_container_hyvsj_1t7qb_620",
  "is-navigation-open": "awsui_is-navigation-open_hyvsj_1t7qb_646",
  "is-tools-open": "awsui_is-tools-open_hyvsj_1t7qb_649",
  "is-split-panel-open": "awsui_is-split-panel-open_hyvsj_1t7qb_649",
  "split-panel-position-side": "awsui_split-panel-position-side_hyvsj_1t7qb_649",
  "has-active-drawer": "awsui_has-active-drawer_hyvsj_1t7qb_649",
  "mobile-toolbar": "awsui_mobile-toolbar_hyvsj_1t7qb_658",
  "remove-high-contrast-header": "awsui_remove-high-contrast-header_hyvsj_1t7qb_675",
  "mobile-toolbar-nav": "awsui_mobile-toolbar-nav_hyvsj_1t7qb_679",
  "mobile-toolbar-breadcrumbs": "awsui_mobile-toolbar-breadcrumbs_hyvsj_1t7qb_683",
  "mobile-toolbar-tools": "awsui_mobile-toolbar-tools_hyvsj_1t7qb_687",
  "navigation-container": "awsui_navigation-container_hyvsj_1t7qb_696",
  "show-navigation": "awsui_show-navigation_hyvsj_1t7qb_734",
  "animating": "awsui_animating_hyvsj_1t7qb_757",
  "showButtons": "awsui_showButtons_hyvsj_1t7qb_1",
  "navigation": "awsui_navigation_hyvsj_1t7qb_696",
  "openNavigation": "awsui_openNavigation_hyvsj_1t7qb_1",
  "animated-content": "awsui_animated-content_hyvsj_1t7qb_819",
  "hide-navigation": "awsui_hide-navigation_hyvsj_1t7qb_828",
  "notifications": "awsui_notifications_hyvsj_1t7qb_838",
  "sticky-notifications": "awsui_sticky-notifications_hyvsj_1t7qb_844",
  "split-panel-bottom": "awsui_split-panel-bottom_hyvsj_1t7qb_861",
  "position-bottom": "awsui_position-bottom_hyvsj_1t7qb_908",
  "openSplitPanelBottom": "awsui_openSplitPanelBottom_hyvsj_1t7qb_1",
  "split-panel-side": "awsui_split-panel-side_hyvsj_1t7qb_937",
  "position-side": "awsui_position-side_hyvsj_1t7qb_950",
  "tools-container": "awsui_tools-container_hyvsj_1t7qb_972",
  "tools": "awsui_tools_hyvsj_1t7qb_972",
  "openTools": "awsui_openTools_hyvsj_1t7qb_1",
  "has-tools-form-persistence": "awsui_has-tools-form-persistence_hyvsj_1t7qb_1063",
  "hide-tools": "awsui_hide-tools_hyvsj_1t7qb_1073",
  "show-tools": "awsui_show-tools_hyvsj_1t7qb_1085",
  "has-tools-form": "awsui_has-tools-form_hyvsj_1t7qb_1063",
  "trigger-badge-wrapper": "awsui_trigger-badge-wrapper_hyvsj_1t7qb_1168",
  "trigger": "awsui_trigger_hyvsj_1t7qb_1168",
  "selected": "awsui_selected_hyvsj_1t7qb_1242",
  "badge": "awsui_badge_hyvsj_1t7qb_1262",
  "trigger-wrapper": "awsui_trigger-wrapper_hyvsj_1t7qb_1266",
  "dot": "awsui_dot_hyvsj_1t7qb_1277"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/split-panel.js
function SplitPanel({ children }) {
  const { footerHeight, handleSplitPanelClick, handleSplitPanelPreferencesChange, handleSplitPanelResize, headerHeight, isSplitPanelForcedPosition, isSplitPanelOpen, setSplitPanelReportedSize, setSplitPanelReportedHeaderHeight, setSplitPanelToggle, splitPanelPosition, splitPanelRefs, splitPanelSize } = useAppLayoutInternals();
  const props = {
    bottomOffset: 0,
    getMaxHeight: () => {
      const availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;
      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;
    },
    maxWidth: typeof document !== "undefined" ? document.documentElement.clientWidth : Number.POSITIVE_INFINITY,
    isForcedPosition: isSplitPanelForcedPosition,
    isOpen: isSplitPanelOpen,
    leftOffset: 0,
    onPreferencesChange: handleSplitPanelPreferencesChange,
    onResize: handleSplitPanelResize,
    onToggle: handleSplitPanelClick,
    position: splitPanelPosition,
    reportSize: setSplitPanelReportedSize,
    reportHeaderHeight: setSplitPanelReportedHeaderHeight,
    rightOffset: 0,
    size: splitPanelSize || 0,
    topOffset: 0,
    setSplitPanelToggle,
    refs: splitPanelRefs
  };
  return import_react49.default.createElement(SplitPanelProvider, Object.assign({}, props), children);
}
function SplitPanelBottom() {
  const { disableBodyScroll, hasOpenDrawer, navigationOpen, isSplitPanelOpen, splitPanel, splitPanelPosition, splitPanelReportedSize, splitPanelReportedHeaderHeight } = useAppLayoutInternals();
  if (!splitPanel) {
    return null;
  }
  return import_react49.default.createElement(Transition, { in: isSplitPanelOpen !== null && isSplitPanelOpen !== void 0 ? isSplitPanelOpen : false, exit: false }, (state, transitionEventsRef) => import_react49.default.createElement(
    "section",
    { className: clsx_m_default(styles_css_default21["split-panel-bottom"], styles_css_default21[`position-${splitPanelPosition}`], {
      [styles_css_default21.animating]: state === "entering",
      [styles_css_default21["disable-body-scroll"]]: disableBodyScroll,
      [styles_css_default21["has-open-drawer"]]: hasOpenDrawer,
      [styles_css_default21["is-navigation-open"]]: navigationOpen,
      [styles_css_default21["is-split-panel-open"]]: isSplitPanelOpen
    }), ref: transitionEventsRef, style: {
      [custom_css_properties_default.splitPanelReportedSize]: `${splitPanelReportedSize}px`,
      [custom_css_properties_default.splitPanelReportedHeaderSize]: `${splitPanelReportedHeaderHeight}px`
    } },
    import_react49.default.createElement(SplitPanel, null),
    splitPanelPosition === "bottom" && splitPanel
  ));
}
function SplitPanelSide() {
  const { isSplitPanelOpen, splitPanel, splitPanelPosition, splitPanelMaxWidth, splitPanelControlId, isToolsOpen, activeDrawerId } = useAppLayoutInternals();
  if (!splitPanel) {
    return null;
  }
  return import_react49.default.createElement("section", { id: splitPanelControlId, "aria-hidden": !isSplitPanelOpen || splitPanelPosition === "bottom" ? true : false, className: clsx_m_default(styles_css_default21["split-panel-side"], styles_css_default21[`position-${splitPanelPosition}`], {
    [styles_css_default21["is-split-panel-open"]]: isSplitPanelOpen,
    [styles_css_default21["has-open-drawer"]]: !!activeDrawerId || isToolsOpen
  }), style: {
    [custom_css_properties_default.splitPanelMaxWidth]: `${splitPanelMaxWidth}px`,
    [custom_css_properties_default.splitPanelMinWidth]: `${SPLIT_PANEL_MIN_WIDTH}px`
  } }, splitPanelPosition === "side" && splitPanel);
}
function getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences) {
  let splitPanelPosition = "bottom";
  if (!isSplitPanelForcedPosition && (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) === "side") {
    splitPanelPosition = "side";
  }
  return splitPanelPosition;
}
SplitPanel.Bottom = SplitPanelBottom;
SplitPanel.Side = SplitPanelSide;
var split_panel_default = SplitPanel;

// node_modules/@cloudscape-design/components/app-layout/utils/use-resize.js
var import_react50 = __toESM(require_react());
function useResize(drawerRefObject, { activeDrawer, activeDrawerSize, onActiveDrawerResize, drawersRefs, isToolsOpen, drawersMinWidth, drawersMaxWidth }) {
  var _a;
  const [relativeSize, setRelativeSize] = (0, import_react50.useState)(0);
  const drawerSize = !activeDrawer && !isToolsOpen ? 0 : activeDrawerSize;
  (0, import_react50.useEffect)(() => {
    const handle = requestAnimationFrame(() => {
      const maxSize = drawersMaxWidth;
      setRelativeSize((drawerSize - drawersMinWidth) / (maxSize - drawersMinWidth) * 100);
    });
    return () => cancelAnimationFrame(handle);
  }, [drawerSize, drawersMaxWidth, drawersMinWidth]);
  const setSidePanelWidth = (width) => {
    const maxWidth = drawersMaxWidth;
    const size = getLimitedValue(drawersMinWidth, width, maxWidth);
    const id = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id;
    if (id && maxWidth >= drawersMinWidth) {
      onActiveDrawerResize({ size, id });
    }
  };
  const sizeControlProps = {
    position: "side",
    panelRef: drawerRefObject,
    handleRef: drawersRefs.slider,
    onResize: setSidePanelWidth,
    hasTransitions: true
  };
  const onSliderPointerDown = usePointerEvents(sizeControlProps);
  const onKeyDown = useKeyboardEvents(sizeControlProps);
  const resizeHandle = import_react50.default.createElement(
    "div",
    { ref: drawersRefs.slider, role: "slider", tabIndex: 0, "aria-label": (_a = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _a === void 0 ? void 0 : _a.resizeHandle, "aria-valuemax": 100, "aria-valuemin": 0, "aria-valuenow": relativeSize, className: clsx_m_default(styles_css_default19.slider, styles_css_default19[`slider-side`], styles_css_default14["drawers-slider"]), onKeyDown, onPointerDown: onSliderPointerDown },
    import_react50.default.createElement(resize_handler_default, { className: clsx_m_default(styles_css_default19["slider-icon"], styles_css_default19[`slider-icon-side`]) })
  );
  return { resizeHandle: import_react50.default.createElement("div", { className: styles_css_default21["drawer-slider"] }, resizeHandle), drawerSize };
}
var use_resize_default = useResize;

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/use-background-overlap.js
var import_react51 = __toESM(require_react());
function useBackgroundOverlap({ contentHeader, disableContentHeaderOverlap, layoutElement }) {
  const hasContentHeader = !!contentHeader;
  const [hasBackgroundOverlap, setHasBackgroundOverlap] = (0, import_react51.useState)(hasContentHeader);
  const updateBackgroundOverlapHeight = (0, import_react51.useCallback)((height) => {
    const hasOverlap = hasContentHeader || height > 0;
    setHasBackgroundOverlap(hasOverlap);
    const element = typeof layoutElement !== "function" && (layoutElement === null || layoutElement === void 0 ? void 0 : layoutElement.current);
    if (!element) {
      return;
    }
    if (disableContentHeaderOverlap || !hasOverlap || height <= 0) {
      element.style.removeProperty(custom_css_properties_default.overlapHeight);
    } else {
      element.style.setProperty(custom_css_properties_default.overlapHeight, `${height}px`);
    }
  }, [hasContentHeader, layoutElement, disableContentHeaderOverlap]);
  return {
    hasBackgroundOverlap,
    updateBackgroundOverlapHeight
  };
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/context.js
var AppLayoutInternalsContext = (0, import_react52.createContext)(null);
function useAppLayoutInternals() {
  const ctx = (0, import_react52.useContext)(AppLayoutInternalsContext);
  if (!ctx) {
    throw new Error("Invariant violation: this context is only available inside app layout");
  }
  return ctx;
}
var AppLayoutInternalsProvider = import_react52.default.forwardRef((props, forwardRef16) => {
  var _a, _b, _c, _d, _e;
  const { toolsHide, toolsOpen: controlledToolsOpen, navigationHide, navigationOpen, contentType, placement, children, splitPanel } = props;
  const isMobile = useMobile();
  const __embeddedViewMode = Boolean(props.__embeddedViewMode);
  const [hasStickyBackground, setHasStickyBackground] = (0, import_react52.useState)(false);
  const geckoMaxCssLength = ((1 << 30) - 1) / 60;
  const halfGeckoMaxCssLength = geckoMaxCssLength / 2;
  const maxContentWidth = props.maxContentWidth && props.maxContentWidth > halfGeckoMaxCssLength ? halfGeckoMaxCssLength : (_a = props.maxContentWidth) !== null && _a !== void 0 ? _a : 0;
  const minContentWidth = (_b = props.minContentWidth) !== null && _b !== void 0 ? _b : 280;
  const { refs: navigationRefs, setFocus: focusNavButtons } = useFocusControl(navigationOpen);
  const handleNavigationClick = useStableCallback(function handleNavigationChange(isOpen) {
    focusNavButtons();
    fireNonCancelableEvent(props.onNavigationChange, { open: isOpen });
  });
  (0, import_react52.useEffect)(() => {
    if (isMobile) {
      handleNavigationClick(false);
    }
  }, [isMobile, handleNavigationClick]);
  const toolsWidth = props.toolsWidth;
  const [isToolsOpen = false, setIsToolsOpen] = useControllable(controlledToolsOpen, props.onToolsChange, false, {
    componentName: "AppLayout",
    controlledProp: "toolsOpen",
    changeHandler: "onToolsChange"
  });
  const { refs: toolsRefs, setFocus: focusToolsButtons, loseFocus: loseToolsFocus } = useFocusControl(isToolsOpen, true);
  const handleToolsClick = (0, import_react52.useCallback)(function handleToolsChange(isOpen, skipFocusControl) {
    setIsToolsOpen(isOpen);
    !skipFocusControl && focusToolsButtons();
    fireNonCancelableEvent(props.onToolsChange, { open: isOpen });
  }, [props.onToolsChange, setIsToolsOpen, focusToolsButtons]);
  const [splitPanelMaxWidth, setSplitPanelMaxWidth] = (0, import_react52.useState)(SPLIT_PANEL_MIN_WIDTH);
  const [isSplitPanelOpen, setIsSplitPanelOpen] = useControllable(props.splitPanelOpen, props.onSplitPanelToggle, false, { componentName: "AppLayout", controlledProp: "splitPanelOpen", changeHandler: "onSplitPanelToggle" });
  const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(props.splitPanelPreferences, props.onSplitPanelPreferencesChange, void 0, {
    componentName: "AppLayout",
    controlledProp: "splitPanelPreferences",
    changeHandler: "onSplitPanelPreferencesChange"
  });
  const { refs: splitPanelRefs, setLastInteraction: setSplitPanelLastInteraction } = useSplitPanelFocusControl([
    splitPanelPreferences,
    isSplitPanelOpen
  ]);
  const handleSplitPanelClick = (0, import_react52.useCallback)(function handleSplitPanelChange() {
    setIsSplitPanelOpen(!isSplitPanelOpen);
    setSplitPanelLastInteraction({ type: isSplitPanelOpen ? "close" : "open" });
    fireNonCancelableEvent(props.onSplitPanelToggle, { open: !isSplitPanelOpen });
  }, [props.onSplitPanelToggle, isSplitPanelOpen, setIsSplitPanelOpen, setSplitPanelLastInteraction]);
  const isSplitPanelForcedPosition = isMobile || SPLIT_PANEL_MIN_WIDTH > splitPanelMaxWidth;
  const splitPanelPosition = getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences);
  const [splitPanelReportedSize, setSplitPanelReportedSize] = (0, import_react52.useState)(0);
  const [splitPanelReportedHeaderHeight, setSplitPanelReportedHeaderHeight] = (0, import_react52.useState)(0);
  const [splitPanelToggle, setSplitPanelToggle] = (0, import_react52.useState)({
    displayed: false,
    ariaLabel: void 0
  });
  const splitPanelDisplayed = !!(splitPanelToggle.displayed || isSplitPanelOpen) && !!splitPanel;
  const splitPanelControlId = useUniqueId("split-panel-");
  const toolsControlId = useUniqueId("tools-");
  const [splitPanelSize, setSplitPanelSize] = useControllable(props.splitPanelSize, props.onSplitPanelResize, getSplitPanelDefaultSize(splitPanelPosition), { componentName: "AppLayout", controlledProp: "splitPanelSize", changeHandler: "onSplitPanelResize" });
  const handleSplitPanelResize = (0, import_react52.useCallback)((size) => {
    setSplitPanelSize(size);
    fireNonCancelableEvent(props.onSplitPanelResize, { size });
  }, [props.onSplitPanelResize, setSplitPanelSize]);
  const handleSplitPanelPreferencesChange = (0, import_react52.useCallback)(function handleSplitPanelChange(detail) {
    setSplitPanelPreferences(detail);
    setSplitPanelLastInteraction({ type: "position" });
    fireNonCancelableEvent(props.onSplitPanelPreferencesChange, detail);
  }, [props.onSplitPanelPreferencesChange, setSplitPanelPreferences, setSplitPanelLastInteraction]);
  const _f = useDrawers(props, props.ariaLabels, {
    ariaLabels: props.ariaLabels,
    toolsHide,
    toolsOpen: isToolsOpen,
    tools: props.tools,
    toolsWidth,
    onToolsToggle: handleToolsClick
  }), { drawers, activeDrawer, activeDrawerId, minDrawerSize: drawersMinWidth, onActiveDrawerChange, onActiveDrawerResize, activeDrawerSize } = _f, drawersProps = __rest(_f, ["drawers", "activeDrawer", "activeDrawerId", "minDrawerSize", "onActiveDrawerChange", "onActiveDrawerResize", "activeDrawerSize"]);
  const [drawersMaxWidth, setDrawersMaxWidth] = (0, import_react52.useState)(toolsWidth);
  const hasDrawers = !!drawers && drawers.length > 0;
  const { refs: drawersRefs, setFocus: focusDrawersButtons, loseFocus: loseDrawersFocus } = useFocusControl(!!activeDrawerId, true, activeDrawerId);
  const drawerRef = (0, import_react52.useRef)(null);
  const { resizeHandle, drawerSize } = use_resize_default(drawerRef, {
    onActiveDrawerResize,
    activeDrawerSize,
    activeDrawer,
    drawersRefs,
    isToolsOpen,
    drawersMaxWidth,
    drawersMinWidth
  });
  const handleDrawersClick = (id, skipFocusControl) => {
    const newActiveDrawerId = id !== activeDrawerId ? id : null;
    onActiveDrawerChange(newActiveDrawerId);
    !skipFocusControl && focusDrawersButtons();
  };
  let drawersTriggerCount = drawers ? drawers.length : !toolsHide ? 1 : 0;
  if (splitPanelDisplayed && splitPanelPosition === "side") {
    drawersTriggerCount++;
  }
  const hasOpenDrawer = !!activeDrawerId || !toolsHide && isToolsOpen || splitPanelDisplayed && splitPanelPosition === "side" && isSplitPanelOpen;
  const hasDrawerViewportOverlay = isMobile && (!!activeDrawerId || !navigationHide && navigationOpen || !toolsHide && isToolsOpen);
  const layoutElement = (0, import_react52.useRef)(null);
  const mainElement = (0, import_react52.useRef)(null);
  const [mainOffsetLeft, setMainOffsetLeft] = (0, import_react52.useState)(0);
  const { hasBackgroundOverlap, updateBackgroundOverlapHeight } = useBackgroundOverlap({
    contentHeader: props.contentHeader,
    disableContentHeaderOverlap: props.disableContentHeaderOverlap,
    layoutElement
  });
  (0, import_react52.useLayoutEffect)(function handleMainOffsetLeft() {
    var _a2, _b2;
    setMainOffsetLeft((_b2 = (_a2 = mainElement === null || mainElement === void 0 ? void 0 : mainElement.current) === null || _a2 === void 0 ? void 0 : _a2.offsetLeft) !== null && _b2 !== void 0 ? _b2 : 0);
  }, [placement.width, navigationOpen, isToolsOpen, splitPanelReportedSize]);
  (0, import_react52.useEffect)(function handleBodyScroll() {
    if (isMobile && (navigationOpen || isToolsOpen || !!activeDrawer)) {
      document.body.classList.add(styles_css_default21["block-body-scroll"]);
    } else {
      document.body.classList.remove(styles_css_default21["block-body-scroll"]);
    }
    return function cleanup() {
      document.body.classList.remove(styles_css_default21["block-body-scroll"]);
    };
  }, [isMobile, navigationOpen, isToolsOpen, activeDrawer]);
  const [notificationsContainerQuery, notificationsElement] = useContainerQuery((rect) => rect.contentBoxHeight);
  const notificationsHeight = notificationsContainerQuery !== null && notificationsContainerQuery !== void 0 ? notificationsContainerQuery : 0;
  const hasNotificationsContent = notificationsHeight > 0;
  let offsetBottom = placement.bottom;
  if (splitPanelDisplayed && splitPanelPosition === "bottom") {
    if (isSplitPanelOpen) {
      offsetBottom += splitPanelReportedSize;
    } else {
      offsetBottom += splitPanelReportedHeaderHeight;
    }
  }
  (0, import_react52.useLayoutEffect)(function handleSplitPanelMaxWidth() {
    const contentGapRight = 50;
    const toolsFormOffsetWidth = 120;
    const getPanelOffsetWidth = () => {
      if (drawers) {
        return activeDrawerId ? drawerSize : 0;
      }
      return isToolsOpen ? toolsWidth : 0;
    };
    setSplitPanelMaxWidth(placement.width - mainOffsetLeft - minContentWidth - contentGapRight - toolsFormOffsetWidth - getPanelOffsetWidth());
    setDrawersMaxWidth(placement.width - mainOffsetLeft - minContentWidth - contentGapRight - toolsFormOffsetWidth);
  }, [
    activeDrawerId,
    drawerSize,
    drawers,
    navigationOpen,
    isToolsOpen,
    placement.width,
    mainOffsetLeft,
    minContentWidth,
    toolsWidth
  ]);
  (0, import_react52.useImperativeHandle)(forwardRef16, function createImperativeHandle() {
    return {
      closeNavigationIfNecessary: function() {
        isMobile && handleNavigationClick(false);
      },
      openTools: function() {
        handleToolsClick(true);
      },
      focusToolsClose: () => {
        if (hasDrawers) {
          focusDrawersButtons(true);
        } else {
          focusToolsButtons(true);
        }
      },
      focusActiveDrawer: () => focusDrawersButtons(true),
      focusSplitPanel: () => {
        var _a2;
        return (_a2 = splitPanelRefs.slider.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
      }
    };
  }, [
    isMobile,
    handleNavigationClick,
    handleToolsClick,
    focusToolsButtons,
    focusDrawersButtons,
    splitPanelRefs.slider,
    hasDrawers
  ]);
  return import_react52.default.createElement(
    AppLayoutInternalsContext.Provider,
    { value: Object.assign(Object.assign({}, props), {
      activeDrawerId,
      contentType,
      drawers,
      drawersAriaLabel: (_c = drawersProps.ariaLabelsWithDrawers) === null || _c === void 0 ? void 0 : _c.drawers,
      drawersOverflowAriaLabel: (_d = drawersProps.ariaLabelsWithDrawers) === null || _d === void 0 ? void 0 : _d.drawersOverflow,
      drawersOverflowWithBadgeAriaLabel: (_e = drawersProps.ariaLabelsWithDrawers) === null || _e === void 0 ? void 0 : _e.drawersOverflowWithBadge,
      drawersRefs,
      drawersMinWidth,
      drawersMaxWidth,
      drawerSize,
      drawerRef,
      resizeHandle,
      drawersTriggerCount,
      headerHeight: placement.top,
      footerHeight: placement.bottom,
      hasDrawerViewportOverlay,
      handleDrawersClick,
      handleNavigationClick,
      handleSplitPanelClick,
      handleSplitPanelPreferencesChange,
      handleSplitPanelResize,
      handleToolsClick,
      hasBackgroundOverlap,
      hasNotificationsContent,
      hasOpenDrawer,
      hasStickyBackground,
      isBackgroundOverlapDisabled: props.disableContentHeaderOverlap || !hasBackgroundOverlap,
      isMobile,
      isSplitPanelForcedPosition,
      isSplitPanelOpen,
      isToolsOpen,
      layoutElement,
      layoutWidth: placement.width,
      loseToolsFocus,
      loseDrawersFocus,
      mainElement,
      mainOffsetLeft,
      maxContentWidth,
      minContentWidth,
      navigationHide,
      navigationRefs,
      notificationsElement,
      notificationsHeight,
      offsetBottom,
      setHasStickyBackground,
      setSplitPanelReportedSize,
      setSplitPanelReportedHeaderHeight,
      splitPanel,
      splitPanelControlId,
      splitPanelDisplayed,
      splitPanelMaxWidth,
      splitPanelPosition,
      splitPanelPreferences,
      splitPanelReportedSize,
      splitPanelReportedHeaderHeight,
      splitPanelSize,
      splitPanelToggle,
      setSplitPanelToggle,
      splitPanelRefs,
      toolsControlId,
      toolsHide,
      toolsOpen: isToolsOpen,
      toolsWidth,
      toolsRefs,
      __embeddedViewMode
    }) },
    import_react52.default.createElement(
      AppLayoutContext.Provider,
      { value: {
        stickyOffsetBottom: offsetBottom,
        stickyOffsetTop: 0,
        setHasStickyBackground
      } },
      import_react52.default.createElement(DynamicOverlapContext.Provider, { value: updateBackgroundOverlapHeight }, children)
    )
  );
});

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/background.js
var import_react53 = __toESM(require_react());
function Background() {
  const { breadcrumbs, hasBackgroundOverlap, hasNotificationsContent, hasStickyBackground, isMobile, stickyNotifications } = useAppLayoutInternals();
  if (!hasNotificationsContent && (!breadcrumbs || isMobile) && !hasBackgroundOverlap) {
    return null;
  }
  return import_react53.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default21.background, getContentHeaderClassName()) },
    import_react53.default.createElement("div", { className: styles_css_default21["scrolling-background"] }),
    !isMobile && hasStickyBackground && import_react53.default.createElement("div", { className: clsx_m_default(styles_css_default21["sticky-background"], {
      [styles_css_default21["has-sticky-notifications"]]: stickyNotifications
    }) })
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/breadcrumbs.js
var import_react54 = __toESM(require_react());
function Breadcrumbs() {
  const { breadcrumbs, hasStickyBackground, isMobile } = useAppLayoutInternals();
  if (isMobile || !breadcrumbs) {
    return null;
  }
  return import_react54.default.createElement("div", { className: clsx_m_default(styles_css_default21.breadcrumbs, styles_css_default14.breadcrumbs, {
    [styles_css_default21["has-sticky-background"]]: hasStickyBackground
  }, getContentHeaderClassName()) }, breadcrumbs);
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/drawers.js
var import_react56 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/trigger-button.js
var import_react55 = __toESM(require_react());
function TriggerButton({ ariaLabel, className: className2, iconName, iconSvg, ariaExpanded, ariaControls, onClick, testId, badge, selected = false }, ref) {
  return import_react55.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default21["trigger-wrapper"], shouldRemoveHighContrastHeader() && styles_css_default21["remove-high-contrast-header"]) },
    import_react55.default.createElement(
      "button",
      { "aria-expanded": ariaExpanded, "aria-controls": ariaControls, "aria-haspopup": true, "aria-label": ariaLabel, className: clsx_m_default(styles_css_default21.trigger, {
        [styles_css_default21.selected]: selected,
        [styles_css_default21.badge]: badge
      }, className2), onClick, ref, type: "button", "data-testid": testId },
      import_react55.default.createElement(
        "span",
        { className: clsx_m_default(badge && styles_css_default21["trigger-badge-wrapper"]) },
        import_react55.default.createElement(internal_default, { name: iconName, svg: iconSvg })
      )
    ),
    badge && import_react55.default.createElement("div", { className: clsx_m_default(styles_css_default21.dot) })
  );
}
var trigger_button_default = import_react55.default.forwardRef(TriggerButton);

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/drawers.js
function Drawers() {
  const { disableBodyScroll, drawers, drawersTriggerCount, hasDrawerViewportOverlay, hasOpenDrawer, navigationOpen, navigationHide, isMobile } = useAppLayoutInternals();
  const isUnfocusable = hasDrawerViewportOverlay && navigationOpen && !navigationHide;
  if (!drawers || drawersTriggerCount === 0) {
    return null;
  }
  return import_react56.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default21["drawers-container"], {
      [styles_css_default21["disable-body-scroll"]]: disableBodyScroll,
      [styles_css_default21["has-open-drawer"]]: hasOpenDrawer,
      [styles_css_default21.unfocusable]: isUnfocusable
    }) },
    import_react56.default.createElement(split_panel_default.Side, null),
    import_react56.default.createElement(ActiveDrawer, null),
    !isMobile && import_react56.default.createElement(DesktopTriggers, null)
  );
}
function ActiveDrawer() {
  var _a, _b, _c, _d;
  const { activeDrawerId, ariaLabels, drawers, drawersRefs, handleDrawersClick, handleToolsClick, hasDrawerViewportOverlay, isMobile, navigationOpen, navigationHide, loseDrawersFocus, resizeHandle, drawerSize, drawersMinWidth, drawersMaxWidth, drawerRef } = useAppLayoutInternals();
  const activeDrawer = (_a = drawers === null || drawers === void 0 ? void 0 : drawers.find((item) => item.id === activeDrawerId)) !== null && _a !== void 0 ? _a : null;
  const computedAriaLabels = {
    closeButton: activeDrawerId ? (_b = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.closeButton : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose,
    content: activeDrawerId ? (_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.drawerName : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools
  };
  const isHidden = !activeDrawerId;
  const isUnfocusable = isHidden || hasDrawerViewportOverlay && navigationOpen && !navigationHide;
  const isToolsDrawer = activeDrawerId === TOOLS_DRAWER_ID;
  const toolsContent = (_d = drawers === null || drawers === void 0 ? void 0 : drawers.find((drawer) => drawer.id === TOOLS_DRAWER_ID)) === null || _d === void 0 ? void 0 : _d.content;
  const size = getLimitedValue(drawersMinWidth, drawerSize, drawersMaxWidth);
  return import_react56.default.createElement(
    "aside",
    { id: activeDrawerId !== null && activeDrawerId !== void 0 ? activeDrawerId : void 0, "aria-hidden": isHidden, "aria-label": computedAriaLabels.content, className: clsx_m_default(styles_css_default21.drawer, {
      [styles_css_default21["is-drawer-open"]]: activeDrawerId,
      [styles_css_default21.unfocusable]: isUnfocusable,
      [styles_css_default14["active-drawer"]]: activeDrawerId,
      [styles_css_default14.tools]: isToolsDrawer
    }), style: Object.assign({}, !isMobile && drawerSize && { [custom_css_properties_default.drawerSize]: `${size}px` }), ref: drawerRef, onBlur: (e) => {
      if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {
        loseDrawersFocus();
      }
    } },
    !isMobile && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.resizable) && resizeHandle,
    import_react56.default.createElement(
      "div",
      { className: styles_css_default21["drawer-content-container"] },
      import_react56.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default21["drawer-close-button"]) },
        import_react56.default.createElement(InternalButton, { ariaLabel: computedAriaLabels.closeButton, className: clsx_m_default({
          [styles_css_default14["active-drawer-close-button"]]: activeDrawerId,
          [styles_css_default14["tools-close"]]: isToolsDrawer
        }), formAction: "none", iconName: isMobile ? "close" : "angle-right", onClick: () => {
          handleDrawersClick(activeDrawerId);
          handleToolsClick(false);
        }, ref: drawersRefs.close, variant: "icon" })
      ),
      toolsContent && import_react56.default.createElement("div", { className: clsx_m_default(styles_css_default21["drawer-content"], activeDrawerId !== TOOLS_DRAWER_ID && styles_css_default21["drawer-content-hidden"]) }, toolsContent),
      activeDrawerId !== TOOLS_DRAWER_ID && import_react56.default.createElement("div", { className: styles_css_default21["drawer-content"] }, activeDrawerId && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.content))
    )
  );
}
function DesktopTriggers() {
  const { activeDrawerId, drawers, drawersAriaLabel, drawersOverflowAriaLabel, drawersOverflowWithBadgeAriaLabel, drawersRefs, drawersTriggerCount, handleDrawersClick, handleSplitPanelClick, hasOpenDrawer, isSplitPanelOpen, splitPanel, splitPanelControlId, splitPanelDisplayed, splitPanelPosition, splitPanelRefs, splitPanelToggle, splitPanelReportedHeaderHeight, splitPanelReportedSize } = useAppLayoutInternals();
  const hasMultipleTriggers = drawersTriggerCount > 1;
  const hasSplitPanel = splitPanel && splitPanelDisplayed && splitPanelPosition === "side";
  const previousActiveDrawerId = (0, import_react56.useRef)(activeDrawerId);
  const [containerHeight, triggersContainerRef] = useContainerQuery((rect) => rect.contentBoxHeight);
  if (activeDrawerId) {
    previousActiveDrawerId.current = activeDrawerId;
  }
  const splitPanelHeight = isSplitPanelOpen && splitPanelPosition === "bottom" ? splitPanelReportedSize : splitPanelReportedHeaderHeight;
  const getIndexOfOverflowItem = () => {
    if (containerHeight) {
      const ITEM_HEIGHT = 48;
      const overflowSpot = activeDrawerId && isSplitPanelOpen ? (containerHeight - splitPanelReportedHeaderHeight) / 1.5 : (containerHeight - splitPanelHeight) / 1.5;
      const index = Math.floor(overflowSpot / ITEM_HEIGHT);
      let splitPanelItem = 0;
      if (hasSplitPanel && splitPanelToggle.displayed) {
        splitPanelItem = 1;
      }
      return index - splitPanelItem;
    }
    return 0;
  };
  const { visibleItems, overflowItems } = splitItems(drawers !== null && drawers !== void 0 ? drawers : void 0, getIndexOfOverflowItem(), activeDrawerId);
  const overflowMenuHasBadge = !!overflowItems.find((item) => item.badge);
  return import_react56.default.createElement(
    "aside",
    { className: clsx_m_default(styles_css_default21["drawers-desktop-triggers-container"], {
      [styles_css_default21["has-multiple-triggers"]]: hasMultipleTriggers,
      [styles_css_default21["has-open-drawer"]]: hasOpenDrawer
    }), "aria-label": drawersAriaLabel, ref: triggersContainerRef, role: "region" },
    import_react56.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default21["drawers-trigger-content"], {
        [styles_css_default21["has-multiple-triggers"]]: hasMultipleTriggers,
        [styles_css_default21["has-open-drawer"]]: hasOpenDrawer
      }), role: "toolbar", "aria-orientation": "vertical" },
      visibleItems.map((item) => {
        var _a;
        return import_react56.default.createElement(trigger_button_default, { ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton, ariaExpanded: item.id === activeDrawerId, ariaControls: activeDrawerId === item.id ? item.id : void 0, className: clsx_m_default(styles_css_default21["drawers-trigger"], styles_css_default14["drawers-trigger"], item.id === TOOLS_DRAWER_ID && styles_css_default14["tools-toggle"]), iconName: item.trigger.iconName, iconSvg: item.trigger.iconSvg, key: item.id, onClick: () => handleDrawersClick(item.id), ref: item.id === previousActiveDrawerId.current ? drawersRefs.toggle : void 0, selected: item.id === activeDrawerId, badge: item.badge, testId: `awsui-app-layout-trigger-${item.id}` });
      }),
      overflowItems.length > 0 && import_react56.default.createElement(OverflowMenu, { items: overflowItems, ariaLabel: overflowMenuHasBadge ? drawersOverflowWithBadgeAriaLabel : drawersOverflowAriaLabel, customTriggerBuilder: ({ onClick, triggerRef, ariaLabel, ariaExpanded, testUtilsClass }) => import_react56.default.createElement(trigger_button_default, { ref: triggerRef, ariaLabel, ariaExpanded, badge: overflowMenuHasBadge, className: clsx_m_default(styles_css_default21["drawers-trigger"], styles_css_default14["drawers-trigger"], testUtilsClass), iconName: "ellipsis", onClick }), onItemClick: ({ detail }) => {
        handleDrawersClick(detail.id);
      } }),
      hasSplitPanel && splitPanelToggle.displayed && import_react56.default.createElement(trigger_button_default, { ariaLabel: splitPanelToggle.ariaLabel, ariaControls: splitPanelControlId, ariaExpanded: !!isSplitPanelOpen, className: clsx_m_default(styles_css_default21["drawers-trigger"], styles_css_default19["open-button"]), iconName: "view-vertical", onClick: () => handleSplitPanelClick(), selected: hasSplitPanel && isSplitPanelOpen, ref: splitPanelRefs.toggle })
    )
  );
}
function MobileTriggers() {
  const { activeDrawerId, drawers, drawersAriaLabel, drawersOverflowAriaLabel, drawersOverflowWithBadgeAriaLabel, drawersRefs, handleDrawersClick, hasDrawerViewportOverlay } = useAppLayoutInternals();
  const previousActiveDrawerId = (0, import_react56.useRef)(activeDrawerId);
  if (!drawers) {
    return null;
  }
  if (activeDrawerId) {
    previousActiveDrawerId.current = activeDrawerId;
  }
  const { visibleItems, overflowItems } = splitItems(drawers, 2, activeDrawerId);
  const overflowMenuHasBadge = !!overflowItems.find((item) => item.badge);
  return import_react56.default.createElement(
    "aside",
    { "aria-hidden": hasDrawerViewportOverlay, className: clsx_m_default({
      [styles_css_default21.unfocusable]: hasDrawerViewportOverlay
    }), "aria-label": drawersAriaLabel, role: "region" },
    import_react56.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default21["drawers-mobile-triggers-container"]), role: "toolbar", "aria-orientation": "horizontal" },
      visibleItems.map((item) => {
        var _a;
        return import_react56.default.createElement(InternalButton, { ariaExpanded: item.id === activeDrawerId, ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton, className: clsx_m_default(styles_css_default21["drawers-trigger"], styles_css_default14["drawers-trigger"], item.id === TOOLS_DRAWER_ID && styles_css_default14["tools-toggle"]), disabled: hasDrawerViewportOverlay, ref: item.id === previousActiveDrawerId.current ? drawersRefs.toggle : void 0, formAction: "none", iconName: item.trigger.iconName, iconSvg: item.trigger.iconSvg, badge: item.badge, key: item.id, onClick: () => handleDrawersClick(item.id), variant: "icon", __nativeAttributes: { "aria-haspopup": true, "data-testid": `awsui-app-layout-trigger-${item.id}` } });
      }),
      overflowItems.length > 0 && import_react56.default.createElement(OverflowMenu, { items: overflowItems, ariaLabel: overflowMenuHasBadge ? drawersOverflowWithBadgeAriaLabel : drawersOverflowAriaLabel, onItemClick: ({ detail }) => handleDrawersClick(detail.id) })
    )
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/header.js
var import_react57 = __toESM(require_react());
function Header() {
  const { breadcrumbs, contentHeader, hasDrawerViewportOverlay, hasNotificationsContent } = useAppLayoutInternals();
  if (!contentHeader) {
    return null;
  }
  return import_react57.default.createElement("header", { className: clsx_m_default(styles_css_default21.content, {
    [styles_css_default21["has-breadcrumbs"]]: breadcrumbs,
    [styles_css_default21["has-notifications-content"]]: hasNotificationsContent,
    [styles_css_default21.unfocusable]: hasDrawerViewportOverlay
  }, getContentHeaderClassName()) }, contentHeader);
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/layout.js
var import_react58 = __toESM(require_react());
function Layout({ children }) {
  const { breadcrumbs, contentHeader, contentType, disableBodyScroll, disableContentPaddings, drawersTriggerCount, footerHeight, hasNotificationsContent, hasStickyBackground, hasOpenDrawer, headerHeight, isBackgroundOverlapDisabled, isMobile, navigationOpen, layoutElement, layoutWidth, mainOffsetLeft, maxContentWidth, minContentWidth, navigationHide, notificationsHeight, __embeddedViewMode, splitPanelPosition, stickyNotifications, splitPanelDisplayed } = useAppLayoutInternals();
  const contentFirstChild = getContentFirstChild(breadcrumbs, contentHeader, hasNotificationsContent, isMobile);
  const hasContentGapLeft = navigationOpen || navigationHide;
  const hasContentGapRight = drawersTriggerCount === 0 || hasOpenDrawer;
  return import_react58.default.createElement("main", { className: clsx_m_default(styles_css_default21.layout, styles_css_default21[`content-first-child-${contentFirstChild}`], styles_css_default21[`content-type-${contentType}`], styles_css_default21[`split-panel-position-${splitPanelPosition !== null && splitPanelPosition !== void 0 ? splitPanelPosition : "bottom"}`], {
    [styles_css_default21["disable-body-scroll"]]: disableBodyScroll,
    [styles_css_default14["disable-body-scroll-root"]]: disableBodyScroll,
    [styles_css_default21["disable-content-paddings"]]: disableContentPaddings,
    [styles_css_default21["has-breadcrumbs"]]: breadcrumbs && !isMobile,
    [styles_css_default21["has-content-gap-left"]]: hasContentGapLeft,
    [styles_css_default21["has-content-gap-right"]]: hasContentGapRight,
    [styles_css_default21["has-header"]]: contentHeader,
    [styles_css_default21["has-max-content-width"]]: maxContentWidth && maxContentWidth > 0,
    [styles_css_default21["has-split-panel"]]: splitPanelDisplayed,
    [styles_css_default21["has-sticky-background"]]: hasStickyBackground,
    [styles_css_default21["has-sticky-notifications"]]: stickyNotifications && hasNotificationsContent,
    [styles_css_default21["is-overlap-disabled"]]: isBackgroundOverlapDisabled,
    [styles_css_default21["is-hide-mobile-toolbar"]]: __embeddedViewMode
  }, styles_css_default14.root), ref: layoutElement, style: Object.assign(Object.assign(Object.assign({ [custom_css_properties_default.headerHeight]: `${headerHeight}px`, [custom_css_properties_default.footerHeight]: `${footerHeight}px`, [custom_css_properties_default.layoutWidth]: `${layoutWidth}px`, [custom_css_properties_default.mainOffsetLeft]: `${mainOffsetLeft}px` }, maxContentWidth && { [custom_css_properties_default.maxContentWidth]: `${maxContentWidth}px` }), minContentWidth && { [custom_css_properties_default.minContentWidth]: `${minContentWidth}px` }), { [custom_css_properties_default.notificationsHeight]: `${notificationsHeight}px` }) }, children);
}
function getContentFirstChild(breadcrumbs, contentHeader, hasNotificationsContent, isMobile) {
  let contentFirstChild = "main";
  if (hasNotificationsContent) {
    contentFirstChild = "notifications";
  } else if (breadcrumbs && !isMobile) {
    contentFirstChild = "breadcrumbs";
  } else if (contentHeader) {
    contentFirstChild = "header";
  }
  return contentFirstChild;
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/main.js
var import_react59 = __toESM(require_react());
function Main() {
  const { content, disableContentPaddings, footerHeight, hasDrawerViewportOverlay, navigationOpen, isSplitPanelOpen, isToolsOpen, mainElement, offsetBottom, splitPanelDisplayed, splitPanelPosition, activeDrawerId } = useAppLayoutInternals();
  const splitPanelHeight = offsetBottom - footerHeight;
  return import_react59.default.createElement("div", { className: clsx_m_default(styles_css_default21.container, styles_css_default21[`split-panel-position-${splitPanelPosition !== null && splitPanelPosition !== void 0 ? splitPanelPosition : "bottom"}`], {
    [styles_css_default21["disable-content-paddings"]]: disableContentPaddings,
    [styles_css_default21["has-split-panel"]]: splitPanelDisplayed,
    [styles_css_default21["is-navigation-open"]]: navigationOpen,
    [styles_css_default21["is-tools-open"]]: isToolsOpen,
    [styles_css_default21["has-active-drawer"]]: !!activeDrawerId,
    [styles_css_default21["is-split-panel-open"]]: isSplitPanelOpen,
    [styles_css_default21.unfocusable]: hasDrawerViewportOverlay
  }, styles_css_default14.content), ref: mainElement, style: {
    [custom_css_properties_default.splitPanelHeight]: `${splitPanelHeight}px`
  } }, content);
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/mobile-toolbar.js
var import_react60 = __toESM(require_react());
function MobileToolbar2() {
  var _a, _b, _c;
  const { ariaLabels, breadcrumbs, drawers, handleNavigationClick, handleToolsClick, hasDrawerViewportOverlay, isMobile, navigationOpen, __embeddedViewMode, isToolsOpen, navigationHide, navigationRefs, toolsHide, toolsRefs } = useAppLayoutInternals();
  if (!isMobile || __embeddedViewMode || navigationHide && !breadcrumbs && toolsHide && (!drawers || drawers.length === 0)) {
    return null;
  }
  return import_react60.default.createElement(
    "section",
    { className: clsx_m_default(styles_css_default21["mobile-toolbar"], [styles_css_default14["mobile-bar"]], {
      [styles_css_default21["has-breadcrumbs"]]: breadcrumbs,
      [styles_css_default21.unfocusable]: hasDrawerViewportOverlay
    }, styles_css_default14["mobile-bar"], getContentHeaderClassName(), shouldRemoveHighContrastHeader() && styles_css_default21["remove-high-contrast-header"]) },
    !navigationHide && import_react60.default.createElement(
      "nav",
      { "aria-hidden": navigationOpen, className: clsx_m_default(styles_css_default21["mobile-toolbar-nav"], { [styles_css_default14["drawer-closed"]]: !navigationOpen }) },
      import_react60.default.createElement(InternalButton, { ariaLabel: (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle) !== null && _a !== void 0 ? _a : void 0, ariaExpanded: navigationOpen ? void 0 : false, iconName: "menu", formAction: "none", onClick: () => handleNavigationClick(true), variant: "icon", className: styles_css_default14["navigation-toggle"], ref: navigationRefs.toggle, disabled: hasDrawerViewportOverlay, __nativeAttributes: { "aria-haspopup": navigationOpen ? void 0 : true } })
    ),
    breadcrumbs && import_react60.default.createElement("div", { className: clsx_m_default(styles_css_default21["mobile-toolbar-breadcrumbs"], styles_css_default14.breadcrumbs) }, breadcrumbs),
    drawers ? import_react60.default.createElement(MobileTriggers, null) : !toolsHide && import_react60.default.createElement(
      "aside",
      { "aria-hidden": isToolsOpen, "aria-label": (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _b !== void 0 ? _b : void 0, className: clsx_m_default(styles_css_default21["mobile-toolbar-tools"], { [styles_css_default14["drawer-closed"]]: !isToolsOpen }) },
      import_react60.default.createElement(InternalButton, { className: styles_css_default14["tools-toggle"], ariaExpanded: isToolsOpen, disabled: hasDrawerViewportOverlay, ariaLabel: (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle) !== null && _c !== void 0 ? _c : void 0, iconName: "status-info", formAction: "none", onClick: () => handleToolsClick(true), variant: "icon", ref: toolsRefs.toggle, __nativeAttributes: { "aria-haspopup": true } })
    )
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/navigation.js
var import_react61 = __toESM(require_react());
function Navigation() {
  const { ariaLabels, disableBodyScroll, handleNavigationClick, hasDrawerViewportOverlay, isMobile, navigationOpen, isToolsOpen, navigation, navigationHide, navigationRefs, navigationWidth, toolsHide } = useAppLayoutInternals();
  if (navigationHide) {
    return null;
  }
  const onNavigationClick = (event) => {
    const hasLink = findUpUntil2(event.target, (node) => node.tagName === "A" && !!node.href);
    if (hasLink && isMobile) {
      handleNavigationClick(false);
    }
  };
  const isUnfocusable = hasDrawerViewportOverlay && (!navigationOpen || isToolsOpen && !toolsHide);
  return import_react61.default.createElement(Transition, { in: navigationOpen }, (state, transitionEventsRef) => {
    var _a, _b, _c;
    return import_react61.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default21["navigation-container"], {
        [styles_css_default21["disable-body-scroll"]]: disableBodyScroll,
        [styles_css_default21.unfocusable]: isUnfocusable,
        [styles_css_default14["drawer-closed"]]: !navigationOpen
      }), style: { [custom_css_properties_default.navigationWidth]: `${navigationWidth}px` } },
      !isMobile && import_react61.default.createElement(
        "nav",
        { "aria-hidden": isMobile || navigationOpen, "aria-label": (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _a !== void 0 ? _a : void 0, className: clsx_m_default(styles_css_default21["show-navigation"], {
          [styles_css_default21.animating]: state === "exiting",
          [styles_css_default21["is-navigation-open"]]: navigationOpen
        }), ref: state === "exiting" ? transitionEventsRef : void 0 },
        import_react61.default.createElement(trigger_button_default, { ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle, ariaExpanded: navigationOpen ? void 0 : false, iconName: "menu", className: styles_css_default14["navigation-toggle"], onClick: () => handleNavigationClick(true), ref: navigationRefs.toggle })
      ),
      import_react61.default.createElement(
        "nav",
        { "aria-label": (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _b !== void 0 ? _b : void 0, className: clsx_m_default(styles_css_default21.navigation, {
          [styles_css_default21.animating]: state === "entering",
          [styles_css_default21["is-navigation-open"]]: navigationOpen
        }, styles_css_default14.navigation), ref: state !== "exiting" ? transitionEventsRef : void 0, "aria-hidden": !navigationOpen, onClick: (event) => {
          onNavigationClick && onNavigationClick(event);
        } },
        import_react61.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default21["animated-content"]) },
          import_react61.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default21["hide-navigation"]) },
            import_react61.default.createElement(InternalButton, { ariaLabel: (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationClose) !== null && _c !== void 0 ? _c : void 0, iconName: isMobile ? "close" : "angle-left", onClick: () => handleNavigationClick(false), variant: "icon", formAction: "none", className: styles_css_default14["navigation-close"], ref: navigationRefs.close })
          ),
          navigation
        )
      )
    );
  });
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/notifications.js
var import_react62 = __toESM(require_react());
function Notifications2() {
  var _a;
  const { ariaLabels, hasDrawerViewportOverlay, notifications, notificationsElement, stickyNotifications } = useAppLayoutInternals();
  if (!notifications) {
    return null;
  }
  return import_react62.default.createElement(
    "div",
    { role: "region", "aria-label": (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.notifications) !== null && _a !== void 0 ? _a : void 0, className: clsx_m_default(styles_css_default21.notifications, {
      [styles_css_default21["sticky-notifications"]]: stickyNotifications,
      [styles_css_default21.unfocusable]: hasDrawerViewportOverlay
    }, styles_css_default14.notifications, getContentHeaderClassName()) },
    import_react62.default.createElement("div", { ref: notificationsElement }, notifications)
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/tools.js
var import_react63 = __toESM(require_react());
function Tools({ children }) {
  const { ariaLabels, disableBodyScroll, drawers, handleSplitPanelClick, handleToolsClick, hasDrawerViewportOverlay, isMobile, isSplitPanelOpen, isToolsOpen, loseToolsFocus, splitPanel, splitPanelControlId, splitPanelDisplayed, splitPanelPosition, splitPanelRefs, splitPanelToggle, tools, toolsControlId, toolsHide, toolsRefs, toolsWidth } = useAppLayoutInternals();
  const hasSplitPanel = !!splitPanel && splitPanelPosition === "side";
  const hasToolsForm = getToolsFormStatus(hasSplitPanel && splitPanelDisplayed, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide);
  const hasToolsFormPersistence = getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide);
  const isUnfocusable = hasDrawerViewportOverlay && !isToolsOpen;
  if (toolsHide && !hasSplitPanel || drawers) {
    return null;
  }
  return import_react63.default.createElement(Transition, { in: isToolsOpen !== null && isToolsOpen !== void 0 ? isToolsOpen : false }, (state, transitionEventsRef) => {
    var _a, _b, _c;
    return import_react63.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default21["tools-container"], {
        [styles_css_default21["disable-body-scroll"]]: disableBodyScroll,
        [styles_css_default21.unfocusable]: isUnfocusable,
        [styles_css_default14["drawer-closed"]]: !isToolsOpen
      }), style: {
        [custom_css_properties_default.toolsAnimationStartingOpacity]: `${hasSplitPanel && isSplitPanelOpen ? 1 : 0}`,
        [custom_css_properties_default.toolsWidth]: `${toolsWidth}px`
      }, onBlur: (e) => {
        if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {
          loseToolsFocus();
        }
      } },
      children,
      !toolsHide && import_react63.default.createElement(
        "aside",
        { id: toolsControlId, "aria-hidden": !isToolsOpen ? true : false, "aria-label": (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _a !== void 0 ? _a : void 0, className: clsx_m_default(styles_css_default21.tools, {
          [styles_css_default21.animating]: state === "entering",
          [styles_css_default21["has-tools-form-persistence"]]: hasToolsFormPersistence,
          [styles_css_default21["is-tools-open"]]: isToolsOpen
        }, styles_css_default14.tools), ref: state !== "exiting" ? transitionEventsRef : void 0 },
        import_react63.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default21["animated-content"]) },
          import_react63.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default21["hide-tools"]) },
            import_react63.default.createElement(InternalButton, { ariaLabel: (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose) !== null && _b !== void 0 ? _b : void 0, iconName: isMobile ? "close" : "angle-right", onClick: () => handleToolsClick(false), variant: "icon", formAction: "none", className: styles_css_default14["tools-close"], ref: toolsRefs.close })
          ),
          tools
        )
      ),
      !isMobile && import_react63.default.createElement(
        "aside",
        { "aria-hidden": !hasToolsForm ? true : false, "aria-label": (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _c !== void 0 ? _c : void 0, className: clsx_m_default(styles_css_default21["show-tools"], {
          [styles_css_default21.animating]: state === "exiting",
          [styles_css_default21["has-tools-form"]]: hasToolsForm,
          [styles_css_default21["has-tools-form-persistence"]]: hasToolsFormPersistence
        }), ref: state === "exiting" ? transitionEventsRef : void 0, "data-testid": "side-split-panel-drawer" },
        !toolsHide && import_react63.default.createElement(trigger_button_default, { ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle, ariaControls: toolsControlId, ariaExpanded: isToolsOpen, iconName: "status-info", onClick: () => handleToolsClick(!isToolsOpen), selected: hasSplitPanel && isToolsOpen, className: styles_css_default14["tools-toggle"], ref: toolsRefs.toggle }),
        hasSplitPanel && splitPanelToggle.displayed && import_react63.default.createElement(trigger_button_default, { ariaLabel: splitPanelToggle.ariaLabel, ariaControls: splitPanelControlId, ariaExpanded: !!isSplitPanelOpen, iconName: "view-vertical", onClick: () => handleSplitPanelClick(), selected: hasSplitPanel && isSplitPanelOpen, className: styles_css_default19["open-button"], ref: splitPanelRefs.toggle })
      )
    );
  });
}
function getToolsFormStatus(hasSplitPanel, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide) {
  let hasToolsForm = false;
  if (!isMobile) {
    if (hasSplitPanel && !toolsHide) {
      hasToolsForm = true;
    }
    if (hasSplitPanel && !isSplitPanelOpen && toolsHide) {
      hasToolsForm = true;
    }
    if (!hasSplitPanel && !toolsHide && !isToolsOpen) {
      hasToolsForm = true;
    }
  }
  return hasToolsForm;
}
function getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide) {
  let hasToolsFormPersistence = false;
  if (hasSplitPanel && !toolsHide && (isSplitPanelOpen || isToolsOpen)) {
    hasToolsFormPersistence = true;
  }
  return hasToolsFormPersistence;
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/index.js
var AppLayoutWithRef = import_react64.default.forwardRef(function AppLayout(props, ref) {
  return import_react64.default.createElement(
    AppLayoutInternalsProvider,
    Object.assign({}, props, { ref }),
    import_react64.default.createElement(
      split_panel_default,
      null,
      import_react64.default.createElement(
        Layout,
        null,
        import_react64.default.createElement(Background, null),
        import_react64.default.createElement(Navigation, null),
        import_react64.default.createElement(MobileToolbar2, null),
        import_react64.default.createElement(Notifications2, null),
        import_react64.default.createElement(Breadcrumbs, null),
        import_react64.default.createElement(Header, null),
        import_react64.default.createElement(Main, null),
        import_react64.default.createElement(split_panel_default.Bottom, null),
        import_react64.default.createElement(
          Tools,
          null,
          import_react64.default.createElement(split_panel_default.Side, null)
        ),
        import_react64.default.createElement(Drawers, null)
      )
    )
  );
});
var visual_refresh_default = AppLayoutWithRef;

// node_modules/@cloudscape-design/components/app-layout/implementation.js
var AppLayoutImplementation = import_react65.default.forwardRef((props, ref) => {
  const isRefresh = useVisualRefresh();
  return isRefresh ? import_react65.default.createElement(visual_refresh_default, Object.assign({ ref }, props)) : import_react65.default.createElement(classic_default, Object.assign({ ref }, props));
});

// node_modules/@cloudscape-design/components/app-layout/widget.js
function createWidgetizedAppLayout(AppLayoutLoader) {
  return import_react66.default.forwardRef((props, ref) => {
    const isRefresh = useVisualRefresh();
    if (isRefresh && getGlobalFlag("appLayoutWidget") && AppLayoutLoader) {
      return import_react66.default.createElement(AppLayoutLoader, Object.assign({ ref }, props));
    }
    return import_react66.default.createElement(AppLayoutImplementation, Object.assign({ ref }, props));
  });
}

// node_modules/@cloudscape-design/components/app-layout/internal.js
var AppLayoutInternal = createWidgetizedAppLayout();

// node_modules/@cloudscape-design/components/app-layout/defaults.js
var defaultContentTypeState = {
  navigationOpen: true,
  minContentWidth: 280,
  maxContentWidth: void 0
};
var defaults = {
  default: Object.assign({}, defaultContentTypeState),
  dashboard: Object.assign({}, defaultContentTypeState),
  cards: {
    navigationOpen: true,
    minContentWidth: 280,
    maxContentWidth: void 0
  },
  form: {
    navigationOpen: false,
    minContentWidth: 280,
    maxContentWidth: 800
  },
  table: {
    navigationOpen: true,
    minContentWidth: 280,
    maxContentWidth: void 0
  },
  wizard: {
    navigationOpen: false,
    minContentWidth: 280,
    maxContentWidth: 1080
  }
};
function applyDefaults(contentType, stateFromProps, isRefresh) {
  var _a, _b, _c;
  const contentTypeDefaults = isRefresh ? Object.assign(Object.assign({}, defaults[contentType]), { maxContentWidth: void 0 }) : defaults[contentType];
  return {
    maxContentWidth: (_a = stateFromProps.maxContentWidth) !== null && _a !== void 0 ? _a : contentTypeDefaults.maxContentWidth,
    minContentWidth: (_b = stateFromProps.minContentWidth) !== null && _b !== void 0 ? _b : contentTypeDefaults.minContentWidth,
    navigationOpen: (_c = stateFromProps.navigationOpen) !== null && _c !== void 0 ? _c : contentTypeDefaults.navigationOpen
  };
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-app-layout-placement.js
var import_react68 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/utils/use-observed-element.js
var import_react67 = __toESM(require_react());
function useObservedElement(selector) {
  const getElement = (0, import_react67.useCallback)(() => {
    return document.querySelector(selector);
  }, [selector]);
  const [height, setHeight] = (0, import_react67.useState)(0);
  useResizeObserver(getElement, (entry) => setHeight(entry.borderBoxHeight));
  return height;
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-app-layout-placement.js
function useAppLayoutPlacement(headerSelector, footerSelector) {
  const mainElementRef = (0, import_react68.useRef)(null);
  const headerHeight = useObservedElement(headerSelector);
  const footerHeight = useObservedElement(footerSelector);
  const [offsets, setOffsets] = (0, import_react68.useState)({ left: 0, right: 0, width: Number.POSITIVE_INFINITY });
  const updatePosition2 = (0, import_react68.useCallback)(() => {
    if (!mainElementRef.current) {
      return;
    }
    const { left, right, width } = mainElementRef.current.getBoundingClientRect();
    if (width === 0) {
      return;
    }
    setOffsets({ left, right: width - right, width });
  }, []);
  (0, import_react68.useEffect)(() => {
    window.addEventListener("resize", updatePosition2);
    return () => window.removeEventListener("resize", updatePosition2);
  }, [updatePosition2]);
  useResizeObserver(mainElementRef, updatePosition2);
  return [mainElementRef, Object.assign(Object.assign({}, offsets), { top: headerHeight, bottom: footerHeight })];
}

// node_modules/@cloudscape-design/components/app-layout/index.js
var AppLayout2 = import_react69.default.forwardRef((_a, ref) => {
  var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
  var { contentType = "default", headerSelector = "#b #h", footerSelector = "#b #f", navigationWidth = 280, toolsWidth = 290, maxContentWidth, minContentWidth, navigationOpen: controlledNavigationOpen, onNavigationChange: controlledOnNavigationChange } = _a, rest = __rest(_a, ["contentType", "headerSelector", "footerSelector", "navigationWidth", "toolsWidth", "maxContentWidth", "minContentWidth", "navigationOpen", "onNavigationChange"]);
  if (isDevelopment) {
    if (rest.toolsOpen && rest.toolsHide) {
      warnOnce("AppLayout", `You have enabled both the \`toolsOpen\` prop and the \`toolsHide\` prop. This is not supported. Set \`toolsOpen\` to \`false\` when you set \`toolsHide\` to \`true\`.`);
    }
  }
  const { __internalRootRef } = useBaseComponent("AppLayout", {
    props: {
      contentType,
      disableContentPaddings: rest.disableContentPaddings,
      disableBodyScroll: rest.disableBodyScroll,
      navigationWidth,
      navigationHide: rest.navigationHide,
      toolsHide: rest.toolsHide,
      toolsWidth,
      maxContentWidth,
      minContentWidth,
      stickyNotifications: rest.stickyNotifications,
      disableContentHeaderOverlap: rest.disableContentHeaderOverlap
    },
    metadata: {
      drawersCount: (_c = (_b = rest.drawers) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : null,
      hasContentHeader: !!rest.contentHeader
    }
  });
  const isRefresh = useVisualRefresh();
  const isMobile = useMobile();
  const i18n = useInternalI18n("app-layout");
  const ariaLabels = {
    navigation: i18n("ariaLabels.navigation", (_d = rest.ariaLabels) === null || _d === void 0 ? void 0 : _d.navigation),
    navigationClose: i18n("ariaLabels.navigationClose", (_e = rest.ariaLabels) === null || _e === void 0 ? void 0 : _e.navigationClose),
    navigationToggle: i18n("ariaLabels.navigationToggle", (_f = rest.ariaLabels) === null || _f === void 0 ? void 0 : _f.navigationToggle),
    notifications: i18n("ariaLabels.notifications", (_g = rest.ariaLabels) === null || _g === void 0 ? void 0 : _g.notifications),
    tools: i18n("ariaLabels.tools", (_h = rest.ariaLabels) === null || _h === void 0 ? void 0 : _h.tools),
    toolsClose: i18n("ariaLabels.toolsClose", (_j = rest.ariaLabels) === null || _j === void 0 ? void 0 : _j.toolsClose),
    toolsToggle: i18n("ariaLabels.toolsToggle", (_k = rest.ariaLabels) === null || _k === void 0 ? void 0 : _k.toolsToggle),
    drawers: i18n("ariaLabels.drawers", (_l = rest.ariaLabels) === null || _l === void 0 ? void 0 : _l.drawers),
    drawersOverflow: i18n("ariaLabels.drawersOverflow", (_m = rest.ariaLabels) === null || _m === void 0 ? void 0 : _m.drawersOverflow),
    drawersOverflowWithBadge: i18n("ariaLabels.drawersOverflowWithBadge", (_o = rest.ariaLabels) === null || _o === void 0 ? void 0 : _o.drawersOverflowWithBadge)
  };
  const _p = applyDefaults(contentType, { maxContentWidth, minContentWidth }, isRefresh), { navigationOpen: defaultNavigationOpen } = _p, restDefaults = __rest(_p, ["navigationOpen"]);
  const [navigationOpen = false, setNavigationOpen] = useControllable(controlledNavigationOpen, controlledOnNavigationChange, isMobile ? false : defaultNavigationOpen, { componentName: "AppLayout", controlledProp: "navigationOpen", changeHandler: "onNavigationChange" });
  const onNavigationChange = (event) => {
    setNavigationOpen(event.detail.open);
    controlledOnNavigationChange === null || controlledOnNavigationChange === void 0 ? void 0 : controlledOnNavigationChange(event);
  };
  const [rootRef, placement] = useAppLayoutPlacement(headerSelector, footerSelector);
  const props = Object.assign(Object.assign(Object.assign({
    contentType,
    navigationWidth,
    toolsWidth,
    navigationOpen,
    onNavigationChange
  }, restDefaults), rest), {
    ariaLabels,
    placement
  });
  const baseProps = getBaseProps(rest);
  return import_react69.default.createElement(
    "div",
    Object.assign({ ref: useMergeRefs(__internalRootRef, rootRef) }, baseProps),
    import_react69.default.createElement(AppLayoutInternal, Object.assign({ ref }, props))
  );
});
applyDisplayName(AppLayout2, "AppLayout");
var app_layout_default = AppLayout2;

// node_modules/@cloudscape-design/components/area-chart/index.js
var import_react120 = __toESM(require_react());

// node_modules/@cloudscape-design/components/area-chart/internal.js
var import_react119 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-status-container/index.js
var import_react70 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-status-container/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/chart-status-container/styles.scoped.css";
var styles_css_default22 = {
  "root": "awsui_root_11n0s_6tm6j_9",
  "empty": "awsui_empty_11n0s_6tm6j_13"
};

// node_modules/@cloudscape-design/components/internal/components/chart-status-container/index.js
function getChartStatus({ externalData, visibleData, statusType }) {
  const isEmpty = !visibleData || visibleData.length === 0;
  const isNoMatch = isEmpty && visibleData.length !== externalData.length;
  const showChart = statusType === "finished" && !isEmpty;
  return { isEmpty, isNoMatch, showChart };
}
function ChartStatusContainer({ statusType, errorText, loadingText, recoveryText, noMatch, empty, onRecoveryClick, isNoMatch, isEmpty, showChart }) {
  const i18n = useInternalI18n("[charts]");
  const statusContainer = (0, import_react70.useMemo)(() => {
    const handleRecoveryClick = (event) => {
      event.preventDefault();
      fireNonCancelableEvent(onRecoveryClick);
    };
    if (statusType === "error") {
      const renderedRecoveryText = i18n("recoveryText", recoveryText);
      return import_react70.default.createElement(
        "span",
        null,
        import_react70.default.createElement(StatusIndicator, { type: "error" }, i18n("errorText", errorText)),
        " ",
        !!renderedRecoveryText && !!onRecoveryClick && import_react70.default.createElement(internal_default3, { onFollow: handleRecoveryClick, variant: "recovery" }, renderedRecoveryText)
      );
    }
    if (statusType === "loading") {
      return import_react70.default.createElement(StatusIndicator, { type: "loading" }, i18n("loadingText", loadingText));
    }
    if (isNoMatch) {
      return import_react70.default.createElement("div", { className: styles_css_default22.empty }, noMatch);
    }
    if (isEmpty) {
      return import_react70.default.createElement("div", { className: styles_css_default22.empty }, empty);
    }
  }, [i18n, statusType, onRecoveryClick, isEmpty, isNoMatch, recoveryText, loadingText, errorText, empty, noMatch]);
  return import_react70.default.createElement("div", { className: styles_css_default22.root, "aria-live": "polite", "aria-atomic": "true" }, !showChart && statusContainer);
}

// node_modules/@cloudscape-design/components/area-chart/elements/area-chart-filter.js
var import_react82 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-filter/index.js
var import_react81 = __toESM(require_react());

// node_modules/@cloudscape-design/components/form-field/internal.js
var import_react72 = __toESM(require_react());

// node_modules/@cloudscape-design/components/grid/internal.js
var import_react71 = __toESM(require_react());
var import_react_keyed_flatten_children = __toESM(require_react_keyed_flatten_children());

// node_modules/@cloudscape-design/components/grid/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/grid/styles.scoped.css";
var styles_css_default23 = {
  "grid": "awsui_grid_14yj0_1lwse_99",
  "no-gutters": "awsui_no-gutters_14yj0_1lwse_138",
  "grid-column": "awsui_grid-column_14yj0_1lwse_143",
  "colspan-1": "awsui_colspan-1_14yj0_1lwse_154",
  "push-1": "awsui_push-1_14yj0_1lwse_158",
  "pull-1": "awsui_pull-1_14yj0_1lwse_161",
  "colspan-2": "awsui_colspan-2_14yj0_1lwse_164",
  "push-2": "awsui_push-2_14yj0_1lwse_168",
  "pull-2": "awsui_pull-2_14yj0_1lwse_171",
  "colspan-3": "awsui_colspan-3_14yj0_1lwse_174",
  "push-3": "awsui_push-3_14yj0_1lwse_178",
  "pull-3": "awsui_pull-3_14yj0_1lwse_181",
  "colspan-4": "awsui_colspan-4_14yj0_1lwse_184",
  "push-4": "awsui_push-4_14yj0_1lwse_188",
  "pull-4": "awsui_pull-4_14yj0_1lwse_191",
  "colspan-5": "awsui_colspan-5_14yj0_1lwse_194",
  "push-5": "awsui_push-5_14yj0_1lwse_198",
  "pull-5": "awsui_pull-5_14yj0_1lwse_201",
  "colspan-6": "awsui_colspan-6_14yj0_1lwse_204",
  "push-6": "awsui_push-6_14yj0_1lwse_208",
  "pull-6": "awsui_pull-6_14yj0_1lwse_211",
  "colspan-7": "awsui_colspan-7_14yj0_1lwse_214",
  "push-7": "awsui_push-7_14yj0_1lwse_218",
  "pull-7": "awsui_pull-7_14yj0_1lwse_221",
  "colspan-8": "awsui_colspan-8_14yj0_1lwse_224",
  "push-8": "awsui_push-8_14yj0_1lwse_228",
  "pull-8": "awsui_pull-8_14yj0_1lwse_231",
  "colspan-9": "awsui_colspan-9_14yj0_1lwse_234",
  "push-9": "awsui_push-9_14yj0_1lwse_238",
  "pull-9": "awsui_pull-9_14yj0_1lwse_241",
  "colspan-10": "awsui_colspan-10_14yj0_1lwse_244",
  "push-10": "awsui_push-10_14yj0_1lwse_248",
  "pull-10": "awsui_pull-10_14yj0_1lwse_251",
  "colspan-11": "awsui_colspan-11_14yj0_1lwse_254",
  "push-11": "awsui_push-11_14yj0_1lwse_258",
  "pull-11": "awsui_pull-11_14yj0_1lwse_261",
  "colspan-12": "awsui_colspan-12_14yj0_1lwse_264",
  "push-12": "awsui_push-12_14yj0_1lwse_268",
  "pull-12": "awsui_pull-12_14yj0_1lwse_271",
  "push-0": "awsui_push-0_14yj0_1lwse_274",
  "pull-0": "awsui_pull-0_14yj0_1lwse_277",
  "offset-1": "awsui_offset-1_14yj0_1lwse_280",
  "offset-2": "awsui_offset-2_14yj0_1lwse_283",
  "offset-3": "awsui_offset-3_14yj0_1lwse_286",
  "offset-4": "awsui_offset-4_14yj0_1lwse_289",
  "offset-5": "awsui_offset-5_14yj0_1lwse_292",
  "offset-6": "awsui_offset-6_14yj0_1lwse_295",
  "offset-7": "awsui_offset-7_14yj0_1lwse_298",
  "offset-8": "awsui_offset-8_14yj0_1lwse_301",
  "offset-9": "awsui_offset-9_14yj0_1lwse_304",
  "offset-10": "awsui_offset-10_14yj0_1lwse_307",
  "offset-11": "awsui_offset-11_14yj0_1lwse_310",
  "restore-pointer-events": "awsui_restore-pointer-events_14yj0_1lwse_314"
};

// node_modules/@cloudscape-design/components/grid/internal.js
var InternalGrid = import_react71.default.forwardRef((_a, ref) => {
  var { __breakpoint, gridDefinition = [], disableGutters = false, children, __responsiveClassName, __internalRootRef = null } = _a, restProps = __rest(_a, ["__breakpoint", "gridDefinition", "disableGutters", "children", "__responsiveClassName", "__internalRootRef"]);
  let [defaultBreakpoint, defaultRef] = useContainerBreakpoints(void 0);
  if (__breakpoint !== void 0) {
    defaultBreakpoint = __breakpoint;
    defaultRef = ref;
  }
  const baseProps = getBaseProps(restProps);
  const flattenedChildren = (0, import_react_keyed_flatten_children.default)(children);
  if (isDevelopment) {
    const columnCount = gridDefinition.length;
    const childCount = flattenedChildren.length;
    if (columnCount !== childCount) {
      warnOnce("Grid", `The number of children (${childCount}) does not match the number of columns defined (${columnCount}).`);
    }
  }
  const mergedRef = useMergeRefs(defaultRef, __internalRootRef);
  return import_react71.default.createElement("div", Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default23.grid, baseProps.className, { [styles_css_default23["no-gutters"]]: disableGutters }, __responsiveClassName ? __responsiveClassName(defaultBreakpoint) : null), ref: mergedRef }), flattenedChildren.map((child, i) => {
    var _a2, _b, _c, _d;
    const key2 = child.key;
    return import_react71.default.createElement(
      "div",
      { key: key2 ? String(key2) : void 0, className: clsx_m_default(styles_css_default23["grid-column"], getColumnClassNames("colspan", (_a2 = gridDefinition[i]) === null || _a2 === void 0 ? void 0 : _a2.colspan, defaultBreakpoint), getColumnClassNames("offset", (_b = gridDefinition[i]) === null || _b === void 0 ? void 0 : _b.offset, defaultBreakpoint), getColumnClassNames("pull", (_c = gridDefinition[i]) === null || _c === void 0 ? void 0 : _c.pull, defaultBreakpoint), getColumnClassNames("push", (_d = gridDefinition[i]) === null || _d === void 0 ? void 0 : _d.push, defaultBreakpoint)) },
      import_react71.default.createElement("div", { className: styles_css_default23["restore-pointer-events"] }, child)
    );
  }));
});
function getColumnClassNames(prop, mapping, breakpoint) {
  if (typeof mapping === "number") {
    return styles_css_default23[`${prop}-${mapping}`];
  }
  if (breakpoint === null || mapping === void 0) {
    return null;
  }
  return styles_css_default23[`${prop}-${matchBreakpointMapping(mapping, breakpoint)}`];
}
var internal_default8 = InternalGrid;

// node_modules/@cloudscape-design/components/form-field/util.js
function makeSlotId(prop, formFieldId, propName) {
  if (!prop) {
    return void 0;
  }
  return `${formFieldId}-${propName}`;
}
function getSlotIds(formFieldId, label, description, constraintText, errorText) {
  const ids2 = {
    label: makeSlotId(label, formFieldId, "label"),
    description: makeSlotId(description, formFieldId, "description"),
    constraint: makeSlotId(constraintText, formFieldId, "constraint"),
    error: makeSlotId(errorText, formFieldId, "error")
  };
  return ids2;
}
function getAriaDescribedBy({ error, description, constraint }) {
  const describedByAttributes = [error, description, constraint].filter((e) => !!e);
  const describedBy = describedByAttributes.length ? describedByAttributes.join(" ") : void 0;
  return describedBy;
}
function getGridDefinition(stretch, secondaryControlPresent, isRefresh) {
  let columns;
  if (stretch) {
    columns = [{ colspan: 12 }, { colspan: 12 }];
  } else if (isRefresh) {
    columns = [{ colspan: { default: 12, xs: 8 } }, { colspan: { default: 12, xs: 4 } }];
  } else {
    columns = [{ colspan: { default: 12, xs: 9 } }, { colspan: { default: 12, xs: 3 } }];
  }
  if (!secondaryControlPresent) {
    return [columns[0]];
  }
  return columns;
}

// node_modules/@cloudscape-design/components/form-field/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/form-field/styles.scoped.css";
var styles_css_default24 = {
  "error-icon-shake-wrapper": "awsui_error-icon-shake-wrapper_14mhv_av9zi_103",
  "awsui-motion-shake-horizontally": "awsui_awsui-motion-shake-horizontally_14mhv_av9zi_1",
  "error-icon-scale-wrapper": "awsui_error-icon-scale-wrapper_14mhv_av9zi_130",
  "awsui-motion-scale-popup": "awsui_awsui-motion-scale-popup_14mhv_av9zi_1",
  "error": "awsui_error_14mhv_av9zi_103",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_14mhv_av9zi_1",
  "root": "awsui_root_14mhv_av9zi_174",
  "label": "awsui_label_14mhv_av9zi_210",
  "info": "awsui_info_14mhv_av9zi_224",
  "description": "awsui_description_14mhv_av9zi_229",
  "constraint": "awsui_constraint_14mhv_av9zi_230",
  "hints": "awsui_hints_14mhv_av9zi_237",
  "constraint-has-error": "awsui_constraint-has-error_14mhv_av9zi_238",
  "secondary-control": "awsui_secondary-control_14mhv_av9zi_242",
  "controls": "awsui_controls_14mhv_av9zi_246",
  "label-hidden": "awsui_label-hidden_14mhv_av9zi_246",
  "control": "awsui_control_14mhv_av9zi_246",
  "error__message": "awsui_error__message_14mhv_av9zi_264",
  "visually-hidden": "awsui_visually-hidden_14mhv_av9zi_268"
};

// node_modules/@cloudscape-design/components/form-field/internal.js
function FormFieldError({ id, children, errorIconAriaLabel }) {
  const i18n = useInternalI18n("form-field");
  const contentRef = (0, import_react72.useRef)(null);
  return import_react72.default.createElement(
    import_react72.default.Fragment,
    null,
    import_react72.default.createElement(
      "div",
      { id, className: styles_css_default24.error },
      import_react72.default.createElement(
        "div",
        { className: styles_css_default24["error-icon-shake-wrapper"] },
        import_react72.default.createElement(
          "div",
          { role: "img", "aria-label": i18n("i18nStrings.errorIconAriaLabel", errorIconAriaLabel), className: styles_css_default24["error-icon-scale-wrapper"] },
          import_react72.default.createElement(internal_default, { name: "status-warning", size: "small" })
        )
      ),
      import_react72.default.createElement("span", { className: styles_css_default24.error__message, ref: contentRef }, children)
    ),
    import_react72.default.createElement(live_region_default, { assertive: true, source: [errorIconAriaLabel, contentRef] })
  );
}
function ConstraintText({ id, hasError, children }) {
  return import_react72.default.createElement("div", { id, className: clsx_m_default(styles_css_default24.constraint, hasError && styles_css_default24["constraint-has-error"]) }, children);
}
function InternalFormField(_a) {
  var { controlId, stretch = false, label, info, i18nStrings, children, secondaryControl, description, constraintText, errorText, __hideLabel, __internalRootRef = null, __disableGutters = false } = _a, rest = __rest(_a, ["controlId", "stretch", "label", "info", "i18nStrings", "children", "secondaryControl", "description", "constraintText", "errorText", "__hideLabel", "__internalRootRef", "__disableGutters"]);
  const baseProps = getBaseProps(rest);
  const isRefresh = useVisualRefresh();
  const instanceUniqueId = useUniqueId("formField");
  const generatedControlId = controlId || instanceUniqueId;
  const formFieldId = controlId || generatedControlId;
  const { funnelInteractionId, submissionAttempt, funnelState, errorCount } = useFunnel();
  const { stepNumber, stepNameSelector } = useFunnelStep();
  const { subStepSelector, subStepNameSelector } = useFunnelSubStep();
  const slotIds = getSlotIds(formFieldId, label, description, constraintText, errorText);
  const ariaDescribedBy = getAriaDescribedBy(slotIds);
  const gridDefinition = getGridDefinition(stretch, !!secondaryControl, isRefresh);
  const { ariaLabelledby: parentAriaLabelledby, ariaDescribedby: parentAriaDescribedby, invalid: parentInvalid } = useFormFieldContext({});
  const contextValuesWithoutControlId = {
    ariaLabelledby: joinStrings(parentAriaLabelledby, slotIds.label) || void 0,
    ariaDescribedby: joinStrings(parentAriaDescribedby, ariaDescribedBy) || void 0,
    invalid: !!errorText || !!parentInvalid
  };
  const analyticsAttributes = {
    [DATA_ATTR_FIELD_LABEL]: slotIds.label ? getFieldSlotSeletor(slotIds.label) : void 0,
    [DATA_ATTR_FIELD_ERROR]: slotIds.error ? getFieldSlotSeletor(slotIds.error) : void 0
  };
  (0, import_react72.useEffect)(() => {
    var _a2, _b, _c;
    if (funnelInteractionId && errorText && funnelState.current !== "complete") {
      const stepName = getNameFromSelector(stepNameSelector);
      const subStepName = getNameFromSelector(subStepNameSelector);
      errorCount.current++;
      const errorIsVisible = ((_c = (_b = (_a2 = __internalRootRef === null || __internalRootRef === void 0 ? void 0 : __internalRootRef.current) === null || _a2 === void 0 ? void 0 : _a2.getBoundingClientRect()) === null || _b === void 0 ? void 0 : _b.width) !== null && _c !== void 0 ? _c : 0) > 0;
      if (errorIsVisible) {
        FunnelMetrics.funnelSubStepError({
          funnelInteractionId,
          subStepSelector,
          subStepName,
          subStepNameSelector,
          stepNumber,
          stepName,
          stepNameSelector,
          fieldErrorSelector: `${getFieldSlotSeletor(slotIds.error)} .${styles_css_default24.error__message}`,
          fieldLabelSelector: getFieldSlotSeletor(slotIds.label),
          subStepAllSelector: getSubStepAllSelector()
        });
      }
      return () => {
        errorCount.current--;
      };
    }
  }, [funnelInteractionId, errorText, submissionAttempt, errorCount]);
  return import_react72.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default24.root), ref: __internalRootRef }, analyticsAttributes),
    import_react72.default.createElement(
      "div",
      { className: clsx_m_default(__hideLabel && styles_css_default24["visually-hidden"]) },
      label && import_react72.default.createElement("label", { className: styles_css_default24.label, id: slotIds.label, htmlFor: generatedControlId }, label),
      import_react72.default.createElement(InfoLinkLabelContext.Provider, { value: slotIds.label }, !__hideLabel && info && import_react72.default.createElement("span", { className: styles_css_default24.info }, info))
    ),
    description && import_react72.default.createElement("div", { className: styles_css_default24.description, id: slotIds.description }, description),
    import_react72.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default24.controls, __hideLabel && styles_css_default24["label-hidden"]) },
      import_react72.default.createElement(
        internal_default8,
        { gridDefinition, disableGutters: __disableGutters },
        import_react72.default.createElement(FormFieldContext.Provider, { value: Object.assign({ controlId: generatedControlId }, contextValuesWithoutControlId) }, children && import_react72.default.createElement("div", { className: styles_css_default24.control }, children)),
        secondaryControl && import_react72.default.createElement(
          FormFieldContext.Provider,
          { value: contextValuesWithoutControlId },
          import_react72.default.createElement("div", { className: styles_css_default24["secondary-control"] }, secondaryControl)
        )
      )
    ),
    (constraintText || errorText) && import_react72.default.createElement(
      "div",
      { className: styles_css_default24.hints },
      errorText && import_react72.default.createElement(FormFieldError, { id: slotIds.error, errorIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel }, errorText),
      constraintText && import_react72.default.createElement(ConstraintText, { id: slotIds.constraint, hasError: !!errorText }, constraintText)
    )
  );
}

// node_modules/@cloudscape-design/components/multiselect/internal.js
var import_react79 = __toESM(require_react());

// node_modules/@cloudscape-design/components/token-group/internal.js
var import_react78 = __toESM(require_react());

// node_modules/@cloudscape-design/components/token-group/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/token-group/styles.scoped.css";
var styles_css_default25 = {
  "root": "awsui_root_dm8gx_9oo5q_103",
  "has-items": "awsui_has-items_dm8gx_9oo5q_137",
  "no-padding": "awsui_no-padding_dm8gx_9oo5q_137",
  "dismiss-button": "awsui_dismiss-button_dm8gx_9oo5q_141",
  "token": "awsui_token_dm8gx_9oo5q_183",
  "token-box": "awsui_token-box_dm8gx_9oo5q_190",
  "token-box-error": "awsui_token-box-error_dm8gx_9oo5q_209",
  "token-box-disabled": "awsui_token-box-disabled_dm8gx_9oo5q_220"
};

// node_modules/@cloudscape-design/components/internal/components/token-list/index.js
var import_react75 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/token-list/token-limit-toggle.js
var import_react73 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/token-list/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/token-list/styles.scoped.css";
var styles_css_default26 = {
  "root": "awsui_root_gfwv3_1exu9_99",
  "horizontal": "awsui_horizontal_gfwv3_1exu9_104",
  "vertical": "awsui_vertical_gfwv3_1exu9_108",
  "list": "awsui_list_gfwv3_1exu9_112",
  "list-item": "awsui_list-item_gfwv3_1exu9_132",
  "toggle-container-inline": "awsui_toggle-container-inline_gfwv3_1exu9_139",
  "toggle": "awsui_toggle_gfwv3_1exu9_139",
  "description": "awsui_description_gfwv3_1exu9_235",
  "separator": "awsui_separator_gfwv3_1exu9_239"
};

// node_modules/@cloudscape-design/components/internal/components/token-list/token-limit-toggle.js
function TokenLimitToggle({ controlId, allHidden, expanded, numberOfHiddenOptions, onClick, i18nStrings = {}, limitShowFewerAriaLabel, limitShowMoreAriaLabel }) {
  const i18n = useInternalI18n("token-group");
  const numberOfHiddenOptionLabel = allHidden ? numberOfHiddenOptions : `+${numberOfHiddenOptions}`;
  const description = expanded ? i18n("i18nStrings.limitShowFewer", i18nStrings.limitShowFewer) : `${i18n("i18nStrings.limitShowMore", i18nStrings.limitShowMore) || ""} (${numberOfHiddenOptionLabel})`;
  const ariaLabel = expanded ? limitShowFewerAriaLabel : limitShowMoreAriaLabel;
  const handleClick = (0, import_react73.useCallback)(() => {
    fireNonCancelableEvent(onClick, null);
  }, [onClick]);
  return import_react73.default.createElement(
    "button",
    { type: "button", className: styles_css_default26.toggle, onClick: handleClick, "aria-controls": controlId, "aria-expanded": expanded, "aria-label": ariaLabel },
    import_react73.default.createElement(internal_default, { name: expanded ? "treeview-collapse" : "treeview-expand" }),
    import_react73.default.createElement("span", { className: styles_css_default26.description }, description)
  );
}

// node_modules/@cloudscape-design/components/internal/components/token-list/token-focus-controller.js
var import_react74 = __toESM(require_react());
var tokenSelector = `.${styles_css_default26["list-item"]}`;
var toggleButtonSelector = `.${styles_css_default26.toggle}`;
function useTokenFocusController({ moveFocusNextToIndex }) {
  const tokenListRef = (0, import_react74.useRef)(null);
  (0, import_react74.useEffect)(() => {
    var _a, _b;
    if (moveFocusNextToIndex === void 0 || moveFocusNextToIndex === null || tokenListRef.current === null) {
      return;
    }
    const tokenElements = tokenListRef.current.querySelectorAll(tokenSelector);
    const toggleButton = tokenListRef.current.querySelector(toggleButtonSelector);
    let closestPrevIndex = Number.NEGATIVE_INFINITY;
    let closestNextIndex = Number.POSITIVE_INFINITY;
    for (let activeIndex = 0; activeIndex < tokenElements.length; activeIndex++) {
      if (activeIndex < moveFocusNextToIndex) {
        closestPrevIndex = moveFocusNextToIndex - activeIndex < moveFocusNextToIndex - closestPrevIndex ? activeIndex : closestPrevIndex;
      } else {
        closestNextIndex = activeIndex - moveFocusNextToIndex < closestNextIndex - moveFocusNextToIndex ? activeIndex : closestNextIndex;
      }
    }
    const nextElement = tokenElements[closestNextIndex];
    const prevElement = tokenElements[closestPrevIndex];
    if (nextElement instanceof HTMLElement) {
      (_a = getFirstFocusable(nextElement)) === null || _a === void 0 ? void 0 : _a.focus();
    } else if (prevElement instanceof HTMLElement) {
      (_b = getFirstFocusable(prevElement)) === null || _b === void 0 ? void 0 : _b.focus();
    } else if (toggleButton instanceof HTMLElement) {
      toggleButton.focus();
    }
  }, [moveFocusNextToIndex]);
  return tokenListRef;
}

// node_modules/@cloudscape-design/components/internal/components/token-list/index.js
function TokenList({ items, alignment, renderItem, limit, after, i18nStrings, limitShowFewerAriaLabel, limitShowMoreAriaLabel, moveFocusNextToIndex, onExpandedClick = () => void 0 }) {
  const tokenListRef = useTokenFocusController({ moveFocusNextToIndex });
  const controlId = useUniqueId();
  const [expanded, setExpanded] = (0, import_react75.useState)(false);
  const hasItems = items.length > 0;
  const hasHiddenItems = hasItems && limit !== void 0 && items.length > limit;
  const visibleItems = hasHiddenItems && !expanded ? items.slice(0, limit) : items;
  const hasVisibleItems = visibleItems.length > 0;
  const toggle = hasHiddenItems ? import_react75.default.createElement(
    "div",
    { className: styles_css_default26[`toggle-container-${alignment}`] },
    import_react75.default.createElement(TokenLimitToggle, { controlId: hasVisibleItems ? controlId : void 0, allHidden: limit === 0, expanded, numberOfHiddenOptions: items.length - visibleItems.length, i18nStrings, limitShowFewerAriaLabel, limitShowMoreAriaLabel, onClick: () => {
      const isExpanded = !expanded;
      setExpanded(isExpanded);
      onExpandedClick(isExpanded);
    } })
  ) : null;
  if (alignment === "inline") {
    return import_react75.default.createElement(
      "div",
      { ref: tokenListRef, className: clsx_m_default(styles_css_default26.root, styles_css_default26.horizontal) },
      hasItems && import_react75.default.createElement("ul", { id: controlId, className: styles_css_default26.list }, visibleItems.map((item, itemIndex) => import_react75.default.createElement("li", { key: itemIndex, className: styles_css_default26["list-item"], "aria-setsize": items.length, "aria-posinset": itemIndex + 1 }, renderItem(item, itemIndex)))),
      toggle,
      after && import_react75.default.createElement("div", { className: styles_css_default26.separator }),
      after
    );
  }
  return import_react75.default.createElement(
    "div",
    { ref: tokenListRef, className: clsx_m_default(styles_css_default26.root, styles_css_default26.vertical) },
    hasVisibleItems && import_react75.default.createElement("ul", { id: controlId, className: clsx_m_default(styles_css_default26.list, styles_css_default26[alignment]) }, visibleItems.map((item, itemIndex) => import_react75.default.createElement("li", { key: itemIndex, className: styles_css_default26["list-item"], "aria-setsize": items.length, "aria-posinset": itemIndex + 1 }, renderItem(item, itemIndex)))),
    toggle,
    after
  );
}

// node_modules/@cloudscape-design/components/token-group/token.js
var import_react77 = __toESM(require_react());

// node_modules/@cloudscape-design/components/token-group/dismiss-button.js
var import_react76 = __toESM(require_react());
var dismiss_button_default = (0, import_react76.forwardRef)(DismissButton);
function DismissButton({ disabled, dismissLabel, onDismiss }, ref) {
  return import_react76.default.createElement(
    "button",
    { ref, type: "button", className: clsx_m_default(styles_css_default25["dismiss-button"]), "aria-disabled": disabled ? true : void 0, onClick: !disabled && onDismiss ? () => onDismiss() : void 0, "aria-label": dismissLabel },
    import_react76.default.createElement(internal_default, { name: "close" })
  );
}

// node_modules/@cloudscape-design/components/token-group/token.js
function Token(_a) {
  var { ariaLabel, disabled, dismissLabel, onDismiss, children, errorText, errorIconAriaLabel } = _a, restProps = __rest(_a, ["ariaLabel", "disabled", "dismissLabel", "onDismiss", "children", "errorText", "errorIconAriaLabel"]);
  const errorId = useUniqueId("error");
  const baseProps = getBaseProps(restProps);
  return import_react77.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default25.token, baseProps.className), role: "group", "aria-label": ariaLabel, "aria-describedby": errorText ? errorId : void 0, "aria-disabled": disabled }),
    import_react77.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default25["token-box"], disabled && styles_css_default25["token-box-disabled"], errorText && styles_css_default25["token-box-error"]) },
      children,
      onDismiss && import_react77.default.createElement(dismiss_button_default, { disabled, dismissLabel, onDismiss })
    ),
    errorText && import_react77.default.createElement(FormFieldError, { id: errorId, errorIconAriaLabel }, errorText)
  );
}

// node_modules/@cloudscape-design/components/token-group/internal.js
function InternalTokenGroup(_a) {
  var { alignment, items, onDismiss, limit, i18nStrings, disableOuterPadding, limitShowFewerAriaLabel, limitShowMoreAriaLabel, __internalRootRef } = _a, props = __rest(_a, ["alignment", "items", "onDismiss", "limit", "i18nStrings", "disableOuterPadding", "limitShowFewerAriaLabel", "limitShowMoreAriaLabel", "__internalRootRef"]);
  checkControlled("TokenGroup", "items", items, "onDismiss", onDismiss);
  const [removedItemIndex, setRemovedItemIndex] = (0, import_react78.useState)(null);
  const baseProps = getBaseProps(props);
  const hasItems = items.length > 0;
  return import_react78.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default25.root, hasItems && styles_css_default25["has-items"], disableOuterPadding && styles_css_default25["no-padding"]), ref: __internalRootRef }),
    import_react78.default.createElement(TokenList, { alignment, items, limit, renderItem: (item, itemIndex) => import_react78.default.createElement(
      Token,
      { ariaLabel: item.label, dismissLabel: item.dismissLabel, onDismiss: () => {
        fireNonCancelableEvent(onDismiss, { itemIndex });
        setRemovedItemIndex(itemIndex);
      }, disabled: item.disabled },
      import_react78.default.createElement(option_default, { option: item, isGenericGroup: false })
    ), i18nStrings, limitShowFewerAriaLabel, limitShowMoreAriaLabel, moveFocusNextToIndex: removedItemIndex, onExpandedClick: (isExpanded) => {
      if (isExpanded && limit) {
        setRemovedItemIndex(limit);
      } else {
        setRemovedItemIndex(null);
      }
    } })
  );
}

// node_modules/@cloudscape-design/components/multiselect/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/multiselect/styles.scoped.css";
var styles_css_default27 = {
  "root": "awsui_root_f8g6q_17z04_99",
  "tokens": "awsui_tokens_f8g6q_17z04_134"
};

// node_modules/@cloudscape-design/components/multiselect/internal.js
var InternalMultiselect = import_react79.default.forwardRef((_a, externalRef) => {
  var _b;
  var { options = [], filteringType = "none", filteringPlaceholder, filteringAriaLabel, filteringClearAriaLabel, filteringResultsText, ariaRequired, placeholder, disabled, ariaLabel, statusType = "finished", empty, loadingText, finishedText, errorText, noMatch, renderHighlightedAriaLive, selectedOptions = [], deselectAriaLabel, keepOpen = true, tokenLimit, i18nStrings, onBlur, onFocus, onLoadItems, onChange, virtualScroll, inlineTokens = false, hideTokens = false, expandToViewport, tokenLimitShowFewerAriaLabel, tokenLimitShowMoreAriaLabel, __internalRootRef = null, autoFocus } = _a, restProps = __rest(_a, ["options", "filteringType", "filteringPlaceholder", "filteringAriaLabel", "filteringClearAriaLabel", "filteringResultsText", "ariaRequired", "placeholder", "disabled", "ariaLabel", "statusType", "empty", "loadingText", "finishedText", "errorText", "noMatch", "renderHighlightedAriaLive", "selectedOptions", "deselectAriaLabel", "keepOpen", "tokenLimit", "i18nStrings", "onBlur", "onFocus", "onLoadItems", "onChange", "virtualScroll", "inlineTokens", "hideTokens", "expandToViewport", "tokenLimitShowFewerAriaLabel", "tokenLimitShowMoreAriaLabel", "__internalRootRef", "autoFocus"]);
  checkOptionValueField("Multiselect", "options", options);
  const baseProps = getBaseProps(restProps);
  const formFieldContext = useFormFieldContext(restProps);
  const i18n = useInternalI18n("multiselect");
  const i18nCommon = useInternalI18n("select");
  const recoveryText = i18nCommon("recoveryText", restProps.recoveryText);
  const errorIconAriaLabel = i18nCommon("errorIconAriaLabel", restProps.errorIconAriaLabel);
  const selectedAriaLabel = i18nCommon("selectedAriaLabel", restProps.selectedAriaLabel);
  if (restProps.recoveryText && !onLoadItems) {
    warnOnce("Multiselect", "`onLoadItems` must be provided for `recoveryText` to be displayed.");
  }
  const { handleLoadMore, handleRecoveryClick, fireLoadItems } = useLoadItems({
    onLoadItems,
    options,
    statusType
  });
  const useInteractiveGroups = true;
  const [filteringValue, setFilteringValue] = (0, import_react79.useState)("");
  const { filteredOptions, parentMap, totalCount, matchesCount } = prepareOptions(options, filteringType, filteringValue);
  const updateSelectedOption = (0, import_react79.useCallback)((option) => {
    const filtered = filteredOptions.filter((item) => item.type !== "parent").map((item) => item.option);
    const isAllChildrenSelected = (optionsArray) => optionsArray.every((item) => findOptionIndex(selectedOptions, item) > -1 || item.disabled);
    const intersection = (visibleOptions, options2) => visibleOptions.filter((item) => findOptionIndex(options2, item) > -1 && !item.disabled);
    const union = (visibleOptions, options2) => visibleOptions.filter((item) => findOptionIndex(options2, item) === -1).concat(options2);
    const select = (options2, selectedOptions2) => {
      return union(selectedOptions2, options2);
    };
    const unselect = (options2, selectedOptions2) => {
      return selectedOptions2.filter((option2) => findOptionIndex(options2, option2) === -1);
    };
    let newSelectedOptions = [...selectedOptions];
    if (isGroup(option)) {
      const visibleOptions = intersection([...option.options], filtered);
      newSelectedOptions = isAllChildrenSelected(visibleOptions) ? unselect(visibleOptions, newSelectedOptions) : select(visibleOptions, newSelectedOptions);
    } else {
      newSelectedOptions = isAllChildrenSelected([option]) ? unselect([option], newSelectedOptions) : select([option], newSelectedOptions);
    }
    fireNonCancelableEvent(onChange, {
      selectedOptions: newSelectedOptions
    });
  }, [onChange, selectedOptions, filteredOptions]);
  const rootRef = (0, import_react79.useRef)(null);
  const selfControlId = useUniqueId("trigger");
  const controlId = (_b = formFieldContext.controlId) !== null && _b !== void 0 ? _b : selfControlId;
  const multiSelectAriaLabelId = useUniqueId("multiselect-arialabel-");
  const footerId = useUniqueId("footer");
  const scrollToIndex = (0, import_react79.useRef)(null);
  const { isOpen, highlightType, highlightedOption, highlightedIndex, getTriggerProps, getDropdownProps, getFilterProps, getMenuProps, getOptionProps: getOptionProps2, highlightOption, announceSelected } = useSelect({
    selectedOptions,
    updateSelectedOption,
    options: filteredOptions,
    filteringType,
    onFocus,
    onBlur,
    externalRef,
    keepOpen,
    fireLoadItems,
    setFilteringValue,
    useInteractiveGroups,
    statusType
  });
  const handleNativeSearch = useNativeSearch({
    isEnabled: filteringType === "none" && isOpen,
    options: filteredOptions,
    highlightOption,
    highlightedOption: highlightedOption === null || highlightedOption === void 0 ? void 0 : highlightedOption.option,
    useInteractiveGroups
  });
  const isEmpty = !options || options.length === 0;
  const isNoMatch = filteredOptions && filteredOptions.length === 0;
  const isFiltered = filteringType !== "none" && filteringValue.length > 0 && filteredOptions && filteredOptions.length > 0;
  const filteredText = isFiltered ? filteringResultsText === null || filteringResultsText === void 0 ? void 0 : filteringResultsText(matchesCount, totalCount) : void 0;
  const dropdownStatus = useDropdownStatus({
    statusType,
    empty,
    loadingText,
    finishedText,
    errorText,
    recoveryText,
    isEmpty,
    isNoMatch,
    noMatch,
    isFiltered,
    filteringResultsText: filteredText,
    onRecoveryClick: handleRecoveryClick,
    errorIconAriaLabel,
    hasRecoveryCallback: !!onLoadItems
  });
  const filter = import_react79.default.createElement(filter_default, Object.assign({ clearAriaLabel: filteringClearAriaLabel, filteringType, placeholder: filteringPlaceholder, ariaLabel: filteringAriaLabel, ariaRequired, value: filteringValue }, getFilterProps()));
  const trigger = import_react79.default.createElement(trigger_default, Object.assign({ placeholder, disabled, triggerProps: getTriggerProps(disabled, autoFocus), selectedOption: null, selectedOptions, triggerVariant: inlineTokens ? "tokens" : "placeholder", isOpen }, formFieldContext, { controlId, ariaLabelledby: joinStrings(formFieldContext.ariaLabelledby, multiSelectAriaLabelId) }));
  const menuProps = Object.assign(Object.assign({}, getMenuProps()), { onLoadMore: handleLoadMore, ariaLabelledby: joinStrings(multiSelectAriaLabelId, controlId), ariaDescribedby: dropdownStatus.content ? footerId : void 0 });
  const announcement = useAnnouncement({
    announceSelected,
    highlightedOption,
    getParent: (option) => {
      var _a2;
      return (_a2 = parentMap.get(option)) === null || _a2 === void 0 ? void 0 : _a2.option;
    },
    selectedAriaLabel,
    renderHighlightedAriaLive
  });
  const tokens = selectedOptions.map((option) => ({
    label: option.label,
    disabled: disabled || option.disabled,
    labelTag: option.labelTag,
    description: option.description,
    iconAlt: option.iconAlt,
    iconName: option.iconName,
    iconUrl: option.iconUrl,
    iconSvg: option.iconSvg,
    tags: option.tags,
    dismissLabel: i18n("deselectAriaLabel", deselectAriaLabel === null || deselectAriaLabel === void 0 ? void 0 : deselectAriaLabel(option), (format3) => {
      var _a2;
      return format3({ option__label: (_a2 = option.label) !== null && _a2 !== void 0 ? _a2 : "" });
    })
  }));
  (0, import_react79.useEffect)(() => {
    var _a2;
    (_a2 = scrollToIndex.current) === null || _a2 === void 0 ? void 0 : _a2.call(scrollToIndex, highlightedIndex);
  }, [highlightedIndex]);
  const ListComponent = virtualScroll ? virtual_list_default : plain_list_default;
  const handleMouseDown = (event) => {
    const target = event.target;
    if (target !== document.activeElement) {
      event.preventDefault();
    }
  };
  const showTokens = !hideTokens && !inlineTokens && tokens.length > 0;
  const handleTokenDismiss = ({ detail }) => {
    const optionToDeselect = selectedOptions[detail.itemIndex];
    updateSelectedOption(optionToDeselect);
    const targetRef = getTriggerProps().ref;
    if (targetRef.current) {
      targetRef.current.focus();
    }
  };
  const tokenGroupI18nStrings = {
    limitShowFewer: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tokenLimitShowFewer,
    limitShowMore: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tokenLimitShowMore
  };
  const mergedRef = useMergeRefs(rootRef, __internalRootRef);
  const dropdownProps = getDropdownProps();
  return import_react79.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: mergedRef, className: clsx_m_default(styles_css_default27.root, baseProps.className), onKeyPress: handleNativeSearch }),
    import_react79.default.createElement(
      dropdown_default,
      Object.assign({}, dropdownProps, { ariaLabelledby: dropdownProps.dropdownContentRole ? joinStrings(multiSelectAriaLabelId, controlId) : void 0, ariaDescribedby: dropdownProps.dropdownContentRole ? dropdownStatus.content ? footerId : void 0 : void 0, open: isOpen, trigger, header: filter, onMouseDown: handleMouseDown, footer: dropdownStatus.isSticky ? import_react79.default.createElement(dropdown_footer_default, { content: isOpen ? dropdownStatus.content : null, id: footerId }) : null, expandToViewport, stretchBeyondTriggerWidth: true }),
      import_react79.default.createElement(ListComponent, { listBottom: !dropdownStatus.isSticky ? import_react79.default.createElement(dropdown_footer_default, { content: isOpen ? dropdownStatus.content : null, id: footerId }) : null, menuProps, getOptionProps: getOptionProps2, filteredOptions, filteringValue, ref: scrollToIndex, hasDropdownStatus: dropdownStatus.content !== null, checkboxes: true, useInteractiveGroups, screenReaderContent: announcement, highlightType })
    ),
    showTokens && import_react79.default.createElement(InternalTokenGroup, { className: styles_css_default27.tokens, alignment: "horizontal", limit: tokenLimit, items: tokens, onDismiss: handleTokenDismiss, i18nStrings: tokenGroupI18nStrings, limitShowMoreAriaLabel: tokenLimitShowMoreAriaLabel, limitShowFewerAriaLabel: tokenLimitShowFewerAriaLabel, disableOuterPadding: true }),
    import_react79.default.createElement(ScreenreaderOnly, { id: multiSelectAriaLabelId }, ariaLabel)
  );
});
var internal_default9 = InternalMultiselect;

// node_modules/@cloudscape-design/components/internal/components/chart-series-marker/index.js
var import_react80 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-series-marker/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/chart-series-marker/styles.scoped.css";
var styles_css_default28 = {
  "marker": "awsui_marker_1isd1_t85q3_99",
  "marker--line": "awsui_marker--line_1isd1_t85q3_142",
  "marker--rectangle": "awsui_marker--rectangle_1isd1_t85q3_146",
  "marker--hollow-rectangle": "awsui_marker--hollow-rectangle_1isd1_t85q3_153",
  "marker--dashed": "awsui_marker--dashed_1isd1_t85q3_169"
};

// node_modules/@cloudscape-design/components/internal/components/chart-series-marker/index.js
var chart_series_marker_default = (0, import_react80.memo)(ChartSeriesMarker);
function ChartSeriesMarker({ type = "line", color: color2 }) {
  return import_react80.default.createElement("span", { className: clsx_m_default(styles_css_default28.marker, styles_css_default28[`marker--${type}`]), style: { backgroundColor: color2 }, "aria-hidden": "true" });
}

// node_modules/@cloudscape-design/components/internal/components/chart-filter/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/chart-filter/styles.scoped.css";
var styles_css_default29 = {
  "root": "awsui_root_1px7g_1cmh4_99",
  "chart-filter": "awsui_chart-filter_1px7g_1cmh4_134",
  "custom-icon-wrapper": "awsui_custom-icon-wrapper_1px7g_1cmh4_138"
};

// node_modules/@cloudscape-design/components/internal/components/chart-filter/index.js
var chart_filter_default = (0, import_react81.memo)(ChartFilter);
function ChartFilter(_a) {
  var { series, i18nStrings, selectedSeries, onChange } = _a, restProps = __rest(_a, ["series", "i18nStrings", "selectedSeries", "onChange"]);
  const baseProps = getBaseProps(restProps);
  const className2 = clsx_m_default(baseProps.className, styles_css_default29.root);
  const i18n = useInternalI18n("[charts]");
  const defaultOptions3 = series.map((d, i) => ({
    label: d.label,
    value: "" + i,
    datum: d.datum,
    __customIcon: import_react81.default.createElement(
      "span",
      { className: styles_css_default29["custom-icon-wrapper"] },
      import_react81.default.createElement(chart_series_marker_default, { color: d.color, type: d.type })
    )
  }));
  const selectedOptions = defaultOptions3.filter((option) => (selectedSeries === null || selectedSeries === void 0 ? void 0 : selectedSeries.indexOf(option.datum)) !== -1);
  const updateSelection = (0, import_react81.useCallback)(({ detail: { selectedOptions: selectedOptions2 } }) => {
    const selectedSeries2 = defaultOptions3.filter((option) => selectedOptions2.indexOf(option) !== -1).map((option) => option.datum);
    onChange(selectedSeries2);
  }, [onChange, defaultOptions3]);
  return import_react81.default.createElement(
    InternalFormField,
    Object.assign({}, baseProps, { label: i18n("i18nStrings.filterLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filterLabel), className: className2 }),
    import_react81.default.createElement(internal_default9, { placeholder: i18n("i18nStrings.filterPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filterPlaceholder), options: defaultOptions3, selectedOptions, onChange: updateSelection, className: styles_css_default29["chart-filter"], selectedAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filterSelectedAriaLabel, hideTokens: true })
  );
}

// node_modules/@cloudscape-design/components/area-chart/elements/area-chart-filter.js
var area_chart_filter_default = (0, import_react82.memo)(AreaChartFilter);
function AreaChartFilter({ model, filterLabel, filterPlaceholder, filterSelectedAriaLabel }) {
  const filterItems = model.allSeries.map((s2) => {
    const { title, color: color2, markerType } = model.getInternalSeries(s2);
    return { label: title, color: color2, type: markerType, datum: s2 };
  });
  return import_react82.default.createElement(chart_filter_default, { series: filterItems, onChange: model.handlers.onFilterSeries, selectedSeries: model.series, i18nStrings: {
    filterLabel,
    filterPlaceholder,
    filterSelectedAriaLabel
  } });
}

// node_modules/@cloudscape-design/components/area-chart/elements/area-chart-legend.js
var import_react85 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-legend/index.js
var import_react83 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-legend/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/chart-legend/styles.scoped.css";
var styles_css_default30 = {
  "marker": "awsui_marker_1kjc7_12d3z_99",
  "root": "awsui_root_1kjc7_12d3z_117",
  "title": "awsui_title_1kjc7_12d3z_155",
  "list": "awsui_list_1kjc7_12d3z_159",
  "marker--dimmed": "awsui_marker--dimmed_1kjc7_12d3z_208",
  "marker--highlighted": "awsui_marker--highlighted_1kjc7_12d3z_211"
};

// node_modules/@cloudscape-design/components/internal/components/chart-legend/index.js
var chart_legend_default = (0, import_react83.memo)(ChartLegend);
function ChartLegend({ series, onHighlightChange, highlightedSeries, legendTitle, ariaLabel, plotContainerRef }) {
  const i18n = useInternalI18n("[charts]");
  const containerRef = (0, import_react83.useRef)(null);
  const segmentsRef = (0, import_react83.useRef)([]);
  const highlightedSeriesIndex = findSeriesIndex(series, highlightedSeries);
  const highlightLeft = () => {
    var _a;
    const currentIndex = highlightedSeriesIndex !== null && highlightedSeriesIndex !== void 0 ? highlightedSeriesIndex : 0;
    const nextIndex = currentIndex - 1 >= 0 ? currentIndex - 1 : series.length - 1;
    (_a = segmentsRef.current[nextIndex]) === null || _a === void 0 ? void 0 : _a.focus();
  };
  const highlightRight = () => {
    var _a;
    const currentIndex = highlightedSeriesIndex !== null && highlightedSeriesIndex !== void 0 ? highlightedSeriesIndex : 0;
    const nextIndex = currentIndex + 1 < series.length ? currentIndex + 1 : 0;
    (_a = segmentsRef.current[nextIndex]) === null || _a === void 0 ? void 0 : _a.focus();
  };
  const handleKeyPress = (event) => {
    if (event.keyCode === KeyCode.right || event.keyCode === KeyCode.left) {
      event.preventDefault();
      switch (event.keyCode) {
        case KeyCode.left:
          return highlightLeft();
        case KeyCode.right:
          return highlightRight();
        default:
          return;
      }
    }
  };
  const handleSelection = (index) => {
    if (series[index].datum !== highlightedSeries) {
      onHighlightChange(series[index].datum);
    }
  };
  const handleBlur = (event) => {
    var _a;
    if (event.relatedTarget === null || containerRef.current && !containerRef.current.contains(event.relatedTarget) && !((_a = plotContainerRef === null || plotContainerRef === void 0 ? void 0 : plotContainerRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {
      onHighlightChange(null);
    }
  };
  const handleMouseOver = (s2) => {
    if (s2 !== highlightedSeries) {
      onHighlightChange(s2);
    }
  };
  const handleMouseLeave = () => {
    onHighlightChange(null);
  };
  return import_react83.default.createElement(
    import_react83.default.Fragment,
    null,
    import_react83.default.createElement(
      "div",
      { ref: containerRef, role: "toolbar", "aria-label": legendTitle || i18n("i18nStrings.legendAriaLabel", ariaLabel), className: styles_css_default30.root, onKeyDown: handleKeyPress, onBlur: handleBlur },
      legendTitle && import_react83.default.createElement(InternalBox, { fontWeight: "bold", className: styles_css_default30.title }, legendTitle),
      import_react83.default.createElement("div", { className: styles_css_default30.list }, series.map((s2, index) => {
        const someHighlighted = highlightedSeries !== null;
        const isHighlighted = highlightedSeries === s2.datum;
        const isDimmed = someHighlighted && !isHighlighted;
        return import_react83.default.createElement(
          "div",
          { role: "button", key: index, "aria-pressed": isHighlighted, className: clsx_m_default(styles_css_default30.marker, {
            [styles_css_default30["marker--dimmed"]]: isDimmed,
            [styles_css_default30["marker--highlighted"]]: isHighlighted
          }), ref: (elem) => {
            if (elem) {
              segmentsRef.current[index] = elem;
            } else {
              delete segmentsRef.current[index];
            }
          }, tabIndex: index === highlightedSeriesIndex || highlightedSeriesIndex === void 0 && index === 0 ? 0 : -1, onFocus: () => handleSelection(index), onClick: () => handleSelection(index), onMouseOver: () => handleMouseOver(s2.datum), onMouseLeave: handleMouseLeave },
          import_react83.default.createElement(chart_series_marker_default, { color: s2.color, type: s2.type }),
          " ",
          s2.label
        );
      }))
    )
  );
}
function findSeriesIndex(series, targetSeries) {
  for (let index = 0; index < series.length; index++) {
    if (series[index].datum === targetSeries) {
      return index;
    }
  }
  return void 0;
}

// node_modules/@cloudscape-design/components/area-chart/async-store/index.js
var import_react84 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());
var AsyncStore = class {
  constructor(state) {
    this._listeners = [];
    this._state = state;
  }
  get() {
    return this._state;
  }
  set(cb) {
    const prevState = this._state;
    const newState = cb(prevState);
    this._state = newState;
    (0, import_react_dom2.unstable_batchedUpdates)(() => {
      for (const [selector, listener] of this._listeners) {
        if (selector(prevState) !== selector(newState)) {
          listener(newState, prevState);
        }
      }
    });
  }
  subscribe(selector, listener) {
    this._listeners.push([selector, listener]);
    return () => this.unsubscribe(listener);
  }
  unsubscribe(listener) {
    for (let index = 0; index < this._listeners.length; index++) {
      const [, storedListener] = this._listeners[index];
      if (storedListener === listener) {
        this._listeners.splice(index, 1);
        break;
      }
    }
  }
};
function useReaction(store, selector, effect) {
  (0, import_react84.useLayoutEffect)(
    () => {
      const unsubscribe = store.subscribe(selector, (newState, prevState) => effect(selector(newState), selector(prevState)));
      return unsubscribe;
    },
    // ignoring selector and effect as they are expected to stay constant
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [store]
  );
}
function useSelector(store, selector) {
  const [state, setState] = (0, import_react84.useState)(selector(store.get()));
  useReaction(store, selector, (newState) => {
    setState(newState);
  });
  const prevStore = usePrevious(store);
  if (prevStore !== null && prevStore !== store) {
    return selector(store.get());
  }
  return state;
}

// node_modules/@cloudscape-design/components/area-chart/elements/area-chart-legend.js
var area_chart_legend_default = (0, import_react85.memo)(AreaChartLegend);
function AreaChartLegend({ model, legendTitle, ariaLabel, plotContainerRef }) {
  const legendItems = (0, import_react85.useMemo)(() => model.series.map((s2) => {
    const { title, color: color2, markerType } = model.getInternalSeries(s2);
    return { label: title, color: color2, type: markerType, datum: s2 };
  }), [model]);
  const legendSeries = useSelector(model.interactions, (state) => state.legendSeries);
  return import_react85.default.createElement(chart_legend_default, { series: legendItems, highlightedSeries: legendSeries, onHighlightChange: model.handlers.onLegendHighlight, legendTitle, ariaLabel, plotContainerRef });
}

// node_modules/@cloudscape-design/components/area-chart/chart-container.js
var import_react113 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-plot/index.js
var import_react88 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-plot/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/chart-plot/styles.scoped.css";
var styles_css_default31 = {
  "root": "awsui_root_1fcus_y6use_99",
  "clickable": "awsui_clickable_1fcus_y6use_108",
  "precise": "awsui_precise_1fcus_y6use_112",
  "focus-outline": "awsui_focus-outline_1fcus_y6use_116",
  "application": "awsui_application_1fcus_y6use_125"
};

// node_modules/@cloudscape-design/components/internal/components/chart-plot/application-controller.js
var import_react86 = __toESM(require_react());
var application_controller_default = (0, import_react86.forwardRef)(ApplicationController);
function ApplicationController({ activeElementKey, activeElementRef, onFocus, onBlur, onKeyDown }, ref) {
  const containerRef = (0, import_react86.useRef)(null);
  const applicationRef = (0, import_react86.useRef)(null);
  const focusTransitionRef = (0, import_react86.useRef)(false);
  const [isFocused, setFocused] = (0, import_react86.useState)(false);
  const onApplicationFocus = (0, import_react86.useCallback)((event) => {
    if (focusTransitionRef.current === false) {
      setFocused(true);
      onFocus && onFocus(event);
    } else {
      focusTransitionRef.current = false;
    }
  }, [onFocus]);
  const onApplicationBlur = (0, import_react86.useCallback)((event) => {
    if (focusTransitionRef.current === false) {
      setFocused(false);
      onBlur && onBlur(event);
      muteApplication(applicationRef.current);
    }
  }, [onBlur]);
  const onApplicationKeyDown = onKeyDown;
  (0, import_react86.useImperativeHandle)(ref, () => ({
    focus: () => focusApplication(applicationRef.current, (activeElementRef === null || activeElementRef === void 0 ? void 0 : activeElementRef.current) || null)
  }), [activeElementRef]);
  (0, import_react86.useEffect)(() => {
    if (!isFocused || focusTransitionRef.current === true) {
      return;
    }
    focusTransitionRef.current = true;
    containerRef.current.removeChild(applicationRef.current);
    containerRef.current.appendChild(applicationRef.current);
    focusApplication(applicationRef.current, (activeElementRef === null || activeElementRef === void 0 ? void 0 : activeElementRef.current) || null);
  }, [isFocused, activeElementKey, activeElementRef]);
  return import_react86.default.createElement(
    "g",
    { ref: containerRef },
    import_react86.default.createElement("g", { tabIndex: -1, ref: applicationRef, onFocus: onApplicationFocus, onBlur: onApplicationBlur, onKeyDown: onApplicationKeyDown, className: styles_css_default31.application })
  );
}
function focusApplication(app, target) {
  for (const attributeName of getAttributeNames(app)) {
    if (attributeName === "role" || attributeName.slice(0, 4) === "aria") {
      app.removeAttribute(attributeName);
    }
  }
  if (target) {
    for (const attributeName of getAttributeNames(target)) {
      if (attributeName === "role" || attributeName.slice(0, 4) === "aria") {
        const attributeValue = target.getAttribute(attributeName);
        attributeValue && app.setAttribute(attributeName, attributeValue);
      }
    }
  }
  app.tabIndex = 0;
  app.setAttribute("focusable", "true");
  app.setAttribute("aria-hidden", "false");
  app.focus({ preventScroll: true });
}
function muteApplication(app) {
  for (const attributeName of getAttributeNames(app)) {
    if (attributeName === "role" || attributeName.slice(0, 4) === "aria") {
      app.removeAttribute(attributeName);
    }
  }
  app.tabIndex = -1;
  app.setAttribute("focusable", "false");
  app.setAttribute("aria-hidden", "true");
}
function getAttributeNames(element) {
  const attributes = element.attributes;
  const result = new Array(attributes.length);
  for (let i = 0; i < attributes.length; i++) {
    result[i] = attributes[i].name;
  }
  return result;
}

// node_modules/@cloudscape-design/components/internal/components/chart-plot/focus-outline.js
var import_react87 = __toESM(require_react());
function useFocusVisibleState() {
  const [focusVisible, setFocusVisible] = (0, import_react87.useState)(false);
  (0, import_react87.useEffect)(() => {
    function handleMousedown() {
      return setFocusVisible(false);
    }
    function handleKeydown(event) {
      if (!isModifierKey(event)) {
        setFocusVisible(true);
      }
    }
    document.addEventListener("mousedown", handleMousedown);
    document.addEventListener("keydown", handleKeydown);
    return () => {
      document.removeEventListener("mousedown", handleMousedown);
      document.removeEventListener("keydown", handleKeydown);
    };
  });
  return focusVisible;
}
function FocusOutline({ elementKey, elementRef, offset = 0 }) {
  const ref = (0, import_react87.useRef)(null);
  const focusVisible = useFocusVisibleState();
  (0, import_react87.useEffect)(() => {
    if (!ref.current) {
      return;
    }
    if (focusVisible && elementKey && elementRef && elementRef.current && elementRef.current.getBBox) {
      const element = elementRef.current.getBBox();
      showOutline(ref.current, element, offset);
    } else {
      hideOutline(ref.current);
    }
  }, [focusVisible, elementKey, elementRef, offset]);
  return import_react87.default.createElement("rect", { ref, "aria-hidden": "true", className: styles_css_default31["focus-outline"], rx: "2" });
}
function showOutline(el, position, offset) {
  const offsetX = typeof offset === "number" ? offset : offset.x;
  const offsetY = typeof offset === "number" ? offset : offset.y;
  el.setAttribute("x", (position.x - offsetX).toString());
  el.setAttribute("y", (position.y - offsetY).toString());
  el.setAttribute("width", (position.width + 2 * offsetX).toString());
  el.setAttribute("height", (position.height + 2 * offsetY).toString());
  el.style.visibility = "visible";
}
function hideOutline(el) {
  el.style.visibility = "hidden";
  el.removeAttribute("x");
  el.removeAttribute("y");
  el.removeAttribute("width");
  el.removeAttribute("height");
}

// node_modules/@cloudscape-design/components/internal/components/chart-plot/index.js
var DEFAULT_PLOT_FOCUS_OFFSET = 3;
var DEFAULT_ELEMENT_FOCUS_OFFSET = 3;
var chart_plot_default = (0, import_react88.forwardRef)(ChartPlot);
function ChartPlot({ width, height, transform, offsetTop, offsetBottom, offsetLeft, offsetRight, ariaLabel, ariaLabelledby, ariaRoleDescription, ariaDescription, ariaDescribedby, activeElementKey, activeElementRef, ariaLiveRegion, isClickable, isPrecise, children, onClick, onKeyDown, focusOffset = DEFAULT_PLOT_FOCUS_OFFSET, activeElementFocusOffset = DEFAULT_ELEMENT_FOCUS_OFFSET, onMouseMove, onMouseOut, onApplicationBlur, onApplicationFocus }, ref) {
  const i18n = useInternalI18n("[charts]");
  const svgRef = (0, import_react88.useRef)(null);
  const applicationRef = (0, import_react88.useRef)(null);
  const plotClickedRef = (0, import_react88.useRef)(false);
  const [isPlotFocused, setPlotFocused] = (0, import_react88.useState)(false);
  const [isApplicationFocused, setApplicationFocused] = (0, import_react88.useState)(false);
  const internalDescriptionId = useUniqueId("awsui-chart-plot__description");
  const ariaDescriptionId = [ariaDescription && internalDescriptionId, ariaDescribedby].filter(Boolean).join(" ");
  (0, import_react88.useImperativeHandle)(ref, () => ({
    svg: svgRef.current,
    focusPlot: () => svgRef.current.focus(),
    focusApplication: () => applicationRef.current.focus()
  }));
  const onPlotMouseDown = () => {
    plotClickedRef.current = true;
  };
  const onPlotFocus = (event) => {
    if (plotClickedRef.current || !!activeElementKey) {
      applicationRef.current.focus();
    } else if (event.target === svgRef.current) {
      setPlotFocused(true);
    }
  };
  const onPlotClick = (event) => {
    onClick && onClick(event);
  };
  const onPlotBlur = (event) => {
    if (event.target === svgRef.current) {
      setPlotFocused(false);
    }
  };
  const onPlotKeyDown = (event) => {
    if (isPlotFocused) {
      const codes = [KeyCode.space, KeyCode.enter, KeyCode.up, KeyCode.left, KeyCode.right, KeyCode.down];
      if (codes.indexOf(event.keyCode) !== -1) {
        applicationRef.current.focus();
      }
    }
  };
  const onPlotApplicationFocus = (event) => {
    onApplicationFocus && onApplicationFocus(event, plotClickedRef.current ? "mouse" : "keyboard");
    plotClickedRef.current = false;
    setApplicationFocused(true);
  };
  const onPlotApplicationBlur = (event) => {
    onApplicationBlur && onApplicationBlur(event);
    setApplicationFocused(false);
  };
  const onApplicationKeyDown = onKeyDown;
  const plotFocusable = !isApplicationFocused;
  const plotTabIndex = plotFocusable ? 0 : -1;
  const plotAria = !isApplicationFocused ? {
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    "aria-describedby": ariaDescriptionId,
    "aria-roledescription": i18n("i18nStrings.chartAriaRoleDescription", ariaRoleDescription)
  } : {};
  return import_react88.default.createElement(
    import_react88.default.Fragment,
    null,
    import_react88.default.createElement(
      "svg",
      Object.assign({ onMouseMove, onMouseOut, focusable: plotFocusable, tabIndex: plotTabIndex, role: "application", "aria-hidden": "false" }, plotAria, { ref: svgRef, style: {
        width,
        height,
        marginTop: offsetTop,
        marginBottom: offsetBottom,
        marginLeft: offsetLeft,
        marginRight: offsetRight
      }, className: clsx_m_default(styles_css_default31.root, {
        [styles_css_default31.clickable]: isClickable,
        [styles_css_default31.precise]: isPrecise
      }), onMouseDown: onPlotMouseDown, onClick: onPlotClick, onFocus: onPlotFocus, onBlur: onPlotBlur, onKeyDown: onPlotKeyDown }),
      import_react88.default.createElement(FocusOutline, { elementRef: svgRef, elementKey: isPlotFocused, offset: focusOffset }),
      import_react88.default.createElement(
        "g",
        { transform },
        import_react88.default.createElement(application_controller_default, { activeElementKey: isApplicationFocused && activeElementKey || null, activeElementRef, ref: applicationRef, onFocus: onPlotApplicationFocus, onBlur: onPlotApplicationBlur, onKeyDown: onApplicationKeyDown }),
        ariaDescription && plotFocusable && import_react88.default.createElement("desc", { "aria-hidden": "true", id: internalDescriptionId }, ariaDescription),
        children,
        import_react88.default.createElement(FocusOutline, { elementRef: activeElementRef, elementKey: isApplicationFocused && activeElementKey, offset: activeElementFocusOffset })
      )
    ),
    import_react88.default.createElement(live_region_default, null, ariaLiveRegion)
  );
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/axis-label.js
var import_react89 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/cartesian-chart/styles.scoped.css";
var styles_css_default32 = {
  "axis": "awsui_axis_f0fot_f6jsx_9",
  "vertical-marker": "awsui_vertical-marker_f0fot_f6jsx_10",
  "axis--emphasized": "awsui_axis--emphasized_f0fot_f6jsx_15",
  "axis-label": "awsui_axis-label_f0fot_f6jsx_19",
  "axis-label--x": "awsui_axis-label--x_f0fot_f6jsx_24",
  "axis-label--y": "awsui_axis-label--y_f0fot_f6jsx_25",
  "grid": "awsui_grid_f0fot_f6jsx_29",
  "ticks__line": "awsui_ticks__line_f0fot_f6jsx_34",
  "ticks__text": "awsui_ticks__text_f0fot_f6jsx_39",
  "ticks--y": "awsui_ticks--y_f0fot_f6jsx_44",
  "ticks--x": "awsui_ticks--x_f0fot_f6jsx_45",
  "ticks--bottom": "awsui_ticks--bottom_f0fot_f6jsx_49",
  "labels-left": "awsui_labels-left_f0fot_f6jsx_54",
  "ticks": "awsui_ticks_f0fot_f6jsx_34",
  "labels-left__label": "awsui_labels-left__label_f0fot_f6jsx_69",
  "labels-left--hidden": "awsui_labels-left--hidden_f0fot_f6jsx_73",
  "labels-bottom": "awsui_labels-bottom_f0fot_f6jsx_81",
  "vertical-marker-circle": "awsui_vertical-marker-circle_f0fot_f6jsx_92",
  "vertical-marker-circle-active": "awsui_vertical-marker-circle-active_f0fot_f6jsx_98",
  "focus-outline": "awsui_focus-outline_f0fot_f6jsx_103",
  "chart-container": "awsui_chart-container_f0fot_f6jsx_111",
  "fit-height": "awsui_fit-height_f0fot_f6jsx_116",
  "chart-container-outer": "awsui_chart-container-outer_f0fot_f6jsx_121",
  "chart-container-inner": "awsui_chart-container-inner_f0fot_f6jsx_128",
  "chart-container-plot-wrapper": "awsui_chart-container-plot-wrapper_f0fot_f6jsx_135",
  "chart-container-plot": "awsui_chart-container-plot_f0fot_f6jsx_135",
  "chart-container-bottom-labels": "awsui_chart-container-bottom-labels_f0fot_f6jsx_147"
};

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/axis-label.js
var axis_label_default = (0, import_react89.memo)(AxisLabel);
function AxisLabel({ title, axis, position }) {
  if (!title) {
    return null;
  }
  return import_react89.default.createElement(
    InternalBox,
    { className: clsx_m_default(styles_css_default32["axis-label"], axis === "x" ? styles_css_default32["axis-label--x"] : styles_css_default32["axis-label--y"]), fontWeight: "bold", textAlign: position === "left" ? "left" : "center", margin: { bottom: position === "left" ? "l" : "n" } },
    import_react89.default.createElement("span", { "aria-hidden": "true" }, title)
  );
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/labels-measure.js
var import_react90 = __toESM(require_react());
var labels_measure_default = (0, import_react90.memo)(LabelsMeasure);
function LabelsMeasure({ scale, ticks: ticks2, tickFormatter, autoWidth, maxLabelsWidth }) {
  const [width, ref] = useContainerQuery((rect) => rect.contentBoxWidth);
  (0, import_react90.useEffect)(() => {
    autoWidth(width || 0);
  }, [autoWidth, width]);
  const labelMapper = (value) => {
    const scaledValue = scale.d3Scale(value);
    if (scaledValue === void 0 || !isFinite(scaledValue)) {
      return null;
    }
    const formattedValue = tickFormatter ? tickFormatter(value) : value.toString();
    const lines = (formattedValue + "").split("\n");
    return import_react90.default.createElement(import_react90.Fragment, { key: `${value}` }, lines.map((line, lineIndex) => import_react90.default.createElement("div", { key: lineIndex, className: styles_css_default32["labels-left__label"], "aria-hidden": "true" }, line)));
  };
  return import_react90.default.createElement("div", { ref, className: clsx_m_default(styles_css_default32["labels-left"], styles_css_default32["labels-left--hidden"]), style: { maxWidth: maxLabelsWidth } }, ticks2.map(labelMapper));
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/left-labels.js
var import_react92 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/constants.js
var TICK_LENGTH = 8;
var TICK_MARGIN = 4;
var TICK_LINE_HEIGHT = 16;
var X_TICK_COUNT_RATIO = 100;
var Y_TICK_COUNT_RATIO = 50;

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/label-utils.js
var SPACE_BETWEEN = 4;
function formatTicks({ ticks: ticks2, scale, getLabelSpace, tickFormatter }) {
  return ticks2.map((tick) => {
    var _a;
    const position = (_a = scale.d3Scale(tick)) !== null && _a !== void 0 ? _a : NaN;
    const label = tickFormatter ? tickFormatter(tick) : tick.toString();
    const lines = (label + "").split("\n");
    return { position, lines, space: Math.max(...lines.map(getLabelSpace)) };
  });
}
function getVisibleTicks(ticks2, from, until, balanceTicks = false) {
  ticks2 = getTicksInRange(ticks2, from, until);
  return balanceTicks ? getReducedTicks(ticks2) : removeIntersections(ticks2);
}
function getTicksInRange(ticks2, from, until) {
  return ticks2.filter((tick) => from <= tick.position - tick.space / 2 && tick.position + tick.space / 2 <= until);
}
function getReducedTicks(ticks2) {
  const reduceLabelRatio = findReduceLabelRatio(ticks2);
  const reducedTicks = [];
  for (let index = 0; index < ticks2.length; index += reduceLabelRatio) {
    reducedTicks.push(ticks2[index]);
  }
  return reducedTicks;
}
function findReduceLabelRatio(ticks2, ratio = 1) {
  if (ratio >= ticks2.length) {
    return ratio;
  }
  for (let i = ratio; i < ticks2.length; i += ratio) {
    if (hasIntersection(ticks2[i - ratio], ticks2[i])) {
      return findReduceLabelRatio(ticks2, ratio + 1);
    }
  }
  return ratio;
}
function removeIntersections(ticks2) {
  const visibleTicks = [];
  let prevTick = null;
  for (const tick of ticks2) {
    if (!prevTick || !hasIntersection(prevTick, tick)) {
      visibleTicks.push(tick);
      prevTick = tick;
    }
  }
  return visibleTicks;
}
function hasIntersection(a2, b) {
  const [left, right] = a2.position < b.position ? [a2, b] : [b, a2];
  const leftEdge = left.position + left.space / 2 + SPACE_BETWEEN;
  const rightEdge = right.position - right.space / 2;
  return leftEdge > rightEdge;
}
function getSVGTextSize(element) {
  if (element && element.getBBox) {
    return element.getBBox();
  }
  return void 0;
}

// node_modules/@cloudscape-design/components/internal/components/responsive-text/index.js
var import_react91 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/responsive-text/responsive-text-utils.js
function getTextWidth(textNode) {
  if (textNode.getComputedTextLength) {
    return textNode.getComputedTextLength();
  }
  return -1;
}

// node_modules/@cloudscape-design/components/internal/components/responsive-text/index.js
var responsive_text_default = (0, import_react91.memo)(ResponsiveText);
function ResponsiveText({ x: x2, y: y2, className: className2, children, maxWidth }) {
  const textRef = (0, import_react91.useRef)(null);
  (0, import_react91.useEffect)(() => {
    renderTextContent(textRef.current, children, maxWidth);
  }, [maxWidth, children]);
  return import_react91.default.createElement("text", { ref: textRef, x: x2, y: y2, style: { textAnchor: "end" }, className: className2 }, children);
}
function renderTextContent(textNode, text, maxWidth) {
  let visibleLength = text.length;
  while (visibleLength >= 0) {
    textNode.textContent = truncateText(text, visibleLength);
    if (getTextWidth(textNode) <= maxWidth) {
      return;
    } else {
      visibleLength--;
    }
  }
}
function truncateText(text, maxLength) {
  if (text.length === maxLength) {
    return text;
  }
  return text.slice(0, maxLength) + "…";
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/left-labels.js
var OFFSET_PX = 12;
var left_labels_default = (0, import_react92.memo)(LeftLabels);
function LeftLabels({ axis = "y", plotWidth, plotHeight, maxLabelsWidth = Number.POSITIVE_INFINITY, scale, ticks: ticks2, tickFormatter, title, ariaRoleDescription }) {
  const i18n = useInternalI18n("[charts]");
  const virtualTextRef = (0, import_react92.useRef)(null);
  const yOffset = axis === "x" && scale.isCategorical() ? Math.max(0, scale.d3Scale.bandwidth() - 1) / 2 : 0;
  const labelToBoxCache = (0, import_react92.useRef)({});
  const getLabelSpace = (label) => {
    var _a, _b, _c, _d;
    if (labelToBoxCache.current[label] !== void 0) {
      return (_b = (_a = labelToBoxCache.current[label]) === null || _a === void 0 ? void 0 : _a.height) !== null && _b !== void 0 ? _b : 0;
    }
    if (virtualTextRef.current) {
      virtualTextRef.current.textContent = label;
    }
    labelToBoxCache.current[label] = getSVGTextSize(virtualTextRef.current);
    return (_d = (_c = labelToBoxCache.current[label]) === null || _c === void 0 ? void 0 : _c.height) !== null && _d !== void 0 ? _d : 0;
  };
  const formattedTicks = formatTicks({ ticks: ticks2, scale, getLabelSpace, tickFormatter });
  if (virtualTextRef.current) {
    virtualTextRef.current.textContent = "";
  }
  const from = 0 - OFFSET_PX - yOffset;
  const until = plotHeight + OFFSET_PX - yOffset;
  const visibleTicks = getVisibleTicks(formattedTicks, from, until);
  return import_react92.default.createElement(
    "g",
    { className: clsx_m_default(styles_css_default32["labels-left"]), "aria-label": title, role: "list", "aria-roledescription": i18n("i18nStrings.chartAriaRoleDescription", ariaRoleDescription), "aria-hidden": true },
    visibleTicks.map(({ position, lines }, index) => isFinite(position) && import_react92.default.createElement(
      "g",
      { key: index, role: "listitem", transform: `translate(0,${position + yOffset})`, className: clsx_m_default(styles_css_default32.ticks, axis === "x" ? styles_css_default32["ticks--x"] : styles_css_default32["ticks--y"]) },
      axis === "y" && import_react92.default.createElement("line", { className: clsx_m_default(styles_css_default32.grid, styles_css_default32.ticks_line), x1: -TICK_LENGTH, y1: 0, x2: plotWidth, y2: 0, "aria-hidden": "true" }),
      lines.map((line, lineIndex) => {
        var _a, _b;
        const lineTextProps = {
          x: -(TICK_LENGTH + TICK_MARGIN),
          y: (lineIndex - (lines.length - 1) * 0.5) * TICK_LINE_HEIGHT,
          className: styles_css_default32.ticks__text,
          children: line
        };
        return ((_b = (_a = labelToBoxCache.current[lines[0]]) === null || _a === void 0 ? void 0 : _a.width) !== null && _b !== void 0 ? _b : 0) > maxLabelsWidth ? import_react92.default.createElement(responsive_text_default, Object.assign({ key: lineIndex }, lineTextProps, { maxWidth: maxLabelsWidth })) : import_react92.default.createElement("text", Object.assign({ key: lineIndex }, lineTextProps));
      })
    )),
    import_react92.default.createElement("text", { ref: virtualTextRef, x: 0, y: 0, style: { visibility: "hidden" }, "aria-hidden": "true" })
  );
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/bottom-labels.js
var import_react93 = __toESM(require_react());
function useBottomLabels({ ticks: ticks2, scale, tickFormatter }) {
  const virtualTextRef = (0, import_react93.useRef)(null);
  const cacheRef = (0, import_react93.useRef)({});
  const getLabelSpace = (label) => {
    if (cacheRef.current[label] !== void 0 && cacheRef.current[label] !== 0) {
      return cacheRef.current[label];
    }
    if (virtualTextRef.current && virtualTextRef.current.getComputedTextLength) {
      virtualTextRef.current.textContent = label;
      cacheRef.current[label] = virtualTextRef.current.getComputedTextLength();
      return cacheRef.current[label];
    }
    return 0;
  };
  const formattedTicks = formatTicks({ ticks: ticks2, scale, getLabelSpace, tickFormatter });
  if (virtualTextRef.current) {
    virtualTextRef.current.textContent = "";
  }
  let height = TICK_LENGTH + TICK_MARGIN;
  for (const { lines } of formattedTicks) {
    height = Math.max(height, TICK_LENGTH + TICK_MARGIN + lines.length * TICK_LINE_HEIGHT);
  }
  return { virtualTextRef, formattedTicks, height };
}
var bottom_labels_default = (0, import_react93.memo)(BottomLabels);
function BottomLabels({ axis = "x", width, height, scale, title, ariaRoleDescription, offsetLeft = 0, offsetRight = 0, virtualTextRef, formattedTicks }) {
  const i18n = useInternalI18n("[charts]");
  const xOffset = scale.isCategorical() && axis === "x" ? Math.max(0, scale.d3Scale.bandwidth() - 1) / 2 : 0;
  const from = 0 - offsetLeft - xOffset;
  const until = width + offsetRight - xOffset;
  const balanceLabels = axis === "x" && scale.scaleType !== "log";
  const visibleTicks = getVisibleTicks(formattedTicks, from, until, balanceLabels);
  return import_react93.default.createElement(
    "g",
    { transform: `translate(0,${height})`, className: styles_css_default32["labels-bottom"], "aria-label": title, role: "list", "aria-roledescription": i18n("i18nStrings.chartAriaRoleDescription", ariaRoleDescription), "aria-hidden": true },
    visibleTicks.map(({ position, lines }, index) => isFinite(position) && import_react93.default.createElement(
      "g",
      { key: index, transform: `translate(${position + xOffset},0)`, className: clsx_m_default(styles_css_default32.ticks, styles_css_default32["ticks--bottom"], {
        [styles_css_default32["ticks--x"]]: axis === "x",
        [styles_css_default32["ticks--y"]]: axis === "y"
      }), role: "listitem", "aria-label": lines.join("\n") },
      import_react93.default.createElement("line", { className: styles_css_default32.ticks__line, x1: 0, x2: 0, y1: 0, y2: TICK_LENGTH, "aria-hidden": "true" }),
      lines.map((line, lineIndex) => import_react93.default.createElement("text", { className: styles_css_default32.ticks__text, key: lineIndex, x: 0, y: TICK_LENGTH + TICK_MARGIN + lineIndex * TICK_LINE_HEIGHT }, line))
    )),
    import_react93.default.createElement("text", { ref: virtualTextRef, x: 0, y: 0, style: { visibility: "hidden" }, "aria-hidden": "true" })
  );
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/emphasized-baseline.js
var import_react94 = __toESM(require_react());
var emphasized_baseline_default = (0, import_react94.memo)(EmphasizedBaseline);
function EmphasizedBaseline({ axis = "x", width, height, scale }) {
  var _a;
  const baselineY = (_a = scale.d3Scale(0)) !== null && _a !== void 0 ? _a : NaN;
  const showYBaseline = axis === "x" && isFinite(baselineY) && baselineY <= height;
  if (showYBaseline) {
    return import_react94.default.createElement("line", { className: clsx_m_default(styles_css_default32.axis, styles_css_default32["axis--emphasized"]), x1: -TICK_MARGIN, x2: width, y1: baselineY, y2: baselineY, "aria-hidden": "true" });
  }
  if (axis === "y") {
    return import_react94.default.createElement("line", { className: clsx_m_default(styles_css_default32.axis, styles_css_default32["axis--emphasized"]), x1: 0, y1: 0, x2: 0, y2: height + TICK_LENGTH, "aria-hidden": "true" });
  }
  return null;
}

// node_modules/@cloudscape-design/components/area-chart/elements/data-series.js
var import_react97 = __toESM(require_react());

// node_modules/@cloudscape-design/components/area-chart/elements/area-series.js
var import_react95 = __toESM(require_react());

// node_modules/d3-path/src/path.js
var pi = Math.PI;
var tau = 2 * pi;
var epsilon = 1e-6;
var tauEpsilon = tau - epsilon;
function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null;
  this._ = "";
}
function path() {
  return new Path();
}
Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function(x2, y2) {
    this._ += "M" + (this._x0 = this._x1 = +x2) + "," + (this._y0 = this._y1 = +y2);
  },
  closePath: function() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function(x2, y2) {
    this._ += "L" + (this._x1 = +x2) + "," + (this._y1 = +y2);
  },
  quadraticCurveTo: function(x1, y1, x2, y2) {
    this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x2) + "," + (this._y1 = +y2);
  },
  bezierCurveTo: function(x1, y1, x2, y2, x3, y3) {
    this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x3) + "," + (this._y1 = +y3);
  },
  arcTo: function(x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    var x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
    if (r < 0) throw new Error("negative radius: " + r);
    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    } else if (!(l01_2 > epsilon)) ;
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
    } else {
      var x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
      if (Math.abs(t01 - 1) > epsilon) {
        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
      }
      this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
    }
  },
  arc: function(x2, y2, r, a0, a1, ccw) {
    x2 = +x2, y2 = +y2, r = +r, ccw = !!ccw;
    var dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x2 + dx, y0 = y2 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
    if (r < 0) throw new Error("negative radius: " + r);
    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    } else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
      this._ += "L" + x0 + "," + y0;
    }
    if (!r) return;
    if (da < 0) da = da % tau + tau;
    if (da > tauEpsilon) {
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x2 - dx) + "," + (y2 - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    } else if (da > epsilon) {
      this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x2 + r * Math.cos(a1)) + "," + (this._y1 = y2 + r * Math.sin(a1));
    }
  },
  rect: function(x2, y2, w, h) {
    this._ += "M" + (this._x0 = this._x1 = +x2) + "," + (this._y0 = this._y1 = +y2) + "h" + +w + "v" + +h + "h" + -w + "Z";
  },
  toString: function() {
    return this._;
  }
};
var path_default = path;

// node_modules/d3-shape/src/constant.js
function constant_default(x2) {
  return function constant2() {
    return x2;
  };
}

// node_modules/d3-shape/src/math.js
var abs = Math.abs;
var atan2 = Math.atan2;
var cos = Math.cos;
var max = Math.max;
var min = Math.min;
var sin = Math.sin;
var sqrt = Math.sqrt;
var epsilon2 = 1e-12;
var pi2 = Math.PI;
var halfPi = pi2 / 2;
var tau2 = 2 * pi2;
function acos(x2) {
  return x2 > 1 ? 0 : x2 < -1 ? pi2 : Math.acos(x2);
}
function asin(x2) {
  return x2 >= 1 ? halfPi : x2 <= -1 ? -halfPi : Math.asin(x2);
}

// node_modules/d3-shape/src/arc.js
function arcInnerRadius(d) {
  return d.innerRadius;
}
function arcOuterRadius(d) {
  return d.outerRadius;
}
function arcStartAngle(d) {
  return d.startAngle;
}
function arcEndAngle(d) {
  return d.endAngle;
}
function arcPadAngle(d) {
  return d && d.padAngle;
}
function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0, y10 = y1 - y0, x32 = x3 - x2, y32 = y3 - y2, t = y32 * x10 - x32 * y10;
  if (t * t < epsilon2) return;
  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
  return [x0 + t * x10, y0 + t * y10];
}
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1, y01 = y0 - y1, lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r = r1 - rc, D = x11 * y10 - x10 * y11, d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}
function arc_default() {
  var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = constant_default(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context = null;
  function arc() {
    var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi, a1 = endAngle.apply(this, arguments) - halfPi, da = abs(a1 - a0), cw = a1 > a0;
    if (!context) context = buffer = path_default();
    if (r1 < r0) r = r1, r1 = r0, r0 = r;
    if (!(r1 > epsilon2)) context.moveTo(0, 0);
    else if (da > tau2 - epsilon2) {
      context.moveTo(r1 * cos(a0), r1 * sin(a0));
      context.arc(0, 0, r1, a0, a1, !cw);
      if (r0 > epsilon2) {
        context.moveTo(r0 * cos(a1), r0 * sin(a1));
        context.arc(0, 0, r0, a1, a0, cw);
      }
    } else {
      var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon2 && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)), rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t02, t12;
      if (rp > epsilon2) {
        var p0 = asin(rp / r0 * sin(ap)), p1 = asin(rp / r1 * sin(ap));
        if ((da0 -= p0 * 2) > epsilon2) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;
        else da0 = 0, a00 = a10 = (a0 + a1) / 2;
        if ((da1 -= p1 * 2) > epsilon2) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
        else da1 = 0, a01 = a11 = (a0 + a1) / 2;
      }
      var x01 = r1 * cos(a01), y01 = r1 * sin(a01), x10 = r0 * cos(a10), y10 = r0 * sin(a10);
      if (rc > epsilon2) {
        var x11 = r1 * cos(a11), y11 = r1 * sin(a11), x00 = r0 * cos(a00), y00 = r0 * sin(a00), oc;
        if (da < pi2 && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
          var ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2), lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = min(rc, (r0 - lc) / (kc - 1));
          rc1 = min(rc, (r1 - lc) / (kc + 1));
        }
      }
      if (!(da1 > epsilon2)) context.moveTo(x01, y01);
      else if (rc1 > epsilon2) {
        t02 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
        t12 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
        context.moveTo(t02.cx + t02.x01, t02.cy + t02.y01);
        if (rc1 < rc) context.arc(t02.cx, t02.cy, rc1, atan2(t02.y01, t02.x01), atan2(t12.y01, t12.x01), !cw);
        else {
          context.arc(t02.cx, t02.cy, rc1, atan2(t02.y01, t02.x01), atan2(t02.y11, t02.x11), !cw);
          context.arc(0, 0, r1, atan2(t02.cy + t02.y11, t02.cx + t02.x11), atan2(t12.cy + t12.y11, t12.cx + t12.x11), !cw);
          context.arc(t12.cx, t12.cy, rc1, atan2(t12.y11, t12.x11), atan2(t12.y01, t12.x01), !cw);
        }
      } else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
      if (!(r0 > epsilon2) || !(da0 > epsilon2)) context.lineTo(x10, y10);
      else if (rc0 > epsilon2) {
        t02 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
        t12 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
        context.lineTo(t02.cx + t02.x01, t02.cy + t02.y01);
        if (rc0 < rc) context.arc(t02.cx, t02.cy, rc0, atan2(t02.y01, t02.x01), atan2(t12.y01, t12.x01), !cw);
        else {
          context.arc(t02.cx, t02.cy, rc0, atan2(t02.y01, t02.x01), atan2(t02.y11, t02.x11), !cw);
          context.arc(0, 0, r0, atan2(t02.cy + t02.y11, t02.cx + t02.x11), atan2(t12.cy + t12.y11, t12.cx + t12.x11), cw);
          context.arc(t12.cx, t12.cy, rc0, atan2(t12.y11, t12.x11), atan2(t12.y01, t12.x01), !cw);
        }
      } else context.arc(0, 0, r0, a10, a00, cw);
    }
    context.closePath();
    if (buffer) return context = null, buffer + "" || null;
  }
  arc.centroid = function() {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a2 = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi2 / 2;
    return [cos(a2) * r, sin(a2) * r];
  };
  arc.innerRadius = function(_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant_default(+_), arc) : innerRadius;
  };
  arc.outerRadius = function(_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant_default(+_), arc) : outerRadius;
  };
  arc.cornerRadius = function(_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant_default(+_), arc) : cornerRadius;
  };
  arc.padRadius = function(_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant_default(+_), arc) : padRadius;
  };
  arc.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant_default(+_), arc) : startAngle;
  };
  arc.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant_default(+_), arc) : endAngle;
  };
  arc.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant_default(+_), arc) : padAngle;
  };
  arc.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, arc) : context;
  };
  return arc;
}

// node_modules/d3-shape/src/curve/linear.js
function Linear(context) {
  this._context = context;
}
Linear.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
        break;
      case 1:
        this._point = 2;
      default:
        this._context.lineTo(x2, y2);
        break;
    }
  }
};
function linear_default(context) {
  return new Linear(context);
}

// node_modules/d3-shape/src/point.js
function x(p) {
  return p[0];
}
function y(p) {
  return p[1];
}

// node_modules/d3-shape/src/line.js
function line_default() {
  var x2 = x, y2 = y, defined = constant_default(true), context = null, curve = linear_default, output = null;
  function line(data) {
    var i, n = data.length, d, defined0 = false, buffer;
    if (context == null) output = curve(buffer = path_default());
    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();
        else output.lineEnd();
      }
      if (defined0) output.point(+x2(d, i, data), +y2(d, i, data));
    }
    if (buffer) return output = null, buffer + "" || null;
  }
  line.x = function(_) {
    return arguments.length ? (x2 = typeof _ === "function" ? _ : constant_default(+_), line) : x2;
  };
  line.y = function(_) {
    return arguments.length ? (y2 = typeof _ === "function" ? _ : constant_default(+_), line) : y2;
  };
  line.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant_default(!!_), line) : defined;
  };
  line.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };
  line.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };
  return line;
}

// node_modules/d3-shape/src/area.js
function area_default() {
  var x0 = x, x1 = null, y0 = constant_default(0), y1 = y, defined = constant_default(true), context = null, curve = linear_default, output = null;
  function area(data) {
    var i, j, k2, n = data.length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
    if (context == null) output = curve(buffer = path_default());
    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k2 = i - 1; k2 >= j; --k2) {
            output.point(x0z[k2], y0z[k2]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }
    if (buffer) return output = null, buffer + "" || null;
  }
  function arealine() {
    return line_default().defined(defined).curve(curve).context(context);
  }
  area.x = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant_default(+_), x1 = null, area) : x0;
  };
  area.x0 = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant_default(+_), area) : x0;
  };
  area.x1 = function(_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant_default(+_), area) : x1;
  };
  area.y = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant_default(+_), y1 = null, area) : y0;
  };
  area.y0 = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant_default(+_), area) : y0;
  };
  area.y1 = function(_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant_default(+_), area) : y1;
  };
  area.lineX0 = area.lineY0 = function() {
    return arealine().x(x0).y(y0);
  };
  area.lineY1 = function() {
    return arealine().x(x0).y(y1);
  };
  area.lineX1 = function() {
    return arealine().x(x1).y(y0);
  };
  area.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant_default(!!_), area) : defined;
  };
  area.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };
  area.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };
  return area;
}

// node_modules/d3-shape/src/descending.js
function descending_default(a2, b) {
  return b < a2 ? -1 : b > a2 ? 1 : b >= a2 ? 0 : NaN;
}

// node_modules/d3-shape/src/identity.js
function identity_default(d) {
  return d;
}

// node_modules/d3-shape/src/pie.js
function pie_default() {
  var value = identity_default, sortValues = descending_default, sort = null, startAngle = constant_default(0), endAngle = constant_default(tau2), padAngle = constant_default(0);
  function pie(data) {
    var i, n = data.length, j, k2, sum2 = 0, index = new Array(n), arcs = new Array(n), a0 = +startAngle.apply(this, arguments), da = Math.min(tau2, Math.max(-tau2, endAngle.apply(this, arguments) - a0)), a1, p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)), pa = p * (da < 0 ? -1 : 1), v;
    for (i = 0; i < n; ++i) {
      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
        sum2 += v;
      }
    }
    if (sortValues != null) index.sort(function(i2, j2) {
      return sortValues(arcs[i2], arcs[j2]);
    });
    else if (sort != null) index.sort(function(i2, j2) {
      return sort(data[i2], data[j2]);
    });
    for (i = 0, k2 = sum2 ? (da - n * pa) / sum2 : 0; i < n; ++i, a0 = a1) {
      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k2 : 0) + pa, arcs[j] = {
        data: data[j],
        index: i,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }
    return arcs;
  }
  pie.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant_default(+_), pie) : value;
  };
  pie.sortValues = function(_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  };
  pie.sort = function(_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  };
  pie.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant_default(+_), pie) : startAngle;
  };
  pie.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant_default(+_), pie) : endAngle;
  };
  pie.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant_default(+_), pie) : padAngle;
  };
  return pie;
}

// node_modules/d3-shape/src/curve/radial.js
var curveRadialLinear = curveRadial(linear_default);
function Radial(curve) {
  this._curve = curve;
}
Radial.prototype = {
  areaStart: function() {
    this._curve.areaStart();
  },
  areaEnd: function() {
    this._curve.areaEnd();
  },
  lineStart: function() {
    this._curve.lineStart();
  },
  lineEnd: function() {
    this._curve.lineEnd();
  },
  point: function(a2, r) {
    this._curve.point(r * Math.sin(a2), r * -Math.cos(a2));
  }
};
function curveRadial(curve) {
  function radial(context) {
    return new Radial(curve(context));
  }
  radial._curve = curve;
  return radial;
}

// node_modules/d3-shape/src/array.js
var slice = Array.prototype.slice;

// node_modules/d3-shape/src/symbol/diamond.js
var tan30 = Math.sqrt(1 / 3);
var tan30_2 = tan30 * 2;

// node_modules/d3-shape/src/symbol/star.js
var kr = Math.sin(pi2 / 10) / Math.sin(7 * pi2 / 10);
var kx = Math.sin(tau2 / 10) * kr;
var ky = -Math.cos(tau2 / 10) * kr;

// node_modules/d3-shape/src/symbol/triangle.js
var sqrt3 = Math.sqrt(3);

// node_modules/d3-shape/src/symbol/wye.js
var s = Math.sqrt(3) / 2;
var k = 1 / Math.sqrt(12);
var a = (k / 2 + 1) * 3;

// node_modules/d3-shape/src/noop.js
function noop_default() {
}

// node_modules/d3-shape/src/curve/basis.js
function point(that, x2, y2) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x2) / 6,
    (that._y0 + 4 * that._y1 + y2) / 6
  );
}
function Basis(context) {
  this._context = context;
}
Basis.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 3:
        point(this, this._x1, this._y1);
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
      default:
        point(this, x2, y2);
        break;
    }
    this._x0 = this._x1, this._x1 = x2;
    this._y0 = this._y1, this._y1 = y2;
  }
};

// node_modules/d3-shape/src/curve/basisClosed.js
function BasisClosed(context) {
  this._context = context;
}
BasisClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x2, this._y2);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x2, this._y2);
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        break;
      }
    }
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x2 = x2, this._y2 = y2;
        break;
      case 1:
        this._point = 2;
        this._x3 = x2, this._y3 = y2;
        break;
      case 2:
        this._point = 3;
        this._x4 = x2, this._y4 = y2;
        this._context.moveTo((this._x0 + 4 * this._x1 + x2) / 6, (this._y0 + 4 * this._y1 + y2) / 6);
        break;
      default:
        point(this, x2, y2);
        break;
    }
    this._x0 = this._x1, this._x1 = x2;
    this._y0 = this._y1, this._y1 = y2;
  }
};

// node_modules/d3-shape/src/curve/basisOpen.js
function BasisOpen(context) {
  this._context = context;
}
BasisOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        var x0 = (this._x0 + 4 * this._x1 + x2) / 6, y0 = (this._y0 + 4 * this._y1 + y2) / 6;
        this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
        break;
      case 3:
        this._point = 4;
      default:
        point(this, x2, y2);
        break;
    }
    this._x0 = this._x1, this._x1 = x2;
    this._y0 = this._y1, this._y1 = y2;
  }
};

// node_modules/d3-shape/src/curve/bundle.js
function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}
Bundle.prototype = {
  lineStart: function() {
    this._x = [];
    this._y = [];
    this._basis.lineStart();
  },
  lineEnd: function() {
    var x2 = this._x, y2 = this._y, j = x2.length - 1;
    if (j > 0) {
      var x0 = x2[0], y0 = y2[0], dx = x2[j] - x0, dy = y2[j] - y0, i = -1, t;
      while (++i <= j) {
        t = i / j;
        this._basis.point(
          this._beta * x2[i] + (1 - this._beta) * (x0 + t * dx),
          this._beta * y2[i] + (1 - this._beta) * (y0 + t * dy)
        );
      }
    }
    this._x = this._y = null;
    this._basis.lineEnd();
  },
  point: function(x2, y2) {
    this._x.push(+x2);
    this._y.push(+y2);
  }
};
var bundle_default = function custom(beta) {
  function bundle(context) {
    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
  }
  bundle.beta = function(beta2) {
    return custom(+beta2);
  };
  return bundle;
}(0.85);

// node_modules/d3-shape/src/curve/cardinal.js
function point2(that, x2, y2) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x2),
    that._y2 + that._k * (that._y1 - y2),
    that._x2,
    that._y2
  );
}
function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
Cardinal.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        point2(this, this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
        break;
      case 1:
        this._point = 2;
        this._x1 = x2, this._y1 = y2;
        break;
      case 2:
        this._point = 3;
      default:
        point2(this, x2, y2);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
  }
};
var cardinal_default = function custom2(tension) {
  function cardinal(context) {
    return new Cardinal(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom2(+tension2);
  };
  return cardinal;
}(0);

// node_modules/d3-shape/src/curve/cardinalClosed.js
function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x2, this._y3 = y2;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x2, this._y4 = y2);
        break;
      case 2:
        this._point = 3;
        this._x5 = x2, this._y5 = y2;
        break;
      default:
        point2(this, x2, y2);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
  }
};
var cardinalClosed_default = function custom3(tension) {
  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom3(+tension2);
  };
  return cardinal;
}(0);

// node_modules/d3-shape/src/curve/cardinalOpen.js
function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      default:
        point2(this, x2, y2);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
  }
};
var cardinalOpen_default = function custom4(tension) {
  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom4(+tension2);
  };
  return cardinal;
}(0);

// node_modules/d3-shape/src/curve/catmullRom.js
function point3(that, x2, y2) {
  var x1 = that._x1, y1 = that._y1, x22 = that._x2, y22 = that._y2;
  if (that._l01_a > epsilon2) {
    var a2 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a2 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a2 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }
  if (that._l23_a > epsilon2) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x22 = (x22 * b + that._x1 * that._l23_2a - x2 * that._l12_2a) / m;
    y22 = (y22 * b + that._y1 * that._l23_2a - y2 * that._l12_2a) / m;
  }
  that._context.bezierCurveTo(x1, y1, x22, y22, that._x2, that._y2);
}
function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRom.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        this.point(this._x2, this._y2);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    if (this._point) {
      var x23 = this._x2 - x2, y23 = this._y2 - y2;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
      default:
        point3(this, x2, y2);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
  }
};
var catmullRom_default = function custom5(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom5(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/d3-shape/src/curve/catmullRomClosed.js
function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRomClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    if (this._point) {
      var x23 = this._x2 - x2, y23 = this._y2 - y2;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x2, this._y3 = y2;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x2, this._y4 = y2);
        break;
      case 2:
        this._point = 3;
        this._x5 = x2, this._y5 = y2;
        break;
      default:
        point3(this, x2, y2);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
  }
};
var catmullRomClosed_default = function custom6(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom6(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/d3-shape/src/curve/catmullRomOpen.js
function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRomOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    if (this._point) {
      var x23 = this._x2 - x2, y23 = this._y2 - y2;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      default:
        point3(this, x2, y2);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
  }
};
var catmullRomOpen_default = function custom7(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom7(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/d3-shape/src/curve/linearClosed.js
function LinearClosed(context) {
  this._context = context;
}
LinearClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._point) this._context.closePath();
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    if (this._point) this._context.lineTo(x2, y2);
    else this._point = 1, this._context.moveTo(x2, y2);
  }
};

// node_modules/d3-shape/src/curve/monotone.js
function sign(x2) {
  return x2 < 0 ? -1 : 1;
}
function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0, h1 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}
function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
}
function point4(that, t02, t12) {
  var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t02, x1 - dx, y1 - dx * t12, x1, y1);
}
function MonotoneX(context) {
  this._context = context;
}
MonotoneX.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
      case 3:
        point4(this, this._t0, slope2(this, this._t0));
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    var t12 = NaN;
    x2 = +x2, y2 = +y2;
    if (x2 === this._x1 && y2 === this._y1) return;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        point4(this, slope2(this, t12 = slope3(this, x2, y2)), t12);
        break;
      default:
        point4(this, this._t0, t12 = slope3(this, x2, y2));
        break;
    }
    this._x0 = this._x1, this._x1 = x2;
    this._y0 = this._y1, this._y1 = y2;
    this._t0 = t12;
  }
};
function MonotoneY(context) {
  this._context = new ReflectContext(context);
}
(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x2, y2) {
  MonotoneX.prototype.point.call(this, y2, x2);
};
function ReflectContext(context) {
  this._context = context;
}
ReflectContext.prototype = {
  moveTo: function(x2, y2) {
    this._context.moveTo(y2, x2);
  },
  closePath: function() {
    this._context.closePath();
  },
  lineTo: function(x2, y2) {
    this._context.lineTo(y2, x2);
  },
  bezierCurveTo: function(x1, y1, x2, y2, x3, y3) {
    this._context.bezierCurveTo(y1, x1, y2, x2, y3, x3);
  }
};

// node_modules/d3-shape/src/curve/natural.js
function Natural(context) {
  this._context = context;
}
Natural.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = [];
    this._y = [];
  },
  lineEnd: function() {
    var x2 = this._x, y2 = this._y, n = x2.length;
    if (n) {
      this._line ? this._context.lineTo(x2[0], y2[0]) : this._context.moveTo(x2[0], y2[0]);
      if (n === 2) {
        this._context.lineTo(x2[1], y2[1]);
      } else {
        var px = controlPoints(x2), py = controlPoints(y2);
        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x2[i1], y2[i1]);
        }
      }
    }
    if (this._line || this._line !== 0 && n === 1) this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function(x2, y2) {
    this._x.push(+x2);
    this._y.push(+y2);
  }
};
function controlPoints(x2) {
  var i, n = x2.length - 1, m, a2 = new Array(n), b = new Array(n), r = new Array(n);
  a2[0] = 0, b[0] = 2, r[0] = x2[0] + 2 * x2[1];
  for (i = 1; i < n - 1; ++i) a2[i] = 1, b[i] = 4, r[i] = 4 * x2[i] + 2 * x2[i + 1];
  a2[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x2[n - 1] + x2[n];
  for (i = 1; i < n; ++i) m = a2[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
  a2[n - 1] = r[n - 1] / b[n - 1];
  for (i = n - 2; i >= 0; --i) a2[i] = (r[i] - a2[i + 1]) / b[i];
  b[n - 1] = (x2[n] + a2[n - 1]) / 2;
  for (i = 0; i < n - 1; ++i) b[i] = 2 * x2[i + 1] - a2[i + 1];
  return [a2, b];
}

// node_modules/d3-shape/src/curve/step.js
function Step(context, t) {
  this._context = context;
  this._t = t;
}
Step.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
        break;
      case 1:
        this._point = 2;
      default: {
        if (this._t <= 0) {
          this._context.lineTo(this._x, y2);
          this._context.lineTo(x2, y2);
        } else {
          var x1 = this._x * (1 - this._t) + x2 * this._t;
          this._context.lineTo(x1, this._y);
          this._context.lineTo(x1, y2);
        }
        break;
      }
    }
    this._x = x2, this._y = y2;
  }
};

// node_modules/@cloudscape-design/components/area-chart/elements/area-series.js
var area_series_default = (0, import_react95.memo)(AreaSeries);
function AreaSeries({ data, color: color2, chartAreaClipPath }) {
  const areaGenerator = area_default().x((p) => p.scaled.x).y0((p) => p.scaled.y0).y1((p) => p.scaled.y1);
  const areaPath = areaGenerator(data) || "";
  const lineGenerator = line_default().x((p) => p.scaled.x).y((p) => p.scaled.y1);
  const linePath = lineGenerator(data) || "";
  return import_react95.default.createElement(
    import_react95.default.Fragment,
    null,
    import_react95.default.createElement("path", { "aria-hidden": true, fill: color2, stroke: color2, style: { opacity: 0.4 }, clipPath: `url(#${chartAreaClipPath})`, d: areaPath }),
    import_react95.default.createElement("path", { "aria-hidden": true, stroke: color2, clipPath: `url(#${chartAreaClipPath})`, d: linePath })
  );
}

// node_modules/@cloudscape-design/components/area-chart/elements/threshold-series.js
var import_react96 = __toESM(require_react());
var threshold_series_default = (0, import_react96.memo)(ThresholdSeries);
function ThresholdSeries({ data, xScale, color: color2, chartAreaClipPath }) {
  const range3 = xScale.d3Scale.range();
  const y2 = data[0].scaled.y0;
  const path2 = { x1: range3[0], x2: range3[1], y1: y2, y2 };
  return import_react96.default.createElement("line", Object.assign({ "aria-hidden": true, stroke: color2, clipPath: `url(#${chartAreaClipPath})` }, path2));
}

// node_modules/@cloudscape-design/components/area-chart/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/area-chart/styles.scoped.css";
var styles_css_default33 = {
  "series": "awsui_series_y1yrh_17b8g_99",
  "root": "awsui_root_y1yrh_17b8g_117",
  "series--highlighted": "awsui_series--highlighted_y1yrh_17b8g_129",
  "series--dimmed": "awsui_series--dimmed_y1yrh_17b8g_133",
  "series--threshold": "awsui_series--threshold_y1yrh_17b8g_137",
  "popover-divider": "awsui_popover-divider_y1yrh_17b8g_142"
};

// node_modules/@cloudscape-design/components/area-chart/elements/data-series.js
var data_series_default = (0, import_react97.memo)(DataSeries);
function DataSeries({ model }) {
  const chartAreaClipPath = useUniqueId("awsui-area-chart__chart-area-");
  const highlightedX = useSelector(model.interactions, (state) => state.highlightedX);
  const highlightedSeries = useSelector(model.interactions, (state) => state.highlightedSeries);
  const useHighlightDimmed = !highlightedX;
  const seriesData = [];
  for (let seriesIndex = model.series.length - 1; seriesIndex >= 0; seriesIndex--) {
    if (model.computed.plot.sx[seriesIndex]) {
      seriesData.push([model.series[seriesIndex], model.computed.plot.sx[seriesIndex] || []]);
    }
  }
  return import_react97.default.createElement(
    import_react97.default.Fragment,
    null,
    import_react97.default.createElement(
      "defs",
      { "aria-hidden": "true" },
      import_react97.default.createElement(
        "clipPath",
        { id: chartAreaClipPath },
        import_react97.default.createElement("rect", { x: 0, y: 0, width: model.width, height: model.height })
      )
    ),
    import_react97.default.createElement("g", { role: "group" }, seriesData.map(([series, data]) => {
      const isHighlighted = series === highlightedSeries;
      const isDimmed = !!highlightedSeries && !isHighlighted;
      return import_react97.default.createElement("g", { key: series.title, role: "group", "aria-label": series.title, className: clsx_m_default(styles_css_default33.series, styles_css_default33[`series--${series.type}`], {
        [styles_css_default33["series--highlighted"]]: isHighlighted,
        [styles_css_default33["series--dimmed"]]: useHighlightDimmed && isDimmed
      }) }, series.type === "area" ? import_react97.default.createElement(area_series_default, { data, color: model.getInternalSeries(series).color, chartAreaClipPath }) : import_react97.default.createElement(threshold_series_default, { data, xScale: model.computed.xScale, color: model.getInternalSeries(series).color, chartAreaClipPath }));
    }))
  );
}

// node_modules/@cloudscape-design/components/area-chart/elements/chart-popover.js
var import_react107 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-popover/index.js
var import_react98 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-popover/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/chart-popover/styles.scoped.css";
var styles_css_default34 = {
  "root": "awsui_root_1t44z_16g1a_99",
  "hover-area": "awsui_hover-area_1t44z_16g1a_135",
  "popover-body": "awsui_popover-body_1t44z_16g1a_143"
};

// node_modules/@cloudscape-design/components/internal/components/chart-popover/index.js
var chart_popover_default = import_react98.default.forwardRef(ChartPopover);
function ChartPopover(_a, ref) {
  var { position = "right", size = "medium", fixedWidth = false, dismissButton: dismissButton2 = false, dismissAriaLabel, children, title, trackRef, trackKey, onDismiss, container, onMouseEnter, onMouseLeave, onBlur } = _a, restProps = __rest(_a, ["position", "size", "fixedWidth", "dismissButton", "dismissAriaLabel", "children", "title", "trackRef", "trackKey", "onDismiss", "container", "onMouseEnter", "onMouseLeave", "onBlur"]);
  const baseProps = getBaseProps(restProps);
  const popoverObjectRef = (0, import_react98.useRef)(null);
  const popoverRef = useMergeRefs(popoverObjectRef, ref);
  (0, import_react98.useEffect)(() => {
    const onDocumentClick = (event) => {
      if (event.target && !nodeBelongs(popoverObjectRef.current, event.target) && // click not in popover
      !nodeContains(container, event.target)) {
        onDismiss(true);
      }
    };
    document.addEventListener("mousedown", onDocumentClick, { capture: true });
    return () => {
      document.removeEventListener("mousedown", onDocumentClick, { capture: true });
    };
  }, [container, onDismiss]);
  const isPinned = dismissButton2;
  return import_react98.default.createElement(
    "div",
    Object.assign({}, baseProps, {
      className: clsx_m_default(styles_css_default7.root, styles_css_default34.root, baseProps.className),
      ref: popoverRef,
      onMouseEnter,
      onMouseLeave,
      onBlur,
      // The tabIndex makes it so that clicking inside popover assigns this element as blur target.
      // That is necessary in charts to ensure the blur target is within the chart and no cleanup is needed.
      tabIndex: -1
    }),
    import_react98.default.createElement(
      PopoverContainer,
      { size, fixedWidth, position, trackRef, trackKey, arrow: (position2) => import_react98.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default7.arrow, styles_css_default7[`arrow-position-${position2}`]) },
        import_react98.default.createElement("div", { className: styles_css_default7["arrow-outer"] }),
        import_react98.default.createElement("div", { className: styles_css_default7["arrow-inner"] })
      ), keepPosition: true, allowVerticalOverflow: true, allowScrollToFit: isPinned },
      import_react98.default.createElement(
        "div",
        { className: styles_css_default34["hover-area"] },
        import_react98.default.createElement(PopoverBody, { dismissButton: dismissButton2, dismissAriaLabel, header: title, onDismiss, overflowVisible: "content", className: styles_css_default34["popover-body"] }, children)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/internal/components/chart-series-details/index.js
var import_react105 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-series-details/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/chart-series-details/styles.scoped.css";
var styles_css_default35 = {
  "dimmed": "awsui_dimmed_10ipo_1di0o_99",
  "marker": "awsui_marker_10ipo_1di0o_150",
  "marker--line": "awsui_marker--line_10ipo_1di0o_193",
  "marker--rectangle": "awsui_marker--rectangle_10ipo_1di0o_197",
  "marker--hollow-rectangle": "awsui_marker--hollow-rectangle_10ipo_1di0o_204",
  "marker--dashed": "awsui_marker--dashed_10ipo_1di0o_220",
  "root": "awsui_root_10ipo_1di0o_243",
  "value": "awsui_value_10ipo_1di0o_278",
  "expandable": "awsui_expandable_10ipo_1di0o_282",
  "list-item": "awsui_list-item_10ipo_1di0o_286",
  "inner-list-item": "awsui_inner-list-item_10ipo_1di0o_287",
  "key-value-pair": "awsui_key-value-pair_10ipo_1di0o_292",
  "expandable-section": "awsui_expandable-section_10ipo_1di0o_293",
  "key": "awsui_key_10ipo_1di0o_292",
  "sub-items": "awsui_sub-items_10ipo_1di0o_306",
  "list": "awsui_list_10ipo_1di0o_286",
  "compact": "awsui_compact_10ipo_1di0o_332",
  "with-sub-items": "awsui_with-sub-items_10ipo_1di0o_337",
  "full-width": "awsui_full-width_10ipo_1di0o_342",
  "announced": "awsui_announced_10ipo_1di0o_346"
};

// node_modules/@cloudscape-design/components/expandable-section/internal.js
var import_react104 = __toESM(require_react());

// node_modules/@cloudscape-design/components/expandable-section/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/expandable-section/styles.scoped.css";
var styles_css_default36 = {
  "content-enter": "awsui_content-enter_gwq0h_xoje_103",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_gwq0h_xoje_1",
  "trigger-expanded": "awsui_trigger-expanded_gwq0h_xoje_125",
  "icon": "awsui_icon_gwq0h_xoje_139",
  "root": "awsui_root_gwq0h_xoje_157",
  "expand-button": "awsui_expand-button_gwq0h_xoje_195",
  "expanded": "awsui_expanded_gwq0h_xoje_202",
  "icon-container": "awsui_icon-container_gwq0h_xoje_212",
  "icon-container-container": "awsui_icon-container-container_gwq0h_xoje_216",
  "wrapper": "awsui_wrapper_gwq0h_xoje_220",
  "wrapper-default": "awsui_wrapper-default_gwq0h_xoje_228",
  "wrapper-footer": "awsui_wrapper-footer_gwq0h_xoje_228",
  "wrapper-navigation": "awsui_wrapper-navigation_gwq0h_xoje_232",
  "wrapper-container": "awsui_wrapper-container_gwq0h_xoje_235",
  "wrapper-compact": "awsui_wrapper-compact_gwq0h_xoje_239",
  "header-deprecated": "awsui_header-deprecated_gwq0h_xoje_252",
  "wrapper-expanded": "awsui_wrapper-expanded_gwq0h_xoje_274",
  "header": "awsui_header_gwq0h_xoje_252",
  "header-wrapper": "awsui_header-wrapper_gwq0h_xoje_294",
  "header-actions-wrapper": "awsui_header-actions-wrapper_gwq0h_xoje_306",
  "header-button": "awsui_header-button_gwq0h_xoje_311",
  "header-container-button": "awsui_header-container-button_gwq0h_xoje_311",
  "header-container": "awsui_header-container_gwq0h_xoje_311",
  "header-navigation": "awsui_header-navigation_gwq0h_xoje_346",
  "header-text": "awsui_header-text_gwq0h_xoje_383",
  "content": "awsui_content_gwq0h_xoje_103",
  "content-default": "awsui_content-default_gwq0h_xoje_390",
  "content-footer": "awsui_content-footer_gwq0h_xoje_394",
  "content-expanded": "awsui_content-expanded_gwq0h_xoje_398",
  "content-compact": "awsui_content-compact_gwq0h_xoje_401",
  "focusable": "awsui_focusable_gwq0h_xoje_405",
  "click-target": "awsui_click-target_gwq0h_xoje_420"
};

// node_modules/@cloudscape-design/components/expandable-section/expandable-section-container.js
var import_react100 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/analytics/components/analytics-funnel.js
var import_react99 = __toESM(require_react());
var FUNNEL_VERSION = "1.4";
var AnalyticsFunnel = (props) => {
  const { isInFunnel } = useFunnel();
  if (isInFunnel && props.funnelType === "single-page") {
    return import_react99.default.createElement(import_react99.default.Fragment, null, props.children);
  }
  return import_react99.default.createElement(InnerAnalyticsFunnel, Object.assign({}, props));
};
var CREATION_EDIT_FLOW_DONE_EVENT_NAME = "awsui-creation-edit-flow-done";
var dispatchCreateEditFlowDoneEvent = () => {
  var _a;
  try {
    (_a = window.top) === null || _a === void 0 ? void 0 : _a.document.dispatchEvent(new Event(CREATION_EDIT_FLOW_DONE_EVENT_NAME));
  } catch (_b) {
  }
};
var onFunnelCancelled = ({ funnelInteractionId }) => {
  FunnelMetrics.funnelCancelled({ funnelInteractionId });
};
var onFunnelComplete = ({ funnelInteractionId }) => {
  FunnelMetrics.funnelComplete({ funnelInteractionId });
  dispatchCreateEditFlowDoneEvent();
};
function evaluateSelectors(selectors, defaultSelector) {
  for (const selector of selectors) {
    const element = document.querySelector(selector);
    if (element) {
      return selector;
    }
  }
  return defaultSelector;
}
var InnerAnalyticsFunnel = (_a) => {
  var { children, stepConfiguration } = _a, props = __rest(_a, ["children", "stepConfiguration"]);
  const [funnelInteractionId, setFunnelInteractionId] = (0, import_react99.useState)("");
  const [submissionAttempt, setSubmissionAttempt] = (0, import_react99.useState)(0);
  const isVisualRefresh = useVisualRefresh();
  const funnelState = (0, import_react99.useRef)("default");
  const funnelNameSelector = (0, import_react99.useRef)(getFunnelNameSelector());
  const errorCount = (0, import_react99.useRef)(0);
  const loadingButtonCount = (0, import_react99.useRef)(0);
  const wizardCount = (0, import_react99.useRef)(0);
  const latestFocusCleanupFunction = (0, import_react99.useRef)(void 0);
  (0, import_react99.useEffect)(() => {
    let funnelInteractionId2;
    const handle = setTimeout(() => {
      var _a2;
      funnelNameSelector.current = evaluateSelectors(props.funnelNameSelectors || [], getFunnelNameSelector());
      if (props.funnelType === "single-page" && wizardCount.current > 0) {
        return;
      }
      funnelState.current = "default";
      const singleStepFlowStepConfiguration = [
        { number: 1, isOptional: false, name: (_a2 = getNameFromSelector(funnelNameSelector.current)) !== null && _a2 !== void 0 ? _a2 : "" }
      ];
      funnelInteractionId2 = FunnelMetrics.funnelStart({
        instanceIdentifier: props.instanceIdentifier,
        flowType: props.flowType,
        funnelNameSelector: funnelNameSelector.current,
        optionalStepNumbers: props.optionalStepNumbers,
        funnelType: props.funnelType,
        totalFunnelSteps: props.totalFunnelSteps,
        componentVersion: PACKAGE_VERSION,
        theme: isVisualRefresh ? "vr" : "classic",
        funnelVersion: FUNNEL_VERSION,
        stepConfiguration: stepConfiguration !== null && stepConfiguration !== void 0 ? stepConfiguration : singleStepFlowStepConfiguration
      });
      setFunnelInteractionId(funnelInteractionId2);
    }, 1);
    return () => {
      clearTimeout(handle);
      if (props.funnelType === "single-page" && wizardCount.current > 0) {
        return;
      }
      if (funnelState.current === "validating") {
        onFunnelComplete({ funnelInteractionId: funnelInteractionId2 });
        funnelState.current = "complete";
      }
      if (funnelState.current === "complete") {
        FunnelMetrics.funnelSuccessful({ funnelInteractionId: funnelInteractionId2 });
      } else {
        onFunnelCancelled({ funnelInteractionId: funnelInteractionId2 });
        funnelState.current = "cancelled";
      }
    };
  }, []);
  const funnelSubmit = () => {
    funnelState.current = "validating";
    const VALIDATION_WAIT_DELAY = 50;
    const LOADING_WAIT_DELAY = 100;
    const checkForCompleteness = () => {
      if (funnelState.current === "complete") {
        return;
      }
      if (loadingButtonCount.current > 0) {
        setTimeout(checkForCompleteness, LOADING_WAIT_DELAY);
        return;
      }
      if (errorCount.current === 0) {
        onFunnelComplete({ funnelInteractionId });
        funnelState.current = "complete";
      } else {
        funnelState.current = "default";
      }
    };
    setTimeout(checkForCompleteness, VALIDATION_WAIT_DELAY);
  };
  const funnelNextOrSubmitAttempt = () => setSubmissionAttempt((i) => i + 1);
  const funnelCancel = () => {
  };
  const funnelContextValue = {
    funnelInteractionId,
    setFunnelInteractionId,
    funnelType: props.funnelType,
    optionalStepNumbers: props.optionalStepNumbers,
    totalFunnelSteps: props.totalFunnelSteps,
    funnelNameSelector: funnelNameSelector.current,
    funnelSubmit,
    funnelCancel,
    submissionAttempt,
    funnelNextOrSubmitAttempt,
    funnelState,
    errorCount,
    loadingButtonCount,
    latestFocusCleanupFunction,
    isInFunnel: true,
    wizardCount
  };
  return import_react99.default.createElement(FunnelContext.Provider, { value: funnelContextValue }, children);
};
var AnalyticsFunnelStep = (props) => {
  return import_react99.default.createElement(InnerAnalyticsFunnelStep, Object.assign({}, props, { key: props.stepNumber }));
};
function getSubStepConfiguration() {
  const subSteps = Array.from(document.querySelectorAll(getSubStepAllSelector()));
  const subStepConfiguration = subSteps.map((substep, index) => {
    var _a, _b, _c;
    const name = (_c = (_b = (_a = substep.querySelector(getSubStepNameSelector())) === null || _a === void 0 ? void 0 : _a.innerText) === null || _b === void 0 ? void 0 : _b.trim()) !== null && _c !== void 0 ? _c : "";
    return {
      name,
      number: index + 1
    };
  });
  return subStepConfiguration;
}
function useStepChangeListener(stepNumber, handler) {
  const subStepConfiguration = (0, import_react99.useRef)(/* @__PURE__ */ new Map());
  const SUBSTEP_CHANGE_DEBOUNCE = 50;
  const listenForSubStepChanges = (0, import_react99.useRef)(false);
  (0, import_react99.useEffect)(() => {
    const handle = setTimeout(() => listenForSubStepChanges.current = true, SUBSTEP_CHANGE_DEBOUNCE);
    return () => {
      clearTimeout(handle);
      listenForSubStepChanges.current = false;
    };
  }, []);
  (0, import_react99.useEffect)(() => {
    const handle = setTimeout(() => subStepConfiguration.current.set(stepNumber, getSubStepConfiguration()), SUBSTEP_CHANGE_DEBOUNCE);
    return () => {
      clearTimeout(handle);
    };
  }, [stepNumber]);
  const stepChangeCallback = useDebounceCallback(() => {
    if (!listenForSubStepChanges.current) {
      return;
    }
    subStepConfiguration.current.set(stepNumber, getSubStepConfiguration());
    handler(subStepConfiguration.current.get(stepNumber));
  }, SUBSTEP_CHANGE_DEBOUNCE);
  return { onStepChange: stepChangeCallback, subStepConfiguration };
}
var InnerAnalyticsFunnelStep = (_a) => {
  var { children, stepNumber, instanceIdentifier } = _a, rest = __rest(_a, ["children", "stepNumber", "instanceIdentifier"]);
  const { funnelInteractionId, funnelNameSelector, funnelState, funnelType } = useFunnel();
  const parentStep = useFunnelStep();
  const parentStepExists = parentStep.isInStep;
  const parentStepFunnelInteractionId = parentStep.funnelInteractionId;
  const funnelStepProps = { [DATA_ATTR_FUNNEL_STEP]: stepNumber };
  const subStepCount = (0, import_react99.useRef)(0);
  const stepNameSelector = rest.stepNameSelector || funnelNameSelector;
  const { onStepChange, subStepConfiguration } = useStepChangeListener(stepNumber, (subStepConfiguration2) => {
    var _a2;
    if (!funnelInteractionId) {
      return;
    }
    const stepName = (_a2 = getNameFromSelector(stepNameSelector)) !== null && _a2 !== void 0 ? _a2 : "";
    FunnelMetrics.funnelStepChange({
      instanceIdentifier,
      funnelInteractionId,
      stepNumber,
      stepName,
      stepNameSelector,
      subStepAllSelector: getSubStepAllSelector(),
      totalSubSteps: subStepCount.current,
      subStepConfiguration: subStepConfiguration2
    });
  });
  (0, import_react99.useEffect)(() => {
    if (!funnelInteractionId) {
      return;
    }
    if (parentStepExists && parentStepFunnelInteractionId) {
      return;
    }
    const stepName = getNameFromSelector(stepNameSelector);
    if (funnelState.current === "default") {
      FunnelMetrics.funnelStepStart({
        instanceIdentifier,
        funnelInteractionId,
        stepNumber,
        stepName,
        stepNameSelector,
        subStepAllSelector: getSubStepAllSelector(),
        totalSubSteps: subStepCount.current,
        subStepConfiguration: getSubStepConfiguration()
      });
    }
    return () => {
      if (funnelState.current !== "cancelled") {
        FunnelMetrics.funnelStepComplete({
          instanceIdentifier,
          funnelInteractionId,
          stepNumber,
          stepName,
          stepNameSelector,
          subStepAllSelector: getSubStepAllSelector(),
          // eslint-disable-next-line react-hooks/exhaustive-deps
          totalSubSteps: subStepCount.current
        });
      }
    };
  }, [
    instanceIdentifier,
    funnelInteractionId,
    stepNumber,
    stepNameSelector,
    funnelState,
    parentStepExists,
    funnelType,
    parentStepFunnelInteractionId
  ]);
  const contextValue = {
    instanceIdentifier,
    stepNumber,
    stepNameSelector,
    funnelStepProps,
    subStepCount,
    isInStep: true,
    funnelInteractionId,
    onStepChange,
    subStepConfiguration
  };
  const effectiveContextValue = parentStepExists && parentStepFunnelInteractionId ? parentStep : contextValue;
  return import_react99.default.createElement(FunnelStepContext.Provider, { value: effectiveContextValue }, typeof children === "function" ? children(effectiveContextValue) : children);
};
var AnalyticsFunnelSubStep = ({ children, instanceIdentifier }) => {
  const subStepId = useUniqueId("substep");
  const subStepSelector = getSubStepSelector(subStepId);
  const subStepNameSelector = getSubStepNameSelector(subStepId);
  const subStepRef = (0, import_react99.useRef)(null);
  const { subStepCount, onStepChange } = useFunnelStep();
  const mousePressed = (0, import_react99.useRef)(false);
  const isFocusedSubStep = (0, import_react99.useRef)(false);
  const focusCleanupFunction = (0, import_react99.useRef)(void 0);
  const { funnelState, funnelInteractionId } = useFunnel();
  const { stepNumber, stepNameSelector } = useFunnelStep();
  const newContext = {
    instanceIdentifier,
    subStepSelector,
    subStepNameSelector,
    subStepId,
    subStepRef,
    mousePressed,
    isFocusedSubStep,
    focusCleanupFunction,
    isNestedSubStep: false
  };
  const inheritedContext = Object.assign(Object.assign({}, (0, import_react99.useContext)(FunnelSubStepContext)), { isNestedSubStep: true });
  const isNested = Boolean(inheritedContext.subStepId);
  (0, import_react99.useEffect)(() => {
    if (!isNested) {
      subStepCount.current++;
      onStepChange();
      return () => {
        subStepCount.current--;
        onStepChange();
      };
    }
  }, [isNested, subStepCount, onStepChange]);
  const context = isNested ? inheritedContext : newContext;
  (0, import_react99.useEffect)(() => {
    if (isNested || !subStepRef.current) {
      return;
    }
    const onMouseDown = () => mousePressed.current = true;
    const onMouseUp = () => __awaiter(void 0, void 0, void 0, function* () {
      var _a;
      mousePressed.current = false;
      if (!isFocusedSubStep.current) {
        return;
      }
      yield new Promise((r) => setTimeout(r, 1));
      if (!subStepRef.current || !document.activeElement || !nodeBelongs(subStepRef.current, document.activeElement)) {
        isFocusedSubStep.current = false;
        (_a = focusCleanupFunction.current) === null || _a === void 0 ? void 0 : _a.call(focusCleanupFunction);
      }
    });
    window.addEventListener("mousedown", onMouseDown);
    window.addEventListener("mouseup", onMouseUp);
    return () => {
      window.removeEventListener("mousedown", onMouseDown);
      window.removeEventListener("mouseup", onMouseUp);
    };
  }, [
    funnelInteractionId,
    funnelState,
    stepNameSelector,
    stepNumber,
    subStepNameSelector,
    subStepSelector,
    focusCleanupFunction,
    isNested,
    subStepRef
  ]);
  return import_react99.default.createElement(FunnelSubStepContext.Provider, { value: context }, typeof children === "function" ? children(context) : children);
};

// node_modules/@cloudscape-design/components/expandable-section/expandable-section-container.js
var ExpandableSectionContainer = (_a) => {
  var { className: className2, children, header, variant, expanded, disableContentPaddings, __internalRootRef } = _a, rest = __rest(_a, ["className", "children", "header", "variant", "expanded", "disableContentPaddings", "__internalRootRef"]);
  if (variant === "container" || variant === "stacked") {
    return import_react100.default.createElement(
      AnalyticsFunnelSubStep,
      null,
      import_react100.default.createElement(InternalContainerAsSubstep, Object.assign({}, rest, { className: className2, header, variant: variant === "stacked" ? "stacked" : "default", disableContentPaddings: disableContentPaddings || !expanded, disableHeaderPaddings: true, __hiddenContent: !expanded, __internalRootRef }), children)
    );
  }
  return import_react100.default.createElement(
    "div",
    Object.assign({ className: className2 }, rest, { ref: __internalRootRef }),
    header,
    children
  );
};

// node_modules/@cloudscape-design/components/expandable-section/expandable-section-header.js
var import_react103 = __toESM(require_react());

// node_modules/@cloudscape-design/components/header/internal.js
var import_react102 = __toESM(require_react());

// node_modules/@cloudscape-design/components/header/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/header/styles.scoped.css";
var styles_css_default37 = {
  "root": "awsui_root_2qdw9_1bpgx_99",
  "refresh": "awsui_refresh_2qdw9_1bpgx_138",
  "root-no-actions": "awsui_root-no-actions_2qdw9_1bpgx_138",
  "root-variant-h2": "awsui_root-variant-h2_2qdw9_1bpgx_141",
  "root-variant-h3": "awsui_root-variant-h3_2qdw9_1bpgx_141",
  "root-has-description": "awsui_root-has-description_2qdw9_1bpgx_141",
  "root-variant-h1": "awsui_root-variant-h1_2qdw9_1bpgx_150",
  "main": "awsui_main_2qdw9_1bpgx_160",
  "no-wrap": "awsui_no-wrap_2qdw9_1bpgx_170",
  "main-variant-h1": "awsui_main-variant-h1_2qdw9_1bpgx_176",
  "actions": "awsui_actions_2qdw9_1bpgx_184",
  "actions-centered": "awsui_actions-centered_2qdw9_1bpgx_189",
  "actions-variant-h1": "awsui_actions-variant-h1_2qdw9_1bpgx_192",
  "actions-variant-h2": "awsui_actions-variant-h2_2qdw9_1bpgx_196",
  "actions-variant-h3": "awsui_actions-variant-h3_2qdw9_1bpgx_200",
  "title": "awsui_title_2qdw9_1bpgx_216",
  "title-variant-h1": "awsui_title-variant-h1_2qdw9_1bpgx_221",
  "title-variant-h2": "awsui_title-variant-h2_2qdw9_1bpgx_228",
  "title-variant-h3": "awsui_title-variant-h3_2qdw9_1bpgx_234",
  "virtual-space": "awsui_virtual-space_2qdw9_1bpgx_259",
  "info": "awsui_info_2qdw9_1bpgx_265",
  "description": "awsui_description_2qdw9_1bpgx_269",
  "description-variant-h1": "awsui_description-variant-h1_2qdw9_1bpgx_276",
  "description-variant-h2": "awsui_description-variant-h2_2qdw9_1bpgx_280",
  "description-variant-h3": "awsui_description-variant-h3_2qdw9_1bpgx_287",
  "heading": "awsui_heading_2qdw9_1bpgx_296",
  "heading-variant-h1": "awsui_heading-variant-h1_2qdw9_1bpgx_307",
  "heading-variant-h2": "awsui_heading-variant-h2_2qdw9_1bpgx_312",
  "heading-variant-h3": "awsui_heading-variant-h3_2qdw9_1bpgx_317",
  "heading-text": "awsui_heading-text_2qdw9_1bpgx_327",
  "heading-text-variant-h1": "awsui_heading-text-variant-h1_2qdw9_1bpgx_330",
  "heading-text-variant-h2": "awsui_heading-text-variant-h2_2qdw9_1bpgx_338",
  "heading-text-variant-h3": "awsui_heading-text-variant-h3_2qdw9_1bpgx_346",
  "counter": "awsui_counter_2qdw9_1bpgx_355"
};

// node_modules/@cloudscape-design/components/internal/context/collection-label-context.js
var import_react101 = __toESM(require_react());
var CollectionLabelContext = (0, import_react101.createContext)({});

// node_modules/@cloudscape-design/components/header/internal.js
function InternalHeader(_a) {
  var { variant, headingTagOverride, children, actions, counter, description, info, __internalRootRef = null, __disableActionsWrapping } = _a, restProps = __rest(_a, ["variant", "headingTagOverride", "children", "actions", "counter", "description", "info", "__internalRootRef", "__disableActionsWrapping"]);
  const isMobile = useMobile();
  const HeadingTag = headingTagOverride !== null && headingTagOverride !== void 0 ? headingTagOverride : variant === "awsui-h1-sticky" ? "h1" : variant;
  const { isStuck } = (0, import_react102.useContext)(StickyHeaderContext);
  const baseProps = getBaseProps(restProps);
  const isRefresh = useVisualRefresh();
  const assignHeaderId = (0, import_react102.useContext)(CollectionLabelContext).assignId;
  const headingId = useUniqueId("heading");
  if (assignHeaderId !== void 0) {
    assignHeaderId(headingId);
  }
  const dynamicVariant = !isMobile && isStuck ? "h2" : "h1";
  const variantOverride = variant === "awsui-h1-sticky" ? isRefresh ? dynamicVariant : "h2" : variant;
  return import_react102.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default37.root, baseProps.className, styles_css_default37[`root-variant-${variantOverride}`], isRefresh && styles_css_default37.refresh, !actions && [styles_css_default37[`root-no-actions`]], description && [styles_css_default37[`root-has-description`]]), ref: __internalRootRef }),
    import_react102.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default37.main, styles_css_default37[`main-variant-${variantOverride}`], isRefresh && styles_css_default37.refresh, __disableActionsWrapping && [styles_css_default37["no-wrap"]]) },
      import_react102.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default37.title, styles_css_default37[`title-variant-${variantOverride}`], isRefresh && styles_css_default37.refresh) },
        import_react102.default.createElement(
          HeadingTag,
          { className: clsx_m_default(styles_css_default37.heading, styles_css_default37[`heading-variant-${variantOverride}`]) },
          import_react102.default.createElement("span", Object.assign({}, HeadingTag === "h2" ? { [DATA_ATTR_FUNNEL_KEY]: FUNNEL_KEY_SUBSTEP_NAME } : {}, { className: clsx_m_default(styles_css_default37["heading-text"], styles_css_default37[`heading-text-variant-${variantOverride}`]), id: headingId }), children),
          counter !== void 0 && import_react102.default.createElement(
            "span",
            { className: styles_css_default37.counter },
            " ",
            counter
          )
        ),
        info && import_react102.default.createElement(
          InfoLinkLabelContext.Provider,
          { value: headingId },
          import_react102.default.createElement("span", { className: styles_css_default37["virtual-space"] }, "  "),
          import_react102.default.createElement("span", { className: styles_css_default37.info }, info)
        )
      ),
      actions && import_react102.default.createElement("div", { className: clsx_m_default(styles_css_default37.actions, styles_css_default37[`actions-variant-${variantOverride}`], isRefresh && styles_css_default37.refresh, !__disableActionsWrapping && [styles_css_default37["actions-centered"]]) }, actions)
    ),
    import_react102.default.createElement(Description, { variantOverride }, description)
  );
}
function Description({ children, variantOverride }) {
  const isRefresh = useVisualRefresh();
  return children && import_react102.default.createElement("p", { className: clsx_m_default(styles_css_default37.description, styles_css_default37[`description-variant-${variantOverride}`], isRefresh && styles_css_default37.refresh) }, children) || null;
}

// node_modules/@cloudscape-design/components/expandable-section/utils.js
function variantSupportsDescription(variant) {
  return ["container", "default", "footer"].includes(variant);
}
function variantSupportsInteractiveElements(variant) {
  return ["container", "compact"].includes(variant);
}

// node_modules/@cloudscape-design/components/expandable-section/expandable-section-header.js
var componentName = "ExpandableSection";
var ExpandableDeprecatedHeader = ({ id, className: className2, onClick, ariaLabel, ariaControls, expanded, children, icon, onKeyUp, onKeyDown, variant }) => {
  return import_react103.default.createElement(
    "div",
    { id, role: "button", className: clsx_m_default(className2, styles_css_default36["expand-button"], styles_css_default36["click-target"], styles_css_default36["header-deprecated"]), tabIndex: 0, onKeyUp, onKeyDown, onClick, "aria-label": ariaLabel, "aria-controls": ariaControls, "aria-expanded": expanded },
    import_react103.default.createElement("div", { className: clsx_m_default(styles_css_default36["icon-container"], styles_css_default36[`icon-container-${variant}`]) }, icon),
    children
  );
};
var ExpandableNavigationHeader = ({ id, className: className2, onClick, ariaLabelledBy, ariaLabel, ariaControls, expanded, children, icon }) => {
  return import_react103.default.createElement(
    "div",
    { id, className: clsx_m_default(className2, styles_css_default36["click-target"]) },
    import_react103.default.createElement("button", { className: clsx_m_default(styles_css_default36["icon-container"], styles_css_default36["expand-button"]), "aria-labelledby": ariaLabelledBy, "aria-label": ariaLabel, "aria-controls": ariaControls, "aria-expanded": expanded, type: "button", onClick }, icon),
    children
  );
};
var ExpandableHeaderTextWrapper = ({ id, descriptionId, className: className2, onClick, ariaLabel, ariaControls, expanded, children, icon, headerDescription, headerCounter, headerInfo, headerActions, variant, headingTagOverride, onKeyUp, onKeyDown }) => {
  const isContainer = variant === "container";
  const HeadingTag = headingTagOverride || "div";
  const supportsInteractiveElements = variantSupportsInteractiveElements(variant);
  const restrictClickableArea = supportsInteractiveElements && (headerInfo || headerActions);
  const actions = supportsInteractiveElements && headerActions;
  const description = variantSupportsDescription(variant) && headerDescription && import_react103.default.createElement("span", { id: descriptionId, className: styles_css_default36[`description-${variant}`] }, headerDescription);
  const listeners = { onClick, onKeyDown, onKeyUp };
  const headerButtonListeners = restrictClickableArea ? listeners : void 0;
  const headingTagListeners = !headerButtonListeners && !isContainer && description ? listeners : void 0;
  const wrapperListeners = !headerButtonListeners && !headingTagListeners ? listeners : void 0;
  const headerButton = import_react103.default.createElement(
    "span",
    Object.assign({ className: clsx_m_default(styles_css_default36["expand-button"], isContainer ? styles_css_default36["header-container-button"] : styles_css_default36["header-button"], headerButtonListeners && styles_css_default36["click-target"]), role: "button", tabIndex: 0, "aria-label": ariaLabel, "aria-labelledby": !ariaLabel && description ? id : void 0, "aria-describedby": description ? descriptionId : void 0, "aria-controls": ariaControls, "aria-expanded": expanded }, headerButtonListeners),
    import_react103.default.createElement("span", { className: clsx_m_default(styles_css_default36["icon-container"], styles_css_default36[`icon-container-${variant}`]) }, icon),
    import_react103.default.createElement("span", { id, className: styles_css_default36["header-text"] }, children)
  );
  return import_react103.default.createElement("div", Object.assign({ className: clsx_m_default(className2, wrapperListeners && styles_css_default36["click-target"]) }, wrapperListeners), isContainer ? import_react103.default.createElement(InternalHeader, { variant: "h2", description, counter: headerCounter, info: headerInfo, actions, headingTagOverride }, headerButton) : import_react103.default.createElement(
    import_react103.default.Fragment,
    null,
    import_react103.default.createElement(
      "div",
      { className: clsx_m_default(actions && styles_css_default36["header-actions-wrapper"]) },
      import_react103.default.createElement(HeadingTag, Object.assign({ className: clsx_m_default(styles_css_default36["header-wrapper"], headingTagListeners && styles_css_default36["click-target"]) }, headingTagListeners), headerButton),
      actions
    ),
    description && import_react103.default.createElement(Description, { variantOverride: "h3" }, description)
  ));
};
var ExpandableSectionHeader = ({ id, descriptionId, className: className2, variant, header, headerText, headerDescription, headerCounter, headerInfo, headerActions, headingTagOverride, expanded, ariaControls, ariaLabel, ariaLabelledBy, onKeyUp, onKeyDown, onClick }) => {
  const icon = import_react103.default.createElement(internal_default, { size: variant === "container" ? "medium" : "normal", className: clsx_m_default(styles_css_default36.icon, expanded && styles_css_default36.expanded), name: "caret-down-filled" });
  const defaultHeaderProps = {
    id,
    icon,
    expanded,
    ariaControls,
    ariaLabel,
    onClick,
    variant
  };
  if ((headerCounter || headerInfo || headerActions) && !variantSupportsInteractiveElements(variant) && isDevelopment) {
    warnOnce(componentName, 'The `headerCounter`, `headerInfo` and `headerActions` props are only supported for the "container" variant.');
  }
  if (headerDescription && !variantSupportsDescription(variant) && isDevelopment) {
    warnOnce(componentName, `The \`headerDescription\` prop is not supported for the ${variant} variant.`);
  }
  const wrapperClassName = clsx_m_default(styles_css_default36.wrapper, styles_css_default36[`wrapper-${variant}`], expanded && styles_css_default36["wrapper-expanded"]);
  if (variant === "navigation") {
    return import_react103.default.createElement(ExpandableNavigationHeader, Object.assign({ className: clsx_m_default(className2, wrapperClassName), ariaLabelledBy }, defaultHeaderProps), headerText !== null && headerText !== void 0 ? headerText : header);
  }
  if (headerText) {
    return import_react103.default.createElement(ExpandableHeaderTextWrapper, Object.assign({ className: clsx_m_default(className2, wrapperClassName, expanded && styles_css_default36.expanded), descriptionId, headerDescription, headerCounter, headerInfo, headerActions, headingTagOverride, onKeyUp, onKeyDown }, defaultHeaderProps), headerText);
  }
  if (variant === "container" && header && isDevelopment) {
    warnOnce(componentName, "Use `headerText` instead of `header` to provide the button within the heading for a11y.");
  }
  return import_react103.default.createElement(ExpandableDeprecatedHeader, Object.assign({ className: clsx_m_default(className2, wrapperClassName, styles_css_default36.focusable, expanded && styles_css_default36.expanded), onKeyUp, onKeyDown }, defaultHeaderProps), header);
};

// node_modules/@cloudscape-design/components/expandable-section/internal.js
function InternalExpandableSection(_a) {
  var { expanded: controlledExpanded, defaultExpanded, onChange, variant = "default", children, header, headerText, headerCounter, headerDescription, headerInfo, headerActions, headingTagOverride, disableContentPaddings, headerAriaLabel, __internalRootRef } = _a, props = __rest(_a, ["expanded", "defaultExpanded", "onChange", "variant", "children", "header", "headerText", "headerCounter", "headerDescription", "headerInfo", "headerActions", "headingTagOverride", "disableContentPaddings", "headerAriaLabel", "__internalRootRef"]);
  const ref = (0, import_react104.useRef)(null);
  const controlId = useUniqueId();
  const triggerControlId = `${controlId}-trigger`;
  const descriptionId = `${controlId}-description`;
  const baseProps = getBaseProps(props);
  const [expanded, setExpanded] = useControllable(controlledExpanded, onChange, defaultExpanded, {
    componentName: "ExpandableSection",
    controlledProp: "expanded",
    changeHandler: "onChange"
  });
  const onExpandChange = (0, import_react104.useCallback)((expanded2) => {
    setExpanded(expanded2);
    fireNonCancelableEvent(onChange, { expanded: expanded2 });
  }, [onChange, setExpanded]);
  const onClick = (0, import_react104.useCallback)(() => {
    onExpandChange(!expanded);
  }, [onExpandChange, expanded]);
  const onKeyUp = (0, import_react104.useCallback)((event) => {
    const interactionKeys = [KeyCode.enter, KeyCode.space];
    if (interactionKeys.indexOf(event.keyCode) !== -1) {
      onExpandChange(!expanded);
    }
  }, [onExpandChange, expanded]);
  const onKeyDown = (0, import_react104.useCallback)((event) => {
    if (event.keyCode === KeyCode.space) {
      event.preventDefault();
    }
  }, []);
  const triggerProps = {
    ariaControls: controlId,
    ariaLabel: headerAriaLabel,
    ariaLabelledBy: headerAriaLabel ? void 0 : triggerControlId,
    onKeyUp,
    onKeyDown,
    onClick
  };
  const baseVariant = variant === "stacked" ? "container" : variant;
  return import_react104.default.createElement(
    ExpandableSectionContainer,
    Object.assign({}, baseProps, { expanded, className: clsx_m_default(baseProps.className, styles_css_default36.root), variant, disableContentPaddings, header: import_react104.default.createElement(ExpandableSectionHeader, Object.assign({ id: triggerControlId, descriptionId, className: clsx_m_default(styles_css_default36.header, styles_css_default36[`header-${baseVariant}`]), variant: baseVariant, expanded: !!expanded, header, headerText, headerDescription, headerCounter, headerInfo, headerActions, headingTagOverride }, triggerProps)), __internalRootRef }),
    import_react104.default.createElement(
      CSSTransition_default,
      { in: expanded, timeout: 30, classNames: { enter: styles_css_default36["content-enter"] }, nodeRef: ref },
      import_react104.default.createElement("div", { id: controlId, ref, className: clsx_m_default(styles_css_default36.content, styles_css_default36[`content-${baseVariant}`], expanded && styles_css_default36["content-expanded"]), role: "group", "aria-label": triggerProps.ariaLabel, "aria-labelledby": triggerProps.ariaLabelledBy, "aria-describedby": variantSupportsDescription(baseVariant) && headerDescription ? descriptionId : void 0 }, children)
    )
  );
}

// node_modules/@cloudscape-design/components/internal/components/chart-series-details/series-details-text.js
function getSeriesDetailsText(element) {
  const elementsWithText = Array.from(element.querySelectorAll(`.${styles_css_default35.announced},.${styles_css_default36.header}`));
  return elementsWithText.map((element2) => {
    var _a;
    if (element2 instanceof HTMLElement) {
      return (_a = element2.innerText) === null || _a === void 0 ? void 0 : _a.split("\n").map((s2) => s2.trim()).join(" ").trim();
    }
  }).filter(Boolean).join(", ");
}

// node_modules/@cloudscape-design/components/internal/components/chart-series-details/index.js
var chart_series_details_default = (0, import_react105.memo)((0, import_react105.forwardRef)(ChartSeriesDetails));
function ChartSeriesDetails(_a, ref) {
  var { details, expandedSeries, setPopoverText, setExpandedState, compactList } = _a, restProps = __rest(_a, ["details", "expandedSeries", "setPopoverText", "setExpandedState", "compactList"]);
  const baseProps = getBaseProps(restProps);
  const className2 = clsx_m_default(baseProps.className, styles_css_default35.root);
  const detailsRef = (0, import_react105.useRef)(null);
  const mergedRef = useMergeRefs(ref, detailsRef);
  (0, import_react105.useEffect)(() => {
    if (setPopoverText) {
      if (detailsRef.current) {
        setPopoverText(getSeriesDetailsText(detailsRef.current));
      }
      return () => {
        setPopoverText("");
      };
    }
  }, [details, setPopoverText]);
  const isExpanded = (seriesTitle) => !!expandedSeries && expandedSeries.has(seriesTitle);
  return import_react105.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: className2, ref: mergedRef }),
    import_react105.default.createElement("ul", { className: clsx_m_default(styles_css_default35.list, compactList && styles_css_default35.compact) }, details.map(({ key: key2, value, markerType, color: color2, isDimmed, subItems, expandableId }, index) => import_react105.default.createElement("li", { key: index, className: clsx_m_default({
      [styles_css_default35.dimmed]: isDimmed,
      [styles_css_default35["list-item"]]: true,
      [styles_css_default35["with-sub-items"]]: subItems === null || subItems === void 0 ? void 0 : subItems.length,
      [styles_css_default35.expandable]: !!expandableId
    }) }, (subItems === null || subItems === void 0 ? void 0 : subItems.length) && !!expandableId ? import_react105.default.createElement(ExpandableSeries, { itemKey: key2, value, markerType, color: color2, subItems, expanded: isExpanded(expandableId), setExpandedState: (state) => setExpandedState && setExpandedState(expandableId, state) }) : import_react105.default.createElement(NonExpandableSeries, { itemKey: key2, value, markerType, color: color2, subItems }))))
  );
}
function SubItems({ items, expandable, expanded }) {
  return import_react105.default.createElement("ul", { className: clsx_m_default(styles_css_default35["sub-items"], expandable && styles_css_default35.expandable) }, items.map(({ key: key2, value }, index) => import_react105.default.createElement(
    "li",
    { key: index, className: clsx_m_default(styles_css_default35["inner-list-item"], styles_css_default35["key-value-pair"], (expanded || !expandable) && styles_css_default35.announced) },
    import_react105.default.createElement("span", { className: styles_css_default35.key }, key2),
    import_react105.default.createElement("span", { className: styles_css_default35.value }, value)
  )));
}
function ExpandableSeries({ itemKey, value, subItems, markerType, color: color2, expanded, setExpandedState }) {
  return import_react105.default.createElement(
    "div",
    { className: styles_css_default35["expandable-section"] },
    markerType && color2 && import_react105.default.createElement(chart_series_marker_default, { type: markerType, color: color2 }),
    import_react105.default.createElement(
      "div",
      { className: styles_css_default35["full-width"] },
      import_react105.default.createElement(
        InternalExpandableSection,
        { variant: "compact", headerText: itemKey, headerActions: import_react105.default.createElement("span", { className: clsx_m_default(styles_css_default35.value, styles_css_default35.expandable) }, value), expanded, onChange: ({ detail }) => setExpandedState(detail.expanded) },
        import_react105.default.createElement(SubItems, { items: subItems, expandable: true, expanded })
      )
    )
  );
}
function NonExpandableSeries({ itemKey, value, subItems, markerType, color: color2 }) {
  return import_react105.default.createElement(
    import_react105.default.Fragment,
    null,
    import_react105.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default35["key-value-pair"], styles_css_default35.announced) },
      import_react105.default.createElement(
        "div",
        { className: styles_css_default35.key },
        markerType && color2 && import_react105.default.createElement(chart_series_marker_default, { type: markerType, color: color2 }),
        import_react105.default.createElement("span", null, itemKey)
      ),
      import_react105.default.createElement("span", { className: styles_css_default35.value }, value)
    ),
    subItems && import_react105.default.createElement(SubItems, { items: subItems })
  );
}

// node_modules/@cloudscape-design/components/internal/components/chart-popover-footer/index.js
var import_react106 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-popover-footer/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/chart-popover-footer/styles.scoped.css";
var styles_css_default38 = {
  "root": "awsui_root_1t8ew_td4bm_9"
};

// node_modules/@cloudscape-design/components/internal/components/chart-popover-footer/index.js
function ChartPopoverFooter({ children }) {
  return import_react106.default.createElement("div", { className: styles_css_default38.root }, children);
}

// node_modules/@cloudscape-design/components/area-chart/elements/chart-popover.js
function AreaChartPopover({ model, highlightDetails, dismissAriaLabel, footer, size, onBlur }) {
  if (!highlightDetails) {
    return null;
  }
  const popoverProps = {
    title: highlightDetails.formattedX,
    trackRef: model.refs.verticalMarker,
    trackKey: highlightDetails.highlightIndex,
    dismissButton: highlightDetails.isPopoverPinned,
    onDismiss: model.handlers.onPopoverDismiss,
    onMouseLeave: model.handlers.onPopoverLeave,
    ref: model.refs.popoverRef
  };
  return import_react107.default.createElement(
    chart_popover_default,
    Object.assign({}, popoverProps, { container: model.refs.container.current, dismissAriaLabel, size, onBlur }),
    import_react107.default.createElement(chart_series_details_default, { details: highlightDetails.seriesDetails }),
    import_react107.default.createElement("div", { className: styles_css_default33["popover-divider"] }),
    import_react107.default.createElement(chart_series_details_default, { details: highlightDetails.totalDetails }),
    footer && import_react107.default.createElement(ChartPopoverFooter, null, footer)
  );
}

// node_modules/@cloudscape-design/components/area-chart/elements/highlighted-point.js
var import_react109 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/highlighted-point.js
var import_react108 = __toESM(require_react());
var highlighted_point_default = (0, import_react108.memo)((0, import_react108.forwardRef)(HighlightedPoint));
function HighlightedPoint({ point: point5, role = "group", ariaLabel, ariaHasPopup, ariaExpanded }, ref) {
  if (!point5) {
    return null;
  }
  return import_react108.default.createElement(
    "g",
    { ref, role, "aria-label": ariaLabel, "aria-haspopup": ariaHasPopup, "aria-expanded": ariaExpanded },
    import_react108.default.createElement("circle", { key: point5.key, "aria-hidden": "true", className: styles_css_default32["vertical-marker-circle-active"], cx: point5.x, cy: point5.y, r: 4, stroke: point5.color, fill: point5.color })
  );
}

// node_modules/@cloudscape-design/components/area-chart/elements/highlighted-point.js
var highlighted_point_default2 = (0, import_react109.memo)((0, import_react109.forwardRef)(AreaHighlightedPoint));
function AreaHighlightedPoint({ model, ariaLabel }, ref) {
  const highlightedPoint = useSelector(model.interactions, (state) => state.highlightedPoint);
  const isPopoverPinned = useSelector(model.interactions, (state) => state.isPopoverPinned);
  const point5 = highlightedPoint ? {
    key: `${highlightedPoint.index.x}:${highlightedPoint.index.s}`,
    x: highlightedPoint.scaled.x,
    y: highlightedPoint.scaled.y1,
    color: model.getInternalSeries(model.series[highlightedPoint.index.s]).color
  } : null;
  return import_react109.default.createElement(highlighted_point_default, { ref, point: point5, role: "button", ariaLabel, ariaHasPopup: true, ariaExpanded: isPopoverPinned });
}

// node_modules/@cloudscape-design/components/area-chart/elements/vertical-marker.js
var import_react111 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/vertical-marker.js
var import_react110 = __toESM(require_react());
var vertical_marker_default = (0, import_react110.memo)((0, import_react110.forwardRef)(VerticalMarker));
function VerticalMarker({ height, showPoints = true, showLine = true, points }, ref) {
  const [firstPoint] = points || [];
  return import_react110.default.createElement(
    "g",
    null,
    import_react110.default.createElement("line", { ref, "aria-hidden": "true", className: styles_css_default32["vertical-marker"], style: { visibility: showLine && firstPoint ? "visible" : "hidden" }, x1: firstPoint === null || firstPoint === void 0 ? void 0 : firstPoint.x, x2: firstPoint === null || firstPoint === void 0 ? void 0 : firstPoint.x, y1: 0, y2: height }),
    showPoints && points && points.map((point5) => import_react110.default.createElement("circle", { key: point5.key, "aria-hidden": "true", className: styles_css_default32["vertical-marker-circle"], cx: point5.x, cy: point5.y, r: 4, stroke: point5.color }))
  );
}

// node_modules/@cloudscape-design/components/area-chart/elements/vertical-marker.js
var vertical_marker_default2 = (0, import_react111.memo)(AreaVerticalMarker);
function AreaVerticalMarker({ model }) {
  const highlightedX = useSelector(model.interactions, (state) => state.highlightedX);
  const verticalMarker = (highlightedX || []).map((point5) => ({
    key: `${point5.index.x}:${point5.index.s}`,
    x: point5.scaled.x,
    y: point5.scaled.y1,
    color: model.getInternalSeries(model.series[point5.index.s]).color
  }));
  return import_react111.default.createElement(vertical_marker_default, { height: model.height, points: verticalMarker, ref: model.refs.verticalMarker });
}

// node_modules/@cloudscape-design/components/area-chart/elements/use-highlight-details.js
function useHighlightDetails({ model, xTickFormatter, yTickFormatter, detailTotalFormatter, detailTotalLabel }) {
  const i18n = useInternalI18n("area-chart");
  const hX = useSelector(model.interactions, (state) => state.highlightedX);
  const hPoint = useSelector(model.interactions, (state) => state.highlightedPoint);
  const isPopoverPinned = useSelector(model.interactions, (state) => state.isPopoverPinned);
  if (!hX) {
    return null;
  }
  const [firstPoint] = hX;
  const highlightIndex = firstPoint.index.x;
  const seriesPoints = [...model.computed.plot.xs[highlightIndex]];
  const detailsTotal = seriesPoints.reduce((total, point5) => total + point5.value, 0);
  const formattedX = xTickFormatter ? xTickFormatter(firstPoint.x) : firstPoint.x.toString();
  const seriesTitle = hPoint ? getInternalSeries(hPoint).title : "";
  const formattedY = hPoint ? getInternalSeries(hPoint).formatValue(hPoint.value, hPoint.x) : "";
  const seriesDetails = seriesPoints.map((point5) => {
    const { title, formatValue: formatValue2, color: color2, markerType } = getInternalSeries(point5);
    const isDimmed = Boolean(hPoint) && point5 !== hPoint;
    return { key: title, value: formatValue2(point5.value, point5.x), color: color2, markerType, isDimmed };
  });
  const totalDetails = [
    {
      key: i18n("i18nStrings.detailTotalLabel", detailTotalLabel) || "",
      value: detailTotalFormatter ? detailTotalFormatter(detailsTotal) : yTickFormatter ? yTickFormatter(detailsTotal) : detailsTotal
    }
  ];
  const pointDetails = hPoint ? seriesDetails[hPoint.index.s] : null;
  const activeLabel = `${seriesTitle} ${formattedX} ${formattedY}, ${totalDetails[0].key} ${totalDetails[0].value}`;
  return {
    isPopoverPinned,
    highlightIndex,
    formattedX,
    seriesTitle,
    formattedY,
    activeLabel,
    seriesDetails,
    totalDetails,
    pointDetails
  };
  function getInternalSeries(point5) {
    return model.getInternalSeries(model.series[point5.index.s]);
  }
}

// node_modules/@cloudscape-design/components/internal/utils/use-container-width.js
function useContainerWidth(defaultValue5 = 0, threshold = 1) {
  const [width, ref] = useContainerQuery((rect, prev) => {
    if (prev === null) {
      return rect.contentBoxWidth;
    }
    return Math.abs(prev - rect.contentBoxWidth) >= threshold ? rect.contentBoxWidth : prev;
  });
  return [width !== null && width !== void 0 ? width : defaultValue5, ref];
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/chart-container.js
var import_react112 = __toESM(require_react());
var CONTENT_MIN_HEIGHT_BOUNDARY = 40;
var CartesianChartContainer = (0, import_react112.forwardRef)(({ minHeight, fitHeight, leftAxisLabel, leftAxisLabelMeasure, bottomAxisLabel, chartPlot, popover }, ref) => {
  if (fitHeight) {
    return import_react112.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default32["chart-container"], styles_css_default32["fit-height"]), ref },
      leftAxisLabel,
      import_react112.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default32["chart-container-outer"], styles_css_default32["fit-height"]) },
        leftAxisLabelMeasure,
        import_react112.default.createElement(
          "div",
          { className: styles_css_default32["chart-container-inner"] },
          import_react112.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default32["chart-container-plot-wrapper"], styles_css_default32["fit-height"]), style: { minHeight: Math.max(minHeight, CONTENT_MIN_HEIGHT_BOUNDARY) } },
            import_react112.default.createElement("div", { className: clsx_m_default(styles_css_default32["chart-container-plot"], styles_css_default32["fit-height"]) }, chartPlot)
          ),
          import_react112.default.createElement("div", { className: clsx_m_default(styles_css_default32["chart-container-bottom-labels"], styles_css_default32["fit-height"]) }, bottomAxisLabel)
        ),
        popover
      )
    );
  }
  return import_react112.default.createElement(
    "div",
    { className: styles_css_default32["chart-container"], ref },
    leftAxisLabel,
    import_react112.default.createElement(
      "div",
      { className: styles_css_default32["chart-container-outer"] },
      leftAxisLabelMeasure,
      import_react112.default.createElement(
        "div",
        { className: styles_css_default32["chart-container-inner"] },
        chartPlot,
        bottomAxisLabel
      ),
      popover
    )
  );
});

// node_modules/@cloudscape-design/components/area-chart/chart-container.js
var DEFAULT_CHART_WIDTH = 500;
var LEFT_LABELS_MARGIN = 16;
var BOTTOM_LABELS_OFFSET = 12;
var chart_container_default = (0, import_react113.memo)(ChartContainer);
function ChartContainer({ model, autoWidth, xTitle, yTitle, detailPopoverSize, detailPopoverFooter, ariaLabel, ariaLabelledby, ariaDescription, i18nStrings: { xTickFormatter: deprecatedXTickFormatter, yTickFormatter: deprecatedYTickFormatter, detailTotalFormatter: deprecatedDetailTotalFormatter, detailTotalLabel, chartAriaRoleDescription, xAxisAriaRoleDescription, yAxisAriaRoleDescription, detailPopoverDismissAriaLabel } = {}, fitHeight, minHeight, xTickFormatter = deprecatedXTickFormatter, yTickFormatter = deprecatedYTickFormatter, detailTotalFormatter = deprecatedDetailTotalFormatter }) {
  const [leftLabelsWidth, setLeftLabelsWidth] = (0, import_react113.useState)(0);
  const [containerWidth, containerWidthRef] = useContainerWidth(DEFAULT_CHART_WIDTH);
  const maxLeftLabelsWidth = Math.round(containerWidth / 2);
  const bottomLabelsProps = useBottomLabels({
    ticks: model.computed.xTicks,
    scale: model.computed.xScale,
    tickFormatter: xTickFormatter
  });
  const plotWidth = Math.max(0, containerWidth - leftLabelsWidth - LEFT_LABELS_MARGIN);
  (0, import_react113.useEffect)(() => {
    autoWidth(plotWidth);
  }, [autoWidth, plotWidth]);
  const highlightDetails = useHighlightDetails({
    model,
    xTickFormatter,
    yTickFormatter,
    detailTotalFormatter,
    detailTotalLabel
  });
  const highlightedPointRef = (0, import_react113.useRef)(null);
  const mergedRef = useMergeRefs(containerWidthRef, model.refs.container);
  const isPointHighlighted = model.interactions.get().highlightedPoint !== null;
  const highlightedX = useSelector(model.interactions, (state) => state.highlightedX);
  const detailPopoverFooterContent = (0, import_react113.useMemo)(() => detailPopoverFooter && highlightedX ? detailPopoverFooter(highlightedX[0].x) : null, [detailPopoverFooter, highlightedX]);
  return import_react113.default.createElement(CartesianChartContainer, { ref: mergedRef, minHeight: minHeight + bottomLabelsProps.height, fitHeight: !!fitHeight, leftAxisLabel: import_react113.default.createElement(axis_label_default, { axis: "y", position: "left", title: yTitle }), leftAxisLabelMeasure: import_react113.default.createElement(labels_measure_default, { scale: model.computed.yScale, ticks: model.computed.yTicks, tickFormatter: yTickFormatter, autoWidth: setLeftLabelsWidth, maxLabelsWidth: maxLeftLabelsWidth }), bottomAxisLabel: import_react113.default.createElement(axis_label_default, { axis: "x", position: "bottom", title: xTitle }), chartPlot: import_react113.default.createElement(
    chart_plot_default,
    { ref: model.refs.plot, width: "100%", height: fitHeight ? `calc(100% - ${bottomLabelsProps.height}px)` : model.height, offsetBottom: bottomLabelsProps.height, ariaLabel, ariaLabelledby, ariaDescription, ariaRoleDescription: chartAriaRoleDescription, activeElementKey: !(highlightDetails === null || highlightDetails === void 0 ? void 0 : highlightDetails.isPopoverPinned) && (highlightDetails === null || highlightDetails === void 0 ? void 0 : highlightDetails.activeLabel), activeElementRef: isPointHighlighted ? highlightedPointRef : model.refs.verticalMarker, activeElementFocusOffset: isPointHighlighted ? 3 : { x: 8, y: 0 }, isClickable: !(highlightDetails === null || highlightDetails === void 0 ? void 0 : highlightDetails.isPopoverPinned), onMouseMove: model.handlers.onSVGMouseMove, onMouseOut: model.handlers.onSVGMouseOut, onClick: model.handlers.onSVGMouseDown, onKeyDown: model.handlers.onSVGKeyDown, onApplicationFocus: model.handlers.onApplicationFocus, onApplicationBlur: model.handlers.onApplicationBlur },
    import_react113.default.createElement("line", { ref: model.refs.plotMeasure, x1: "0", x2: "0", y1: "0", y2: "100%", stroke: "transparent", strokeWidth: 1, style: { pointerEvents: "none" } }),
    import_react113.default.createElement(left_labels_default, { plotWidth: model.width, plotHeight: model.height, scale: model.computed.yScale, ticks: model.computed.yTicks, tickFormatter: yTickFormatter, title: yTitle, ariaRoleDescription: yAxisAriaRoleDescription, maxLabelsWidth: maxLeftLabelsWidth }),
    import_react113.default.createElement(data_series_default, { model }),
    import_react113.default.createElement(bottom_labels_default, Object.assign({}, bottomLabelsProps, { width: model.width, height: model.height, scale: model.computed.xScale, title: xTitle, ariaRoleDescription: xAxisAriaRoleDescription, offsetLeft: leftLabelsWidth + BOTTOM_LABELS_OFFSET, offsetRight: BOTTOM_LABELS_OFFSET })),
    import_react113.default.createElement(emphasized_baseline_default, { width: model.width, height: model.height, scale: model.computed.yScale }),
    import_react113.default.createElement(vertical_marker_default2, { model }),
    import_react113.default.createElement(highlighted_point_default2, { ref: highlightedPointRef, model, ariaLabel: highlightDetails === null || highlightDetails === void 0 ? void 0 : highlightDetails.activeLabel })
  ), popover: import_react113.default.createElement(AreaChartPopover, { model, highlightDetails, dismissAriaLabel: detailPopoverDismissAriaLabel, size: detailPopoverSize, footer: detailPopoverFooterContent, onBlur: model.handlers.onApplicationBlur }) });
}

// node_modules/@cloudscape-design/components/area-chart/model/use-chart-model.js
var import_react115 = __toESM(require_react());

// node_modules/@cloudscape-design/components/area-chart/model/utils.js
var EPSILON = 1e-13;
function computeDomainX(series) {
  const xValues = getXValues(series);
  if (xValues.length === 0) {
    return [];
  }
  if (typeof xValues[0] === "string") {
    return uniq(xValues);
  }
  return xValues.reduce(([min3, max3], x2) => [x2 < min3 ? x2 : min3, max3 < x2 ? x2 : max3], [xValues[0], xValues[0]]);
}
function computeDomainY(series, scaleType) {
  let min3 = Number.POSITIVE_INFINITY;
  let max3 = Number.NEGATIVE_INFINITY;
  series.forEach((s2) => {
    if (s2.type === "threshold") {
      min3 = Math.min(min3, s2.y);
      max3 = Math.max(max3, s2.y);
    }
  });
  getXValues(series).forEach((_, xIndex) => {
    var _a;
    let stackY = scaleType === "linear" ? 0 : EPSILON;
    for (const s2 of series) {
      if (s2.type === "area") {
        stackY = stackY + (((_a = s2.data[xIndex]) === null || _a === void 0 ? void 0 : _a.y) || 0);
        min3 = Math.min(min3, stackY);
        max3 = Math.max(max3, stackY);
      }
    }
  });
  if (min3 === Number.POSITIVE_INFINITY) {
    return [];
  }
  if (scaleType === "log" && min3 === 0 && max3 > 1) {
    return [1, max3];
  }
  return [min3, max3];
}
function computePlotPoints(series, xScale, yScale) {
  const xValues = getXValues(series);
  const xy = [];
  const xs = [];
  const sx = [];
  getVisibleData(xValues, xScale).forEach(({ x: x2, scaledX }, xIndex) => {
    let stackY = yScale.scaleType === "linear" ? 0 : EPSILON;
    const points = [];
    series.forEach((s2, sIndex) => {
      var _a;
      if (s2.type === "threshold") {
        const scaledY = yScale.d3Scale(s2.y) || 0;
        points.push({
          x: x2,
          y0: s2.y,
          y1: s2.y,
          scaled: { x: scaledX, y0: scaledY, y1: scaledY },
          index: { x: xIndex, s: sIndex, y: 0 },
          value: 0
        });
      } else {
        const value = ((_a = s2.data[xIndex]) === null || _a === void 0 ? void 0 : _a.y) || 0;
        const y0 = stackY;
        const y1 = stackY + value;
        points.push({
          x: x2,
          y0,
          y1,
          scaled: { x: scaledX, y0: yScale.d3Scale(y0) || 0, y1: yScale.d3Scale(y1) || 0 },
          index: { x: xIndex, s: sIndex, y: 0 },
          value
        });
        stackY = y1;
      }
    });
    points.sort((p1, p2) => p1.y1 - p2.y1).forEach((point5, index) => {
      point5.index.y = index;
      insertIntoMatrix(xy, point5.index.x, point5.index.y, point5);
      insertIntoMatrix(xs, point5.index.x, point5.index.s, point5);
      insertIntoMatrix(sx, point5.index.s, point5.index.x, point5);
    });
  });
  return { xy, xs, sx };
}
function findClosest(sortedArray, target, getter) {
  if (sortedArray.length === 0) {
    throw new Error("Invariant violation: array is empty.");
  }
  const isAscending = getter(sortedArray[0]) < getter(sortedArray[sortedArray.length - 1]);
  const compare = (x2) => isAscending ? getter(x2) < target : getter(x2) > target;
  const delta = (x2) => Math.abs(getter(x2) - target);
  let lo = 0;
  let hi = sortedArray.length - 1;
  while (hi - lo > 1) {
    const mid = Math.floor((lo + hi) / 2);
    if (compare(sortedArray[mid])) {
      lo = mid;
    } else {
      hi = mid;
    }
  }
  return delta(sortedArray[lo]) < delta(sortedArray[hi]) ? sortedArray[lo] : sortedArray[hi];
}
function circleIndex(index, [from, to]) {
  if (index < from) {
    return to;
  }
  if (index > to) {
    return from;
  }
  return index;
}
function isSeriesValid(series) {
  var _a;
  const sampleXValues = getXValues(series);
  for (const s2 of series) {
    if (s2.type === "area") {
      for (let i = 0; i < Math.max(s2.data.length, sampleXValues.length); i++) {
        if (((_a = s2.data[i]) === null || _a === void 0 ? void 0 : _a.x) !== sampleXValues[i]) {
          return false;
        }
      }
    }
  }
  return true;
}
function getXValues(series) {
  for (const s2 of series) {
    if (s2.type === "area") {
      return s2.data.map(({ x: x2 }) => x2);
    }
  }
  return [];
}
function getVisibleData(data, xScale) {
  const scaledOffsetX = xScale.isCategorical() ? Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2 : 0;
  const visibleData = [];
  for (const x2 of data) {
    const scaledX = xScale.d3Scale(x2);
    if (scaledX !== void 0) {
      visibleData.push({ x: x2, scaledX: scaledX + scaledOffsetX });
    }
  }
  return visibleData;
}
function insertIntoMatrix(matrix, row, col, value) {
  if (!matrix[row]) {
    matrix[row] = [];
  }
  matrix[row][col] = value;
}
function uniq(arr) {
  const set2 = /* @__PURE__ */ new Set();
  const uniqArray = [];
  for (const value of arr) {
    if (!set2.has(value)) {
      set2.add(value);
      uniqArray.push(value);
    }
  }
  return uniqArray;
}

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}

// node_modules/date-fns/esm/_lib/toInteger/index.js
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number2 = Number(dirtyNumber);
  if (isNaN(number2)) {
    return number2;
  }
  return number2 < 0 ? Math.ceil(number2) : Math.floor(number2);
}

// node_modules/date-fns/esm/_lib/requiredArgs/index.js
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}

// node_modules/date-fns/esm/toDate/index.js
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return /* @__PURE__ */ new Date(NaN);
  }
}

// node_modules/date-fns/esm/addDays/index.js
function addDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date2 = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (!amount) {
    return date2;
  }
  date2.setDate(date2.getDate() + amount);
  return date2;
}

// node_modules/date-fns/esm/addMonths/index.js
function addMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date2 = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (!amount) {
    return date2;
  }
  var dayOfMonth = date2.getDate();
  var endOfDesiredMonth = new Date(date2.getTime());
  endOfDesiredMonth.setMonth(date2.getMonth() + amount + 1, 0);
  var daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    return endOfDesiredMonth;
  } else {
    date2.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
    return date2;
  }
}

// node_modules/date-fns/esm/add/index.js
function add(dirtyDate, duration) {
  requiredArgs(2, arguments);
  if (!duration || _typeof(duration) !== "object") return /* @__PURE__ */ new Date(NaN);
  var years = duration.years ? toInteger(duration.years) : 0;
  var months = duration.months ? toInteger(duration.months) : 0;
  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;
  var days = duration.days ? toInteger(duration.days) : 0;
  var hours = duration.hours ? toInteger(duration.hours) : 0;
  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;
  var seconds = duration.seconds ? toInteger(duration.seconds) : 0;
  var date2 = toDate(dirtyDate);
  var dateWithMonths = months || years ? addMonths(date2, months + years * 12) : date2;
  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;
  var minutesToAdd = minutes + hours * 60;
  var secondsToAdd = seconds + minutesToAdd * 60;
  var msToAdd = secondsToAdd * 1e3;
  var finalDate = new Date(dateWithDays.getTime() + msToAdd);
  return finalDate;
}

// node_modules/date-fns/esm/addMilliseconds/index.js
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}

// node_modules/date-fns/esm/_lib/defaultOptions/index.js
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}

// node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
function getTimezoneOffsetInMilliseconds(date2) {
  var utcDate2 = new Date(Date.UTC(date2.getFullYear(), date2.getMonth(), date2.getDate(), date2.getHours(), date2.getMinutes(), date2.getSeconds(), date2.getMilliseconds()));
  utcDate2.setUTCFullYear(date2.getFullYear());
  return date2.getTime() - utcDate2.getTime();
}

// node_modules/date-fns/esm/startOfDay/index.js
function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  date2.setHours(0, 0, 0, 0);
  return date2;
}

// node_modules/date-fns/esm/differenceInCalendarDays/index.js
var MILLISECONDS_IN_DAY = 864e5;
function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var startOfDayLeft = startOfDay(dirtyDateLeft);
  var startOfDayRight = startOfDay(dirtyDateRight);
  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);
  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);
}

// node_modules/date-fns/esm/addMinutes/index.js
var MILLISECONDS_IN_MINUTE = 6e4;
function addMinutes(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);
}

// node_modules/date-fns/esm/addWeeks/index.js
function addWeeks(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  var days = amount * 7;
  return addDays(dirtyDate, days);
}

// node_modules/date-fns/esm/addYears/index.js
function addYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, amount * 12);
}

// node_modules/date-fns/esm/max/index.js
function max2(dirtyDatesArray) {
  requiredArgs(1, arguments);
  var datesArray;
  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === "function") {
    datesArray = dirtyDatesArray;
  } else if (_typeof(dirtyDatesArray) === "object" && dirtyDatesArray !== null) {
    datesArray = Array.prototype.slice.call(dirtyDatesArray);
  } else {
    return /* @__PURE__ */ new Date(NaN);
  }
  var result;
  datesArray.forEach(function(dirtyDate) {
    var currentDate = toDate(dirtyDate);
    if (result === void 0 || result < currentDate || isNaN(Number(currentDate))) {
      result = currentDate;
    }
  });
  return result || /* @__PURE__ */ new Date(NaN);
}

// node_modules/date-fns/esm/min/index.js
function min2(dirtyDatesArray) {
  requiredArgs(1, arguments);
  var datesArray;
  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === "function") {
    datesArray = dirtyDatesArray;
  } else if (_typeof(dirtyDatesArray) === "object" && dirtyDatesArray !== null) {
    datesArray = Array.prototype.slice.call(dirtyDatesArray);
  } else {
    return /* @__PURE__ */ new Date(NaN);
  }
  var result;
  datesArray.forEach(function(dirtyDate) {
    var currentDate = toDate(dirtyDate);
    if (result === void 0 || result > currentDate || isNaN(currentDate.getDate())) {
      result = currentDate;
    }
  });
  return result || /* @__PURE__ */ new Date(NaN);
}

// node_modules/date-fns/esm/compareAsc/index.js
function compareAsc(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var diff = dateLeft.getTime() - dateRight.getTime();
  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1;
  } else {
    return diff;
  }
}

// node_modules/date-fns/esm/constants/index.js
var daysInYear = 365.2425;
var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
var millisecondsInMinute = 6e4;
var millisecondsInHour = 36e5;
var millisecondsInSecond = 1e3;
var minTime = -maxTime;
var secondsInHour = 3600;
var secondsInDay = secondsInHour * 24;
var secondsInWeek = secondsInDay * 7;
var secondsInYear = secondsInDay * daysInYear;
var secondsInMonth = secondsInYear / 12;
var secondsInQuarter = secondsInMonth * 3;

// node_modules/date-fns/esm/isSameDay/index.js
function isSameDay(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);
  var dateRightStartOfDay = startOfDay(dirtyDateRight);
  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
}

// node_modules/date-fns/esm/differenceInCalendarYears/index.js
function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() - dateRight.getFullYear();
}

// node_modules/date-fns/esm/differenceInDays/index.js
function compareLocalAsc(dateLeft, dateRight) {
  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();
  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1;
  } else {
    return diff;
  }
}
function differenceInDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign2 = compareLocalAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));
  dateLeft.setDate(dateLeft.getDate() - sign2 * difference);
  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign2);
  var result = sign2 * (difference - isLastDayNotFull);
  return result === 0 ? 0 : result;
}

// node_modules/date-fns/esm/endOfDay/index.js
function endOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  date2.setHours(23, 59, 59, 999);
  return date2;
}

// node_modules/date-fns/esm/endOfMonth/index.js
function endOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var month = date2.getMonth();
  date2.setFullYear(date2.getFullYear(), month + 1, 0);
  date2.setHours(23, 59, 59, 999);
  return date2;
}

// node_modules/date-fns/esm/isLastDayOfMonth/index.js
function isLastDayOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  return endOfDay(date2).getTime() === endOfMonth(date2).getTime();
}

// node_modules/date-fns/esm/differenceInYears/index.js
function differenceInYears(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign2 = compareAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight));
  dateLeft.setFullYear(1584);
  dateRight.setFullYear(1584);
  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign2;
  var result = sign2 * (difference - Number(isLastYearNotFull));
  return result === 0 ? 0 : result;
}

// node_modules/date-fns/esm/startOfMonth/index.js
function startOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  date2.setDate(1);
  date2.setHours(0, 0, 0, 0);
  return date2;
}

// node_modules/date-fns/esm/startOfYear/index.js
function startOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var cleanDate = toDate(dirtyDate);
  var date2 = /* @__PURE__ */ new Date(0);
  date2.setFullYear(cleanDate.getFullYear(), 0, 1);
  date2.setHours(0, 0, 0, 0);
  return date2;
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date2 = toDate(dirtyDate);
  var day = date2.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date2.setUTCDate(date2.getUTCDate() - diff);
  date2.setUTCHours(0, 0, 0, 0);
  return date2;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var year = date2.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date2.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date2.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = /* @__PURE__ */ new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date2 = startOfUTCISOWeek(fourthOfJanuary);
  return date2;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date2).getTime() - startOfUTCISOWeekYear(date2).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions3 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions3.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions3.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date2 = toDate(dirtyDate);
  var day = date2.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date2.setUTCDate(date2.getUTCDate() - diff);
  date2.setUTCHours(0, 0, 0, 0);
  return date2;
}

// node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var year = date2.getUTCFullYear();
  var defaultOptions3 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions3.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions3.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = /* @__PURE__ */ new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = /* @__PURE__ */ new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date2.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date2.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions3 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions3.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions3.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = /* @__PURE__ */ new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date2 = startOfUTCWeek(firstWeek, options);
  return date2;
}

// node_modules/date-fns/esm/_lib/getUTCWeek/index.js
var MILLISECONDS_IN_WEEK2 = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var diff = startOfUTCWeek(date2, options).getTime() - startOfUTCWeekYear(date2, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK2) + 1;
}

// node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function buildFormatLongFn(args) {
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format3 = args.formats[width] || args.formats[args.defaultWidth];
    return format3;
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};

// node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function buildLocalizeFn(args) {
  return function(dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number2 = Number(dirtyNumber);
  var rem100 = number2 % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number2 + "st";
      case 2:
        return number2 + "nd";
      case 3:
        return number2 + "rd";
    }
  }
  return number2 + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};

// node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function buildMatchFn(args) {
  return function(string2) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string2.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key2 = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key2) : key2;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string2.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object2, predicate) {
  for (var key2 in object2) {
    if (object2.hasOwnProperty(key2) && predicate(object2[key2])) {
      return key2;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key2 = 0; key2 < array.length; key2++) {
    if (predicate(array[key2])) {
      return key2;
    }
  }
  return void 0;
}

// node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function buildMatchPatternFn(args) {
  return function(string2) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string2.match(args.matchPattern);
    if (!matchResult) return null;
    var matchedString = matchResult[0];
    var parseResult = string2.match(args.parsePattern);
    if (!parseResult) return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string2.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};

// node_modules/date-fns/esm/formatDistanceStrict/index.js
var MILLISECONDS_IN_MINUTE2 = 1e3 * 60;
var MINUTES_IN_DAY = 60 * 24;
var MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;
var MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;

// node_modules/date-fns/esm/getDaysInMonth/index.js
function getDaysInMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var year = date2.getFullYear();
  var monthIndex = date2.getMonth();
  var lastDayOfMonth2 = /* @__PURE__ */ new Date(0);
  lastDayOfMonth2.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth2.setHours(0, 0, 0, 0);
  return lastDayOfMonth2.getDate();
}

// node_modules/date-fns/esm/getOverlappingDaysInIntervals/index.js
var MILLISECONDS_IN_DAY2 = 24 * 60 * 60 * 1e3;

// node_modules/date-fns/esm/isAfter/index.js
function isAfter(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date2 = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date2.getTime() > dateToCompare.getTime();
}

// node_modules/date-fns/esm/isBefore/index.js
function isBefore(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date2 = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date2.getTime() < dateToCompare.getTime();
}

// node_modules/@babel/runtime/helpers/esm/inherits.js
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

// node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}

// node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t2) {
  }
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
    return !!t;
  })();
}

// node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}

// node_modules/@babel/runtime/helpers/esm/createSuper.js
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

// node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

// node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}

// node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : String(i);
}

// node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj, key2, value) {
  key2 = toPropertyKey(key2);
  if (key2 in obj) {
    Object.defineProperty(obj, key2, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key2] = value;
  }
  return obj;
}

// node_modules/date-fns/esm/parse/_lib/Setter.js
var TIMEZONE_UNIT_PRIORITY = 10;
var Setter = function() {
  function Setter2() {
    _classCallCheck(this, Setter2);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", 0);
  }
  _createClass(Setter2, [{
    key: "validate",
    value: function validate3(_utcDate, _options) {
      return true;
    }
  }]);
  return Setter2;
}();
var ValueSetter = function(_Setter) {
  _inherits(ValueSetter2, _Setter);
  var _super = _createSuper(ValueSetter2);
  function ValueSetter2(value, validateValue, setValue, priority, subPriority) {
    var _this;
    _classCallCheck(this, ValueSetter2);
    _this = _super.call(this);
    _this.value = value;
    _this.validateValue = validateValue;
    _this.setValue = setValue;
    _this.priority = priority;
    if (subPriority) {
      _this.subPriority = subPriority;
    }
    return _this;
  }
  _createClass(ValueSetter2, [{
    key: "validate",
    value: function validate3(utcDate2, options) {
      return this.validateValue(utcDate2, this.value, options);
    }
  }, {
    key: "set",
    value: function set2(utcDate2, flags, options) {
      return this.setValue(utcDate2, flags, this.value, options);
    }
  }]);
  return ValueSetter2;
}(Setter);
var DateToSystemTimezoneSetter = function(_Setter2) {
  _inherits(DateToSystemTimezoneSetter2, _Setter2);
  var _super2 = _createSuper(DateToSystemTimezoneSetter2);
  function DateToSystemTimezoneSetter2() {
    var _this2;
    _classCallCheck(this, DateToSystemTimezoneSetter2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
    _defineProperty(_assertThisInitialized(_this2), "subPriority", -1);
    return _this2;
  }
  _createClass(DateToSystemTimezoneSetter2, [{
    key: "set",
    value: function set2(date2, flags) {
      if (flags.timestampIsSet) {
        return date2;
      }
      var convertedDate = /* @__PURE__ */ new Date(0);
      convertedDate.setFullYear(date2.getUTCFullYear(), date2.getUTCMonth(), date2.getUTCDate());
      convertedDate.setHours(date2.getUTCHours(), date2.getUTCMinutes(), date2.getUTCSeconds(), date2.getUTCMilliseconds());
      return convertedDate;
    }
  }]);
  return DateToSystemTimezoneSetter2;
}(Setter);

// node_modules/date-fns/esm/parse/_lib/Parser.js
var Parser = function() {
  function Parser2() {
    _classCallCheck(this, Parser2);
    _defineProperty(this, "incompatibleTokens", void 0);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", void 0);
  }
  _createClass(Parser2, [{
    key: "run",
    value: function run(dateString, token, match2, options) {
      var result = this.parse(dateString, token, match2, options);
      if (!result) {
        return null;
      }
      return {
        setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
        rest: result.rest
      };
    }
  }, {
    key: "validate",
    value: function validate3(_utcDate, _value, _options) {
      return true;
    }
  }]);
  return Parser2;
}();

// node_modules/date-fns/esm/parse/_lib/parsers/EraParser.js
var EraParser = function(_Parser) {
  _inherits(EraParser2, _Parser);
  var _super = _createSuper(EraParser2);
  function EraParser2() {
    var _this;
    _classCallCheck(this, EraParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 140);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["R", "u", "t", "T"]);
    return _this;
  }
  _createClass(EraParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "G":
        case "GG":
        case "GGG":
          return match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
        case "GGGGG":
          return match2.era(dateString, {
            width: "narrow"
          });
        case "GGGG":
        default:
          return match2.era(dateString, {
            width: "wide"
          }) || match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date2, flags, value) {
      flags.era = value;
      date2.setUTCFullYear(value, 0, 1);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return EraParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/constants.js
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/,
  // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/,
  // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/,
  // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/,
  // 0 to 12
  minute: /^[0-5]?\d/,
  // 0 to 59
  second: /^[0-5]?\d/,
  // 0 to 59
  singleDigit: /^\d/,
  // 0 to 9
  twoDigits: /^\d{1,2}/,
  // 0 to 99
  threeDigits: /^\d{1,3}/,
  // 0 to 999
  fourDigits: /^\d{1,4}/,
  // 0 to 9999
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/,
  // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/,
  // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/
  // 0 to 9999, -0 to -9999
};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};

// node_modules/date-fns/esm/parse/_lib/utils.js
function mapValue(parseFnResult, mapFn) {
  if (!parseFnResult) {
    return parseFnResult;
  }
  return {
    value: mapFn(parseFnResult.value),
    rest: parseFnResult.rest
  };
}
function parseNumericPattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  return {
    value: parseInt(matchResult[0], 10),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseTimezonePattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  if (matchResult[0] === "Z") {
    return {
      value: 0,
      rest: dateString.slice(1)
    };
  }
  var sign2 = matchResult[1] === "+" ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign2 * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseAnyDigitsSigned(dateString) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
}
function parseNDigits(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, dateString);
    default:
      return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), dateString);
  }
}
function parseNDigitsSigned(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
    default:
      return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), dateString);
  }
}
function dayPeriodEnumToHours(dayPeriod) {
  switch (dayPeriod) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    case "am":
    case "midnight":
    case "night":
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0;
  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}

// node_modules/date-fns/esm/parse/_lib/parsers/YearParser.js
var YearParser = function(_Parser) {
  _inherits(YearParser2, _Parser);
  var _super = _createSuper(YearParser2);
  function YearParser2() {
    var _this;
    _classCallCheck(this, YearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(YearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "yy"
        };
      };
      switch (token) {
        case "y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date2, flags, value) {
      var currentYear = date2.getUTCFullYear();
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date2.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date2.setUTCHours(0, 0, 0, 0);
        return date2;
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date2.setUTCFullYear(year, 0, 1);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return YearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/LocalWeekYearParser.js
var LocalWeekYearParser = function(_Parser) {
  _inherits(LocalWeekYearParser2, _Parser);
  var _super = _createSuper(LocalWeekYearParser2);
  function LocalWeekYearParser2() {
    var _this;
    _classCallCheck(this, LocalWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "YY"
        };
      };
      switch (token) {
        case "Y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "Yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date2, flags, value, options) {
      var currentYear = getUTCWeekYear(date2, options);
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date2.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
        date2.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date2, options);
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date2.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date2.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date2, options);
    }
  }]);
  return LocalWeekYearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOWeekYearParser.js
var ISOWeekYearParser = function(_Parser) {
  _inherits(ISOWeekYearParser2, _Parser);
  var _super = _createSuper(ISOWeekYearParser2);
  function ISOWeekYearParser2() {
    var _this;
    _classCallCheck(this, ISOWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "R") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      var firstWeekOfYear = /* @__PURE__ */ new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    }
  }]);
  return ISOWeekYearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ExtendedYearParser.js
var ExtendedYearParser = function(_Parser) {
  _inherits(ExtendedYearParser2, _Parser);
  var _super = _createSuper(ExtendedYearParser2);
  function ExtendedYearParser2() {
    var _this;
    _classCallCheck(this, ExtendedYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ExtendedYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "u") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCFullYear(value, 0, 1);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return ExtendedYearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/QuarterParser.js
var QuarterParser = function(_Parser) {
  _inherits(QuarterParser2, _Parser);
  var _super = _createSuper(QuarterParser2);
  function QuarterParser2() {
    var _this;
    _classCallCheck(this, QuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(QuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "Q":
        case "QQ":
          return parseNDigits(token.length, dateString);
        case "Qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "QQQ":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQQ":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQ":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCMonth((value - 1) * 3, 1);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return QuarterParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneQuarterParser.js
var StandAloneQuarterParser = function(_Parser) {
  _inherits(StandAloneQuarterParser2, _Parser);
  var _super = _createSuper(StandAloneQuarterParser2);
  function StandAloneQuarterParser2() {
    var _this;
    _classCallCheck(this, StandAloneQuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneQuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "q":
        case "qq":
          return parseNDigits(token.length, dateString);
        case "qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "qqq":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqqq":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqq":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCMonth((value - 1) * 3, 1);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return StandAloneQuarterParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/MonthParser.js
var MonthParser = function(_Parser) {
  _inherits(MonthParser2, _Parser);
  var _super = _createSuper(MonthParser2);
  function MonthParser2() {
    var _this;
    _classCallCheck(this, MonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]);
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    return _this;
  }
  _createClass(MonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        case "M":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        case "MM":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        case "Mo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        case "MMM":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMMM":
          return match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMM":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCMonth(value, 1);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return MonthParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneMonthParser.js
var StandAloneMonthParser = function(_Parser) {
  _inherits(StandAloneMonthParser2, _Parser);
  var _super = _createSuper(StandAloneMonthParser2);
  function StandAloneMonthParser2() {
    var _this;
    _classCallCheck(this, StandAloneMonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneMonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        case "L":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        case "LL":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        case "Lo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        case "LLL":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLLL":
          return match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLL":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCMonth(value, 1);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return StandAloneMonthParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCWeek/index.js
function setUTCWeek(dirtyDate, dirtyWeek, options) {
  requiredArgs(2, arguments);
  var date2 = toDate(dirtyDate);
  var week = toInteger(dirtyWeek);
  var diff = getUTCWeek(date2, options) - week;
  date2.setUTCDate(date2.getUTCDate() - diff * 7);
  return date2;
}

// node_modules/date-fns/esm/parse/_lib/parsers/LocalWeekParser.js
var LocalWeekParser = function(_Parser) {
  _inherits(LocalWeekParser2, _Parser);
  var _super = _createSuper(LocalWeekParser2);
  function LocalWeekParser2() {
    var _this;
    _classCallCheck(this, LocalWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "w":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "wo":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value, options) {
      return startOfUTCWeek(setUTCWeek(date2, value, options), options);
    }
  }]);
  return LocalWeekParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js
function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date2 = toDate(dirtyDate);
  var isoWeek = toInteger(dirtyISOWeek);
  var diff = getUTCISOWeek(date2) - isoWeek;
  date2.setUTCDate(date2.getUTCDate() - diff * 7);
  return date2;
}

// node_modules/date-fns/esm/parse/_lib/parsers/ISOWeekParser.js
var ISOWeekParser = function(_Parser) {
  _inherits(ISOWeekParser2, _Parser);
  var _super = _createSuper(ISOWeekParser2);
  function ISOWeekParser2() {
    var _this;
    _classCallCheck(this, ISOWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "I":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "Io":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      return startOfUTCISOWeek(setUTCISOWeek(date2, value));
    }
  }]);
  return ISOWeekParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DateParser.js
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DateParser = function(_Parser) {
  _inherits(DateParser2, _Parser);
  var _super = _createSuper(DateParser2);
  function DateParser2() {
    var _this;
    _classCallCheck(this, DateParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subPriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DateParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "d":
          return parseNumericPattern(numericPatterns.date, dateString);
        case "do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(date2, value) {
      var year = date2.getUTCFullYear();
      var isLeapYear2 = isLeapYearIndex(year);
      var month = date2.getUTCMonth();
      if (isLeapYear2) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCDate(value);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return DateParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DayOfYearParser.js
var DayOfYearParser = function(_Parser) {
  _inherits(DayOfYearParser2, _Parser);
  var _super = _createSuper(DayOfYearParser2);
  function DayOfYearParser2() {
    var _this;
    _classCallCheck(this, DayOfYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subpriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayOfYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "D":
        case "DD":
          return parseNumericPattern(numericPatterns.dayOfYear, dateString);
        case "Do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(date2, value) {
      var year = date2.getUTCFullYear();
      var isLeapYear2 = isLeapYearIndex(year);
      if (isLeapYear2) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCMonth(0, value);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return DayOfYearParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCDay/index.js
function setUTCDay(dirtyDate, dirtyDay, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(2, arguments);
  var defaultOptions3 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions3.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions3.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date2 = toDate(dirtyDate);
  var day = toInteger(dirtyDay);
  var currentDay = date2.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date2.setUTCDate(date2.getUTCDate() + diff);
  return date2;
}

// node_modules/date-fns/esm/parse/_lib/parsers/DayParser.js
var DayParser = function(_Parser) {
  _inherits(DayParser2, _Parser);
  var _super = _createSuper(DayParser2);
  function DayParser2() {
    var _this;
    _classCallCheck(this, DayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "E":
        case "EE":
        case "EEE":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEE":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEEE":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEE":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value, options) {
      date2 = setUTCDay(date2, value, options);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return DayParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/LocalDayParser.js
var LocalDayParser = function(_Parser) {
  _inherits(LocalDayParser2, _Parser);
  var _super = _createSuper(LocalDayParser2);
  function LocalDayParser2() {
    var _this;
    _classCallCheck(this, LocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]);
    return _this;
  }
  _createClass(LocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "e":
        case "ee":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        case "eo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        case "eee":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeee":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeeee":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeee":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value, options) {
      date2 = setUTCDay(date2, value, options);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return LocalDayParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneLocalDayParser.js
var StandAloneLocalDayParser = function(_Parser) {
  _inherits(StandAloneLocalDayParser2, _Parser);
  var _super = _createSuper(StandAloneLocalDayParser2);
  function StandAloneLocalDayParser2() {
    var _this;
    _classCallCheck(this, StandAloneLocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneLocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "c":
        case "cc":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        case "co":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        case "ccc":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "ccccc":
          return match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccccc":
          return match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccc":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value, options) {
      date2 = setUTCDay(date2, value, options);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return StandAloneLocalDayParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCISODay/index.js
function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger(dirtyDay);
  if (day % 7 === 0) {
    day = day - 7;
  }
  var weekStartsOn = 1;
  var date2 = toDate(dirtyDate);
  var currentDay = date2.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date2.setUTCDate(date2.getUTCDate() + diff);
  return date2;
}

// node_modules/date-fns/esm/parse/_lib/parsers/ISODayParser.js
var ISODayParser = function(_Parser) {
  _inherits(ISODayParser2, _Parser);
  var _super = _createSuper(ISODayParser2);
  function ISODayParser2() {
    var _this;
    _classCallCheck(this, ISODayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISODayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        if (value === 0) {
          return 7;
        }
        return value;
      };
      switch (token) {
        case "i":
        case "ii":
          return parseNDigits(token.length, dateString);
        case "io":
          return match2.ordinalNumber(dateString, {
            unit: "day"
          });
        case "iii":
          return mapValue(match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiiii":
          return mapValue(match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiiiii":
          return mapValue(match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiii":
        default:
          return mapValue(match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 1 && value <= 7;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2 = setUTCISODay(date2, value);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return ISODayParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/AMPMParser.js
var AMPMParser = function(_Parser) {
  _inherits(AMPMParser2, _Parser);
  var _super = _createSuper(AMPMParser2);
  function AMPMParser2() {
    var _this;
    _classCallCheck(this, AMPMParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["b", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "a":
        case "aa":
        case "aaa":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaaa":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaa":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date2;
    }
  }]);
  return AMPMParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/AMPMMidnightParser.js
var AMPMMidnightParser = function(_Parser) {
  _inherits(AMPMMidnightParser2, _Parser);
  var _super = _createSuper(AMPMMidnightParser2);
  function AMPMMidnightParser2() {
    var _this;
    _classCallCheck(this, AMPMMidnightParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMMidnightParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "b":
        case "bb":
        case "bbb":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbbb":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbb":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date2;
    }
  }]);
  return AMPMMidnightParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DayPeriodParser.js
var DayPeriodParser = function(_Parser) {
  _inherits(DayPeriodParser2, _Parser);
  var _super = _createSuper(DayPeriodParser2);
  function DayPeriodParser2() {
    var _this;
    _classCallCheck(this, DayPeriodParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "t", "T"]);
    return _this;
  }
  _createClass(DayPeriodParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBBB":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBB":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date2;
    }
  }]);
  return DayPeriodParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour1to12Parser.js
var Hour1to12Parser = function(_Parser) {
  _inherits(Hour1to12Parser2, _Parser);
  var _super = _createSuper(Hour1to12Parser2);
  function Hour1to12Parser2() {
    var _this;
    _classCallCheck(this, Hour1to12Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["H", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour1to12Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "h":
          return parseNumericPattern(numericPatterns.hour12h, dateString);
        case "ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 1 && value <= 12;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      var isPM = date2.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date2.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date2.setUTCHours(0, 0, 0, 0);
      } else {
        date2.setUTCHours(value, 0, 0, 0);
      }
      return date2;
    }
  }]);
  return Hour1to12Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour0to23Parser.js
var Hour0to23Parser = function(_Parser) {
  _inherits(Hour0to23Parser2, _Parser);
  var _super = _createSuper(Hour0to23Parser2);
  function Hour0to23Parser2() {
    var _this;
    _classCallCheck(this, Hour0to23Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0to23Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "H":
          return parseNumericPattern(numericPatterns.hour23h, dateString);
        case "Ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 23;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCHours(value, 0, 0, 0);
      return date2;
    }
  }]);
  return Hour0to23Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour0To11Parser.js
var Hour0To11Parser = function(_Parser) {
  _inherits(Hour0To11Parser2, _Parser);
  var _super = _createSuper(Hour0To11Parser2);
  function Hour0To11Parser2() {
    var _this;
    _classCallCheck(this, Hour0To11Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["h", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0To11Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "K":
          return parseNumericPattern(numericPatterns.hour11h, dateString);
        case "Ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      var isPM = date2.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date2.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date2.setUTCHours(value, 0, 0, 0);
      }
      return date2;
    }
  }]);
  return Hour0To11Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour1To24Parser.js
var Hour1To24Parser = function(_Parser) {
  _inherits(Hour1To24Parser2, _Parser);
  var _super = _createSuper(Hour1To24Parser2);
  function Hour1To24Parser2() {
    var _this;
    _classCallCheck(this, Hour1To24Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "H", "K", "t", "T"]);
    return _this;
  }
  _createClass(Hour1To24Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "k":
          return parseNumericPattern(numericPatterns.hour24h, dateString);
        case "ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 1 && value <= 24;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      var hours = value <= 24 ? value % 24 : value;
      date2.setUTCHours(hours, 0, 0, 0);
      return date2;
    }
  }]);
  return Hour1To24Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/MinuteParser.js
var MinuteParser = function(_Parser) {
  _inherits(MinuteParser2, _Parser);
  var _super = _createSuper(MinuteParser2);
  function MinuteParser2() {
    var _this;
    _classCallCheck(this, MinuteParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 60);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(MinuteParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "m":
          return parseNumericPattern(numericPatterns.minute, dateString);
        case "mo":
          return match2.ordinalNumber(dateString, {
            unit: "minute"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCMinutes(value, 0, 0);
      return date2;
    }
  }]);
  return MinuteParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/SecondParser.js
var SecondParser = function(_Parser) {
  _inherits(SecondParser2, _Parser);
  var _super = _createSuper(SecondParser2);
  function SecondParser2() {
    var _this;
    _classCallCheck(this, SecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 50);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(SecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "s":
          return parseNumericPattern(numericPatterns.second, dateString);
        case "so":
          return match2.ordinalNumber(dateString, {
            unit: "second"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCSeconds(value, 0);
      return date2;
    }
  }]);
  return SecondParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/FractionOfSecondParser.js
var FractionOfSecondParser = function(_Parser) {
  _inherits(FractionOfSecondParser2, _Parser);
  var _super = _createSuper(FractionOfSecondParser2);
  function FractionOfSecondParser2() {
    var _this;
    _classCallCheck(this, FractionOfSecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 30);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(FractionOfSecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      var valueCallback3 = function valueCallback4(value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };
      return mapValue(parseNDigits(token.length, dateString), valueCallback3);
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCMilliseconds(value);
      return date2;
    }
  }]);
  return FractionOfSecondParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOTimezoneWithZParser.js
var ISOTimezoneWithZParser = function(_Parser) {
  _inherits(ISOTimezoneWithZParser2, _Parser);
  var _super = _createSuper(ISOTimezoneWithZParser2);
  function ISOTimezoneWithZParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneWithZParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "x"]);
    return _this;
  }
  _createClass(ISOTimezoneWithZParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "X":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "XX":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "XXXX":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "XXXXX":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "XXX":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date2, flags, value) {
      if (flags.timestampIsSet) {
        return date2;
      }
      return new Date(date2.getTime() - value);
    }
  }]);
  return ISOTimezoneWithZParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOTimezoneParser.js
var ISOTimezoneParser = function(_Parser) {
  _inherits(ISOTimezoneParser2, _Parser);
  var _super = _createSuper(ISOTimezoneParser2);
  function ISOTimezoneParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "X"]);
    return _this;
  }
  _createClass(ISOTimezoneParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "x":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "xx":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "xxxx":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "xxxxx":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "xxx":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date2, flags, value) {
      if (flags.timestampIsSet) {
        return date2;
      }
      return new Date(date2.getTime() - value);
    }
  }]);
  return ISOTimezoneParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/TimestampSecondsParser.js
var TimestampSecondsParser = function(_Parser) {
  _inherits(TimestampSecondsParser2, _Parser);
  var _super = _createSuper(TimestampSecondsParser2);
  function TimestampSecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampSecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 40);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampSecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value * 1e3), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampSecondsParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/TimestampMillisecondsParser.js
var TimestampMillisecondsParser = function(_Parser) {
  _inherits(TimestampMillisecondsParser2, _Parser);
  var _super = _createSuper(TimestampMillisecondsParser2);
  function TimestampMillisecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampMillisecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 20);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampMillisecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampMillisecondsParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/index.js
var parsers = {
  G: new EraParser(),
  y: new YearParser(),
  Y: new LocalWeekYearParser(),
  R: new ISOWeekYearParser(),
  u: new ExtendedYearParser(),
  Q: new QuarterParser(),
  q: new StandAloneQuarterParser(),
  M: new MonthParser(),
  L: new StandAloneMonthParser(),
  w: new LocalWeekParser(),
  I: new ISOWeekParser(),
  d: new DateParser(),
  D: new DayOfYearParser(),
  E: new DayParser(),
  e: new LocalDayParser(),
  c: new StandAloneLocalDayParser(),
  i: new ISODayParser(),
  a: new AMPMParser(),
  b: new AMPMMidnightParser(),
  B: new DayPeriodParser(),
  h: new Hour1to12Parser(),
  H: new Hour0to23Parser(),
  K: new Hour0To11Parser(),
  k: new Hour1To24Parser(),
  m: new MinuteParser(),
  s: new SecondParser(),
  S: new FractionOfSecondParser(),
  X: new ISOTimezoneWithZParser(),
  x: new ISOTimezoneParser(),
  t: new TimestampSecondsParser(),
  T: new TimestampMillisecondsParser()
};

// node_modules/date-fns/esm/isSameMonth/index.js
function isSameMonth(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();
}

// node_modules/date-fns/esm/isSameYear/index.js
function isSameYear(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() === dateRight.getFullYear();
}

// node_modules/date-fns/esm/isToday/index.js
function isToday(dirtyDate) {
  requiredArgs(1, arguments);
  return isSameDay(dirtyDate, Date.now());
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/ticks.js
function getXTickCount(width) {
  return Math.ceil(width / X_TICK_COUNT_RATIO);
}
function getYTickCount(height) {
  return Math.ceil(height / Y_TICK_COUNT_RATIO);
}
function createXTicks(scale, values) {
  if (scale.isNumeric()) {
    return scale.d3Scale.ticks(values);
  } else if (scale.isTime()) {
    const rawTicks = scale.d3Scale.ticks(values);
    const domain = scale.d3Scale.domain();
    return uniform(rawTicks, domain[domain.length - 1]);
  } else {
    return scale.d3Scale.domain();
  }
}
function createYTicks(scale, values) {
  const ticks2 = scale.d3Scale.ticks(values);
  if (scale.scaleType === "log" && ticks2.length > 10) {
    return scale.d3Scale.ticks(3);
  }
  return ticks2;
}
function uniform(ticks2, max3) {
  if (ticks2.length < 3 || !isMixedDayInterval(ticks2)) {
    return ticks2;
  }
  return createTwoDayInterval(ticks2[0], max3);
}
function isMixedDayInterval(ticks2) {
  let oneDayInterval = false;
  let twoDayInterval = false;
  for (let i = 1; i < ticks2.length; i++) {
    oneDayInterval = oneDayInterval || isDayInterval(ticks2[i - 1], ticks2[i], 1);
    twoDayInterval = twoDayInterval || isDayInterval(ticks2[i - 1], ticks2[i], 2);
  }
  return oneDayInterval && twoDayInterval;
}
function isDayInterval(a2, b, difference = 1) {
  return Math.abs(differenceInDays(a2, b)) === difference;
}
function createTwoDayInterval(start, max3) {
  const result = [];
  let curr = start;
  while (curr < max3) {
    result.push(curr);
    curr = add(curr, { days: 2 });
  }
  return result;
}

// node_modules/@cloudscape-design/components/internal/vendor/d3-scale.js
function ascending(a2, b) {
  return a2 == null || b == null ? NaN : a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
}
function descending(a2, b) {
  return a2 == null || b == null ? NaN : b < a2 ? -1 : b > a2 ? 1 : b >= a2 ? 0 : NaN;
}
function bisector(f) {
  let compare1, compare2, delta;
  if (f.length !== 2) {
    compare1 = ascending;
    compare2 = (d, x2) => ascending(f(d), x2);
    delta = (d, x2) => f(d) - x2;
  } else {
    compare1 = f === ascending || f === descending ? f : zero$1;
    compare2 = f;
    delta = f;
  }
  function left(a2, x2, lo = 0, hi = a2.length) {
    if (lo < hi) {
      if (compare1(x2, x2) !== 0) return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a2[mid], x2) < 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function right(a2, x2, lo = 0, hi = a2.length) {
    if (lo < hi) {
      if (compare1(x2, x2) !== 0) return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a2[mid], x2) <= 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function center(a2, x2, lo = 0, hi = a2.length) {
    const i = left(a2, x2, lo, hi - 1);
    return i > lo && delta(a2[i - 1], x2) > -delta(a2[i], x2) ? i - 1 : i;
  }
  return { left, center, right };
}
function zero$1() {
  return 0;
}
function number$2(x2) {
  return x2 === null ? NaN : +x2;
}
var ascendingBisect = bisector(ascending);
var bisectRight = ascendingBisect.right;
bisector(number$2).center;
var bisect = bisectRight;
var InternMap = class extends Map {
  constructor(entries, key2 = keyof) {
    super();
    Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key2 } });
    if (entries != null) for (const [key3, value] of entries) this.set(key3, value);
  }
  get(key2) {
    return super.get(intern_get(this, key2));
  }
  has(key2) {
    return super.has(intern_get(this, key2));
  }
  set(key2, value) {
    return super.set(intern_set(this, key2), value);
  }
  delete(key2) {
    return super.delete(intern_delete(this, key2));
  }
};
function intern_get({ _intern, _key }, value) {
  const key2 = _key(value);
  return _intern.has(key2) ? _intern.get(key2) : value;
}
function intern_set({ _intern, _key }, value) {
  const key2 = _key(value);
  if (_intern.has(key2)) return _intern.get(key2);
  _intern.set(key2, value);
  return value;
}
function intern_delete({ _intern, _key }, value) {
  const key2 = _key(value);
  if (_intern.has(key2)) {
    value = _intern.get(key2);
    _intern.delete(key2);
  }
  return value;
}
function keyof(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function ticks(start, stop, count) {
  var reverse, i = -1, n, ticks2, step;
  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];
  if (step > 0) {
    let r0 = Math.round(start / step), r1 = Math.round(stop / step);
    if (r0 * step < start) ++r0;
    if (r1 * step > stop) --r1;
    ticks2 = new Array(n = r1 - r0 + 1);
    while (++i < n) ticks2[i] = (r0 + i) * step;
  } else {
    step = -step;
    let r0 = Math.round(start * step), r1 = Math.round(stop * step);
    if (r0 / step < start) ++r0;
    if (r1 / step > stop) --r1;
    ticks2 = new Array(n = r1 - r0 + 1);
    while (++i < n) ticks2[i] = (r0 + i) / step;
  }
  if (reverse) ticks2.reverse();
  return ticks2;
}
function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}
function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
  if (error >= e10) step1 *= 10;
  else if (error >= e5) step1 *= 5;
  else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}
function range(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1, n = Math.max(0, Math.ceil((stop - start) / step)) | 0, range3 = new Array(n);
  while (++i < n) {
    range3[i] = start + i * step;
  }
  return range3;
}
function initRange(domain, range3) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range3).domain(domain);
      break;
  }
  return this;
}
var implicit = Symbol("implicit");
function ordinal() {
  var index = new InternMap(), domain = [], range3 = [], unknown = implicit;
  function scale(d) {
    let i = index.get(d);
    if (i === void 0) {
      if (unknown !== implicit) return unknown;
      index.set(d, i = domain.push(d) - 1);
    }
    return range3[i % range3.length];
  }
  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = new InternMap();
    for (const value of _) {
      if (index.has(value)) continue;
      index.set(value, domain.push(value) - 1);
    }
    return scale;
  };
  scale.range = function(_) {
    return arguments.length ? (range3 = Array.from(_), scale) : range3.slice();
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  scale.copy = function() {
    return ordinal(domain, range3).unknown(unknown);
  };
  initRange.apply(scale, arguments);
  return scale;
}
function band() {
  var scale = ordinal().unknown(void 0), domain = scale.domain, ordinalRange = scale.range, r0 = 0, r1 = 1, step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
  delete scale.unknown;
  function rescale() {
    var n = domain().length, reverse = r1 < r0, start = reverse ? r1 : r0, stop = reverse ? r0 : r1;
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = range(n).map(function(i) {
      return start + step * i;
    });
    return ordinalRange(reverse ? values.reverse() : values);
  }
  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };
  scale.range = function(_) {
    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
  };
  scale.rangeRound = function(_) {
    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
  };
  scale.bandwidth = function() {
    return bandwidth;
  };
  scale.step = function() {
    return step;
  };
  scale.round = function(_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };
  scale.padding = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };
  scale.paddingInner = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };
  scale.paddingOuter = function(_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };
  scale.align = function(_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };
  scale.copy = function() {
    return band(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };
  return initRange.apply(rescale(), arguments);
}
function define(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key2 in definition) prototype[key2] = definition[key2];
  return prototype;
}
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define(Color, color, {
  copy(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHex8() {
  return this.rgb().formatHex8();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format3) {
  var m, l;
  format3 = (format3 + "").trim().toLowerCase();
  return (m = reHex.exec(format3)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) : l === 3 ? new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1) : l === 8 ? rgba(m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, (m & 255) / 255) : l === 4 ? rgba(m >> 12 & 15 | m >> 8 & 240, m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, ((m & 15) << 4 | m & 15) / 255) : null) : (m = reRgbInteger.exec(format3)) ? new Rgb(m[1], m[2], m[3], 1) : (m = reRgbPercent.exec(format3)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger.exec(format3)) ? rgba(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent.exec(format3)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent.exec(format3)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent.exec(format3)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) : named.hasOwnProperty(format3) ? rgbn(named[format3]) : format3 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
  return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba(r, g, b, a2) {
  if (a2 <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a2);
}
function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb$1(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}
define(Rgb, rgb$1, extend(Color, {
  brighter(k2) {
    k2 = k2 == null ? brighter : Math.pow(brighter, k2);
    return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
  },
  darker(k2) {
    k2 = k2 == null ? darker : Math.pow(darker, k2);
    return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
  const a2 = clampa(this.opacity);
  return `${a2 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a2 === 1 ? ")" : `, ${a2})`}`;
}
function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h, s2, l, a2) {
  if (a2 <= 0) h = s2 = l = NaN;
  else if (l <= 0 || l >= 1) h = s2 = NaN;
  else if (s2 <= 0) h = NaN;
  return new Hsl(h, s2, l, a2);
}
function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl();
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, min3 = Math.min(r, g, b), max3 = Math.max(r, g, b), h = NaN, s2 = max3 - min3, l = (max3 + min3) / 2;
  if (s2) {
    if (r === max3) h = (g - b) / s2 + (g < b) * 6;
    else if (g === max3) h = (b - r) / s2 + 2;
    else h = (r - g) / s2 + 4;
    s2 /= l < 0.5 ? max3 + min3 : 2 - max3 - min3;
    h *= 60;
  } else {
    s2 = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s2, l, o.opacity);
}
function hsl(h, s2, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s2, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s2, l, opacity) {
  this.h = +h;
  this.s = +s2;
  this.l = +l;
  this.opacity = +opacity;
}
define(Hsl, hsl, extend(Color, {
  brighter(k2) {
    k2 = k2 == null ? brighter : Math.pow(brighter, k2);
    return new Hsl(this.h, this.s, this.l * k2, this.opacity);
  },
  darker(k2) {
    k2 = k2 == null ? darker : Math.pow(darker, k2);
    return new Hsl(this.h, this.s, this.l * k2, this.opacity);
  },
  rgb() {
    var h = this.h % 360 + (this.h < 0) * 360, s2 = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s2, m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a2 = clampa(this.opacity);
    return `${a2 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a2 === 1 ? ")" : `, ${a2})`}`;
  }
}));
function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}
function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}
var constant = (x2) => () => x2;
function linear$1(a2, d) {
  return function(t) {
    return a2 + t * d;
  };
}
function exponential(a2, b, y2) {
  return a2 = Math.pow(a2, y2), b = Math.pow(b, y2) - a2, y2 = 1 / y2, function(t) {
    return Math.pow(a2 + t * b, y2);
  };
}
function gamma(y2) {
  return (y2 = +y2) === 1 ? nogamma : function(a2, b) {
    return b - a2 ? exponential(a2, b, y2) : constant(isNaN(a2) ? b : a2);
  };
}
function nogamma(a2, b) {
  var d = b - a2;
  return d ? linear$1(a2, d) : constant(isNaN(a2) ? b : a2);
}
var rgb = function rgbGamma(y2) {
  var color2 = gamma(y2);
  function rgb2(start, end) {
    var r = color2((start = rgb$1(start)).r, (end = rgb$1(end)).r), g = color2(start.g, end.g), b = color2(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
  rgb2.gamma = rgbGamma;
  return rgb2;
}(1);
function numberArray(a2, b) {
  if (!b) b = [];
  var n = a2 ? Math.min(b.length, a2.length) : 0, c = b.slice(), i;
  return function(t) {
    for (i = 0; i < n; ++i) c[i] = a2[i] * (1 - t) + b[i] * t;
    return c;
  };
}
function isNumberArray(x2) {
  return ArrayBuffer.isView(x2) && !(x2 instanceof DataView);
}
function genericArray(a2, b) {
  var nb = b ? b.length : 0, na = a2 ? Math.min(nb, a2.length) : 0, x2 = new Array(na), c = new Array(nb), i;
  for (i = 0; i < na; ++i) x2[i] = interpolate(a2[i], b[i]);
  for (; i < nb; ++i) c[i] = b[i];
  return function(t) {
    for (i = 0; i < na; ++i) c[i] = x2[i](t);
    return c;
  };
}
function date$1(a2, b) {
  var d = /* @__PURE__ */ new Date();
  return a2 = +a2, b = +b, function(t) {
    return d.setTime(a2 * (1 - t) + b * t), d;
  };
}
function interpolateNumber(a2, b) {
  return a2 = +a2, b = +b, function(t) {
    return a2 * (1 - t) + b * t;
  };
}
function object(a2, b) {
  var i = {}, c = {}, k2;
  if (a2 === null || typeof a2 !== "object") a2 = {};
  if (b === null || typeof b !== "object") b = {};
  for (k2 in b) {
    if (k2 in a2) {
      i[k2] = interpolate(a2[k2], b[k2]);
    } else {
      c[k2] = b[k2];
    }
  }
  return function(t) {
    for (k2 in i) c[k2] = i[k2](t);
    return c;
  };
}
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero(b) {
  return function() {
    return b;
  };
}
function one(b) {
  return function(t) {
    return b(t) + "";
  };
}
function string(a2, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s2 = [], q = [];
  a2 = a2 + "", b = b + "";
  while ((am = reA.exec(a2)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      bs = b.slice(bi, bs);
      if (s2[i]) s2[i] += bs;
      else s2[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s2[i]) s2[i] += bm;
      else s2[++i] = bm;
    } else {
      s2[++i] = null;
      q.push({ i, x: interpolateNumber(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s2[i]) s2[i] += bs;
    else s2[++i] = bs;
  }
  return s2.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function(t) {
    for (var i2 = 0, o; i2 < b; ++i2) s2[(o = q[i2]).i] = o.x(t);
    return s2.join("");
  });
}
function interpolate(a2, b) {
  var t = typeof b, c;
  return b == null || t === "boolean" ? constant(b) : (t === "number" ? interpolateNumber : t === "string" ? (c = color(b)) ? (b = c, rgb) : string : b instanceof color ? rgb : b instanceof Date ? date$1 : isNumberArray(b) ? numberArray : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object : interpolateNumber)(a2, b);
}
function interpolateRound(a2, b) {
  return a2 = +a2, b = +b, function(t) {
    return Math.round(a2 * (1 - t) + b * t);
  };
}
function constants(x2) {
  return function() {
    return x2;
  };
}
function number$1(x2) {
  return +x2;
}
var unit = [0, 1];
function identity$1(x2) {
  return x2;
}
function normalize(a2, b) {
  return (b -= a2 = +a2) ? function(x2) {
    return (x2 - a2) / b;
  } : constants(isNaN(b) ? NaN : 0.5);
}
function clamper(a2, b) {
  var t;
  if (a2 > b) t = a2, a2 = b, b = t;
  return function(x2) {
    return Math.max(a2, Math.min(b, x2));
  };
}
function bimap(domain, range3, interpolate2) {
  var d0 = domain[0], d1 = domain[1], r0 = range3[0], r1 = range3[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate2(r1, r0);
  else d0 = normalize(d0, d1), r0 = interpolate2(r0, r1);
  return function(x2) {
    return r0(d0(x2));
  };
}
function polymap(domain, range3, interpolate2) {
  var j = Math.min(domain.length, range3.length) - 1, d = new Array(j), r = new Array(j), i = -1;
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range3 = range3.slice().reverse();
  }
  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate2(range3[i], range3[i + 1]);
  }
  return function(x2) {
    var i2 = bisect(domain, x2, 1, j) - 1;
    return r[i2](d[i2](x2));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
  var domain = unit, range3 = unit, interpolate$1 = interpolate, transform, untransform, unknown, clamp3 = identity$1, piecewise, output, input;
  function rescale() {
    var n = Math.min(domain.length, range3.length);
    if (clamp3 !== identity$1) clamp3 = clamper(domain[0], domain[n - 1]);
    piecewise = n > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }
  function scale(x2) {
    return x2 == null || isNaN(x2 = +x2) ? unknown : (output || (output = piecewise(domain.map(transform), range3, interpolate$1)))(transform(clamp3(x2)));
  }
  scale.invert = function(y2) {
    return clamp3(untransform((input || (input = piecewise(range3, domain.map(transform), interpolateNumber)))(y2)));
  };
  scale.domain = function(_) {
    return arguments.length ? (domain = Array.from(_, number$1), rescale()) : domain.slice();
  };
  scale.range = function(_) {
    return arguments.length ? (range3 = Array.from(_), rescale()) : range3.slice();
  };
  scale.rangeRound = function(_) {
    return range3 = Array.from(_), interpolate$1 = interpolateRound, rescale();
  };
  scale.clamp = function(_) {
    return arguments.length ? (clamp3 = _ ? true : identity$1, rescale()) : clamp3 !== identity$1;
  };
  scale.interpolate = function(_) {
    return arguments.length ? (interpolate$1 = _, rescale()) : interpolate$1;
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  return function(t, u) {
    transform = t, untransform = u;
    return rescale();
  };
}
function continuous() {
  return transformer()(identity$1, identity$1);
}
function formatDecimal(x2) {
  return Math.abs(x2 = Math.round(x2)) >= 1e21 ? x2.toLocaleString("en").replace(/,/g, "") : x2.toString(10);
}
function formatDecimalParts(x2, p) {
  if ((i = (x2 = p ? x2.toExponential(p - 1) : x2.toExponential()).indexOf("e")) < 0) return null;
  var i, coefficient = x2.slice(0, i);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x2.slice(i + 1)
  ];
}
function exponent(x2) {
  return x2 = formatDecimalParts(Math.abs(x2)), x2 ? x2[1] : NaN;
}
function formatGroup(grouping, thousands) {
  return function(value, width) {
    var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }
    return t.reverse().join(thousands);
  };
}
function formatNumerals(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match2 = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match2;
  return new FormatSpecifier({
    fill: match2[1],
    align: match2[2],
    sign: match2[3],
    symbol: match2[4],
    zero: match2[5],
    width: match2[6],
    comma: match2[7],
    precision: match2[8] && match2[8].slice(1),
    trim: match2[9],
    type: match2[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};
function formatTrim(s2) {
  out: for (var n = s2.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s2[i]) {
      case ".":
        i0 = i1 = i;
        break;
      case "0":
        if (i0 === 0) i0 = i;
        i1 = i;
        break;
      default:
        if (!+s2[i]) break out;
        if (i0 > 0) i0 = 0;
        break;
    }
  }
  return i0 > 0 ? s2.slice(0, i0) + s2.slice(i1 + 1) : s2;
}
var prefixExponent;
function formatPrefixAuto(x2, p) {
  var d = formatDecimalParts(x2, p);
  if (!d) return x2 + "";
  var coefficient = d[0], exponent2 = d[1], i = exponent2 - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent2 / 3))) * 3) + 1, n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x2, Math.max(0, p + i - 1))[0];
}
function formatRounded(x2, p) {
  var d = formatDecimalParts(x2, p);
  if (!d) return x2 + "";
  var coefficient = d[0], exponent2 = d[1];
  return exponent2 < 0 ? "0." + new Array(-exponent2).join("0") + coefficient : coefficient.length > exponent2 + 1 ? coefficient.slice(0, exponent2 + 1) + "." + coefficient.slice(exponent2 + 1) : coefficient + new Array(exponent2 - coefficient.length + 2).join("0");
}
var formatTypes = {
  "%": (x2, p) => (x2 * 100).toFixed(p),
  "b": (x2) => Math.round(x2).toString(2),
  "c": (x2) => x2 + "",
  "d": formatDecimal,
  "e": (x2, p) => x2.toExponential(p),
  "f": (x2, p) => x2.toFixed(p),
  "g": (x2, p) => x2.toPrecision(p),
  "o": (x2) => Math.round(x2).toString(8),
  "p": (x2, p) => formatRounded(x2 * 100, p),
  "r": formatRounded,
  "s": formatPrefixAuto,
  "X": (x2) => Math.round(x2).toString(16).toUpperCase(),
  "x": (x2) => Math.round(x2).toString(16)
};
function identity(x2) {
  return x2;
}
var map = Array.prototype.map;
var prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function formatLocale$1(locale2) {
  var group = locale2.grouping === void 0 || locale2.thousands === void 0 ? identity : formatGroup(map.call(locale2.grouping, Number), locale2.thousands + ""), currencyPrefix = locale2.currency === void 0 ? "" : locale2.currency[0] + "", currencySuffix = locale2.currency === void 0 ? "" : locale2.currency[1] + "", decimal = locale2.decimal === void 0 ? "." : locale2.decimal + "", numerals = locale2.numerals === void 0 ? identity : formatNumerals(map.call(locale2.numerals, String)), percent = locale2.percent === void 0 ? "%" : locale2.percent + "", minus = locale2.minus === void 0 ? "−" : locale2.minus + "", nan = locale2.nan === void 0 ? "NaN" : locale2.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol = specifier.symbol, zero2 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
    if (type === "n") comma = true, type = "g";
    else if (!formatTypes[type]) precision === void 0 && (precision = 12), trim = true, type = "g";
    if (zero2 || fill === "0" && align === "=") zero2 = true, fill = "0", align = "=";
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
    var formatType = formatTypes[type], maybeSuffix = /[defgprs%]/.test(type);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format3(value) {
      var valuePrefix = prefix, valueSuffix = suffix, i, n, c;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim) value = formatTrim(value);
        if (valueNegative && +value === 0 && sign2 !== "+") valueNegative = false;
        valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : minus : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign2 === "(" ? ")" : "");
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }
      if (comma && !zero2) value = group(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero2) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format3.toString = function() {
      return specifier + "";
    };
    return format3;
  }
  function formatPrefix2(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3, k2 = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
    return function(value2) {
      return f(k2 * value2) + prefix;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}
var locale$1;
var format2;
var formatPrefix;
defaultLocale$1({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale$1(definition) {
  locale$1 = formatLocale$1(definition);
  format2 = locale$1.format;
  formatPrefix = locale$1.formatPrefix;
  return locale$1;
}
function precisionFixed(step) {
  return Math.max(0, -exponent(Math.abs(step)));
}
function precisionPrefix(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
}
function precisionRound(step, max3) {
  step = Math.abs(step), max3 = Math.abs(max3) - step;
  return Math.max(0, exponent(max3) - exponent(step)) + 1;
}
function tickFormat(start, stop, count, specifier) {
  var step = tickStep(start, stop, count), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format2(specifier);
}
function linearish(scale) {
  var domain = scale.domain;
  scale.ticks = function(count) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
  };
  scale.tickFormat = function(count, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };
  scale.nice = function(count) {
    if (count == null) count = 10;
    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start = d[i0];
    var stop = d[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement(start, stop, count);
      if (step === prestep) {
        d[i0] = start;
        d[i1] = stop;
        return domain(d);
      } else if (step > 0) {
        start = Math.floor(start / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start = Math.ceil(start * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale;
  };
  return scale;
}
function linear() {
  var scale = continuous();
  scale.copy = function() {
    return copy(scale, linear());
  };
  initRange.apply(scale, arguments);
  return linearish(scale);
}
function nice(domain, interval) {
  domain = domain.slice();
  var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t;
  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }
  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}
function transformLog(x2) {
  return Math.log(x2);
}
function transformExp(x2) {
  return Math.exp(x2);
}
function transformLogn(x2) {
  return -Math.log(-x2);
}
function transformExpn(x2) {
  return -Math.exp(-x2);
}
function pow10(x2) {
  return isFinite(x2) ? +("1e" + x2) : x2 < 0 ? 0 : x2;
}
function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : (x2) => Math.pow(base, x2);
}
function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), (x2) => Math.log(x2) / base);
}
function reflect(f) {
  return (x2, k2) => -f(-x2, k2);
}
function loggish(transform) {
  const scale = transform(transformLog, transformExp);
  const domain = scale.domain;
  let base = 10;
  let logs;
  let pows;
  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }
    return scale;
  }
  scale.base = function(_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };
  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };
  scale.ticks = (count) => {
    const d = domain();
    let u = d[0];
    let v = d[d.length - 1];
    const r = v < u;
    if (r) [u, v] = [v, u];
    let i = logs(u);
    let j = logs(v);
    let k2;
    let t;
    const n = count == null ? 10 : +count;
    let z = [];
    if (!(base % 1) && j - i < n) {
      i = Math.floor(i), j = Math.ceil(j);
      if (u > 0) for (; i <= j; ++i) {
        for (k2 = 1; k2 < base; ++k2) {
          t = i < 0 ? k2 / pows(-i) : k2 * pows(i);
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
      else for (; i <= j; ++i) {
        for (k2 = base - 1; k2 >= 1; --k2) {
          t = i > 0 ? k2 / pows(-i) : k2 * pows(i);
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
      if (z.length * 2 < n) z = ticks(u, v, n);
    } else {
      z = ticks(i, j, Math.min(j - i, n)).map(pows);
    }
    return r ? z.reverse() : z;
  };
  scale.tickFormat = (count, specifier) => {
    if (count == null) count = 10;
    if (specifier == null) specifier = base === 10 ? "s" : ",";
    if (typeof specifier !== "function") {
      if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null) specifier.trim = true;
      specifier = format2(specifier);
    }
    if (count === Infinity) return specifier;
    const k2 = Math.max(1, base * count / scale.ticks().length);
    return (d) => {
      let i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k2 ? specifier(d) : "";
    };
  };
  scale.nice = () => {
    return domain(nice(domain(), {
      floor: (x2) => pows(Math.floor(logs(x2))),
      ceil: (x2) => pows(Math.ceil(logs(x2)))
    }));
  };
  return scale;
}
function log() {
  const scale = loggish(transformer()).domain([1, 10]);
  scale.copy = () => copy(scale, log()).base(scale.base());
  initRange.apply(scale, arguments);
  return scale;
}
var t0 = /* @__PURE__ */ new Date();
var t1 = /* @__PURE__ */ new Date();
function timeInterval(floori, offseti, count, field) {
  function interval(date2) {
    return floori(date2 = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date2)), date2;
  }
  interval.floor = (date2) => {
    return floori(date2 = /* @__PURE__ */ new Date(+date2)), date2;
  };
  interval.ceil = (date2) => {
    return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
  };
  interval.round = (date2) => {
    const d0 = interval(date2), d1 = interval.ceil(date2);
    return date2 - d0 < d1 - date2 ? d0 : d1;
  };
  interval.offset = (date2, step) => {
    return offseti(date2 = /* @__PURE__ */ new Date(+date2), step == null ? 1 : Math.floor(step)), date2;
  };
  interval.range = (start, stop, step) => {
    const range3 = [];
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range3;
    let previous;
    do
      range3.push(previous = /* @__PURE__ */ new Date(+start)), offseti(start, step), floori(start);
    while (previous < start && start < stop);
    return range3;
  };
  interval.filter = (test) => {
    return timeInterval((date2) => {
      if (date2 >= date2) while (floori(date2), !test(date2)) date2.setTime(date2 - 1);
    }, (date2, step) => {
      if (date2 >= date2) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date2, -1), !test(date2)) {
          }
        }
        else while (--step >= 0) {
          while (offseti(date2, 1), !test(date2)) {
          }
        }
      }
    });
  };
  if (count) {
    interval.count = (start, end) => {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count(t0, t1));
    };
    interval.every = (step) => {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? (d) => field(d) % step === 0 : (d) => interval.count(0, d) % step === 0);
    };
  }
  return interval;
}
var millisecond = timeInterval(() => {
}, (date2, step) => {
  date2.setTime(+date2 + step);
}, (start, end) => {
  return end - start;
});
millisecond.every = (k2) => {
  k2 = Math.floor(k2);
  if (!isFinite(k2) || !(k2 > 0)) return null;
  if (!(k2 > 1)) return millisecond;
  return timeInterval((date2) => {
    date2.setTime(Math.floor(date2 / k2) * k2);
  }, (date2, step) => {
    date2.setTime(+date2 + step * k2);
  }, (start, end) => {
    return (end - start) / k2;
  });
};
millisecond.range;
var durationSecond = 1e3;
var durationMinute = durationSecond * 60;
var durationHour = durationMinute * 60;
var durationDay = durationHour * 24;
var durationWeek = durationDay * 7;
var durationMonth = durationDay * 30;
var durationYear = durationDay * 365;
var second = timeInterval((date2) => {
  date2.setTime(date2 - date2.getMilliseconds());
}, (date2, step) => {
  date2.setTime(+date2 + step * durationSecond);
}, (start, end) => {
  return (end - start) / durationSecond;
}, (date2) => {
  return date2.getUTCSeconds();
});
second.range;
var timeMinute = timeInterval((date2) => {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond);
}, (date2, step) => {
  date2.setTime(+date2 + step * durationMinute);
}, (start, end) => {
  return (end - start) / durationMinute;
}, (date2) => {
  return date2.getMinutes();
});
timeMinute.range;
var utcMinute = timeInterval((date2) => {
  date2.setUTCSeconds(0, 0);
}, (date2, step) => {
  date2.setTime(+date2 + step * durationMinute);
}, (start, end) => {
  return (end - start) / durationMinute;
}, (date2) => {
  return date2.getUTCMinutes();
});
utcMinute.range;
var timeHour = timeInterval((date2) => {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond - date2.getMinutes() * durationMinute);
}, (date2, step) => {
  date2.setTime(+date2 + step * durationHour);
}, (start, end) => {
  return (end - start) / durationHour;
}, (date2) => {
  return date2.getHours();
});
timeHour.range;
var utcHour = timeInterval((date2) => {
  date2.setUTCMinutes(0, 0, 0);
}, (date2, step) => {
  date2.setTime(+date2 + step * durationHour);
}, (start, end) => {
  return (end - start) / durationHour;
}, (date2) => {
  return date2.getUTCHours();
});
utcHour.range;
var timeDay = timeInterval(
  (date2) => date2.setHours(0, 0, 0, 0),
  (date2, step) => date2.setDate(date2.getDate() + step),
  (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
  (date2) => date2.getDate() - 1
);
timeDay.range;
var utcDay = timeInterval((date2) => {
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setUTCDate(date2.getUTCDate() + step);
}, (start, end) => {
  return (end - start) / durationDay;
}, (date2) => {
  return date2.getUTCDate() - 1;
});
utcDay.range;
var unixDay = timeInterval((date2) => {
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setUTCDate(date2.getUTCDate() + step);
}, (start, end) => {
  return (end - start) / durationDay;
}, (date2) => {
  return Math.floor(date2 / durationDay);
});
unixDay.range;
function timeWeekday(i) {
  return timeInterval((date2) => {
    date2.setDate(date2.getDate() - (date2.getDay() + 7 - i) % 7);
    date2.setHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setDate(date2.getDate() + step * 7);
  }, (start, end) => {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
var timeSunday = timeWeekday(0);
var timeMonday = timeWeekday(1);
var timeTuesday = timeWeekday(2);
var timeWednesday = timeWeekday(3);
var timeThursday = timeWeekday(4);
var timeFriday = timeWeekday(5);
var timeSaturday = timeWeekday(6);
timeSunday.range;
timeMonday.range;
timeTuesday.range;
timeWednesday.range;
timeThursday.range;
timeFriday.range;
timeSaturday.range;
function utcWeekday(i) {
  return timeInterval((date2) => {
    date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i) % 7);
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCDate(date2.getUTCDate() + step * 7);
  }, (start, end) => {
    return (end - start) / durationWeek;
  });
}
var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
utcSunday.range;
utcMonday.range;
utcTuesday.range;
utcWednesday.range;
utcThursday.range;
utcFriday.range;
utcSaturday.range;
var timeMonth = timeInterval((date2) => {
  date2.setDate(1);
  date2.setHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setMonth(date2.getMonth() + step);
}, (start, end) => {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, (date2) => {
  return date2.getMonth();
});
timeMonth.range;
var utcMonth = timeInterval((date2) => {
  date2.setUTCDate(1);
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setUTCMonth(date2.getUTCMonth() + step);
}, (start, end) => {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, (date2) => {
  return date2.getUTCMonth();
});
utcMonth.range;
var timeYear = timeInterval((date2) => {
  date2.setMonth(0, 1);
  date2.setHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setFullYear(date2.getFullYear() + step);
}, (start, end) => {
  return end.getFullYear() - start.getFullYear();
}, (date2) => {
  return date2.getFullYear();
});
timeYear.every = (k2) => {
  return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : timeInterval((date2) => {
    date2.setFullYear(Math.floor(date2.getFullYear() / k2) * k2);
    date2.setMonth(0, 1);
    date2.setHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setFullYear(date2.getFullYear() + step * k2);
  });
};
timeYear.range;
var utcYear = timeInterval((date2) => {
  date2.setUTCMonth(0, 1);
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setUTCFullYear(date2.getUTCFullYear() + step);
}, (start, end) => {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, (date2) => {
  return date2.getUTCFullYear();
});
utcYear.every = (k2) => {
  return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : timeInterval((date2) => {
    date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k2) * k2);
    date2.setUTCMonth(0, 1);
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCFullYear(date2.getUTCFullYear() + step * k2);
  });
};
utcYear.range;
function ticker(year, month, week, day, hour, minute) {
  const tickIntervals = [
    [second, 1, durationSecond],
    [second, 5, 5 * durationSecond],
    [second, 15, 15 * durationSecond],
    [second, 30, 30 * durationSecond],
    [minute, 1, durationMinute],
    [minute, 5, 5 * durationMinute],
    [minute, 15, 15 * durationMinute],
    [minute, 30, 30 * durationMinute],
    [hour, 1, durationHour],
    [hour, 3, 3 * durationHour],
    [hour, 6, 6 * durationHour],
    [hour, 12, 12 * durationHour],
    [day, 1, durationDay],
    [day, 2, 2 * durationDay],
    [week, 1, durationWeek],
    [month, 1, durationMonth],
    [month, 3, 3 * durationMonth],
    [year, 1, durationYear]
  ];
  function ticks2(start, stop, count) {
    const reverse = stop < start;
    if (reverse) [start, stop] = [stop, start];
    const interval = count && typeof count.range === "function" ? count : tickInterval(start, stop, count);
    const ticks3 = interval ? interval.range(start, +stop + 1) : [];
    return reverse ? ticks3.reverse() : ticks3;
  }
  function tickInterval(start, stop, count) {
    const target = Math.abs(stop - start) / count;
    const i = bisector(([, , step2]) => step2).right(tickIntervals, target);
    if (i === tickIntervals.length) return year.every(tickStep(start / durationYear, stop / durationYear, count));
    if (i === 0) return millisecond.every(Math.max(tickStep(start, stop, count), 1));
    const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
    return t.every(step);
  }
  return [ticks2, tickInterval];
}
ticker(utcYear, utcMonth, utcSunday, unixDay, utcHour, utcMinute);
var [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute);
function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date2 = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date2.setFullYear(d.y);
    return date2;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}
function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date2 = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date2.setUTCFullYear(d.y);
    return date2;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}
function newDate(y2, m, d) {
  return { y: y2, m, d, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale(locale2) {
  var locale_dateTime = locale2.dateTime, locale_date = locale2.date, locale_time = locale2.time, locale_periods = locale2.periods, locale_weekdays = locale2.days, locale_shortWeekdays = locale2.shortDays, locale_months = locale2.months, locale_shortMonths = locale2.shortMonths;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date2) {
      var string2 = [], i = -1, j = 0, n = specifier.length, c, pad2, format3;
      if (!(date2 instanceof Date)) date2 = /* @__PURE__ */ new Date(+date2);
      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string2.push(specifier.slice(j, i));
          if ((pad2 = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
          else pad2 = c === "e" ? " " : "0";
          if (format3 = formats2[c]) c = format3(date2, pad2);
          string2.push(c);
          j = i + 1;
        }
      }
      string2.push(specifier.slice(j, i));
      return string2.join("");
    };
  }
  function newParse(specifier, Z) {
    return function(string2) {
      var d = newDate(1900, void 0, 1), i = parseSpecifier(d, specifier, string2 += "", 0), week, day;
      if (i != string2.length) return null;
      if ("Q" in d) return new Date(d.Q);
      if ("s" in d) return new Date(d.s * 1e3 + ("L" in d ? d.L : 0));
      if (Z && !("Z" in d)) d.Z = 0;
      if ("p" in d) d.H = d.H % 12 + d.p * 12;
      if (d.m === void 0) d.m = "q" in d ? d.q : 0;
      if ("V" in d) {
        if (d.V < 1 || d.V > 53) return null;
        if (!("w" in d)) d.w = 1;
        if ("Z" in d) {
          week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
          week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);
          week = timeDay.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
      }
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }
      return localDate(d);
    };
  }
  function parseSpecifier(d, specifier, string2, j) {
    var i = 0, n = specifier.length, m = string2.length, c, parse2;
    while (i < n) {
      if (j >= m) return -1;
      c = specifier.charCodeAt(i++);
      if (c === 37) {
        c = specifier.charAt(i++);
        parse2 = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse2 || (j = parse2(d, string2, j)) < 0) return -1;
      } else if (c != string2.charCodeAt(j++)) {
        return -1;
      }
    }
    return j;
  }
  function parsePeriod(d, string2, i) {
    var n = periodRe.exec(string2.slice(i));
    return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseShortWeekday(d, string2, i) {
    var n = shortWeekdayRe.exec(string2.slice(i));
    return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseWeekday(d, string2, i) {
    var n = weekdayRe.exec(string2.slice(i));
    return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseShortMonth(d, string2, i) {
    var n = shortMonthRe.exec(string2.slice(i));
    return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseMonth(d, string2, i) {
    var n = monthRe.exec(string2.slice(i));
    return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }
  function parseLocaleDateTime(d, string2, i) {
    return parseSpecifier(d, locale_dateTime, string2, i);
  }
  function parseLocaleDate(d, string2, i) {
    return parseSpecifier(d, locale_date, string2, i);
  }
  function parseLocaleTime(d, string2, i) {
    return parseSpecifier(d, locale_time, string2, i);
  }
  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }
  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }
  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }
  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }
  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }
  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }
  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }
  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }
  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }
  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }
  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    parse: function(specifier) {
      var p = newParse(specifier += "", false);
      p.toString = function() {
        return specifier;
      };
      return p;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    utcParse: function(specifier) {
      var p = newParse(specifier += "", true);
      p.toString = function() {
        return specifier;
      };
      return p;
    }
  };
}
var pads = { "-": "", "_": " ", "0": "0" };
var numberRe = /^\s*\d+/;
var percentRe = /^%/;
var requoteRe = /[\\^$*+?|[\]().{}]/g;
function pad(value, fill, width) {
  var sign2 = value < 0 ? "-" : "", string2 = (sign2 ? -value : value) + "", length = string2.length;
  return sign2 + (length < width ? new Array(width - length + 1).join(fill) + string2 : string2);
}
function requote(s2) {
  return s2.replace(requoteRe, "\\$&");
}
function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
  return new Map(names.map((name, i) => [name.toLowerCase(), i]));
}
function parseWeekdayNumberSunday(d, string2, i) {
  var n = numberRe.exec(string2.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}
function parseWeekdayNumberMonday(d, string2, i) {
  var n = numberRe.exec(string2.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberSunday(d, string2, i) {
  var n = numberRe.exec(string2.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberISO(d, string2, i) {
  var n = numberRe.exec(string2.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberMonday(d, string2, i) {
  var n = numberRe.exec(string2.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}
function parseFullYear(d, string2, i) {
  var n = numberRe.exec(string2.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}
function parseYear(d, string2, i) {
  var n = numberRe.exec(string2.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2e3), i + n[0].length) : -1;
}
function parseZone(d, string2, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string2.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}
function parseQuarter(d, string2, i) {
  var n = numberRe.exec(string2.slice(i, i + 1));
  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}
function parseMonthNumber(d, string2, i) {
  var n = numberRe.exec(string2.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}
function parseDayOfMonth(d, string2, i) {
  var n = numberRe.exec(string2.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}
function parseDayOfYear(d, string2, i) {
  var n = numberRe.exec(string2.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}
function parseHour24(d, string2, i) {
  var n = numberRe.exec(string2.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}
function parseMinutes(d, string2, i) {
  var n = numberRe.exec(string2.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}
function parseSeconds(d, string2, i) {
  var n = numberRe.exec(string2.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}
function parseMilliseconds(d, string2, i) {
  var n = numberRe.exec(string2.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}
function parseMicroseconds(d, string2, i) {
  var n = numberRe.exec(string2.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1e3), i + n[0].length) : -1;
}
function parseLiteralPercent(d, string2, i) {
  var n = percentRe.exec(string2.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}
function parseUnixTimestamp(d, string2, i) {
  var n = numberRe.exec(string2.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}
function parseUnixTimestampSeconds(d, string2, i) {
  var n = numberRe.exec(string2.slice(i));
  return n ? (d.s = +n[0], i + n[0].length) : -1;
}
function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}
function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}
function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}
function formatDayOfYear(d, p) {
  return pad(1 + timeDay.count(timeYear(d), d), p, 3);
}
function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}
function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}
function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}
function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}
function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}
function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}
function formatWeekNumberSunday(d, p) {
  return pad(timeSunday.count(timeYear(d) - 1, d), p, 2);
}
function dISO(d) {
  var day = d.getDay();
  return day >= 4 || day === 0 ? timeThursday(d) : timeThursday.ceil(d);
}
function formatWeekNumberISO(d, p) {
  d = dISO(d);
  return pad(timeThursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p, 2);
}
function formatWeekdayNumberSunday(d) {
  return d.getDay();
}
function formatWeekNumberMonday(d, p) {
  return pad(timeMonday.count(timeYear(d) - 1, d), p, 2);
}
function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}
function formatYearISO(d, p) {
  d = dISO(d);
  return pad(d.getFullYear() % 100, p, 2);
}
function formatFullYear(d, p) {
  return pad(d.getFullYear() % 1e4, p, 4);
}
function formatFullYearISO(d, p) {
  var day = d.getDay();
  d = day >= 4 || day === 0 ? timeThursday(d) : timeThursday.ceil(d);
  return pad(d.getFullYear() % 1e4, p, 4);
}
function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
}
function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}
function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}
function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}
function formatUTCDayOfYear(d, p) {
  return pad(1 + utcDay.count(utcYear(d), d), p, 3);
}
function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}
function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}
function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}
function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}
function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}
function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d, p) {
  return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);
}
function UTCdISO(d) {
  var day = d.getUTCDay();
  return day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
}
function formatUTCWeekNumberISO(d, p) {
  d = UTCdISO(d);
  return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
}
function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}
function formatUTCWeekNumberMonday(d, p) {
  return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);
}
function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCYearISO(d, p) {
  d = UTCdISO(d);
  return pad(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCFullYearISO(d, p) {
  var day = d.getUTCDay();
  d = day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
  return pad(d.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
function formatUnixTimestamp(d) {
  return +d;
}
function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1e3);
}
var locale;
var timeFormat;
defaultLocale({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale(definition) {
  locale = formatLocale(definition);
  timeFormat = locale.format;
  locale.parse;
  locale.utcFormat;
  locale.utcParse;
  return locale;
}
function date(t) {
  return new Date(t);
}
function number(t) {
  return t instanceof Date ? +t : +/* @__PURE__ */ new Date(+t);
}
function calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format3) {
  var scale = continuous(), invert = scale.invert, domain = scale.domain;
  var formatMillisecond = format3(".%L"), formatSecond = format3(":%S"), formatMinute = format3("%I:%M"), formatHour = format3("%I %p"), formatDay = format3("%a %d"), formatWeek = format3("%b %d"), formatMonth = format3("%B"), formatYear2 = format3("%Y");
  function tickFormat2(date2) {
    return (second2(date2) < date2 ? formatMillisecond : minute(date2) < date2 ? formatSecond : hour(date2) < date2 ? formatMinute : day(date2) < date2 ? formatHour : month(date2) < date2 ? week(date2) < date2 ? formatDay : formatWeek : year(date2) < date2 ? formatMonth : formatYear2)(date2);
  }
  scale.invert = function(y2) {
    return new Date(invert(y2));
  };
  scale.domain = function(_) {
    return arguments.length ? domain(Array.from(_, number)) : domain().map(date);
  };
  scale.ticks = function(interval) {
    var d = domain();
    return ticks2(d[0], d[d.length - 1], interval == null ? 10 : interval);
  };
  scale.tickFormat = function(count, specifier) {
    return specifier == null ? tickFormat2 : format3(specifier);
  };
  scale.nice = function(interval) {
    var d = domain();
    if (!interval || typeof interval.range !== "function") interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);
    return interval ? domain(nice(d, interval)) : scale;
  };
  scale.copy = function() {
    return copy(scale, calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format3));
  };
  return scale;
}
function time() {
  return initRange.apply(calendar(timeTicks, timeTickInterval, timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute, second, timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/scales.js
function isNumericDomain(domain) {
  return domain.length > 0 && typeof domain[0] === "number";
}
function isDateDomain(domain) {
  return domain.length > 0 && domain[0] instanceof Date;
}
function createNumericScale(type, domain) {
  let scale;
  switch (type) {
    case "log":
      scale = log();
      break;
    default:
      scale = linear();
  }
  if (isNumericDomain(domain)) {
    scale.domain(domain);
  }
  return scale;
}
function createTimeScale(domain) {
  const scale = time();
  if (isDateDomain(domain)) {
    scale.domain(domain);
  }
  return scale;
}
function createBandScale(domain) {
  const scale = band().padding(0.1);
  scale.domain(domain);
  return scale;
}
function createScale(type, domain, range3) {
  switch (type) {
    case "linear":
    case "log":
      return { type: "numeric", scale: createNumericScale(type, domain).range(range3) };
    case "time":
      return { type: "time", scale: createTimeScale(domain).range(range3) };
    case "categorical":
      return { type: "categorical", scale: createBandScale(domain).range(range3) };
  }
}
var ChartScale = class _ChartScale {
  constructor(scaleType, domain, range3, noCategoricalOuterPadding = false) {
    this.scaleType = scaleType;
    this.domain = domain;
    this.range = range3;
    this.scale = createScale(this.scaleType, this.domain, this.range);
    this.d3Scale = this.scale.scale;
    if (this.isCategorical()) {
      if (noCategoricalOuterPadding) {
        this.d3Scale.paddingInner(0.7);
        this.d3Scale.paddingOuter(0);
      } else {
        this.d3Scale.paddingInner(0.2);
        this.d3Scale.paddingOuter(0.05);
      }
    }
  }
  cloneScale(newScaleType, newDomain, newRange) {
    return new _ChartScale(newScaleType || this.scaleType, newDomain || this.domain, newRange || this.range);
  }
  isNumeric() {
    return this.scale.type === "numeric";
  }
  isTime() {
    return this.scale.type === "time";
  }
  isCategorical() {
    return this.scale.type === "categorical";
  }
};
var NumericChartScale = class {
  constructor(scaleType, domain, range3, adjustDomain) {
    this.scaleType = scaleType;
    const scale = createNumericScale(scaleType, domain).range(range3);
    if (adjustDomain !== null) {
      scale.nice(adjustDomain);
    }
    this.scale = { type: "numeric", scale };
    this.d3Scale = this.scale.scale;
  }
  isCategorical() {
    return false;
  }
};

// node_modules/@cloudscape-design/components/area-chart/model/compute-chart-props.js
function computeChartProps({ series, xDomain: externalXDomain, yDomain: externalYDomain, xScaleType, yScaleType, height, width }) {
  const xDomain = externalXDomain || computeDomainX(series);
  const xTickCount = getXTickCount(width);
  const xScale = new ChartScale(xScaleType, xDomain, [0, width]);
  const xTicks = xScale.domain.length > 0 ? createXTicks(xScale, xTickCount) : [];
  const yDomain = externalYDomain || computeDomainY(series, yScaleType);
  const yTickCount = getYTickCount(height);
  const yScale = new NumericChartScale(yScaleType, yDomain, [height, 0], externalYDomain ? null : yTickCount);
  const yTicks = createYTicks(yScale, yTickCount);
  const plot = computePlotPoints(series, xScale, yScale);
  return { xDomain, yDomain, xScale, yScale, xTicks, yTicks, plot };
}

// node_modules/@cloudscape-design/components/internal/generated/styles/tokens.js
var colorChartsThresholdNeutral = "var(--color-charts-threshold-neutral-9351o8, #5f6b7a)";
var colorChartsPaletteCategorical1 = "var(--color-charts-palette-categorical-1-ld9m1p, #688ae8)";
var colorChartsPaletteCategorical2 = "var(--color-charts-palette-categorical-2-jwteam, #c33d69)";
var colorChartsPaletteCategorical3 = "var(--color-charts-palette-categorical-3-tlwr5r, #2ea597)";
var colorChartsPaletteCategorical4 = "var(--color-charts-palette-categorical-4-prlvih, #8456ce)";
var colorChartsPaletteCategorical5 = "var(--color-charts-palette-categorical-5-04vsso, #e07941)";
var colorChartsPaletteCategorical6 = "var(--color-charts-palette-categorical-6-2wgmsi, #3759ce)";
var colorChartsPaletteCategorical7 = "var(--color-charts-palette-categorical-7-w06irv, #962249)";
var colorChartsPaletteCategorical8 = "var(--color-charts-palette-categorical-8-1qnvcp, #096f64)";
var colorChartsPaletteCategorical9 = "var(--color-charts-palette-categorical-9-0342zm, #6237a7)";
var colorChartsPaletteCategorical10 = "var(--color-charts-palette-categorical-10-u73kns, #a84401)";
var colorChartsPaletteCategorical11 = "var(--color-charts-palette-categorical-11-tloc2a, #273ea5)";
var colorChartsPaletteCategorical12 = "var(--color-charts-palette-categorical-12-23xv0d, #780d35)";
var colorChartsPaletteCategorical13 = "var(--color-charts-palette-categorical-13-tuq7ce, #03524a)";
var colorChartsPaletteCategorical14 = "var(--color-charts-palette-categorical-14-bom4ss, #4a238b)";
var colorChartsPaletteCategorical15 = "var(--color-charts-palette-categorical-15-kpqcpe, #7e3103)";
var colorChartsPaletteCategorical16 = "var(--color-charts-palette-categorical-16-pzlo2l, #1b2b88)";
var colorChartsPaletteCategorical17 = "var(--color-charts-palette-categorical-17-spn4mx, #ce567c)";
var colorChartsPaletteCategorical18 = "var(--color-charts-palette-categorical-18-kxbv8i, #003e38)";
var colorChartsPaletteCategorical19 = "var(--color-charts-palette-categorical-19-cl97gf, #9469d6)";
var colorChartsPaletteCategorical20 = "var(--color-charts-palette-categorical-20-gzcnb4, #602400)";
var colorChartsPaletteCategorical21 = "var(--color-charts-palette-categorical-21-vyqcuq, #4066df)";
var colorChartsPaletteCategorical22 = "var(--color-charts-palette-categorical-22-6r7gq7, #a32952)";
var colorChartsPaletteCategorical23 = "var(--color-charts-palette-categorical-23-7c98ot, #0d7d70)";
var colorChartsPaletteCategorical24 = "var(--color-charts-palette-categorical-24-0i0wmq, #6b40b2)";
var colorChartsPaletteCategorical25 = "var(--color-charts-palette-categorical-25-7j0tso, #bc4d01)";
var colorChartsPaletteCategorical26 = "var(--color-charts-palette-categorical-26-eql7mt, #2c46b1)";
var colorChartsPaletteCategorical27 = "var(--color-charts-palette-categorical-27-8doiqc, #81143b)";
var colorChartsPaletteCategorical28 = "var(--color-charts-palette-categorical-28-tlstes, #045b52)";
var colorChartsPaletteCategorical29 = "var(--color-charts-palette-categorical-29-noa7ft, #512994)";
var colorChartsPaletteCategorical30 = "var(--color-charts-palette-categorical-30-ttbs6s, #8a3603)";
var colorChartsPaletteCategorical31 = "var(--color-charts-palette-categorical-31-lz0ukh, #1f3191)";
var colorChartsPaletteCategorical32 = "var(--color-charts-palette-categorical-32-ncpn1t, #da7596)";
var colorChartsPaletteCategorical33 = "var(--color-charts-palette-categorical-33-fpbcye, #01443e)";
var colorChartsPaletteCategorical34 = "var(--color-charts-palette-categorical-34-sk46nw, #a783e1)";
var colorChartsPaletteCategorical35 = "var(--color-charts-palette-categorical-35-wwtyjx, #692801)";
var colorChartsPaletteCategorical36 = "var(--color-charts-palette-categorical-36-7v0fgy, #5978e3)";
var colorChartsPaletteCategorical37 = "var(--color-charts-palette-categorical-37-b2rc0w, #b1325c)";
var colorChartsPaletteCategorical38 = "var(--color-charts-palette-categorical-38-nlzlk1, #1c8e81)";
var colorChartsPaletteCategorical39 = "var(--color-charts-palette-categorical-39-esgczm, #7749bf)";
var colorChartsPaletteCategorical40 = "var(--color-charts-palette-categorical-40-0hdln6, #cc5f21)";
var colorChartsPaletteCategorical41 = "var(--color-charts-palette-categorical-41-bsk8cf, #314fbf)";
var colorChartsPaletteCategorical42 = "var(--color-charts-palette-categorical-42-97om84, #8b1b42)";
var colorChartsPaletteCategorical43 = "var(--color-charts-palette-categorical-43-euzcqg, #06645a)";
var colorChartsPaletteCategorical44 = "var(--color-charts-palette-categorical-44-a7wos6, #59309d)";
var colorChartsPaletteCategorical45 = "var(--color-charts-palette-categorical-45-iz0wz2, #983c02)";
var colorChartsPaletteCategorical46 = "var(--color-charts-palette-categorical-46-nzigym, #23379b)";
var colorChartsPaletteCategorical47 = "var(--color-charts-palette-categorical-47-croxgd, #6f062f)";
var colorChartsPaletteCategorical48 = "var(--color-charts-palette-categorical-48-tptw1p, #014b44)";
var colorChartsPaletteCategorical49 = "var(--color-charts-palette-categorical-49-6lrkes, #431d84)";
var colorChartsPaletteCategorical50 = "var(--color-charts-palette-categorical-50-mqbaxr, #732c02)";

// node_modules/@cloudscape-design/components/internal/styles/colors.js
var categoryPalette = [
  colorChartsPaletteCategorical1,
  colorChartsPaletteCategorical2,
  colorChartsPaletteCategorical3,
  colorChartsPaletteCategorical4,
  colorChartsPaletteCategorical5,
  colorChartsPaletteCategorical6,
  colorChartsPaletteCategorical7,
  colorChartsPaletteCategorical8,
  colorChartsPaletteCategorical9,
  colorChartsPaletteCategorical10,
  colorChartsPaletteCategorical11,
  colorChartsPaletteCategorical12,
  colorChartsPaletteCategorical13,
  colorChartsPaletteCategorical14,
  colorChartsPaletteCategorical15,
  colorChartsPaletteCategorical16,
  colorChartsPaletteCategorical17,
  colorChartsPaletteCategorical18,
  colorChartsPaletteCategorical19,
  colorChartsPaletteCategorical20,
  colorChartsPaletteCategorical21,
  colorChartsPaletteCategorical22,
  colorChartsPaletteCategorical23,
  colorChartsPaletteCategorical24,
  colorChartsPaletteCategorical25,
  colorChartsPaletteCategorical26,
  colorChartsPaletteCategorical27,
  colorChartsPaletteCategorical28,
  colorChartsPaletteCategorical29,
  colorChartsPaletteCategorical30,
  colorChartsPaletteCategorical31,
  colorChartsPaletteCategorical32,
  colorChartsPaletteCategorical33,
  colorChartsPaletteCategorical34,
  colorChartsPaletteCategorical35,
  colorChartsPaletteCategorical36,
  colorChartsPaletteCategorical37,
  colorChartsPaletteCategorical38,
  colorChartsPaletteCategorical39,
  colorChartsPaletteCategorical40,
  colorChartsPaletteCategorical41,
  colorChartsPaletteCategorical42,
  colorChartsPaletteCategorical43,
  colorChartsPaletteCategorical44,
  colorChartsPaletteCategorical45,
  colorChartsPaletteCategorical46,
  colorChartsPaletteCategorical47,
  colorChartsPaletteCategorical48,
  colorChartsPaletteCategorical49,
  colorChartsPaletteCategorical50
];

// node_modules/@cloudscape-design/components/internal/utils/create-category-color-scale.js
function createCategoryColorScale(items, isThreshold = () => false, getOwnColor = () => null) {
  const colors = [];
  let categoryIndex = 0;
  for (const it of items) {
    const ownColor = getOwnColor(it);
    const defaultColor = isThreshold(it) ? colorChartsThresholdNeutral : categoryPalette[categoryIndex % categoryPalette.length];
    colors.push(parseCssVariable(ownColor || defaultColor));
    if (!isThreshold(it) && !ownColor) {
      categoryIndex++;
    }
  }
  return colors;
}

// node_modules/@cloudscape-design/components/area-chart/model/create-series-decorator.js
function createSeriesDecorator(externalSeries) {
  const colorScale = createCategoryColorScale(externalSeries, (s2) => s2.type === "threshold", (s2) => s2.color || null);
  const decorateSeries = (s2, index) => {
    const title = s2.title;
    const color2 = colorScale[index];
    const markerType = s2.type === "area" ? "hollow-rectangle" : "dashed";
    const formatValue2 = s2.type === "threshold" ? () => s2.valueFormatter ? s2.valueFormatter(s2.y) : s2.y : (y2, x2) => s2.valueFormatter ? s2.valueFormatter(y2, x2) : y2;
    return { series: s2, title, color: color2, markerType, formatValue: formatValue2 };
  };
  const mapping = externalSeries.reduce((map2, series, index) => {
    map2.set(series, decorateSeries(series, index));
    return map2;
  }, /* @__PURE__ */ new Map());
  const seriesDecorator = (series) => mapping.get(series) || decorateSeries(series, externalSeries.length);
  return seriesDecorator;
}

// node_modules/@cloudscape-design/components/area-chart/model/interactions-store.js
var initialState = Object.freeze({
  highlightedX: null,
  highlightedPoint: null,
  highlightedSeries: null,
  legendSeries: null,
  isPopoverPinned: false
});
var InteractionsStore = class extends AsyncStore {
  constructor(series, plot) {
    super(initialState);
    this.series = series;
    this.plot = plot;
  }
  highlightPoint(point5) {
    this.set((state) => Object.assign(Object.assign({}, state), { highlightedX: this.plot.xy[point5.index.x], highlightedPoint: point5, highlightedSeries: this.series[point5.index.s], legendSeries: this.series[point5.index.s] }));
  }
  highlightX(points) {
    this.set((state) => Object.assign(Object.assign({}, state), { highlightedX: points, highlightedPoint: null, highlightedSeries: null, legendSeries: null }));
  }
  highlightFirstPoint() {
    this.set((state) => {
      const series = state.legendSeries || state.highlightedSeries;
      const firstSeriesPoint = series && this._getFirstSeriesPoint(series);
      const point5 = state.highlightedPoint || firstSeriesPoint || this.plot.sx[0][0];
      return Object.assign(Object.assign({}, state), { highlightedX: this.plot.xy[point5.index.x], highlightedPoint: point5, highlightedSeries: this.series[point5.index.s], legendSeries: this.series[point5.index.s] });
    });
  }
  highlightSeries(s2) {
    this.set((state) => Object.assign(Object.assign({}, state), { highlightedSeries: s2, legendSeries: s2 }));
  }
  clearHighlight() {
    this.set((state) => Object.assign(Object.assign({}, state), { highlightedX: null, highlightedPoint: null, highlightedSeries: null }));
  }
  clearHighlightedLegend() {
    this.set((state) => Object.assign(Object.assign({}, state), { legendSeries: null }));
  }
  clearState() {
    this.set(() => initialState);
  }
  pinPopover() {
    this.set((state) => Object.assign(Object.assign({}, state), { isPopoverPinned: true }));
  }
  unpinPopover() {
    this.set((state) => Object.assign(Object.assign({}, state), { isPopoverPinned: false }));
  }
  togglePopoverPin() {
    this.set((state) => Object.assign(Object.assign({}, state), { isPopoverPinned: !state.isPopoverPinned }));
  }
  _getFirstSeriesPoint(s2) {
    const seriesIndex = this.series.indexOf(s2);
    const [firstSeriesPoint] = this.plot.sx[seriesIndex] || [];
    return firstSeriesPoint || null;
  }
};

// node_modules/@cloudscape-design/components/internal/utils/throttle.js
function throttle(func, delay, { trailing = true } = {}) {
  let pending = null;
  let lastInvokeTime = null;
  let timerId = null;
  function pendingFunc() {
    if (pending === null || lastInvokeTime === null) {
      return;
    }
    const invokeTime = Date.now();
    const shouldInvoke = invokeTime - lastInvokeTime >= delay;
    if (shouldInvoke) {
      func.apply(pending.this, pending.args);
      lastInvokeTime = invokeTime;
      pending = null;
      timerId = null;
    } else if (trailing) {
      startTimer();
    }
  }
  function startTimer() {
    if (timerId) {
      cancelAnimationFrame(timerId);
    }
    timerId = requestAnimationFrame(pendingFunc);
  }
  function throttled(...args) {
    if (lastInvokeTime === null) {
      lastInvokeTime = Date.now();
      func.apply(this, args);
    } else {
      pending = { this: this, args };
      startTimer();
    }
  }
  throttled.cancel = () => {
    if (timerId) {
      cancelAnimationFrame(timerId);
    }
    pending = null;
    lastInvokeTime = null;
    timerId = null;
  };
  return throttled;
}

// node_modules/@cloudscape-design/components/internal/hooks/container-queries/use-height-measure.js
var import_react114 = __toESM(require_react());
function useHeightMeasure(getMeasure, skip = false, deps = []) {
  const [measuredHeight, setHeight] = (0, import_react114.useState)(0);
  const stableGetMeasure = (0, import_react114.useCallback)(getMeasure, [...deps, skip]);
  useResizeObserver(stableGetMeasure, (entry) => !skip && setHeight(entry.borderBoxHeight));
  return !skip ? measuredHeight : void 0;
}

// node_modules/@cloudscape-design/components/area-chart/model/use-chart-model.js
var MAX_HOVER_MARGIN = 6;
var SVG_HOVER_THROTTLE = 25;
var POPOVER_DEADZONE = 12;
function useChartModel({ fitHeight, externalSeries: allSeries, visibleSeries: series, setVisibleSeries, highlightedSeries, setHighlightedSeries, xDomain, yDomain, xScaleType, yScaleType, height: explicitHeight, width, popoverRef }) {
  var _a;
  const plotRef = (0, import_react115.useRef)(null);
  const containerRef = (0, import_react115.useRef)(null);
  const verticalMarkerRef = (0, import_react115.useRef)(null);
  const plotMeasureRef = (0, import_react115.useRef)(null);
  const hasVisibleSeries = series.length > 0;
  const height = (_a = useHeightMeasure(() => plotMeasureRef.current, !fitHeight, [hasVisibleSeries])) !== null && _a !== void 0 ? _a : explicitHeight;
  const stableSetVisibleSeries = useStableCallback(setVisibleSeries);
  const model = (0, import_react115.useMemo)(() => {
    const computed = computeChartProps({
      series,
      xDomain,
      yDomain,
      xScaleType,
      yScaleType,
      height,
      width
    });
    const interactions = new InteractionsStore(series, computed.plot);
    const containsMultipleSeries = interactions.series.length > 1;
    const getInternalSeries = createSeriesDecorator(allSeries);
    const isMouseOverPopover = (clientX, clientY) => {
      var _a2;
      if ((_a2 = popoverRef.current) === null || _a2 === void 0 ? void 0 : _a2.firstChild) {
        const popoverPosition = popoverRef.current.firstChild.getBoundingClientRect();
        if (clientX > popoverPosition.x - POPOVER_DEADZONE && clientX < popoverPosition.x + popoverPosition.width + POPOVER_DEADZONE && clientY > popoverPosition.y - POPOVER_DEADZONE && clientY < popoverPosition.y + popoverPosition.height + POPOVER_DEADZONE) {
          return true;
        }
      }
      return false;
    };
    const onSVGMouseMoveThrottled = throttle((clientX, clientY) => {
      if (interactions.get().isPopoverPinned || !plotRef.current || interactions.plot.xy.length === 0 || isMouseOverPopover(clientX, clientY)) {
        return;
      }
      const svgRect = plotRef.current.svg.getBoundingClientRect();
      const offsetX = clientX - svgRect.left;
      const offsetY = clientY - svgRect.top;
      const closestX = findClosest(interactions.plot.xy, offsetX, (xPoints) => xPoints[0].scaled.x);
      const closestPoint = findClosest(closestX, offsetY, (point5) => point5.scaled.y1);
      if (Math.abs(offsetX - closestPoint.scaled.x) < MAX_HOVER_MARGIN && Math.abs(offsetY - closestPoint.scaled.y1) < MAX_HOVER_MARGIN) {
        interactions.highlightPoint(closestPoint);
      } else {
        interactions.highlightX(closestX);
      }
    }, SVG_HOVER_THROTTLE);
    const onSVGMouseMove = ({ clientX, clientY }) => onSVGMouseMoveThrottled(clientX, clientY);
    const onSVGMouseOut = (event) => {
      onSVGMouseMoveThrottled.cancel();
      if (interactions.get().isPopoverPinned || isMouseOverPopover(event.clientX, event.clientY)) {
        return;
      }
      if (!nodeContains(plotRef.current.svg, event.relatedTarget)) {
        interactions.clearHighlightedLegend();
        interactions.clearHighlight();
      }
    };
    const onSVGMouseDown = (event) => {
      interactions.togglePopoverPin();
      event.preventDefault();
    };
    const moveWithinXAxis = (direction) => {
      if (interactions.get().highlightedPoint) {
        return moveWithinSeries(direction);
      } else if (containsMultipleSeries) {
        const { highlightedX } = interactions.get();
        if (highlightedX) {
          const currentXIndex = highlightedX[0].index.x;
          const nextXIndex = circleIndex(currentXIndex + direction, [0, interactions.plot.xy.length - 1]);
          interactions.highlightX(interactions.plot.xy[nextXIndex]);
        }
      }
    };
    const moveWithinSeries = (direction) => {
      const point5 = interactions.get().highlightedPoint;
      if (!point5) {
        return;
      }
      const sIndex = point5.index.s;
      const xIndex = circleIndex(point5.index.x + direction, [0, interactions.plot.xs.length - 1]);
      interactions.highlightPoint(interactions.plot.xs[xIndex][sIndex]);
    };
    const moveBetweenSeries = (direction) => {
      const point5 = interactions.get().highlightedPoint;
      if (!point5) {
        const { highlightedX } = interactions.get();
        if (highlightedX) {
          const xIndex2 = highlightedX[0].index.x;
          const points = interactions.plot.xy[xIndex2];
          const yIndex = direction === 1 ? 0 : points.length - 1;
          interactions.highlightPoint(points[yIndex]);
        }
        return;
      }
      const xIndex = point5.index.x;
      const currentYIndex = point5.index.y;
      if (containsMultipleSeries && (currentYIndex === 0 && direction === -1 || currentYIndex === interactions.plot.xy[xIndex].length - 1 && direction === 1)) {
        interactions.highlightX(interactions.plot.xy[xIndex]);
      } else {
        const nextYIndex = circleIndex(currentYIndex + direction, [0, interactions.plot.xy[xIndex].length - 1]);
        interactions.highlightPoint(interactions.plot.xy[xIndex][nextYIndex]);
      }
    };
    const onSVGKeyDown = (event) => {
      const keyCode = event.keyCode;
      if (keyCode !== KeyCode.up && keyCode !== KeyCode.right && keyCode !== KeyCode.down && keyCode !== KeyCode.left && keyCode !== KeyCode.space && keyCode !== KeyCode.enter) {
        return;
      }
      event.preventDefault();
      if (interactions.get().isPopoverPinned) {
        return;
      }
      if (keyCode === KeyCode.down || keyCode === KeyCode.up) {
        moveBetweenSeries(keyCode === KeyCode.down ? -1 : 1);
      } else if (keyCode === KeyCode.left || keyCode === KeyCode.right) {
        moveWithinXAxis(keyCode === KeyCode.right ? 1 : -1);
      } else if (keyCode === KeyCode.enter || keyCode === KeyCode.space) {
        interactions.pinPopover();
      }
    };
    const highlightFirstX = () => {
      interactions.highlightX(interactions.plot.xy[0]);
    };
    const onApplicationFocus = (_event, trigger) => {
      if (trigger === "keyboard") {
        const { highlightedX, highlightedPoint, highlightedSeries: highlightedSeries2, legendSeries } = interactions.get();
        if (containsMultipleSeries && !highlightedX && !highlightedPoint && !highlightedSeries2 && !legendSeries) {
          highlightFirstX();
        } else if (!highlightedX) {
          interactions.highlightFirstPoint();
        }
      }
    };
    const onApplicationBlur = (event) => {
      if (!nodeBelongs(containerRef.current, event.relatedTarget) && !interactions.get().isPopoverPinned) {
        interactions.clearHighlight();
      }
    };
    const onFilterSeries = (series2) => {
      stableSetVisibleSeries(series2);
    };
    const onLegendHighlight = (series2) => {
      interactions.highlightSeries(series2);
    };
    const onPopoverDismiss = (outsideClick) => {
      interactions.unpinPopover();
      if (!outsideClick) {
        setTimeout(() => {
          if (interactions.get().highlightedPoint || interactions.get().highlightedX) {
            plotRef.current.focusApplication();
          } else {
            interactions.clearHighlight();
            plotRef.current.focusPlot();
          }
        }, 0);
      }
    };
    const onContainerBlur = () => {
      interactions.clearState();
    };
    const onDocumentKeyDown = (event) => {
      if (event.key === "Escape") {
        interactions.clearHighlight();
        interactions.clearHighlightedLegend();
      }
    };
    const onPopoverLeave = (event) => {
      if (nodeContains(plotRef.current.svg, event.relatedTarget) || interactions.get().isPopoverPinned) {
        return;
      }
      interactions.clearHighlight();
      interactions.clearHighlightedLegend();
    };
    return {
      width,
      height,
      series,
      allSeries,
      getInternalSeries,
      computed,
      interactions,
      handlers: {
        onSVGMouseMove,
        onSVGMouseOut,
        onSVGMouseDown,
        onSVGKeyDown,
        onApplicationFocus,
        onApplicationBlur,
        onFilterSeries,
        onLegendHighlight,
        onPopoverDismiss,
        onContainerBlur,
        onDocumentKeyDown,
        onPopoverLeave
      },
      refs: {
        plot: plotRef,
        plotMeasure: plotMeasureRef,
        container: containerRef,
        verticalMarker: verticalMarkerRef,
        popoverRef
      }
    };
  }, [allSeries, series, xDomain, yDomain, xScaleType, yScaleType, height, width, stableSetVisibleSeries, popoverRef]);
  useReaction(model.interactions, (state) => state.highlightedSeries, setHighlightedSeries);
  (0, import_react115.useEffect)(() => {
    if (highlightedSeries !== model.interactions.get().highlightedSeries) {
      model.interactions.highlightSeries(highlightedSeries);
    }
  }, [model, highlightedSeries]);
  return model;
}

// node_modules/@cloudscape-design/components/area-chart/model/use-filter-props.js
var import_react116 = __toESM(require_react());
function useFilterProps(series, controlledVisibleSeries, controlledOnVisibleChange) {
  const [visibleSeries = [], setVisibleSeriesState] = useControllable(controlledVisibleSeries, controlledOnVisibleChange, series, {
    componentName: "AreaChart",
    controlledProp: "visibleSeries",
    changeHandler: "onFilterChange"
  });
  const setVisibleSeries = (0, import_react116.useCallback)((selectedSeries) => {
    setVisibleSeriesState(selectedSeries);
    fireNonCancelableEvent(controlledOnVisibleChange, { visibleSeries: selectedSeries });
  }, [controlledOnVisibleChange, setVisibleSeriesState]);
  (0, import_react116.useEffect)(() => {
    const newVisibleSeries = visibleSeries.filter((s2) => series.indexOf(s2) !== -1);
    if (newVisibleSeries.length !== visibleSeries.length) {
      setVisibleSeries(newVisibleSeries);
    }
  }, [series, visibleSeries, setVisibleSeries]);
  return [visibleSeries, setVisibleSeries];
}

// node_modules/@cloudscape-design/components/area-chart/model/use-highlight-props.js
var import_react117 = __toESM(require_react());
function useHighlightProps(series, controlledHighlightedSeries, controlledOnHighlightChange) {
  const [highlightedSeries = null, setHighlightedSeries] = useControllable(controlledHighlightedSeries, controlledOnHighlightChange, null, {
    componentName: "AreaChart",
    controlledProp: "highlightedSeries",
    changeHandler: "onHighlightChange"
  });
  const notifyHighlightedSeries = (0, import_react117.useCallback)((s2) => {
    fireNonCancelableEvent(controlledOnHighlightChange, { highlightedSeries: s2 });
  }, [controlledOnHighlightChange]);
  (0, import_react117.useEffect)(() => {
    if (controlledHighlightedSeries) {
      const highlightedSeriesIndex = series.indexOf(controlledHighlightedSeries);
      if (highlightedSeriesIndex === -1) {
        setHighlightedSeries(null);
        notifyHighlightedSeries(null);
      }
    }
  }, [series, controlledHighlightedSeries, setHighlightedSeries, notifyHighlightedSeries]);
  return [highlightedSeries, notifyHighlightedSeries];
}

// node_modules/@cloudscape-design/components/internal/components/chart-wrapper/index.js
var import_react118 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-wrapper/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/chart-wrapper/styles.scoped.css";
var styles_css_default39 = {
  "wrapper": "awsui_wrapper_z5mul_nyco0_99",
  "wrapper--fit-height": "awsui_wrapper--fit-height_z5mul_nyco0_135",
  "inner-wrapper--fit-height": "awsui_inner-wrapper--fit-height_z5mul_nyco0_140",
  "has-default-filter": "awsui_has-default-filter_z5mul_nyco0_146",
  "content": "awsui_content_z5mul_nyco0_150",
  "content--reserve-filter": "awsui_content--reserve-filter_z5mul_nyco0_157",
  "content--reserve-legend": "awsui_content--reserve-legend_z5mul_nyco0_161",
  "content--fit-height": "awsui_content--fit-height_z5mul_nyco0_165",
  "filter-container": "awsui_filter-container_z5mul_nyco0_169"
};

// node_modules/@cloudscape-design/components/internal/components/chart-wrapper/index.js
var ChartWrapper = (0, import_react118.forwardRef)((_a, ref) => {
  var { defaultFilter, additionalFilters, reserveFilterSpace, reserveLegendSpace, chartStatus, chart, legend, onBlur, contentClassName, contentMinHeight, fitHeight } = _a, props = __rest(_a, ["defaultFilter", "additionalFilters", "reserveFilterSpace", "reserveLegendSpace", "chartStatus", "chart", "legend", "onBlur", "contentClassName", "contentMinHeight", "fitHeight"]);
  const baseProps = getBaseProps(props);
  const filtersNode = (defaultFilter || additionalFilters) && import_react118.default.createElement(
    InternalBox,
    { className: styles_css_default39["filter-container"], margin: { bottom: "l" } },
    import_react118.default.createElement(
      InternalSpaceBetween,
      { size: "l", direction: "horizontal", className: clsx_m_default({ [styles_css_default39["has-default-filter"]]: !!defaultFilter }) },
      defaultFilter,
      additionalFilters
    )
  );
  const legendNode = legend && import_react118.default.createElement(InternalBox, { margin: { top: "m" } }, legend);
  if (fitHeight) {
    return import_react118.default.createElement(
      "div",
      Object.assign({ ref }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default39.wrapper, styles_css_default39["wrapper--fit-height"]), onBlur }),
      import_react118.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default39["inner-wrapper"], styles_css_default39["inner-wrapper--fit-height"]) },
        filtersNode,
        import_react118.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default39.content, contentClassName, {
            [styles_css_default39["content--reserve-filter"]]: reserveFilterSpace,
            [styles_css_default39["content--reserve-legend"]]: reserveLegendSpace,
            [styles_css_default39["content--fit-height"]]: true
          }) },
          chartStatus,
          chart
        ),
        legendNode
      )
    );
  }
  return import_react118.default.createElement(
    "div",
    Object.assign({ ref }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default39.wrapper), onBlur }),
    filtersNode,
    import_react118.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default39.content, contentClassName, {
        [styles_css_default39["content--reserve-filter"]]: reserveFilterSpace,
        [styles_css_default39["content--reserve-legend"]]: reserveLegendSpace
      }), style: { minHeight: contentMinHeight } },
      chartStatus,
      chart
    ),
    legendNode
  );
});

// node_modules/@cloudscape-design/components/area-chart/internal.js
function InternalAreaChart(_a) {
  var { fitHeight, height, xScaleType, yScaleType, xDomain, yDomain, xTickFormatter, yTickFormatter, detailTotalFormatter, highlightedSeries: controlledHighlightedSeries, visibleSeries: controlledVisibleSeries, series: externalSeries, onFilterChange: controlledOnVisibleChange, onHighlightChange: controlledOnHighlightChange, i18nStrings, ariaLabel, ariaLabelledby, ariaDescription, xTitle, yTitle, hideFilter, additionalFilters, hideLegend, legendTitle, statusType, detailPopoverSize, detailPopoverFooter, empty, noMatch, errorText, loadingText, recoveryText, onRecoveryClick, __internalRootRef = null } = _a, props = __rest(_a, ["fitHeight", "height", "xScaleType", "yScaleType", "xDomain", "yDomain", "xTickFormatter", "yTickFormatter", "detailTotalFormatter", "highlightedSeries", "visibleSeries", "series", "onFilterChange", "onHighlightChange", "i18nStrings", "ariaLabel", "ariaLabelledby", "ariaDescription", "xTitle", "yTitle", "hideFilter", "additionalFilters", "hideLegend", "legendTitle", "statusType", "detailPopoverSize", "detailPopoverFooter", "empty", "noMatch", "errorText", "loadingText", "recoveryText", "onRecoveryClick", "__internalRootRef"]);
  const baseProps = getBaseProps(props);
  const containerRef = (0, import_react119.useRef)(null);
  const popoverRef = (0, import_react119.useRef)(null);
  if (isDevelopment) {
    (0, import_react119.useEffect)(() => {
      if (!isSeriesValid(externalSeries)) {
        warnOnce("AreaChart", "The `series` property violates the component's constraints: all `area` series must have `data` arrays of the same length and with the same x-values.");
      }
    }, [externalSeries]);
  }
  const [width, setWidth] = (0, import_react119.useState)(0);
  const [visibleSeries, setVisibleSeries] = useFilterProps(externalSeries, controlledVisibleSeries, controlledOnVisibleChange);
  const [highlightedSeries, setHighlightedSeries] = useHighlightProps(externalSeries, controlledHighlightedSeries, controlledOnHighlightChange);
  const model = useChartModel({
    fitHeight,
    externalSeries,
    visibleSeries,
    setVisibleSeries,
    highlightedSeries,
    setHighlightedSeries,
    xDomain,
    yDomain,
    xScaleType,
    yScaleType,
    height,
    width,
    popoverRef
  });
  const { isEmpty, isNoMatch, showChart } = getChartStatus({
    externalData: externalSeries,
    visibleData: visibleSeries,
    statusType
  });
  const showFilters = statusType === "finished" && (!isEmpty || isNoMatch) && (additionalFilters || !hideFilter);
  const showLegend = !hideLegend && !isEmpty && statusType === "finished";
  const reserveLegendSpace = !showChart && !hideLegend;
  const reserveFilterSpace = !showChart && !isNoMatch && (!hideFilter || additionalFilters);
  (0, import_react119.useEffect)(() => {
    const onKeyDown = model.handlers.onDocumentKeyDown;
    document.addEventListener("keydown", onKeyDown);
    return () => document.removeEventListener("keydown", onKeyDown);
  }, [model.handlers.onDocumentKeyDown]);
  const onBlur = (event) => {
    if (event.relatedTarget && !nodeBelongs(containerRef.current, event.relatedTarget)) {
      model.handlers.onContainerBlur();
    }
  };
  const mergedRef = useMergeRefs(containerRef, __internalRootRef);
  return import_react119.default.createElement(ChartWrapper, Object.assign({ ref: mergedRef }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default33.root), fitHeight: !!fitHeight, contentMinHeight: height, defaultFilter: showFilters && !hideFilter ? import_react119.default.createElement(area_chart_filter_default, { model, filterLabel: i18nStrings.filterLabel, filterPlaceholder: i18nStrings.filterPlaceholder, filterSelectedAriaLabel: i18nStrings.filterSelectedAriaLabel }) : null, additionalFilters: showFilters ? additionalFilters : null, reserveFilterSpace: !!reserveFilterSpace, reserveLegendSpace: !!reserveLegendSpace, chartStatus: import_react119.default.createElement(ChartStatusContainer, { isEmpty, isNoMatch, showChart, statusType, empty, noMatch, loadingText, errorText, recoveryText, onRecoveryClick }), chart: showChart ? import_react119.default.createElement(chart_container_default, { model, autoWidth: setWidth, detailPopoverSize, detailPopoverFooter, xTitle, yTitle, xTickFormatter, yTickFormatter, detailTotalFormatter, ariaLabel, ariaLabelledby, ariaDescription, i18nStrings, fitHeight, minHeight: height }) : null, legend: showLegend ? import_react119.default.createElement(area_chart_legend_default, { plotContainerRef: containerRef, model, legendTitle, ariaLabel: i18nStrings.legendAriaLabel }) : null, onBlur }));
}

// node_modules/@cloudscape-design/components/area-chart/index.js
function AreaChart(_a) {
  var { height = 500, xScaleType = "linear", yScaleType = "linear", statusType = "finished", detailPopoverSize = "medium", i18nStrings = {} } = _a, props = __rest(_a, ["height", "xScaleType", "yScaleType", "statusType", "detailPopoverSize", "i18nStrings"]);
  const baseComponentProps = useBaseComponent("AreaChart", {
    props: {
      detailPopoverSize,
      hideLegend: props.hideLegend,
      hideFilter: props.hideFilter,
      fitHeight: props.fitHeight,
      xScaleType,
      yScaleType
    }
  });
  return import_react120.default.createElement(InternalAreaChart, Object.assign({ height, xScaleType, yScaleType, statusType, detailPopoverSize, i18nStrings }, props, baseComponentProps));
}
applyDisplayName(AreaChart, "AreaChart");
var area_chart_default = AreaChart;

// node_modules/@cloudscape-design/components/attribute-editor/index.js
var import_react127 = __toESM(require_react());

// node_modules/@cloudscape-design/components/attribute-editor/internal.js
var import_react126 = __toESM(require_react());

// node_modules/@cloudscape-design/components/attribute-editor/additional-info.js
var import_react121 = __toESM(require_react());

// node_modules/@cloudscape-design/components/attribute-editor/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/attribute-editor/styles.scoped.css";
var styles_css_default40 = {
  "empty-appear": "awsui_empty-appear_n4qlp_1ebkl_99",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_n4qlp_1ebkl_1",
  "root": "awsui_root_n4qlp_1ebkl_125",
  "empty": "awsui_empty_n4qlp_1ebkl_99",
  "row": "awsui_row_n4qlp_1ebkl_167",
  "row-control": "awsui_row-control_n4qlp_1ebkl_171",
  "field": "awsui_field_n4qlp_1ebkl_175",
  "add-button": "awsui_add-button_n4qlp_1ebkl_179",
  "remove-button": "awsui_remove-button_n4qlp_1ebkl_183",
  "button-container-haslabel": "awsui_button-container-haslabel_n4qlp_1ebkl_187",
  "button-container-nolabel": "awsui_button-container-nolabel_n4qlp_1ebkl_191",
  "divider": "awsui_divider_n4qlp_1ebkl_195",
  "additional-info": "awsui_additional-info_n4qlp_1ebkl_199",
  "right-align": "awsui_right-align_n4qlp_1ebkl_245"
};

// node_modules/@cloudscape-design/components/attribute-editor/additional-info.js
var AdditionalInfo = ({ children, id }) => import_react121.default.createElement(
  live_region_default,
  { visible: true, tagName: "div", "data-testid": "info-live-region" },
  import_react121.default.createElement("div", { id, className: styles_css_default40["additional-info"] }, children)
);

// node_modules/@cloudscape-design/components/attribute-editor/row.js
var import_react125 = __toESM(require_react());

// node_modules/@cloudscape-design/components/column-layout/internal.js
var import_react124 = __toESM(require_react());

// node_modules/@cloudscape-design/components/column-layout/flexible-column-layout/index.js
var import_react122 = __toESM(require_react());
var import_react_keyed_flatten_children2 = __toESM(require_react_keyed_flatten_children());

// node_modules/@cloudscape-design/components/column-layout/flexible-column-layout/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/column-layout/flexible-column-layout/styles.scoped.css";
var styles_css_default41 = {
  "css-grid": "awsui_css-grid_zqq3x_19h7g_9",
  "grid-no-gutters": "awsui_grid-no-gutters_zqq3x_19h7g_13",
  "grid-variant-text-grid": "awsui_grid-variant-text-grid_zqq3x_19h7g_16",
  "item": "awsui_item_zqq3x_19h7g_16",
  "first-column": "awsui_first-column_zqq3x_19h7g_20"
};

// node_modules/@cloudscape-design/components/column-layout/flexible-column-layout/index.js
var isOdd = (value) => value % 2 !== 0;
function calculcateCssColumnCount(columns, minColumnWidth, containerWidth) {
  if (!containerWidth) {
    return columns;
  }
  const targetColumnCount = Math.min(columns, Math.floor(containerWidth / minColumnWidth));
  return Math.max(1, targetColumnCount < columns && isOdd(targetColumnCount) ? targetColumnCount - 1 : targetColumnCount);
}
function FlexibleColumnLayout({ columns = 1, minColumnWidth = 0, disableGutters, variant, children }) {
  const [containerWidth, containerRef] = useContainerQuery((rect) => rect.contentBoxWidth);
  const columnCount = calculcateCssColumnCount(columns, minColumnWidth, containerWidth);
  const shouldDisableGutters = variant !== "text-grid" && disableGutters;
  const flattenedChildren = (0, import_react_keyed_flatten_children2.default)(children);
  return import_react122.default.createElement("div", { ref: containerRef, className: clsx_m_default(styles_css_default41["css-grid"], styles_css_default41[`grid-variant-${variant}`], shouldDisableGutters && [styles_css_default41["grid-no-gutters"]]), style: { gridTemplateColumns: `repeat(${columnCount}, 1fr)` } }, flattenedChildren.map((child, i) => {
    const key2 = child.key;
    return import_react122.default.createElement("div", { key: key2 ? String(key2) : void 0, className: clsx_m_default(styles_css_default41.item, {
      [styles_css_default41["first-column"]]: i % columnCount === 0
    }) }, child);
  }));
}

// node_modules/@cloudscape-design/components/column-layout/grid-column-layout.js
var import_react123 = __toESM(require_react());
var import_react_keyed_flatten_children3 = __toESM(require_react_keyed_flatten_children());

// node_modules/@cloudscape-design/components/column-layout/util.js
function repeat(value, times) {
  const array = [];
  for (let i = 0; i < times; i++) {
    array[i] = value;
  }
  return array;
}

// node_modules/@cloudscape-design/components/column-layout/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/column-layout/styles.scoped.css";
var styles_css_default42 = {
  "column-layout": "awsui_column-layout_vvxn7_g9i3s_99",
  "grid": "awsui_grid_vvxn7_g9i3s_134",
  "grid-no-gutters": "awsui_grid-no-gutters_vvxn7_g9i3s_140",
  "grid-variant-text-grid": "awsui_grid-variant-text-grid_vvxn7_g9i3s_144",
  "grid-breakpoint-default": "awsui_grid-breakpoint-default_vvxn7_g9i3s_152",
  "grid-columns-1": "awsui_grid-columns-1_vvxn7_g9i3s_155",
  "grid-breakpoint-xxs": "awsui_grid-breakpoint-xxs_vvxn7_g9i3s_155",
  "grid-breakpoint-xs": "awsui_grid-breakpoint-xs_vvxn7_g9i3s_158",
  "grid-columns-2": "awsui_grid-columns-2_vvxn7_g9i3s_161",
  "grid-columns-3": "awsui_grid-columns-3_vvxn7_g9i3s_167",
  "grid-columns-4": "awsui_grid-columns-4_vvxn7_g9i3s_173",
  "grid-vertical-borders": "awsui_grid-vertical-borders_vvxn7_g9i3s_189",
  "grid-horizontal-borders": "awsui_grid-horizontal-borders_vvxn7_g9i3s_222"
};

// node_modules/@cloudscape-design/components/column-layout/grid-column-layout.js
var COLUMN_DEFS = {
  1: { colspan: { default: 12, xxs: 12, xs: 12 } },
  2: { colspan: { default: 12, xxs: 6, xs: 6 } },
  3: { colspan: { default: 12, xxs: 6, xs: 4 } },
  4: { colspan: { default: 12, xxs: 6, xs: 3 } }
};
function GridColumnLayout({ columns, variant, borders, disableGutters, __breakpoint, children }) {
  var _a;
  const isTextGridVariant = variant === "text-grid";
  const shouldDisableGutters = !isTextGridVariant && disableGutters;
  const shouldHaveHorizontalBorders = !isTextGridVariant && (borders === "horizontal" || borders === "all");
  const shouldHaveVerticalBorders = !isTextGridVariant && (borders === "vertical" || borders === "all");
  const flattenedChildren = (0, import_react_keyed_flatten_children3.default)(children);
  const [breakpoint, ref] = useContainerBreakpoints(COLUMN_TRIGGERS);
  return import_react123.default.createElement(internal_default8, { ref, disableGutters: true, gridDefinition: repeat((_a = COLUMN_DEFS[columns]) !== null && _a !== void 0 ? _a : {}, flattenedChildren.length), className: clsx_m_default(styles_css_default42.grid, styles_css_default42[`grid-columns-${columns}`], styles_css_default42[`grid-variant-${variant}`], {
    [styles_css_default42["grid-horizontal-borders"]]: shouldHaveHorizontalBorders,
    [styles_css_default42["grid-vertical-borders"]]: shouldHaveVerticalBorders,
    [styles_css_default42["grid-no-gutters"]]: shouldDisableGutters
  }), __breakpoint: __breakpoint || breakpoint, __responsiveClassName: (breakpoint2) => breakpoint2 && styles_css_default42[`grid-breakpoint-${breakpoint2}`] }, children);
}

// node_modules/@cloudscape-design/components/column-layout/internal.js
var COLUMN_TRIGGERS = ["default", "xxs", "xs"];
function ColumnLayout(_a) {
  var { columns = 1, variant = "default", borders = "none", disableGutters = false, minColumnWidth, children, __breakpoint, __internalRootRef } = _a, restProps = __rest(_a, ["columns", "variant", "borders", "disableGutters", "minColumnWidth", "children", "__breakpoint", "__internalRootRef"]);
  const baseProps = getBaseProps(restProps);
  return import_react124.default.createElement("div", Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default42["column-layout"]), ref: __internalRootRef }), minColumnWidth ? import_react124.default.createElement(FlexibleColumnLayout, { columns, borders, variant, minColumnWidth, disableGutters }, children) : import_react124.default.createElement(GridColumnLayout, { columns, variant, borders, disableGutters, __breakpoint }, children));
}

// node_modules/@cloudscape-design/components/attribute-editor/row.js
var Divider = () => import_react125.default.createElement(InternalBox, { className: styles_css_default40.divider, padding: { top: "l" } });
function render(item, itemIndex, slot) {
  if (isSlotFunction(slot)) {
    return slot(item, itemIndex);
  }
  return slot;
  function isSlotFunction(slot2) {
    return typeof slot2 === "function";
  }
}
var GRID_DEFINITION = [{ colspan: { default: 12, xs: 9 } }];
var REMOVABLE_GRID_DEFINITION = [{ colspan: { default: 12, xs: 9 } }, { colspan: { default: 12, xs: 3 } }];
var Row = import_react125.default.memo(({ breakpoint, item, definition, i18nStrings = {}, index, removable, removeButtonText, removeButtonRefs, onRemoveButtonClick, removeButtonAriaLabel }) => {
  var _a;
  const i18n = useInternalI18n("attribute-editor");
  const isNarrowViewport = breakpoint === "default" || breakpoint === "xxs";
  const isWideViewport = !isNarrowViewport;
  const handleRemoveClick = (0, import_react125.useCallback)(() => {
    fireNonCancelableEvent(onRemoveButtonClick, { itemIndex: index });
  }, [onRemoveButtonClick, index]);
  const firstControlId = useUniqueId("first-control-id-");
  return import_react125.default.createElement(
    InternalBox,
    { className: styles_css_default40.row, margin: { bottom: "s" } },
    import_react125.default.createElement(
      "div",
      { role: "group", "aria-labelledby": `${firstControlId}-label ${firstControlId}` },
      import_react125.default.createElement(
        internal_default8,
        { __breakpoint: breakpoint, gridDefinition: removable ? REMOVABLE_GRID_DEFINITION : GRID_DEFINITION },
        import_react125.default.createElement(ColumnLayout, { className: styles_css_default40["row-control"], columns: definition.length, __breakpoint: breakpoint }, definition.map(({ info, label, constraintText, errorText, control }, defIndex) => import_react125.default.createElement(InternalFormField, { key: defIndex, className: styles_css_default40.field, label, info, constraintText: render(item, index, constraintText), errorText: render(item, index, errorText), stretch: true, i18nStrings: { errorIconAriaLabel: i18nStrings.errorIconAriaLabel }, __hideLabel: isWideViewport && index > 0, controlId: defIndex === 0 ? firstControlId : void 0 }, render(item, index, control)))),
        removable && import_react125.default.createElement(
          ButtonContainer,
          { index, isNarrowViewport, hasLabel: definition.some((row) => row.label) },
          import_react125.default.createElement(InternalButton, { className: styles_css_default40["remove-button"], formAction: "none", ref: (ref) => {
            removeButtonRefs[index] = ref !== null && ref !== void 0 ? ref : void 0;
          }, ariaLabel: (_a = removeButtonAriaLabel !== null && removeButtonAriaLabel !== void 0 ? removeButtonAriaLabel : i18nStrings.removeButtonAriaLabel) === null || _a === void 0 ? void 0 : _a(item), onClick: handleRemoveClick }, i18n("removeButtonText", removeButtonText))
        )
      )
    ),
    isNarrowViewport && import_react125.default.createElement(Divider, null)
  );
});
var ButtonContainer = ({ index, children, isNarrowViewport, hasLabel }) => import_react125.default.createElement("div", { className: clsx_m_default({
  [styles_css_default40["button-container-haslabel"]]: !isNarrowViewport && index === 0 && hasLabel,
  [styles_css_default40["button-container-nolabel"]]: !isNarrowViewport && index === 0 && !hasLabel,
  [styles_css_default40["right-align"]]: isNarrowViewport
}) }, children);

// node_modules/@cloudscape-design/components/attribute-editor/internal.js
var InternalAttributeEditor = import_react126.default.forwardRef((_a, ref) => {
  var { additionalInfo, disableAddButton, definition, items, isItemRemovable: isItemRemovable2 = () => true, empty, addButtonText, removeButtonText, removeButtonAriaLabel, i18nStrings, onAddButtonClick, onRemoveButtonClick, __internalRootRef = null } = _a, props = __rest(_a, ["additionalInfo", "disableAddButton", "definition", "items", "isItemRemovable", "empty", "addButtonText", "removeButtonText", "removeButtonAriaLabel", "i18nStrings", "onAddButtonClick", "onRemoveButtonClick", "__internalRootRef"]);
  const [breakpoint, breakpointRef] = useContainerBreakpoints(["default", "xxs", "xs"]);
  const removeButtonRefs = (0, import_react126.useRef)([]);
  const addButtonRef = (0, import_react126.useRef)(null);
  const wasNonEmpty = (0, import_react126.useRef)(false);
  const [removalAnnouncement, setRemovalAnnouncement] = (0, import_react126.useState)("");
  const baseProps = getBaseProps(props);
  const isEmpty = items && items.length === 0;
  wasNonEmpty.current = wasNonEmpty.current || !isEmpty;
  (0, import_react126.useImperativeHandle)(ref, () => ({
    focusRemoveButton(rowIndex) {
      var _a2;
      (_a2 = removeButtonRefs.current[rowIndex]) === null || _a2 === void 0 ? void 0 : _a2.focus();
    },
    focusAddButton() {
      var _a2;
      (_a2 = addButtonRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  }));
  const mergedRef = useMergeRefs(breakpointRef, __internalRootRef);
  const additionalInfoId = useUniqueId("attribute-editor-info");
  const infoAriaDescribedBy = additionalInfo ? additionalInfoId : void 0;
  const prevItemsLength = usePrevious(items.length);
  import_react126.default.useEffect(() => {
    if (prevItemsLength && prevItemsLength > items.length && (i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.itemRemovedAriaLive)) {
      setRemovalAnnouncement(i18nStrings.itemRemovedAriaLive);
    } else {
      setRemovalAnnouncement("");
    }
  }, [items, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.itemRemovedAriaLive]);
  return import_react126.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: mergedRef, className: clsx_m_default(baseProps.className, styles_css_default40.root) }),
    import_react126.default.createElement(
      InternalBox,
      { margin: { bottom: "l" } },
      isEmpty && import_react126.default.createElement("div", { className: clsx_m_default(styles_css_default40.empty, wasNonEmpty.current && styles_css_default40["empty-appear"]) }, empty),
      items.map((item, index) => import_react126.default.createElement(Row, { key: index, index, breakpoint, item, definition, i18nStrings, removable: isItemRemovable2(item), removeButtonText, removeButtonRefs: removeButtonRefs.current, onRemoveButtonClick, removeButtonAriaLabel }))
    ),
    import_react126.default.createElement(InternalButton, { className: styles_css_default40["add-button"], disabled: disableAddButton, onClick: onAddButtonClick, formAction: "none", ref: addButtonRef, ariaDescribedby: infoAriaDescribedBy }, addButtonText),
    import_react126.default.createElement(live_region_default, { "data-testid": "removal-announcement", delay: 5, key: items.length }, removalAnnouncement),
    !!additionalInfo && import_react126.default.createElement(AdditionalInfo, { id: infoAriaDescribedBy }, additionalInfo)
  );
});
var internal_default10 = InternalAttributeEditor;

// node_modules/@cloudscape-design/components/attribute-editor/index.js
var AttributeEditor = import_react127.default.forwardRef((_a, ref) => {
  var { items = [], isItemRemovable: isItemRemovable2 = () => true } = _a, props = __rest(_a, ["items", "isItemRemovable"]);
  const baseComponentProps = useBaseComponent("AttributeEditor");
  return import_react127.default.createElement(internal_default10, Object.assign({ items, isItemRemovable: isItemRemovable2 }, props, baseComponentProps, { ref }));
});
applyDisplayName(AttributeEditor, "AttributeEditor");
var attribute_editor_default = AttributeEditor;

// node_modules/@cloudscape-design/components/autosuggest/index.js
var import_react136 = __toESM(require_react());

// node_modules/@cloudscape-design/components/autosuggest/internal.js
var import_react135 = __toESM(require_react());

// node_modules/@cloudscape-design/components/autosuggest/options-controller.js
var import_react128 = __toESM(require_react());

// node_modules/@cloudscape-design/components/autosuggest/utils/utils.js
var isGroup2 = (option) => "type" in option && option.type === "parent";
var popLastGroup = (options) => {
  if (options.length) {
    const lastOption = options[options.length - 1];
    if (isGroup2(lastOption)) {
      options.pop();
    }
  }
};
var filterOptions = (options, text) => {
  const filteredOptions = options.reduce((filteredIn, option) => {
    if (isGroup2(option)) {
      popLastGroup(filteredIn);
      filteredIn.push(option);
    } else if (matchSingleOption(option, text)) {
      filteredIn.push(option);
    }
    return filteredIn;
  }, []);
  popLastGroup(filteredOptions);
  return filteredOptions;
};
var matchSingleOption = (option, text) => {
  const searchableFields = ["value", "label", "description", "labelTag"];
  const searchableTagFields = ["tags", "filteringTags"];
  const searchText = text.toLowerCase();
  const searchStrFieldsFn = (attr) => matchString(option[attr], searchText);
  const searchTagsFieldsFn = (attr) => {
    var _a;
    return (_a = option[attr]) === null || _a === void 0 ? void 0 : _a.some((value) => matchString(value, searchText));
  };
  return searchableFields.some(searchStrFieldsFn) || searchableTagFields.some(searchTagsFieldsFn);
};
var matchString = (value, searchText) => {
  return value && value.toLowerCase().indexOf(searchText) !== -1;
};

// node_modules/@cloudscape-design/components/autosuggest/options-controller.js
var isHighlightable = (option) => {
  return !!option && option.type !== "parent";
};
var isInteractive = (option) => !!option && !option.disabled && option.type !== "parent";
var useAutosuggestItems = ({ options, filterValue, filterText, filteringType, enteredTextLabel, hideEnteredTextLabel, onSelectItem }) => {
  const i18n = useInternalI18n("autosuggest");
  const [showAll, setShowAll] = (0, import_react128.useState)(false);
  const { items, getItemGroup, getItemParent } = (0, import_react128.useMemo)(() => createItems(options), [options]);
  const enteredItemLabel = i18n("enteredTextLabel", enteredTextLabel === null || enteredTextLabel === void 0 ? void 0 : enteredTextLabel(filterValue), (format3) => format3({ value: filterValue }));
  if (!enteredItemLabel) {
    warnOnce("Autosuggest", "A value for enteredTextLabel must be provided.");
  }
  const filteredItems = (0, import_react128.useMemo)(() => {
    const filteredItems2 = filteringType === "auto" && !showAll ? filterOptions(items, filterText) : [...items];
    if (filterValue && !hideEnteredTextLabel) {
      filteredItems2.unshift({
        value: filterValue,
        type: "use-entered",
        label: enteredItemLabel,
        option: { value: filterValue }
      });
    }
    generateTestIndexes(filteredItems2, getItemParent);
    return filteredItems2;
  }, [filteringType, showAll, items, filterText, filterValue, hideEnteredTextLabel, getItemParent, enteredItemLabel]);
  const [highlightedOptionState, highlightedOptionHandlers] = useHighlightedOption({
    options: filteredItems,
    isHighlightable
  });
  const selectHighlightedOptionWithKeyboard = () => {
    if (highlightedOptionState.highlightedOption && isInteractive(highlightedOptionState.highlightedOption)) {
      onSelectItem(highlightedOptionState.highlightedOption);
      return true;
    }
    return false;
  };
  const highlightVisibleOptionWithMouse = (index) => {
    if (filteredItems[index] && isHighlightable(filteredItems[index])) {
      highlightedOptionHandlers.setHighlightedIndexWithMouse(index);
    }
  };
  const selectVisibleOptionWithMouse = (index) => {
    if (filteredItems[index] && isInteractive(filteredItems[index])) {
      onSelectItem(filteredItems[index]);
    }
  };
  return [
    Object.assign(Object.assign({}, highlightedOptionState), { items: filteredItems, showAll, getItemGroup }),
    Object.assign(Object.assign({}, highlightedOptionHandlers), {
      setShowAll,
      selectHighlightedOptionWithKeyboard,
      highlightVisibleOptionWithMouse,
      selectVisibleOptionWithMouse
    })
  ];
};
function createItems(options) {
  const items = [];
  const itemToGroup = /* @__PURE__ */ new WeakMap();
  const getItemParent = (item) => itemToGroup.get(item);
  const getItemGroup = (item) => {
    var _a;
    return (_a = getItemParent(item)) === null || _a === void 0 ? void 0 : _a.option;
  };
  for (const option of options) {
    if (isGroup3(option)) {
      for (const item of flattenGroup(option)) {
        items.push(item);
      }
    } else {
      items.push(Object.assign(Object.assign({}, option), { option }));
    }
  }
  function flattenGroup(group) {
    const { options: options2 } = group, rest = __rest(group, ["options"]);
    let hasOnlyDisabledChildren = true;
    const groupItem = Object.assign(Object.assign({}, rest), { type: "parent", option: group });
    const items2 = [groupItem];
    for (const option of options2) {
      if (!option.disabled) {
        hasOnlyDisabledChildren = false;
      }
      const childOption = Object.assign(Object.assign({}, option), { type: "child", disabled: option.disabled || rest.disabled, option });
      items2.push(childOption);
      itemToGroup.set(childOption, groupItem);
    }
    items2[0].disabled = items2[0].disabled || hasOnlyDisabledChildren;
    return items2;
  }
  return { items, getItemGroup, getItemParent };
}
function isGroup3(optionOrGroup) {
  return "options" in optionOrGroup;
}

// node_modules/@cloudscape-design/components/autosuggest/options-list.js
var import_react132 = __toESM(require_react());

// node_modules/@cloudscape-design/components/autosuggest/virtual-list.js
var import_react131 = __toESM(require_react());

// node_modules/@cloudscape-design/components/autosuggest/autosuggest-option.js
var import_react129 = __toESM(require_react());

// node_modules/@cloudscape-design/components/autosuggest/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/autosuggest/styles.scoped.css";
var styles_css_default43 = {
  "root": "awsui_root_12hwc_oboi4_5",
  "layout-strut": "awsui_layout-strut_12hwc_oboi4_9",
  "list-bottom": "awsui_list-bottom_12hwc_oboi4_15"
};

// node_modules/@cloudscape-design/components/autosuggest/autosuggest-option.js
var AutosuggestOption = (_a, ref) => {
  var { nativeAttributes = {}, highlightText, option, highlighted, highlightType, current, virtualPosition, padBottom, screenReaderContent, ariaSetsize, ariaPosinset } = _a, rest = __rest(_a, ["nativeAttributes", "highlightText", "option", "highlighted", "highlightType", "current", "virtualPosition", "padBottom", "screenReaderContent", "ariaSetsize", "ariaPosinset"]);
  const baseProps = getBaseProps(rest);
  const useEntered = "type" in option && option.type === "use-entered";
  const isParent = "type" in option && option.type === "parent";
  const isChild = "type" in option && option.type === "child";
  const { throughIndex, inGroupIndex, groupIndex } = getTestOptionIndexes(option) || {};
  let optionContent;
  if (useEntered) {
    optionContent = option.label;
    screenReaderContent = void 0;
  } else if (isParent) {
    optionContent = option.label;
  } else {
    const a11yProperties = {};
    if (nativeAttributes["aria-label"]) {
      a11yProperties["aria-label"] = nativeAttributes["aria-label"];
    }
    optionContent = import_react129.default.createElement(
      "div",
      Object.assign({}, a11yProperties),
      import_react129.default.createElement(option_default, { option, highlightedOption: highlighted, highlightText })
    );
  }
  return import_react129.default.createElement(selectable_item_default, Object.assign({}, baseProps, { className: styles_css_default43.option, ariaSelected: current, highlighted, disabled: option.disabled, hasBackground: useEntered, isParent, isChild, virtualPosition, "data-test-index": throughIndex, "data-in-group-index": inGroupIndex, "data-group-index": groupIndex, ref, padBottom, screenReaderContent, ariaSetsize, ariaPosinset, highlightType: highlightType.type }), optionContent);
};
var autosuggest_option_default = import_react129.default.memo(import_react129.default.forwardRef(AutosuggestOption));

// node_modules/@cloudscape-design/components/autosuggest/plain-list.js
var import_react130 = __toESM(require_react());
var getOptionProps = (index, item, filteredItems, highlightedA11yProps, highlightedOption, hasDropdownStatus) => {
  const nativeAttributes = item === highlightedOption ? highlightedA11yProps : {};
  const baseOptionProps = getBaseProps(nativeAttributes);
  const isLastItem = index === filteredItems.length - 1;
  const isNotEnteredTextItem = filteredItems.length > 1;
  const padBottom = !hasDropdownStatus && isNotEnteredTextItem && isLastItem;
  return Object.assign({ nativeAttributes, padBottom }, baseOptionProps);
};
var PlainList = ({ autosuggestItemsState, handleLoadMore, menuProps, highlightedA11yProps, hasDropdownStatus, highlightText, listBottom, screenReaderContent }) => {
  const listRef = (0, import_react130.useRef)(null);
  (0, import_react130.useEffect)(() => {
    var _a;
    const item = (_a = listRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(`[data-mouse-target="${autosuggestItemsState.highlightedIndex}"]`);
    if (autosuggestItemsState.highlightType.moveFocus && item) {
      scrollElementIntoView(item);
    }
  }, [autosuggestItemsState.highlightType, autosuggestItemsState.highlightedIndex]);
  return import_react130.default.createElement(
    options_list_default,
    Object.assign({}, menuProps, {
      onLoadMore: handleLoadMore,
      open: true,
      ref: listRef,
      // to prevent closing the list when clicking the scrollbar on IE11
      nativeAttributes: { unselectable: "on" }
    }),
    autosuggestItemsState.items.map((item, index) => {
      const optionProps = getOptionProps(index, item, autosuggestItemsState.items, highlightedA11yProps, autosuggestItemsState.highlightedOption, hasDropdownStatus);
      return import_react130.default.createElement(autosuggest_option_default, Object.assign({ highlightText, option: item, highlighted: item === autosuggestItemsState.highlightedOption, current: item.value === highlightText, key: index, "data-mouse-target": index, screenReaderContent, highlightType: autosuggestItemsState.highlightType }, optionProps));
    }),
    listBottom ? import_react130.default.createElement("li", { role: "option", className: styles_css_default43["list-bottom"] }, listBottom) : null
  );
};
var plain_list_default2 = PlainList;

// node_modules/@cloudscape-design/components/autosuggest/virtual-list.js
var VirtualList = ({ autosuggestItemsState, handleLoadMore, menuProps, highlightedA11yProps, hasDropdownStatus, highlightText, listBottom, screenReaderContent }) => {
  const scrollRef = (0, import_react131.useRef)(null);
  const [width, strutRef] = useContainerQuery((rect) => rect.contentBoxWidth, []);
  (0, import_react131.useImperativeHandle)(strutRef, () => scrollRef.current);
  const rowVirtualizer = useVirtual({
    items: autosuggestItemsState.items,
    parentRef: scrollRef,
    // estimateSize is a dependency of measurements memo. We update it to force full recalculation
    // when the height of any option could have changed:
    // 1: because the component got resized (width property got updated)
    // 2: because the option changed its content (highlightText property controls the highlight and the visibility of hidden tags)
    // eslint-disable-next-line react-hooks/exhaustive-deps
    estimateSize: (0, import_react131.useCallback)(() => 31, [width, highlightText])
  });
  (0, import_react131.useEffect)(() => {
    if (autosuggestItemsState.highlightType.moveFocus) {
      rowVirtualizer.scrollToIndex(autosuggestItemsState.highlightedIndex);
    }
  }, [autosuggestItemsState.highlightType, autosuggestItemsState.highlightedIndex, rowVirtualizer]);
  return import_react131.default.createElement(
    options_list_default,
    Object.assign({}, menuProps, {
      onLoadMore: handleLoadMore,
      ref: scrollRef,
      open: true,
      // to prevent closing the list when clicking the scrollbar on IE11
      nativeAttributes: { unselectable: "on" }
    }),
    import_react131.default.createElement("div", { "aria-hidden": "true", key: "total-size", className: styles_css_default43["layout-strut"], style: { height: rowVirtualizer.totalSize + (autosuggestItemsState.items.length === 1 ? 1 : 0) } }),
    rowVirtualizer.virtualItems.map((virtualRow) => {
      const { index, start, measureRef } = virtualRow;
      const item = autosuggestItemsState.items[index];
      const optionProps = getOptionProps(index, item, autosuggestItemsState.items, highlightedA11yProps, autosuggestItemsState.highlightedOption, hasDropdownStatus);
      return import_react131.default.createElement(autosuggest_option_default, Object.assign({ key: index, ref: measureRef, highlightText, option: item, highlighted: item === autosuggestItemsState.highlightedOption, current: item.value === highlightText, "data-mouse-target": index, virtualPosition: start + (index === 0 ? 1 : 0), screenReaderContent, ariaSetsize: autosuggestItemsState.items.length, ariaPosinset: index + 1, highlightType: autosuggestItemsState.highlightType }, optionProps));
    }),
    listBottom ? import_react131.default.createElement("li", { role: "option", className: styles_css_default43["list-bottom"] }, listBottom) : null
  );
};
var virtual_list_default2 = VirtualList;

// node_modules/@cloudscape-design/components/autosuggest/options-list.js
var createMouseEventHandler = (handler) => (itemIndex) => {
  if (itemIndex > -1) {
    handler(itemIndex);
  }
};
function AutosuggestOptionsList({ statusType, autosuggestItemsState, autosuggestItemsHandlers, highlightedOptionId, highlightText, listId, controlId, handleLoadMore, hasDropdownStatus, virtualScroll, selectedAriaLabel, renderHighlightedAriaLive, listBottom, ariaDescribedby }) {
  var _a;
  const handleMouseUp = createMouseEventHandler(autosuggestItemsHandlers.selectVisibleOptionWithMouse);
  const handleMouseMove = createMouseEventHandler(autosuggestItemsHandlers.highlightVisibleOptionWithMouse);
  const ListComponent = virtualScroll ? virtual_list_default2 : plain_list_default2;
  const announcement = useAnnouncement({
    announceSelected: ((_a = autosuggestItemsState.highlightedOption) === null || _a === void 0 ? void 0 : _a.value) === highlightText,
    highlightedOption: autosuggestItemsState.highlightedOption,
    getParent: (option) => autosuggestItemsState.getItemGroup(option),
    selectedAriaLabel,
    renderHighlightedAriaLive
  });
  return import_react132.default.createElement(ListComponent, { listBottom, handleLoadMore, autosuggestItemsState, highlightText, highlightedA11yProps: highlightedOptionId ? { id: highlightedOptionId } : {}, hasDropdownStatus, menuProps: {
    id: listId,
    ariaLabelledby: controlId,
    onMouseUp: handleMouseUp,
    onMouseMove: handleMouseMove,
    ariaDescribedby,
    statusType
  }, screenReaderContent: announcement });
}

// node_modules/@cloudscape-design/components/autosuggest/load-more-controller.js
var import_react133 = __toESM(require_react());
var useAutosuggestLoadMore = ({ options = [], statusType, onLoadItems }) => {
  const lastFilteringText = (0, import_react133.useRef)(null);
  const fireLoadMore = ({ firstPage, samePage, filteringText }) => {
    var _a;
    if (filteringText === void 0 || lastFilteringText.current !== filteringText) {
      if (filteringText !== void 0) {
        lastFilteringText.current = filteringText;
      }
      onLoadItems({ filteringText: (_a = lastFilteringText.current) !== null && _a !== void 0 ? _a : "", firstPage, samePage });
    }
  };
  const fireLoadMoreOnScroll = () => {
    options.length > 0 && statusType === "pending" && fireLoadMore({ firstPage: false, samePage: false });
  };
  const fireLoadMoreOnRecoveryClick = () => fireLoadMore({ firstPage: false, samePage: true });
  const fireLoadMoreOnInputFocus = () => fireLoadMore({ firstPage: true, samePage: false, filteringText: "" });
  const fireLoadMoreOnInputChange = (filteringText) => fireLoadMore({ firstPage: true, samePage: false, filteringText });
  return { fireLoadMoreOnScroll, fireLoadMoreOnRecoveryClick, fireLoadMoreOnInputFocus, fireLoadMoreOnInputChange };
};

// node_modules/@cloudscape-design/components/internal/components/autosuggest-input/index.js
var import_react134 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/autosuggest-input/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/autosuggest-input/styles.scoped.css";
var styles_css_default44 = {
  "dropdown-footer": "awsui_dropdown-footer_vm8qf_jxdvh_5",
  "dropdown-content": "awsui_dropdown-content_vm8qf_jxdvh_10"
};

// node_modules/@cloudscape-design/components/internal/components/autosuggest-input/index.js
var AutosuggestInput = import_react134.default.forwardRef((_a, ref) => {
  var { value, onChange, onBlur, onFocus, onKeyUp, onKeyDown, name, placeholder, disabled, readOnly, autoFocus, ariaLabel, ariaRequired, disableBrowserAutocorrect = false, expandToViewport, ariaControls, ariaActivedescendant, clearAriaLabel, dropdownExpanded = true, dropdownContentKey, dropdownContentFocusable = false, dropdownContent = null, dropdownFooter = null, dropdownWidth, loopFocus, onCloseDropdown, onDelayedInput, onPressArrowDown, onPressArrowUp, onPressEnter, __internalRootRef } = _a, restProps = __rest(_a, ["value", "onChange", "onBlur", "onFocus", "onKeyUp", "onKeyDown", "name", "placeholder", "disabled", "readOnly", "autoFocus", "ariaLabel", "ariaRequired", "disableBrowserAutocorrect", "expandToViewport", "ariaControls", "ariaActivedescendant", "clearAriaLabel", "dropdownExpanded", "dropdownContentKey", "dropdownContentFocusable", "dropdownContent", "dropdownFooter", "dropdownWidth", "loopFocus", "onCloseDropdown", "onDelayedInput", "onPressArrowDown", "onPressArrowUp", "onPressEnter", "__internalRootRef"]);
  const baseProps = getBaseProps(restProps);
  const formFieldContext = useFormFieldContext(restProps);
  const inputRef = (0, import_react134.useRef)(null);
  const dropdownContentRef = (0, import_react134.useRef)(null);
  const dropdownFooterRef = (0, import_react134.useRef)(null);
  const preventOpenOnFocusRef = (0, import_react134.useRef)(false);
  const preventCloseOnBlurRef = (0, import_react134.useRef)(false);
  const [open, setOpen] = (0, import_react134.useState)(false);
  const openDropdown = () => !readOnly && setOpen(true);
  const closeDropdown = () => {
    setOpen(false);
    fireNonCancelableEvent(onCloseDropdown, null);
  };
  (0, import_react134.useImperativeHandle)(ref, () => ({
    focus(options) {
      var _a2;
      if (options === null || options === void 0 ? void 0 : options.preventDropdown) {
        preventOpenOnFocusRef.current = true;
      }
      (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    },
    select() {
      var _a2;
      (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.select();
    },
    open: openDropdown,
    close: closeDropdown
  }));
  const handleBlur = () => {
    if (!preventCloseOnBlurRef.current) {
      closeDropdown();
      fireNonCancelableEvent(onBlur, null);
    }
  };
  const handleFocus = () => {
    if (!preventOpenOnFocusRef.current) {
      openDropdown();
      fireNonCancelableEvent(onFocus, null);
    }
    preventOpenOnFocusRef.current = false;
  };
  const fireKeydown = (event) => fireCancelableEvent(onKeyDown, event.detail, event);
  const handleKeyDown = (event) => {
    switch (event.detail.keyCode) {
      case KeyCode.down: {
        onPressArrowDown === null || onPressArrowDown === void 0 ? void 0 : onPressArrowDown();
        openDropdown();
        event.preventDefault();
        break;
      }
      case KeyCode.up: {
        onPressArrowUp === null || onPressArrowUp === void 0 ? void 0 : onPressArrowUp();
        openDropdown();
        event.preventDefault();
        break;
      }
      case KeyCode.enter: {
        if (open) {
          if (!(onPressEnter === null || onPressEnter === void 0 ? void 0 : onPressEnter())) {
            closeDropdown();
          }
          event.preventDefault();
        }
        fireKeydown(event);
        break;
      }
      case KeyCode.escape: {
        if (open) {
          event.stopPropagation();
          closeDropdown();
        } else if (value) {
          event.stopPropagation();
          fireNonCancelableEvent(onChange, { value: "" });
        }
        event.preventDefault();
        fireKeydown(event);
        break;
      }
      default: {
        fireKeydown(event);
      }
    }
  };
  const handleChange = (value2) => {
    openDropdown();
    fireNonCancelableEvent(onChange, { value: value2 });
  };
  const handleDelayedInput = (value2) => {
    fireNonCancelableEvent(onDelayedInput, { value: value2 });
  };
  const handleDropdownMouseDown = (event) => {
    if (!dropdownContentFocusable) {
      event.preventDefault();
    } else {
      preventCloseOnBlurRef.current = true;
      requestAnimationFrame(() => {
        preventCloseOnBlurRef.current = false;
      });
    }
  };
  const expanded = open && dropdownExpanded;
  const nativeAttributes = {
    name,
    placeholder,
    autoFocus,
    onClick: openDropdown,
    role: "combobox",
    "aria-autocomplete": "list",
    "aria-expanded": expanded,
    "aria-controls": open ? ariaControls : void 0,
    // 'aria-owns' needed for safari+vo to announce activedescendant content
    "aria-owns": open ? ariaControls : void 0,
    "aria-label": ariaLabel,
    "aria-activedescendant": ariaActivedescendant
  };
  (0, import_react134.useEffect)(() => {
    if (!open) {
      return;
    }
    const clickListener = (event) => {
      if (!nodeBelongs(inputRef.current, event.target) && !nodeBelongs(dropdownContentRef.current, event.target) && !nodeBelongs(dropdownFooterRef.current, event.target)) {
        closeDropdown();
      }
    };
    window.addEventListener("mousedown", clickListener);
    return () => {
      window.removeEventListener("mousedown", clickListener);
    };
  }, [open]);
  return import_react134.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default44.root), ref: __internalRootRef }),
    import_react134.default.createElement(dropdown_default, { minWidth: dropdownWidth, stretchWidth: !dropdownWidth, stretchBeyondTriggerWidth: true, contentKey: dropdownContentKey, onFocus: handleFocus, onBlur: handleBlur, trigger: import_react134.default.createElement(internal_default4, Object.assign({ type: "visualSearch", value, onChange: (event) => handleChange(event.detail.value), __onDelayedInput: (event) => handleDelayedInput(event.detail.value), onKeyDown: handleKeyDown, onKeyUp, disabled, disableBrowserAutocorrect, readOnly, ariaRequired, clearAriaLabel, ref: inputRef, autoComplete: false, __nativeAttributes: nativeAttributes }, formFieldContext)), onMouseDown: handleDropdownMouseDown, open: open && (!!dropdownContent || !!dropdownFooter), footer: dropdownFooterRef && import_react134.default.createElement("div", { ref: dropdownFooterRef, className: styles_css_default44["dropdown-footer"] }, dropdownFooter), expandToViewport, loopFocus }, open && dropdownContent ? import_react134.default.createElement("div", { ref: dropdownContentRef, className: styles_css_default44["dropdown-content"] }, dropdownContent) : null)
  );
});
var autosuggest_input_default = AutosuggestInput;

// node_modules/@cloudscape-design/components/autosuggest/internal.js
var InternalAutosuggest = import_react135.default.forwardRef((props, ref) => {
  var _a, _b;
  const { value, onChange, onBlur, onFocus, onKeyUp, onLoadItems, options, filteringType = "auto", statusType = "finished", placeholder, clearAriaLabel, name, disabled, disableBrowserAutocorrect = false, autoFocus, readOnly, ariaLabel, ariaRequired, enteredTextLabel, filteringResultsText, onKeyDown, virtualScroll, expandToViewport, onSelect, renderHighlightedAriaLive, __internalRootRef } = props, restProps = __rest(props, ["value", "onChange", "onBlur", "onFocus", "onKeyUp", "onLoadItems", "options", "filteringType", "statusType", "placeholder", "clearAriaLabel", "name", "disabled", "disableBrowserAutocorrect", "autoFocus", "readOnly", "ariaLabel", "ariaRequired", "enteredTextLabel", "filteringResultsText", "onKeyDown", "virtualScroll", "expandToViewport", "onSelect", "renderHighlightedAriaLive", "__internalRootRef"]);
  checkControlled("Autosuggest", "value", value, "onChange", onChange);
  checkOptionValueField("Autosuggest", "options", options);
  const autosuggestInputRef = (0, import_react135.useRef)(null);
  (0, import_react135.useImperativeHandle)(ref, () => ({
    focus: () => {
      var _a2;
      return (_a2 = autosuggestInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    },
    select: () => {
      var _a2;
      return (_a2 = autosuggestInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.select();
    }
  }), []);
  const i18n = useInternalI18n("autosuggest");
  const errorIconAriaLabel = i18n("errorIconAriaLabel", restProps.errorIconAriaLabel);
  const selectedAriaLabel = i18n("selectedAriaLabel", restProps.selectedAriaLabel);
  const recoveryText = i18n("recoveryText", restProps.recoveryText);
  if (restProps.recoveryText && !onLoadItems) {
    warnOnce("Autosuggest", "`onLoadItems` must be provided for `recoveryText` to be displayed.");
  }
  const [autosuggestItemsState, autosuggestItemsHandlers] = useAutosuggestItems({
    options: options || [],
    filterValue: value,
    filterText: value,
    filteringType,
    enteredTextLabel,
    hideEnteredTextLabel: false,
    onSelectItem: (option) => {
      var _a2;
      const value2 = option.value || "";
      fireNonCancelableEvent(onChange, { value: value2 });
      fireNonCancelableEvent(onSelect, {
        value: value2,
        selectedOption: option.type !== "use-entered" ? option.option : void 0
      });
      (_a2 = autosuggestInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.close();
    }
  });
  const autosuggestLoadMoreHandlers = useAutosuggestLoadMore({
    options,
    statusType,
    onLoadItems: (detail) => fireNonCancelableEvent(onLoadItems, detail)
  });
  const handleChange = (event) => {
    autosuggestItemsHandlers.setShowAll(false);
    autosuggestItemsHandlers.resetHighlightWithKeyboard();
    fireNonCancelableEvent(onChange, event.detail);
  };
  const handleDelayedInput = (event) => {
    autosuggestLoadMoreHandlers.fireLoadMoreOnInputChange(event.detail.value);
  };
  const handleBlur = () => {
    fireNonCancelableEvent(onBlur, null);
  };
  const handleFocus = () => {
    autosuggestItemsHandlers.setShowAll(true);
    autosuggestLoadMoreHandlers.fireLoadMoreOnInputFocus();
    fireNonCancelableEvent(onFocus, null);
  };
  const handleKeyUp = (event) => {
    fireCancelableEvent(onKeyUp, event.detail, event);
  };
  const handleKeyDown = (event) => {
    fireCancelableEvent(onKeyDown, event.detail, event);
  };
  const handlePressArrowDown = () => {
    autosuggestItemsHandlers.moveHighlightWithKeyboard(1);
  };
  const handlePressArrowUp = () => {
    autosuggestItemsHandlers.moveHighlightWithKeyboard(-1);
  };
  const handlePressEnter = () => {
    return autosuggestItemsHandlers.selectHighlightedOptionWithKeyboard();
  };
  const handleCloseDropdown = () => {
    autosuggestItemsHandlers.resetHighlightWithKeyboard();
  };
  const handleRecoveryClick = () => {
    var _a2;
    autosuggestLoadMoreHandlers.fireLoadMoreOnRecoveryClick();
    (_a2 = autosuggestInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
  };
  const formFieldContext = useFormFieldContext(restProps);
  const selfControlId = useUniqueId("input");
  const footerControlId = useUniqueId("footer");
  const controlId = (_a = formFieldContext.controlId) !== null && _a !== void 0 ? _a : selfControlId;
  const listId = useUniqueId("list");
  const highlightedOptionIdSource = useUniqueId();
  const highlightedOptionId = autosuggestItemsState.highlightedOption ? highlightedOptionIdSource : void 0;
  const isEmpty = !value && !autosuggestItemsState.items.length;
  const isFiltered = !!value && value.length !== 0;
  const filteredText = isFiltered ? filteringResultsText === null || filteringResultsText === void 0 ? void 0 : filteringResultsText(autosuggestItemsState.items.length, (_b = options === null || options === void 0 ? void 0 : options.length) !== null && _b !== void 0 ? _b : 0) : void 0;
  const dropdownStatus = useDropdownStatus(Object.assign(Object.assign({}, props), {
    isEmpty,
    isFiltered,
    recoveryText,
    errorIconAriaLabel,
    onRecoveryClick: handleRecoveryClick,
    filteringResultsText: filteredText,
    hasRecoveryCallback: !!onLoadItems
  }));
  const shouldRenderDropdownContent = !isEmpty || dropdownStatus.content;
  return import_react135.default.createElement(autosuggest_input_default, Object.assign({}, restProps, { className: clsx_m_default(styles_css_default43.root, restProps.className), ref: autosuggestInputRef, __internalRootRef, value, onChange: handleChange, onBlur: handleBlur, onFocus: handleFocus, onKeyUp: handleKeyUp, onKeyDown: handleKeyDown, name, controlId, placeholder, disabled, readOnly, autoFocus, ariaLabel, ariaRequired, clearAriaLabel, disableBrowserAutocorrect, expandToViewport, ariaControls: listId, ariaActivedescendant: highlightedOptionId, dropdownExpanded: autosuggestItemsState.items.length > 1 || dropdownStatus.content !== null, dropdownContent: shouldRenderDropdownContent && import_react135.default.createElement(AutosuggestOptionsList, { statusType, autosuggestItemsState, autosuggestItemsHandlers, highlightedOptionId, highlightText: value, listId, controlId, handleLoadMore: autosuggestLoadMoreHandlers.fireLoadMoreOnScroll, hasDropdownStatus: dropdownStatus.content !== null, virtualScroll, selectedAriaLabel, renderHighlightedAriaLive, listBottom: !dropdownStatus.isSticky ? import_react135.default.createElement(dropdown_footer_default, { content: dropdownStatus.content, id: footerControlId }) : null, ariaDescribedby: dropdownStatus.content ? footerControlId : void 0 }), dropdownFooter: dropdownStatus.isSticky && dropdownStatus.content ? import_react135.default.createElement(dropdown_footer_default, { id: footerControlId, content: dropdownStatus.content, hasItems: autosuggestItemsState.items.length >= 1 }) : null, loopFocus: statusType === "error" && !!recoveryText && !!onLoadItems, onCloseDropdown: handleCloseDropdown, onDelayedInput: handleDelayedInput, onPressArrowDown: handlePressArrowDown, onPressArrowUp: handlePressArrowUp, onPressEnter: handlePressEnter }));
});
var internal_default11 = InternalAutosuggest;

// node_modules/@cloudscape-design/components/autosuggest/index.js
var Autosuggest = import_react136.default.forwardRef((_a, ref) => {
  var { filteringType = "auto", statusType = "finished", disableBrowserAutocorrect = false } = _a, props = __rest(_a, ["filteringType", "statusType", "disableBrowserAutocorrect"]);
  const baseComponentProps = useBaseComponent("Autosuggest", {
    props: {
      autoFocus: props.autoFocus,
      disableBrowserAutocorrect,
      expandToViewport: props.expandToViewport,
      filteringType,
      readOnly: props.readOnly,
      virtualScroll: props.virtualScroll
    }
  });
  const externalProps = getExternalProps(props);
  return import_react136.default.createElement(internal_default11, Object.assign({ filteringType, statusType, disableBrowserAutocorrect }, externalProps, baseComponentProps, { ref }));
});
applyDisplayName(Autosuggest, "Autosuggest");
var autosuggest_default = Autosuggest;

// node_modules/@cloudscape-design/components/badge/index.js
var import_react137 = __toESM(require_react());

// node_modules/@cloudscape-design/components/badge/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/badge/styles.scoped.css";
var styles_css_default45 = {
  "badge": "awsui_badge_1yjyg_bjogl_99",
  "badge-color-grey": "awsui_badge-color-grey_1yjyg_bjogl_145",
  "badge-color-green": "awsui_badge-color-green_1yjyg_bjogl_148",
  "badge-color-blue": "awsui_badge-color-blue_1yjyg_bjogl_151",
  "badge-color-red": "awsui_badge-color-red_1yjyg_bjogl_154"
};

// node_modules/@cloudscape-design/components/badge/index.js
function Badge(_a) {
  var { color: color2 = "grey", children } = _a, rest = __rest(_a, ["color", "children"]);
  const { __internalRootRef } = useBaseComponent("Badge", { props: { color: color2 } });
  const baseProps = getBaseProps(rest);
  const className2 = clsx_m_default(baseProps.className, styles_css_default45.badge, styles_css_default45[`badge-color-${color2}`]);
  return import_react137.default.createElement("span", Object.assign({}, baseProps, { className: className2 }, { ref: __internalRootRef }), children);
}
applyDisplayName(Badge, "Badge");

// node_modules/@cloudscape-design/components/bar-chart/index.js
var import_react149 = __toESM(require_react());

// node_modules/@cloudscape-design/components/bar-chart/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/bar-chart/styles.scoped.css";
var styles_css_default46 = {
  "root": "awsui_root_1gfe1_7b6p8_9"
};

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/internal.js
var import_react148 = __toESM(require_react());

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/chart-legend.js
var import_react138 = __toESM(require_react());

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/utils.js
var chartLegendMap = {
  line: "line",
  bar: "rectangle",
  threshold: "dashed"
};
var nextValidDomainIndex = (nextGroupIndex, barGroups, direction = 1) => {
  let index = nextGroupIndex;
  if (index < 0 || index >= barGroups.length) {
    index = 0;
  }
  do {
    if (barGroups[index].isValid && barGroups[index].hasData) {
      return index;
    }
    index += direction;
    if (index >= barGroups.length) {
      index = 0;
    } else if (index < 0) {
      index = barGroups.length - 1;
    }
  } while (index !== nextGroupIndex);
  return 0;
};
function findNavigableSeries(series) {
  const navigableSeries = [];
  let navigableBarSeriesIndex = -1;
  series.forEach((internalSeries) => {
    if (internalSeries.series.type === "bar") {
      if (navigableBarSeriesIndex === -1) {
        navigableBarSeriesIndex = navigableSeries.length;
        navigableSeries.push(internalSeries.series);
      }
    } else {
      navigableSeries.push(internalSeries.series);
    }
  });
  return { navigableSeries, navigableBarSeriesIndex };
}
var matchesX = (x1, x2) => {
  if (x1 instanceof Date && x2 instanceof Date) {
    return x1.getTime() === x2.getTime();
  }
  return x1 === x2;
};
function calculateOffsetMaps(data) {
  return data.reduce((acc, curr, idx) => {
    if (idx === 0) {
      acc.push({ positiveOffsets: /* @__PURE__ */ new Map(), negativeOffsets: /* @__PURE__ */ new Map() });
    }
    const lastMap = acc[idx];
    const map2 = lastMap ? { positiveOffsets: new Map(lastMap.positiveOffsets), negativeOffsets: new Map(lastMap.negativeOffsets) } : { positiveOffsets: /* @__PURE__ */ new Map(), negativeOffsets: /* @__PURE__ */ new Map() };
    curr.forEach(({ x: x2, y: y2 }) => {
      const key2 = getKeyValue(x2);
      if (y2 < 0) {
        const lastValue = (lastMap === null || lastMap === void 0 ? void 0 : lastMap.negativeOffsets.get(key2)) || 0;
        map2.negativeOffsets.set(key2, lastValue + y2);
      } else {
        const lastValue = (lastMap === null || lastMap === void 0 ? void 0 : lastMap.positiveOffsets.get(key2)) || 0;
        map2.positiveOffsets.set(key2, lastValue + y2);
      }
    });
    if (idx < data.length - 1) {
      acc.push(map2);
    }
    return acc;
  }, []);
}
var getKeyValue = (key2) => key2 instanceof Date ? key2.getTime() : key2;
function isYThreshold(series) {
  return series.type === "threshold" && "y" in series;
}
function isXThreshold(series) {
  return series.type === "threshold" && "x" in series;
}
function isDataSeries(series) {
  return series.type === "line" || series.type === "bar";
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/chart-legend.js
function InternalChartLegend({ series, visibleSeries, highlightedSeries, onHighlightChange, legendTitle, ariaLabel, plotContainerRef }) {
  const legendItems = (0, import_react138.useMemo)(() => {
    return series.filter((s2) => visibleSeries.indexOf(s2.series) !== -1).map(({ series: series2, color: color2 }) => ({
      label: series2.title,
      type: chartLegendMap[series2.type],
      color: color2,
      datum: series2
    }));
  }, [series, visibleSeries]);
  return import_react138.default.createElement(chart_legend_default, { series: legendItems, highlightedSeries: highlightedSeries || null, onHighlightChange, legendTitle, ariaLabel, plotContainerRef });
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/chart-container.js
var import_react147 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/vertical-grid-lines.js
var import_react139 = __toESM(require_react());
var vertical_grid_lines_default = (0, import_react139.memo)(VerticalGridLines);
function VerticalGridLines({ ticks: ticks2, scale, height }) {
  return import_react139.default.createElement("g", { "aria-hidden": "true" }, ticks2.map((tick) => {
    var _a;
    const x2 = (_a = scale.d3Scale(tick)) !== null && _a !== void 0 ? _a : NaN;
    return isFinite(x2) && import_react139.default.createElement("line", { key: tick, className: styles_css_default32.grid, x1: x2, y1: 0, x2, y2: height });
  }));
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/chart-popover.js
var import_react140 = __toESM(require_react());

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/mixed-line-bar-chart/styles.scoped.css";
var styles_css_default47 = {
  "series": "awsui_series_1yz9c_1g0qf_99",
  "series--bar": "awsui_series--bar_1yz9c_1g0qf_100",
  "series__rect": "awsui_series__rect_1yz9c_1g0qf_100",
  "exiting": "awsui_exiting_1yz9c_1g0qf_117",
  "awsui-motion-fade-out-0": "awsui_awsui-motion-fade-out-0_1yz9c_1g0qf_1",
  "root": "awsui_root_1yz9c_1g0qf_143",
  "series--highlighted": "awsui_series--highlighted_1yz9c_1g0qf_156",
  "series__bar--highlighted": "awsui_series__bar--highlighted_1yz9c_1g0qf_157",
  "series--dimmed": "awsui_series--dimmed_1yz9c_1g0qf_161",
  "series--threshold": "awsui_series--threshold_1yz9c_1g0qf_165",
  "bar-group": "awsui_bar-group_1yz9c_1g0qf_170"
};

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/chart-popover.js
var chart_popover_default2 = import_react140.default.forwardRef(MixedChartPopover);
function MixedChartPopover({ containerRef, trackRef, isOpen, isPinned, highlightDetails, footer, onDismiss, size = "medium", dismissAriaLabel, onMouseEnter, onMouseLeave, onBlur, setPopoverText }, popoverRef) {
  const [expandedSeries, setExpandedSeries] = (0, import_react140.useState)({});
  return import_react140.default.createElement(Transition, { in: isOpen }, (state, ref) => import_react140.default.createElement("div", { ref, className: clsx_m_default(state === "exiting" && styles_css_default47.exiting) }, (isOpen || state !== "exited") && highlightDetails && import_react140.default.createElement(
    chart_popover_default,
    { ref: popoverRef, title: highlightDetails.position, trackRef, trackKey: highlightDetails.position, dismissButton: isPinned, dismissAriaLabel, onDismiss, container: containerRef.current, size, onMouseEnter, onMouseLeave, onBlur },
    import_react140.default.createElement(chart_series_details_default, { key: highlightDetails.position, details: highlightDetails.details, setPopoverText, expandedSeries: expandedSeries[highlightDetails.position], setExpandedState: (id, isExpanded) => setExpandedSeries((oldState) => {
      const expandedSeriesInCurrentCoordinate = new Set(oldState[highlightDetails.position]);
      if (isExpanded) {
        expandedSeriesInCurrentCoordinate.add(id);
      } else {
        expandedSeriesInCurrentCoordinate.delete(id);
      }
      return Object.assign(Object.assign({}, oldState), { [highlightDetails.position]: expandedSeriesInCurrentCoordinate });
    }) }),
    footer && import_react140.default.createElement(ChartPopoverFooter, null, footer)
  )));
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/domain.js
function computeDomainX2(series, xScaleType) {
  if (xScaleType === "categorical") {
    return series.reduce((acc, s2) => {
      if (isDataSeries(s2.series)) {
        s2.series.data.forEach(({ x: x2 }) => {
          if (acc.indexOf(x2) === -1) {
            acc.push(x2);
          }
        });
      }
      if (isXThreshold(s2.series)) {
        if (acc.indexOf(s2.series.x) === -1) {
          acc.push(s2.series.x);
        }
      }
      return acc;
    }, []);
  }
  return series.reduce((acc, curr) => {
    if (isYThreshold(curr.series)) {
      return acc;
    }
    if (isXThreshold(curr.series)) {
      const [min3, max3] = acc;
      const newMin = min3 === void 0 || min3 === null || curr.series.x < min3 ? curr.series.x : min3;
      const newMax = max3 === void 0 || max3 === null || max3 < curr.series.x ? curr.series.x : max3;
      return [newMin, newMax];
    }
    if (isDataSeries(curr.series)) {
      return curr.series.data.reduce(([min3, max3], { x: x2 }) => {
        const newMin = min3 === void 0 || min3 === null || x2 < min3 ? x2 : min3;
        const newMax = max3 === void 0 || max3 === null || max3 < x2 ? x2 : max3;
        return [newMin, newMax];
      }, acc);
    }
    return acc;
  }, []);
}
function find(arr, func) {
  for (let i = 0; i < arr.length; i++) {
    const found = func(arr[i]);
    if (found) {
      return arr[i];
    }
  }
  return null;
}
function computeDomainY2(series, scaleType, stackedBars) {
  let _series = series;
  if (stackedBars) {
    const { positiveData, negativeData } = series.reduce((acc, curr) => {
      if (curr.series.type === "bar") {
        curr.series.data.forEach(({ x: x2, y: y2 }) => {
          const data = y2 < 0 ? acc.negativeData : acc.positiveData;
          const stackedDatum = find(data, (el) => matchesX(el.x, x2));
          if (stackedDatum) {
            stackedDatum.y += y2;
          } else {
            data.push({ x: x2, y: y2 });
          }
          return acc;
        });
      }
      return acc;
    }, {
      positiveData: [],
      negativeData: []
    });
    const stackedSeries = [
      {
        color: "",
        index: NaN,
        series: {
          type: "bar",
          title: "positive",
          data: positiveData
        }
      },
      {
        color: "",
        index: NaN,
        series: {
          type: "bar",
          title: "negative",
          data: negativeData
        }
      }
    ];
    _series = [...stackedSeries, ..._series.filter((s2) => s2.series.type !== "bar")];
  }
  const domain = _series.reduce((acc, curr) => {
    if (isYThreshold(curr.series)) {
      const [min3, max3] = acc;
      const newMin = min3 === void 0 || curr.series.y < min3 ? curr.series.y : min3;
      const newMax = max3 === void 0 || max3 < curr.series.y ? curr.series.y : max3;
      return [newMin, newMax];
    }
    if (isXThreshold(curr.series)) {
      return acc;
    }
    if (isDataSeries(curr.series)) {
      return curr.series.data.reduce(([min3, max3], { y: y2 }) => {
        const newMin = min3 === void 0 || y2 < min3 ? y2 : min3;
        const newMax = max3 === void 0 || max3 < y2 ? y2 : max3;
        return [newMin, newMax];
      }, acc);
    }
    return acc;
  }, [0, 0]);
  if (scaleType === "log" && domain[0] === 0 && domain[1] > 1) {
    return [1, domain[1]];
  }
  return domain;
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/make-scaled-series.js
function makeScaledSeries(allSeries, xScale, yScale) {
  const xOffset = xScale.isCategorical() ? Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2 : 0;
  const scaleX = (x2) => (xScale.d3Scale(x2) || 0) + xOffset;
  const scaleY = (y2) => yScale.d3Scale(y2) || 0;
  const allX = getAllX(allSeries);
  function mergeLineSeriesPointsWithXThresholds(scaledPoints, xThresholdSeries, xThresholdSeriesColor) {
    var _a, _b;
    const x2 = scaleX(xThresholdSeries.x);
    let bisectIndex = -1;
    for (let i = 0; i < scaledPoints.length - 1; i++) {
      if (scaledPoints[i].x < x2 && x2 < scaledPoints[i + 1].x) {
        bisectIndex = i;
        break;
      }
    }
    if (bisectIndex !== -1) {
      const prevY = ((_a = scaledPoints[bisectIndex].datum) === null || _a === void 0 ? void 0 : _a.y) || 0;
      const nextY = ((_b = scaledPoints[bisectIndex + 1].datum) === null || _b === void 0 ? void 0 : _b.y) || 0;
      const averageY = (prevY + nextY) / 2;
      scaledPoints.push({
        x: x2,
        y: scaleY(averageY),
        datum: { x: xThresholdSeries.x, y: NaN },
        series: scaledPoints[bisectIndex].series,
        color: xThresholdSeriesColor
      });
    }
  }
  const scaledSeriesX = allSeries.map(({ series, color: color2 }) => {
    const scaledPoints = [];
    if (series.type === "line") {
      for (const datum of series.data) {
        scaledPoints.push({ x: scaleX(datum.x), y: scaleY(datum.y), datum, series, color: color2 });
      }
      scaledPoints.sort((s1, s2) => s1.x - s2.x);
      for (const otherSeries of allSeries) {
        if (isXThreshold(otherSeries.series)) {
          mergeLineSeriesPointsWithXThresholds(scaledPoints, otherSeries.series, otherSeries.color);
        }
      }
    } else if (isYThreshold(series)) {
      for (const x2 of allX) {
        scaledPoints.push({ x: scaleX(x2), y: scaleY(series.y), datum: { x: x2, y: series.y }, series, color: color2 });
      }
      if (allX.length === 0) {
        scaledPoints.push({ x: NaN, y: scaleY(series.y), series, color: color2 });
      }
    } else if (isXThreshold(series)) {
      scaledPoints.push({ x: scaleX(series.x), y: NaN, datum: { x: series.x, y: NaN }, series, color: color2 });
    }
    return scaledPoints;
  });
  return flatten(scaledSeriesX).sort((s1, s2) => s1.x - s2.x);
}
function getAllX(series) {
  const addDataXSet = /* @__PURE__ */ new Set();
  for (const { series: s2 } of series) {
    switch (s2.type) {
      case "bar":
      case "line":
        for (const d of s2.data) {
          addDataXSet.add(d.x);
        }
        break;
      case "threshold":
        if (isXThreshold(s2)) {
          addDataXSet.add(s2.x);
        }
        break;
    }
  }
  const allDataX = [];
  addDataXSet.forEach((x2) => allDataX.push(x2));
  return allDataX;
}
function flatten(arrays) {
  const merged = [];
  for (const array of arrays) {
    for (const item of array) {
      merged.push(item);
    }
  }
  return merged;
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/make-scaled-bar-groups.js
function makeScaledBarGroups(series, xScale, plotWidth, plotHeight, axis) {
  if (!xScale.isCategorical()) {
    return [];
  }
  return xScale.domain.map((x2) => {
    const scaledX = xScale.d3Scale(x2);
    const isValid2 = typeof scaledX !== "undefined" && isFinite(scaledX);
    return {
      x: x2,
      isValid: isValid2,
      hasData: series.some(({ series: series2 }) => {
        if (isYThreshold(series2)) {
          return true;
        }
        if (isXThreshold(series2)) {
          return false;
        }
        if (isDataSeries(series2)) {
          return series2.data.some((datum) => matchesX(datum.x, x2));
        }
        return false;
      }),
      position: axis === "x" ? {
        x: 0,
        y: isValid2 ? scaledX || 0 : 0,
        width: plotWidth,
        height: xScale.d3Scale.bandwidth()
      } : {
        x: isValid2 ? scaledX || 0 : 0,
        y: 0,
        width: xScale.d3Scale.bandwidth(),
        height: plotHeight
      }
    };
  });
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/format-highlighted.js
function formatHighlighted({ position, series, xTickFormatter, detailPopoverSeriesContent }) {
  const formattedPosition = xTickFormatter ? xTickFormatter(position) : position.toString();
  const details = [];
  series.forEach((s2) => {
    const detail = getSeriesDetail({ internalSeries: s2, targetX: position, detailPopoverSeriesContent });
    if (detail) {
      details.push(detail);
    }
  });
  return { position: formattedPosition, details };
}
function getSeriesDetail({ internalSeries, targetX, detailPopoverSeriesContent }) {
  var _a;
  const { series, color: color2 } = internalSeries;
  if (isXThreshold(series)) {
    return series.x === targetX ? {
      key: series.title,
      value: "",
      color: color2,
      markerType: "dashed"
    } : null;
  }
  if (isYThreshold(series)) {
    return {
      key: series.title,
      value: series.valueFormatter ? series.valueFormatter(series.y) : series.y,
      color: color2,
      markerType: "dashed"
    };
  }
  if (isDataSeries(series)) {
    for (const datum of series.data) {
      if (matchesX(targetX, datum.x)) {
        const customContent = detailPopoverSeriesContent ? detailPopoverSeriesContent({ series, x: targetX, y: datum.y }) : void 0;
        const hasSubItems = !!((_a = customContent === null || customContent === void 0 ? void 0 : customContent.subItems) === null || _a === void 0 ? void 0 : _a.length);
        const isExpandable = (customContent === null || customContent === void 0 ? void 0 : customContent.expandable) && hasSubItems;
        const isKeyString = typeof (customContent === null || customContent === void 0 ? void 0 : customContent.key) === "string";
        const key2 = (customContent === null || customContent === void 0 ? void 0 : customContent.key) && (!isExpandable || isKeyString) ? customContent.key : series.title;
        if ((customContent === null || customContent === void 0 ? void 0 : customContent.expandable) && !hasSubItems) {
          warnOnce("MixedLineBarChart", "`expandable` was set to `true` for a series without sub-items. This property will be ignored.");
        }
        if (isExpandable && !isKeyString) {
          warnOnce("MixedLineBarChart", "A ReactNode was used for the key of an expandable series. The series title will be used instead because nested interactive elements can cause accessiblity issues.");
        }
        if (!isKeyString && !isExpandable && (customContent === null || customContent === void 0 ? void 0 : customContent.value) && typeof customContent.value !== "string") {
          warnOnce("MixedLineBarChart", "Use a ReactNode for the key or the value of a series, but not for both. It is not recommended to use links for key and value at the same time.");
        }
        return {
          key: key2,
          value: (customContent === null || customContent === void 0 ? void 0 : customContent.value) || (series.valueFormatter ? series.valueFormatter(datum.y, targetX) : datum.y),
          color: color2,
          markerType: series.type === "line" ? "line" : "rectangle",
          subItems: customContent === null || customContent === void 0 ? void 0 : customContent.subItems,
          expandableId: isExpandable ? series.title : void 0
        };
      }
    }
  }
  return null;
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/data-series.js
var import_react143 = __toESM(require_react());

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/line-series.js
var import_react141 = __toESM(require_react());
function LineSeries({ axis, series, color: color2, xScale, yScale, chartAreaClipPath }) {
  var _a;
  const commonProps = { "aria-hidden": true, stroke: color2, clipPath: `url(#${chartAreaClipPath})` };
  if (series.type === "line") {
    const lineGenerator = line_default().x((d) => {
      let x2 = xScale.d3Scale(d.x) || 0;
      if (xScale.isCategorical()) {
        const offset = Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2;
        x2 += offset;
      }
      return x2;
    }).y((d) => yScale.d3Scale(d.y) || 0);
    const visibleData = series.data.filter(({ x: x2 }) => xScale.d3Scale(x2) !== void 0);
    return import_react141.default.createElement("path", Object.assign({}, commonProps, { d: lineGenerator(visibleData) || "" }));
  } else if (isYThreshold(series)) {
    const [x1, x2] = xScale.d3Scale.range();
    const y2 = yScale.d3Scale(series.y);
    const coordinates = axis === "x" ? { x1, x2, y1: y2, y2 } : { x1: y2, x2: y2, y1: x1, y2: x2 };
    return import_react141.default.createElement("line", Object.assign({}, commonProps, coordinates));
  } else if (isXThreshold(series)) {
    const [y1, y2] = yScale.d3Scale.range();
    const xOffset = xScale.isCategorical() ? Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2 : 0;
    const x2 = ((_a = xScale.d3Scale(series.x)) !== null && _a !== void 0 ? _a : NaN) + xOffset;
    const coordinates = axis === "x" ? { x1: x2, x2, y1, y2 } : { x1: y1, x2: y2, y1: x2, y2: x2 };
    return import_react141.default.createElement("line", Object.assign({}, commonProps, coordinates));
  } else {
    return null;
  }
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/bar-series.js
var import_react142 = __toESM(require_react());
function BarSeries({ axis, series, color: color2, xScale, yScale, highlighted, dimmed, highlightedGroupIndex, stackedBarOffsets, totalSeriesCount, seriesIndex, plotSize, chartAreaClipPath }) {
  const isRefresh = useVisualRefresh();
  const xCoordinates = (0, import_react142.useMemo)(() => {
    var _a;
    if (series.type !== "bar" || !xScale.isCategorical()) {
      return [];
    }
    const yContinuosScale = yScale.d3Scale;
    const xPoints = series.data.map(({ x: x2 }) => xScale.d3Scale(x2) || NaN);
    const zeroY = (_a = yScale.d3Scale(0)) !== null && _a !== void 0 ? _a : NaN;
    const baseY = isFinite(zeroY) ? Math.min(plotSize, zeroY) : plotSize;
    let barWidth = xScale.d3Scale.bandwidth();
    const PADDING = 4;
    const MINWIDTH = 4;
    if (!stackedBarOffsets && totalSeriesCount > 1) {
      barWidth = (barWidth - (totalSeriesCount - 1) * PADDING) / totalSeriesCount;
      barWidth = Math.max(barWidth, MINWIDTH);
    }
    return xPoints.map((x2, i) => {
      var _a2, _b;
      const d = series.data[i];
      let barX = x2;
      let yValue = d.y;
      if (stackedBarOffsets) {
        const offsetMap = d.y < 0 ? stackedBarOffsets.negativeOffsets : stackedBarOffsets.positiveOffsets;
        yValue = d.y + (offsetMap.get(getKeyValue(d.x)) || 0);
      } else if (totalSeriesCount > 1) {
        barX += seriesIndex * (barWidth + PADDING);
      }
      yValue = yValue < 0 ? yValue - d.y : yValue;
      return {
        x: barX,
        y: (_a2 = yContinuosScale(yValue)) !== null && _a2 !== void 0 ? _a2 : NaN,
        width: barWidth,
        height: Math.abs(((_b = yContinuosScale(d.y)) !== null && _b !== void 0 ? _b : NaN) - baseY)
      };
    });
  }, [series, xScale, yScale, plotSize, stackedBarOffsets, totalSeriesCount, seriesIndex]);
  const highlightedXValue = highlightedGroupIndex !== null ? xScale.domain[highlightedGroupIndex] : null;
  return import_react142.default.createElement("g", { "aria-label": series.title, clipPath: `url(#${chartAreaClipPath})`, className: clsx_m_default(styles_css_default47.series, styles_css_default47["series--bar"], {
    [styles_css_default47["series--highlighted"]]: highlighted,
    [styles_css_default47["series--dimmed"]]: dimmed
  }) }, xCoordinates.map(({ x: x2, y: y2, width, height }, i) => {
    if (!isFinite(x2) || !isFinite(height)) {
      return;
    }
    const baseHeightOffset = stackedBarOffsets ? 3 : 0;
    const isSmallBar = height < 4;
    const heightOffset = isSmallBar ? 0 : baseHeightOffset;
    const widthOffset = 2;
    const rx = isRefresh ? isSmallBar ? "2px" : "4px" : "0px";
    const className2 = clsx_m_default(styles_css_default47.series__rect, {
      [styles_css_default47["series--dimmed"]]: highlightedXValue !== null && !matchesX(highlightedXValue, series.data[i].x)
    });
    return axis === "x" ? import_react142.default.createElement("rect", { key: `bar-${i}`, fill: color2, x: x2 + widthOffset / 2, y: y2 + heightOffset / 2, width: width - widthOffset, height: height - heightOffset, rx, className: className2 }) : import_react142.default.createElement("rect", { key: `bar-${i}`, fill: color2, x: y2 - height + heightOffset / 2, y: x2 + widthOffset / 2, width: height - heightOffset, height: width - widthOffset, rx, className: className2 });
  }));
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/data-series.js
var STROKE_WIDTH = 2;
function DataSeries2({ axis, plotHeight, plotWidth, highlightedGroupIndex, highlightedSeries, stackedBars, isGroupNavigation, visibleSeries, xScale, yScale }) {
  const chartAreaClipPath = useUniqueId("awsui-mixed-line-bar-chart__chart-area-");
  const lineAreaClipPath = useUniqueId("awsui-line-chart__chart-area-");
  const stackedBarOffsetMaps = (0, import_react143.useMemo)(() => {
    if (!stackedBars) {
      return [];
    }
    const barData = [];
    visibleSeries.forEach(({ series }) => {
      if (series.type === "bar") {
        barData.push(series.data);
      }
    });
    return calculateOffsetMaps(barData);
  }, [visibleSeries, stackedBars]);
  return import_react143.default.createElement(
    import_react143.default.Fragment,
    null,
    import_react143.default.createElement(
      "defs",
      { "aria-hidden": "true" },
      import_react143.default.createElement(
        "clipPath",
        { id: chartAreaClipPath },
        import_react143.default.createElement("rect", { x: 0, y: 0, width: plotWidth, height: plotHeight })
      ),
      import_react143.default.createElement(
        "clipPath",
        { id: lineAreaClipPath },
        import_react143.default.createElement("rect", { x: 0, y: -STROKE_WIDTH / 2, width: plotWidth, height: plotHeight + STROKE_WIDTH })
      )
    ),
    import_react143.default.createElement("g", { "aria-hidden": isGroupNavigation ? true : void 0, role: "group" }, visibleSeries.map(({ series, color: color2 }, index) => {
      const isHighlighted = series === highlightedSeries;
      const isDimmed = !!highlightedSeries && !isHighlighted;
      switch (series.type) {
        case "line":
        case "threshold": {
          return import_react143.default.createElement(
            "g",
            { key: index, role: "group", "aria-label": series.title, className: clsx_m_default(styles_css_default47.series, styles_css_default47[`series--${series.type}`], {
              [styles_css_default47["series--highlighted"]]: isHighlighted,
              [styles_css_default47["series--dimmed"]]: isDimmed
            }) },
            import_react143.default.createElement(LineSeries, { axis, series, color: color2, xScale, yScale, chartAreaClipPath: lineAreaClipPath })
          );
        }
        case "bar":
          return import_react143.default.createElement(BarSeries, { key: index, axis, series, color: color2, totalSeriesCount: visibleSeries.filter((s2) => s2.series.type === "bar").length, seriesIndex: index, xScale, yScale, plotSize: axis === "y" ? plotWidth : plotHeight, highlighted: isHighlighted, dimmed: isDimmed, chartAreaClipPath, stackedBarOffsets: stackedBarOffsetMaps[index], highlightedGroupIndex });
      }
    }))
  );
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/bar-groups.js
var import_react144 = __toESM(require_react());
var OUTLINE_PADDING = 2;
function BarGroups({ ariaLabel, isRefresh, isPopoverPinned, barGroups, highlightedGroupIndex, highlightedGroupRef }) {
  return import_react144.default.createElement("g", { role: "group", "aria-hidden": "true" }, barGroups.map((group, index) => import_react144.default.createElement("rect", { key: index, x: Math.max(0, group.position.x - OUTLINE_PADDING), y: Math.max(0, group.position.y - OUTLINE_PADDING), width: group.position.width + 2 * OUTLINE_PADDING, height: group.position.height + 2 * OUTLINE_PADDING, ref: index === highlightedGroupIndex ? highlightedGroupRef : void 0, rx: isRefresh ? 4 : 2, role: "button", "aria-label": ariaLabel, "aria-haspopup": true, "aria-expanded": isPopoverPinned, fill: "none", className: styles_css_default47["bar-group"] })));
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/hooks/use-mouse-hover.js
var MAX_HOVER_MARGIN2 = 6;
var POPOVER_DEADZONE2 = 12;
function useMouseHover({ plotRef, popoverRef, scaledSeries, barGroups, highlightPoint, highlightGroup, clearHighlightedSeries, isGroupNavigation, isHandlersDisabled, highlightX }) {
  const isMouseOverPopover = (event) => {
    var _a;
    if ((_a = popoverRef.current) === null || _a === void 0 ? void 0 : _a.firstChild) {
      const popoverPosition = popoverRef.current.firstChild.getBoundingClientRect();
      if (event.clientX > popoverPosition.x - POPOVER_DEADZONE2 && event.clientX < popoverPosition.x + popoverPosition.width + POPOVER_DEADZONE2 && event.clientY > popoverPosition.y - POPOVER_DEADZONE2 && event.clientY < popoverPosition.y + popoverPosition.height + POPOVER_DEADZONE2) {
        return true;
      }
    }
    return false;
  };
  const onSeriesMouseMove = (event) => {
    var _a, _b;
    const svgRect = event.target.getBoundingClientRect();
    const offsetX = event.clientX - svgRect.left;
    const closestX = scaledSeries.map((v) => v.x).reduce((prev, curr) => Math.abs(curr - offsetX) < Math.abs(prev - offsetX) ? curr : prev, -Infinity);
    if (isFinite(closestX)) {
      const offsetY = event.clientY - svgRect.top;
      const closestY = scaledSeries.filter((v) => v.x === closestX || isYThreshold(v.series)).map((v) => v.y).reduce((prev, curr) => Math.abs(curr - offsetY) < Math.abs(prev - offsetY) ? curr : prev, -Infinity);
      if (isFinite(closestY) && Math.abs(offsetX - closestX) < MAX_HOVER_MARGIN2 && Math.abs(offsetY - closestY) < MAX_HOVER_MARGIN2) {
        const [{ color: color2, datum, series }] = scaledSeries.filter((s2) => (s2.x === closestX || isYThreshold(s2.series)) && s2.y === closestY);
        highlightPoint({ x: closestX, y: closestY, color: color2, datum, series });
      } else {
        let datumX = null;
        for (const point5 of scaledSeries) {
          if (point5.x === closestX) {
            datumX = (_b = (_a = point5.datum) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : null;
            break;
          }
        }
        highlightX({ scaledX: closestX, label: datumX });
      }
    }
  };
  const onGroupMouseMove = (event) => {
    const svgRect = event.target.getBoundingClientRect();
    const offsetX = event.clientX - svgRect.left;
    const offsetY = event.clientY - svgRect.top;
    for (let groupIndex = 0; groupIndex < barGroups.length; groupIndex++) {
      const { position: { x: x2, y: y2, width, height } } = barGroups[groupIndex];
      if (x2 <= offsetX && offsetX <= x2 + width && y2 <= offsetY && offsetY <= y2 + height) {
        highlightGroup(groupIndex);
        return;
      }
    }
    clearHighlightedSeries();
  };
  const onSVGMouseMove = (event) => {
    if (event.target === plotRef.current.svg && !isHandlersDisabled && !isMouseOverPopover(event)) {
      if (isGroupNavigation) {
        onGroupMouseMove(event);
      } else if (scaledSeries.length > 0) {
        onSeriesMouseMove(event);
      }
    }
  };
  const onSVGMouseOut = (event) => {
    if (isHandlersDisabled || isMouseOverPopover(event)) {
      return;
    }
    if (!nodeContains(plotRef.current.svg, event.relatedTarget) || event.relatedTarget && event.relatedTarget.classList.contains(styles_css_default47.series)) {
      highlightX(null);
      clearHighlightedSeries();
    }
  };
  const onPopoverLeave = (event) => {
    if (!isHandlersDisabled && nodeContains(plotRef.current.svg, event.relatedTarget)) {
      highlightX(null);
      clearHighlightedSeries();
    }
  };
  return { onSVGMouseMove, onSVGMouseOut, onPopoverLeave };
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/hooks/use-navigation.js
var import_react145 = __toESM(require_react());
function useNavigation({ series, visibleSeries, scaledSeries, barGroups, xScale, yScale, highlightedPoint, highlightedGroupIndex, highlightedSeries, isHandlersDisabled, pinPopover, highlightSeries, highlightGroup, highlightPoint, highlightX, verticalMarkerX }) {
  const [targetX, setTargetX] = (0, import_react145.useState)(null);
  const [xIndex, setXIndex] = (0, import_react145.useState)(0);
  const isGroupNavigation = (0, import_react145.useMemo)(() => visibleSeries.some(({ series: series2 }) => series2.type === "bar"), [visibleSeries]);
  const { navigableSeries } = (0, import_react145.useMemo)(() => findNavigableSeries(visibleSeries), [visibleSeries]);
  const containsMultipleSeries = navigableSeries.length > 1;
  const onBarGroupFocus = () => {
    const groupIndex = highlightedGroupIndex !== null && highlightedGroupIndex !== void 0 ? highlightedGroupIndex : 0;
    setTargetX(xScale.domain[groupIndex]);
    highlightGroup(groupIndex);
  };
  const onLineFocus = () => {
    if (verticalMarkerX === null) {
      if (containsMultipleSeries) {
        moveToLineGroupIndex(0);
      } else {
        moveBetweenSeries(0);
      }
    }
  };
  const onFocus = () => {
    if (isGroupNavigation) {
      onBarGroupFocus();
    } else {
      onLineFocus();
    }
  };
  const allUniqueX = (0, import_react145.useMemo)(() => {
    const result = [];
    for (let i = 0; i < scaledSeries.length; i += 1) {
      const point5 = scaledSeries[i];
      if (point5 !== void 0 && (!result.length || result[result.length - 1].scaledX !== point5.x)) {
        result.push({ scaledX: point5.x, datum: point5.datum });
      }
    }
    return result;
  }, [scaledSeries]);
  const moveBetweenSeries = (0, import_react145.useCallback)((direction) => {
    var _a, _b, _c, _d;
    if (isGroupNavigation) {
      return;
    }
    const xOffset = xScale.isCategorical() ? Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2 : 0;
    const MAX_SERIES_INDEX = navigableSeries.length - 1;
    let previousSeriesIndex = -1;
    if (highlightedSeries) {
      previousSeriesIndex = navigableSeries.indexOf(highlightedSeries);
    }
    const firstPossibleIndex = containsMultipleSeries ? -1 : 0;
    let nextSeriesIndex = 0;
    if (previousSeriesIndex !== null) {
      nextSeriesIndex = previousSeriesIndex + direction;
      if (nextSeriesIndex > MAX_SERIES_INDEX) {
        nextSeriesIndex = firstPossibleIndex;
      } else if (nextSeriesIndex < firstPossibleIndex) {
        nextSeriesIndex = MAX_SERIES_INDEX;
      }
    }
    if (nextSeriesIndex === -1) {
      highlightSeries(null);
      highlightPoint(null);
      return;
    }
    const nextSeries = navigableSeries[nextSeriesIndex];
    const nextInternalSeries = series.filter(({ series: series2 }) => series2 === nextSeries)[0];
    let targetXPoint = ((_a = xScale.d3Scale(targetX)) !== null && _a !== void 0 ? _a : NaN) + xOffset;
    if (!isFinite(targetXPoint)) {
      targetXPoint = 0;
    }
    if (nextSeries.type === "line") {
      const nextScaledSeries = scaledSeries.filter((it) => it.series === nextSeries);
      const closestNextSeriesPoint = nextScaledSeries.reduce((prev, curr) => Math.abs(curr.x - targetXPoint) < Math.abs(prev.x - targetXPoint) ? curr : prev, { x: -Infinity, y: -Infinity });
      highlightPoint(Object.assign(Object.assign({}, closestNextSeriesPoint), { color: nextInternalSeries.color, series: nextSeries }));
    } else if (isYThreshold(nextSeries)) {
      const scaledTargetIndex = scaledSeries.map((it) => {
        var _a2;
        return ((_a2 = it.datum) === null || _a2 === void 0 ? void 0 : _a2.x) || null;
      }).indexOf(targetX);
      highlightPoint({
        x: targetXPoint,
        y: (_b = yScale.d3Scale(nextSeries.y)) !== null && _b !== void 0 ? _b : NaN,
        color: nextInternalSeries.color,
        series: nextSeries,
        datum: (_c = scaledSeries[scaledTargetIndex]) === null || _c === void 0 ? void 0 : _c.datum
      });
    } else if (isXThreshold(nextSeries)) {
      highlightPoint({
        x: (_d = xScale.d3Scale(nextSeries.x)) !== null && _d !== void 0 ? _d : NaN,
        y: yScale.d3Scale.range()[0],
        color: nextInternalSeries.color,
        series: nextSeries,
        datum: { x: nextSeries.x, y: NaN }
      });
    }
  }, [
    isGroupNavigation,
    xScale,
    navigableSeries,
    highlightedSeries,
    containsMultipleSeries,
    highlightSeries,
    highlightPoint,
    series,
    targetX,
    scaledSeries,
    yScale
  ]);
  const moveWithinSeries = (0, import_react145.useCallback)((direction) => {
    var _a;
    const series2 = highlightedSeries || visibleSeries[0].series;
    if (series2.type === "line" || isYThreshold(series2)) {
      const targetScaledSeries = scaledSeries.filter((it) => it.series === series2);
      const previousPoint = highlightedPoint || targetScaledSeries[0];
      const indexOfPreviousPoint = targetScaledSeries.map((it) => it.x).indexOf(previousPoint.x);
      const nextPointIndex = circleIndex2(indexOfPreviousPoint + direction, [0, targetScaledSeries.length - 1]);
      const nextPoint = targetScaledSeries[nextPointIndex];
      setTargetX(((_a = nextPoint.datum) === null || _a === void 0 ? void 0 : _a.x) || null);
      setXIndex(nextPointIndex);
      highlightPoint(nextPoint);
    } else if (series2.type === "bar") {
      const xDomain = xScale.domain;
      const MAX_GROUP_INDEX = xDomain.length - 1;
      let nextGroupIndex = 0;
      if (highlightedGroupIndex !== null) {
        nextGroupIndex = highlightedGroupIndex + direction;
        if (nextGroupIndex > MAX_GROUP_INDEX) {
          nextGroupIndex = 0;
        } else if (nextGroupIndex < 0) {
          nextGroupIndex = MAX_GROUP_INDEX;
        }
      }
      const nextDomainIndex = nextValidDomainIndex(nextGroupIndex, barGroups, direction);
      setTargetX(xDomain[nextDomainIndex]);
      highlightGroup(nextDomainIndex);
    }
  }, [
    highlightedSeries,
    visibleSeries,
    scaledSeries,
    highlightedPoint,
    highlightPoint,
    xScale.domain,
    highlightedGroupIndex,
    barGroups,
    highlightGroup
  ]);
  const moveToLineGroupIndex = (0, import_react145.useCallback)((index) => {
    var _a, _b, _c, _d;
    const point5 = allUniqueX[index];
    setXIndex(index);
    setTargetX(((_a = point5.datum) === null || _a === void 0 ? void 0 : _a.x) || null);
    highlightX({ scaledX: (_b = point5 === null || point5 === void 0 ? void 0 : point5.scaledX) !== null && _b !== void 0 ? _b : null, label: (_d = (_c = point5.datum) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : null });
  }, [allUniqueX, highlightX]);
  const moveWithinXAxis = (0, import_react145.useCallback)((direction) => {
    if (highlightedSeries || isGroupNavigation) {
      moveWithinSeries(direction);
    } else {
      const nextPointGroupIndex = circleIndex2(xIndex + direction, [0, allUniqueX.length - 1]);
      moveToLineGroupIndex(nextPointGroupIndex);
    }
  }, [highlightedSeries, isGroupNavigation, moveWithinSeries, xIndex, allUniqueX.length, moveToLineGroupIndex]);
  const onKeyDown = (0, import_react145.useCallback)((event) => {
    const keyCode = event.keyCode;
    if (keyCode !== KeyCode.up && keyCode !== KeyCode.right && keyCode !== KeyCode.down && keyCode !== KeyCode.left && keyCode !== KeyCode.space && keyCode !== KeyCode.enter) {
      return;
    }
    event.preventDefault();
    if (isHandlersDisabled) {
      return;
    }
    if (keyCode === KeyCode.down || keyCode === KeyCode.up) {
      moveBetweenSeries(keyCode === KeyCode.down ? 1 : -1);
    } else if (keyCode === KeyCode.left || keyCode === KeyCode.right) {
      moveWithinXAxis(keyCode === KeyCode.right ? 1 : -1);
    } else if (keyCode === KeyCode.enter || keyCode === KeyCode.space) {
      pinPopover();
    }
  }, [isHandlersDisabled, moveBetweenSeries, moveWithinXAxis, pinPopover]);
  return { isGroupNavigation, onFocus, onKeyDown, xIndex };
}
function circleIndex2(index, [from, to]) {
  if (index < from) {
    return to;
  }
  if (index > to) {
    return from;
  }
  return index;
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/hooks/use-popover.js
var import_react146 = __toESM(require_react());
function usePopover() {
  const [state, setState] = (0, import_react146.useState)("closed");
  const isPopoverOpen = state !== "closed";
  const isPopoverPinned = state === "pinned";
  const showPopover = (0, import_react146.useCallback)(() => setState("open"), []);
  const pinPopover = (0, import_react146.useCallback)(() => setState("pinned"), []);
  const dismissPopover = (0, import_react146.useCallback)(() => setState("closed"), []);
  return { isPopoverOpen, isPopoverPinned, showPopover, pinPopover, dismissPopover };
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/chart-container.js
var LEFT_LABELS_MARGIN2 = 16;
var BOTTOM_LABELS_OFFSET2 = 12;
var fallbackContainerWidth = 500;
function ChartContainer2(_a) {
  var _b, _c;
  var { fitHeight, height: explicitPlotHeight, series, visibleSeries, highlightedSeries, onHighlightChange, highlightedPoint, setHighlightedPoint, highlightedGroupIndex, setHighlightedGroupIndex, detailPopoverFooter, detailPopoverSize = "medium", stackedBars = false, horizontalBars = false, xScaleType, yScaleType, xTickFormatter, yTickFormatter, emphasizeBaselineAxis, xTitle, yTitle, ariaLabel, ariaLabelledby, ariaDescription, i18nStrings = {}, detailPopoverSeriesContent } = _a, props = __rest(_a, ["fitHeight", "height", "series", "visibleSeries", "highlightedSeries", "onHighlightChange", "highlightedPoint", "setHighlightedPoint", "highlightedGroupIndex", "setHighlightedGroupIndex", "detailPopoverFooter", "detailPopoverSize", "stackedBars", "horizontalBars", "xScaleType", "yScaleType", "xTickFormatter", "yTickFormatter", "emphasizeBaselineAxis", "xTitle", "yTitle", "ariaLabel", "ariaLabelledby", "ariaDescription", "i18nStrings", "detailPopoverSeriesContent"]);
  const plotRef = (0, import_react147.useRef)(null);
  const verticalMarkerRef = (0, import_react147.useRef)(null);
  const [leftLabelsWidth, setLeftLabelsWidth] = (0, import_react147.useState)(0);
  const [verticalMarkerX, setVerticalMarkerX] = (0, import_react147.useState)(null);
  const [detailsPopoverText, setDetailsPopoverText] = (0, import_react147.useState)("");
  const [containerWidth, containerMeasureRef] = useContainerWidth(fallbackContainerWidth);
  const maxLeftLabelsWidth = Math.round(containerWidth / 2);
  const plotWidth = containerWidth ? (
    // Calculate the minimum between leftLabelsWidth and maxLeftLabelsWidth for extra safety because leftLabelsWidth could be out of date
    Math.max(0, containerWidth - Math.min(leftLabelsWidth, maxLeftLabelsWidth) - LEFT_LABELS_MARGIN2)
  ) : fallbackContainerWidth;
  const containerRefObject = (0, import_react147.useRef)(null);
  const containerRef = useMergeRefs(containerMeasureRef, containerRefObject);
  const popoverRef = (0, import_react147.useRef)(null);
  const xDomain = props.xDomain || computeDomainX2(series, xScaleType);
  const yDomain = props.yDomain || computeDomainY2(series, yScaleType, stackedBars);
  const linesOnly = series.every(({ series: series2 }) => series2.type === "line" || series2.type === "threshold");
  function getXAxisProps(size, range3) {
    const tickCount = getXTickCount(size);
    const scale = new ChartScale(xScaleType, xDomain, range3, linesOnly);
    const ticks2 = createXTicks(scale, tickCount);
    return {
      axis: "x",
      tickCount,
      scale,
      ticks: ticks2,
      tickFormatter: xTickFormatter,
      title: xTitle,
      ariaRoleDescription: i18nStrings.xAxisAriaRoleDescription
    };
  }
  function getYAxisProps(size, range3) {
    const tickCount = getYTickCount(size);
    const scale = new NumericChartScale(yScaleType, yDomain, range3, props.yDomain ? null : tickCount);
    const ticks2 = createYTicks(scale, tickCount);
    return {
      axis: "y",
      tickCount,
      scale,
      ticks: ticks2,
      tickFormatter: yTickFormatter,
      title: yTitle,
      ariaRoleDescription: i18nStrings.yAxisAriaRoleDescription
    };
  }
  const bottomAxisProps = !horizontalBars ? getXAxisProps(plotWidth, [0, plotWidth]) : getYAxisProps(plotWidth, [0, plotWidth]);
  const bottomLabelsProps = useBottomLabels(Object.assign({}, bottomAxisProps));
  const plotMeasureRef = (0, import_react147.useRef)(null);
  const measuredHeight = useHeightMeasure(() => plotMeasureRef.current, !fitHeight);
  const plotHeight = fitHeight ? measuredHeight !== null && measuredHeight !== void 0 ? measuredHeight : 0 : explicitPlotHeight;
  const leftAxisProps = !horizontalBars ? getYAxisProps(plotHeight, [plotHeight, 0]) : getXAxisProps(plotHeight, [0, plotHeight]);
  const xAxisProps = bottomAxisProps.axis === "x" ? bottomAxisProps : leftAxisProps.axis === "x" ? leftAxisProps : null;
  const yAxisProps = bottomAxisProps.axis === "y" ? bottomAxisProps : leftAxisProps.axis === "y" ? leftAxisProps : null;
  if (!xAxisProps || !yAxisProps) {
    throw new Error("Invariant violation: invalid axis props.");
  }
  const highlightedPointRef = (0, import_react147.useRef)(null);
  const highlightedGroupRef = (0, import_react147.useRef)(null);
  const x2 = !horizontalBars ? "x" : "y";
  const y2 = !horizontalBars ? "y" : "x";
  const scaledSeries = makeScaledSeries(visibleSeries, xAxisProps.scale, yAxisProps.scale);
  const barGroups = makeScaledBarGroups(visibleSeries, xAxisProps.scale, plotWidth, plotHeight, y2);
  const { isPopoverOpen, isPopoverPinned, showPopover, pinPopover, dismissPopover } = usePopover();
  const [isHandlersDisabled, setHandlersDisabled] = (0, import_react147.useState)(!isPopoverPinned);
  (0, import_react147.useEffect)(() => {
    if (isPopoverPinned) {
      setHandlersDisabled(true);
    } else {
      const timeoutId = setTimeout(() => setHandlersDisabled(false), 25);
      return () => clearTimeout(timeoutId);
    }
  }, [isPopoverPinned]);
  const highlightSeries = (0, import_react147.useCallback)((series2) => {
    if (series2 !== highlightedSeries) {
      onHighlightChange(series2);
    }
  }, [highlightedSeries, onHighlightChange]);
  const highlightPoint = (0, import_react147.useCallback)((point6) => {
    var _a2, _b2;
    setHighlightedGroupIndex(null);
    setHighlightedPoint(point6);
    if (point6) {
      highlightSeries(point6.series);
      setVerticalMarkerX({
        scaledX: point6.x,
        label: (_b2 = (_a2 = point6.datum) === null || _a2 === void 0 ? void 0 : _a2.x) !== null && _b2 !== void 0 ? _b2 : null
      });
    }
  }, [setHighlightedGroupIndex, setHighlightedPoint, highlightSeries]);
  const clearAllHighlights = (0, import_react147.useCallback)(() => {
    setHighlightedPoint(null);
    highlightSeries(null);
    setHighlightedGroupIndex(null);
  }, [highlightSeries, setHighlightedGroupIndex, setHighlightedPoint]);
  const highlightX = (0, import_react147.useCallback)((marker) => {
    if (marker) {
      clearAllHighlights();
    }
    setVerticalMarkerX(marker);
  }, [clearAllHighlights]);
  const highlightGroup = (0, import_react147.useCallback)((groupIndex) => {
    highlightSeries(null);
    setHighlightedPoint(null);
    setHighlightedGroupIndex(groupIndex);
  }, [highlightSeries, setHighlightedPoint, setHighlightedGroupIndex]);
  const clearHighlightedSeries = (0, import_react147.useCallback)(() => {
    clearAllHighlights();
    dismissPopover();
  }, [dismissPopover, clearAllHighlights]);
  const _d = useNavigation({
    series,
    visibleSeries,
    scaledSeries,
    barGroups,
    xScale: xAxisProps.scale,
    yScale: yAxisProps.scale,
    highlightedPoint,
    highlightedGroupIndex,
    highlightedSeries,
    isHandlersDisabled,
    pinPopover,
    highlightSeries,
    highlightGroup,
    highlightPoint,
    highlightX,
    clearHighlightedSeries,
    verticalMarkerX
  }), { isGroupNavigation } = _d, handlers = __rest(_d, ["isGroupNavigation"]);
  const { onSVGMouseMove, onSVGMouseOut, onPopoverLeave } = useMouseHover({
    scaledSeries,
    barGroups,
    plotRef,
    popoverRef,
    highlightPoint,
    highlightGroup,
    clearHighlightedSeries,
    isGroupNavigation,
    isHandlersDisabled,
    highlightX
  });
  const highlightedX = (0, import_react147.useMemo)(() => {
    var _a2, _b2;
    if (highlightedGroupIndex !== null) {
      return barGroups[highlightedGroupIndex].x;
    }
    if (verticalMarkerX !== null) {
      return verticalMarkerX.label;
    }
    return (_b2 = (_a2 = highlightedPoint === null || highlightedPoint === void 0 ? void 0 : highlightedPoint.datum) === null || _a2 === void 0 ? void 0 : _a2.x) !== null && _b2 !== void 0 ? _b2 : null;
  }, [highlightedPoint, verticalMarkerX, highlightedGroupIndex, barGroups]);
  (0, import_react147.useEffect)(() => {
    const onKeyDown = (event) => {
      if (event.key === "Escape") {
        dismissPopover();
      }
    };
    document.addEventListener("keydown", onKeyDown);
    return () => document.removeEventListener("keydown", onKeyDown);
  }, [dismissPopover]);
  (0, import_react147.useLayoutEffect)(() => {
    if (highlightedX !== null || highlightedPoint !== null) {
      showPopover();
    }
  }, [highlightedX, highlightedPoint, showPopover]);
  const onPopoverDismiss = (outsideClick) => {
    dismissPopover();
    if (!outsideClick) {
      setTimeout(() => {
        var _a2, _b2;
        const isSomeElementHighlighted = !!(highlightedPoint || highlightedGroupIndex !== null || verticalMarkerX);
        if (isSomeElementHighlighted) {
          (_a2 = plotRef.current) === null || _a2 === void 0 ? void 0 : _a2.focusApplication();
        } else {
          (_b2 = plotRef.current) === null || _b2 === void 0 ? void 0 : _b2.focusPlot();
        }
      }, 0);
    } else {
      clearAllHighlights();
      setVerticalMarkerX(null);
    }
  };
  const onSVGClick = (e) => {
    if (isPopoverOpen) {
      if (isPopoverPinned) {
        dismissPopover();
      } else {
        pinPopover();
        e.preventDefault();
      }
    } else {
      showPopover();
    }
  };
  const onApplicationFocus = (event, trigger) => {
    if (trigger === "keyboard") {
      handlers.onFocus();
    } else {
    }
  };
  const onApplicationBlur = (event) => {
    const blurTarget = event.relatedTarget || event.target;
    if (blurTarget === null || !(blurTarget instanceof Element) || !nodeBelongs(containerRefObject.current, blurTarget)) {
      clearHighlightedSeries();
      setVerticalMarkerX(null);
      if (isPopoverOpen && !isPopoverPinned) {
        dismissPopover();
      }
    }
  };
  const onSVGKeyDown = handlers.onKeyDown;
  const xOffset = xAxisProps.scale.isCategorical() ? Math.max(0, xAxisProps.scale.d3Scale.bandwidth() - 1) / 2 : 0;
  let verticalLineX = null;
  if (verticalMarkerX !== null) {
    verticalLineX = verticalMarkerX.scaledX;
  } else if (isGroupNavigation && highlightedGroupIndex !== null) {
    const x3 = (_b = xAxisProps.scale.d3Scale(barGroups[highlightedGroupIndex].x)) !== null && _b !== void 0 ? _b : null;
    if (x3 !== null) {
      verticalLineX = xOffset + x3;
    }
  }
  const point5 = (0, import_react147.useMemo)(() => highlightedPoint ? {
    key: `${highlightedPoint.x}-${highlightedPoint.y}`,
    x: highlightedPoint.x,
    y: highlightedPoint.y,
    color: highlightedPoint.color
  } : null, [highlightedPoint]);
  const verticalMarkers = (0, import_react147.useMemo)(() => verticalLineX !== null ? scaledSeries.filter(({ x: x3, y: y3 }) => (x3 === verticalLineX || isNaN(x3)) && !isNaN(y3)).map(({ x: x3, y: y3, color: color2 }, index) => ({
    key: `${index}-${x3}-${y3}`,
    x: !horizontalBars ? verticalLineX || 0 : y3,
    y: !horizontalBars ? y3 : verticalLineX || 0,
    color: color2
  })) : [], [scaledSeries, verticalLineX, horizontalBars]);
  const highlightedElementRef = isGroupNavigation ? highlightedGroupRef : highlightedPoint ? highlightedPointRef : verticalMarkerRef;
  const highlightDetails = (0, import_react147.useMemo)(() => {
    if (highlightedX === null) {
      return null;
    }
    if (highlightedPoint) {
      const seriesToShow = visibleSeries.filter((series2) => series2.series === (highlightedPoint === null || highlightedPoint === void 0 ? void 0 : highlightedPoint.series) || isXThreshold(series2.series));
      return formatHighlighted({
        position: highlightedX,
        series: seriesToShow,
        xTickFormatter,
        detailPopoverSeriesContent
      });
    }
    return formatHighlighted({
      position: highlightedX,
      series: visibleSeries,
      xTickFormatter,
      detailPopoverSeriesContent
    });
  }, [highlightedX, highlightedPoint, visibleSeries, xTickFormatter, detailPopoverSeriesContent]);
  const detailPopoverFooterContent = (0, import_react147.useMemo)(() => detailPopoverFooter && highlightedX ? detailPopoverFooter(highlightedX) : null, [detailPopoverFooter, highlightedX]);
  const activeAriaLabel = highlightDetails && detailsPopoverText ? `${highlightDetails.position}, ${detailsPopoverText}` : "";
  const activeLiveRegion = activeAriaLabel && !highlightedPoint && highlightedGroupIndex === null ? activeAriaLabel : "";
  const isLineXKeyboardFocused = !highlightedPoint && verticalMarkerX;
  const isRefresh = useVisualRefresh();
  return import_react147.default.createElement(CartesianChartContainer, { ref: containerRef, minHeight: explicitPlotHeight + bottomLabelsProps.height, fitHeight: !!fitHeight, leftAxisLabel: import_react147.default.createElement(axis_label_default, { axis: y2, position: "left", title: leftAxisProps.title }), leftAxisLabelMeasure: import_react147.default.createElement(labels_measure_default, { ticks: leftAxisProps.ticks, scale: leftAxisProps.scale, tickFormatter: leftAxisProps.tickFormatter, autoWidth: setLeftLabelsWidth, maxLabelsWidth: maxLeftLabelsWidth }), bottomAxisLabel: import_react147.default.createElement(axis_label_default, { axis: x2, position: "bottom", title: bottomAxisProps.title }), chartPlot: import_react147.default.createElement(
    chart_plot_default,
    { ref: plotRef, width: "100%", height: fitHeight ? `calc(100% - ${bottomLabelsProps.height}px)` : plotHeight, offsetBottom: bottomLabelsProps.height, isClickable: isPopoverOpen && !isPopoverPinned, ariaLabel, ariaLabelledby, ariaDescription, ariaRoleDescription: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.chartAriaRoleDescription, ariaLiveRegion: activeLiveRegion, activeElementRef: highlightedElementRef, activeElementKey: (_c = highlightedGroupIndex === null || highlightedGroupIndex === void 0 ? void 0 : highlightedGroupIndex.toString()) !== null && _c !== void 0 ? _c : isLineXKeyboardFocused ? `point-index-${handlers.xIndex}` : point5 === null || point5 === void 0 ? void 0 : point5.key, activeElementFocusOffset: isGroupNavigation ? 0 : isLineXKeyboardFocused ? { x: 8, y: 0 } : 3, onMouseMove: onSVGMouseMove, onMouseOut: onSVGMouseOut, onClick: onSVGClick, onApplicationFocus, onApplicationBlur, onKeyDown: onSVGKeyDown },
    import_react147.default.createElement("line", { ref: plotMeasureRef, x1: "0", x2: "0", y1: "0", y2: "100%", stroke: "transparent", strokeWidth: 1, style: { pointerEvents: "none" } }),
    import_react147.default.createElement(left_labels_default, { axis: y2, ticks: leftAxisProps.ticks, scale: leftAxisProps.scale, tickFormatter: leftAxisProps.tickFormatter, title: leftAxisProps.title, ariaRoleDescription: leftAxisProps.ariaRoleDescription, maxLabelsWidth: maxLeftLabelsWidth, plotWidth, plotHeight }),
    horizontalBars && import_react147.default.createElement(vertical_grid_lines_default, { scale: yAxisProps.scale, ticks: yAxisProps.ticks, height: plotHeight }),
    emphasizeBaselineAxis && linesOnly && import_react147.default.createElement(emphasized_baseline_default, { axis: x2, scale: yAxisProps.scale, width: plotWidth, height: plotHeight }),
    import_react147.default.createElement(DataSeries2, { axis: x2, plotWidth, plotHeight, highlightedSeries: highlightedSeries !== null && highlightedSeries !== void 0 ? highlightedSeries : null, highlightedGroupIndex, stackedBars, isGroupNavigation, visibleSeries, xScale: xAxisProps.scale, yScale: yAxisProps.scale }),
    emphasizeBaselineAxis && !linesOnly && import_react147.default.createElement(emphasized_baseline_default, { axis: x2, scale: yAxisProps.scale, width: plotWidth, height: plotHeight }),
    import_react147.default.createElement(vertical_marker_default, { key: verticalLineX || "", height: plotHeight, showPoints: highlightedPoint === null, showLine: !isGroupNavigation, points: verticalMarkers, ref: verticalMarkerRef }),
    highlightedPoint && import_react147.default.createElement(highlighted_point_default, { ref: highlightedPointRef, point: point5, role: "button", ariaLabel: activeAriaLabel, ariaHasPopup: true, ariaExpanded: isPopoverPinned }),
    isGroupNavigation && xAxisProps.scale.isCategorical() && import_react147.default.createElement(BarGroups, { ariaLabel: activeAriaLabel, isRefresh, isPopoverPinned, barGroups, highlightedGroupIndex, highlightedGroupRef }),
    import_react147.default.createElement(bottom_labels_default, Object.assign({}, bottomLabelsProps, { axis: x2, scale: bottomAxisProps.scale, title: bottomAxisProps.title, ariaRoleDescription: bottomAxisProps.ariaRoleDescription, height: plotHeight, width: plotWidth, offsetLeft: leftLabelsWidth + BOTTOM_LABELS_OFFSET2, offsetRight: BOTTOM_LABELS_OFFSET2 }))
  ), popover: import_react147.default.createElement(chart_popover_default2, { ref: popoverRef, containerRef: containerRefObject, trackRef: highlightedElementRef, isOpen: isPopoverOpen, isPinned: isPopoverPinned, highlightDetails, onDismiss: onPopoverDismiss, size: detailPopoverSize, footer: detailPopoverFooterContent, dismissAriaLabel: i18nStrings.detailPopoverDismissAriaLabel, onMouseLeave: onPopoverLeave, onBlur: onApplicationBlur, setPopoverText: setDetailsPopoverText }) });
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/internal.js
function InternalMixedLineBarChart(_a) {
  var { fitHeight, height, xScaleType, yScaleType, xDomain, yDomain, xTickFormatter, yTickFormatter, highlightedSeries: controlledHighlightedSeries, visibleSeries: controlledVisibleSeries, series: externalSeries, onFilterChange, onHighlightChange: controlledOnHighlightChange, i18nStrings, ariaLabel, ariaLabelledby, ariaDescription, xTitle, yTitle, stackedBars, horizontalBars, hideFilter, additionalFilters, hideLegend, legendTitle, statusType, detailPopoverSize, detailPopoverFooter, detailPopoverSeriesContent, emphasizeBaselineAxis, empty, noMatch, errorText, loadingText, recoveryText, onRecoveryClick, __internalRootRef = null } = _a, props = __rest(_a, ["fitHeight", "height", "xScaleType", "yScaleType", "xDomain", "yDomain", "xTickFormatter", "yTickFormatter", "highlightedSeries", "visibleSeries", "series", "onFilterChange", "onHighlightChange", "i18nStrings", "ariaLabel", "ariaLabelledby", "ariaDescription", "xTitle", "yTitle", "stackedBars", "horizontalBars", "hideFilter", "additionalFilters", "hideLegend", "legendTitle", "statusType", "detailPopoverSize", "detailPopoverFooter", "detailPopoverSeriesContent", "emphasizeBaselineAxis", "empty", "noMatch", "errorText", "loadingText", "recoveryText", "onRecoveryClick", "__internalRootRef"]);
  const baseProps = getBaseProps(props);
  const containerRef = (0, import_react148.useRef)(null);
  (0, import_react148.useEffect)(() => {
    const gotBarSeries = externalSeries.some((s2) => s2.type === "bar");
    const gotLineSeries = externalSeries.some((s2) => s2.type === "line");
    if (xScaleType !== "categorical" && gotBarSeries) {
      warnOnce("MixedLineBarChart", `Bar series cannot be used with a ${xScaleType} scale. Use a categorical x axis instead.`);
    }
    if (horizontalBars && gotLineSeries) {
      warnOnce("MixedLineBarChart", `Property horizontalBars can only be used with charts that contain only bar or threshold series.`);
    }
    for (const s2 of externalSeries) {
      if (s2.type === "threshold" && s2.x !== void 0 && s2.y !== void 0) {
        warnOnce("MixedLineBarChart", `Series of type "threshold" must contain either x or y property.`);
      }
      if (s2.type === "threshold" && s2.x === void 0 && s2.y === void 0) {
        warnOnce("MixedLineBarChart", `Series of type "threshold" must contain either x or y property.`);
      }
    }
  }, [xScaleType, horizontalBars, externalSeries]);
  const series = (0, import_react148.useMemo)(() => {
    const colors = createCategoryColorScale(externalSeries, (it) => isYThreshold(it) || isXThreshold(it), (it) => it.color || null);
    return externalSeries.map((s2, i) => ({ index: i, color: colors[i], series: s2 }));
  }, [externalSeries]);
  const [highlightedPoint, setHighlightedPoint] = (0, import_react148.useState)(null);
  const [highlightedGroupIndex, setHighlightedGroupIndex] = (0, import_react148.useState)(null);
  const [highlightedSeries = null, setHighlightedSeries] = useControllable(controlledHighlightedSeries, controlledOnHighlightChange, null, {
    componentName: "MixedLineBarChart",
    controlledProp: "highlightedSeries",
    changeHandler: "onHighlightChange"
  });
  const [legendSeries, setLegendSeries] = (0, import_react148.useState)(highlightedSeries);
  (0, import_react148.useEffect)(() => {
    setLegendSeries(controlledHighlightedSeries || null);
  }, [controlledHighlightedSeries]);
  const [externalVisibleSeries, setExternalVisibleSeries] = useControllable(controlledVisibleSeries, onFilterChange, externalSeries, {
    componentName: "MixedLineBarChart",
    controlledProp: "visibleSeries",
    changeHandler: "onFilterChange"
  });
  if (isDevelopment) {
    const previousSeries = usePrevious(externalSeries);
    const hasPrevious = !!(previousSeries && previousSeries.length);
    const hasCurrent = !!externalSeries.length;
    if (hasPrevious && hasCurrent && externalSeries !== previousSeries && !controlledVisibleSeries && !hideFilter) {
      warnOnce("MixedLineBarChart", "The `series` value passed into the component changed. This may cause problems with filtering - we recommend that you make the `series` value constant, or provide a `visibleSeries` value that derives from the current `series` value.");
    }
  }
  const visibleSeries = (0, import_react148.useMemo)(() => series.filter((s2) => (externalVisibleSeries === null || externalVisibleSeries === void 0 ? void 0 : externalVisibleSeries.indexOf(s2.series)) !== -1), [series, externalVisibleSeries]);
  const filterChange = (selectedSeries) => {
    setExternalVisibleSeries(selectedSeries);
    fireNonCancelableEvent(onFilterChange, {
      visibleSeries: selectedSeries
    });
  };
  const onHighlightChange = (series2) => {
    setHighlightedSeries(series2);
    fireNonCancelableEvent(controlledOnHighlightChange, {
      highlightedSeries: series2
    });
    setLegendSeries(series2);
  };
  const onBlur = (event) => {
    if (event.relatedTarget && !nodeBelongs(containerRef.current, event.relatedTarget)) {
      highlightedSeries && onHighlightChange(highlightedSeries);
      setHighlightedPoint(null);
      setHighlightedGroupIndex(null);
      setLegendSeries(null);
    }
  };
  const { isEmpty, isNoMatch, showChart } = getChartStatus({
    externalData: externalSeries,
    visibleData: visibleSeries || [],
    statusType
  });
  const showFilters = statusType === "finished" && (!isEmpty || isNoMatch) && (additionalFilters || !hideFilter);
  const showLegend = !hideLegend && !isEmpty && statusType === "finished";
  const reserveLegendSpace = !showChart && !hideLegend;
  const reserveFilterSpace = !showChart && !isNoMatch && (!hideFilter || additionalFilters);
  const mergedRef = useMergeRefs(containerRef, __internalRootRef);
  const filterItems = series.map(({ series: series2, color: color2 }) => ({
    label: series2.title,
    type: chartLegendMap[series2.type],
    color: color2,
    datum: series2
  }));
  return import_react148.default.createElement(ChartWrapper, Object.assign({ ref: mergedRef }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default47.root), fitHeight: !!fitHeight, contentMinHeight: height, defaultFilter: showFilters && !hideFilter ? import_react148.default.createElement(chart_filter_default, { series: filterItems, onChange: filterChange, selectedSeries: externalVisibleSeries || [], i18nStrings }) : null, additionalFilters: showFilters ? additionalFilters : null, reserveFilterSpace: !!reserveFilterSpace, reserveLegendSpace: !!reserveLegendSpace, chartStatus: import_react148.default.createElement(ChartStatusContainer, { isEmpty, isNoMatch, showChart, statusType, empty, noMatch, loadingText, errorText, recoveryText, onRecoveryClick }), chart: showChart ? import_react148.default.createElement(ChartContainer2, { fitHeight, height, xScaleType, yScaleType, xDomain, yDomain, xTickFormatter: xTickFormatter !== null && xTickFormatter !== void 0 ? xTickFormatter : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.xTickFormatter, yTickFormatter: yTickFormatter !== null && yTickFormatter !== void 0 ? yTickFormatter : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.yTickFormatter, emphasizeBaselineAxis, stackedBars, horizontalBars, series, visibleSeries, highlightedSeries, onHighlightChange, highlightedPoint, setHighlightedPoint, highlightedGroupIndex, setHighlightedGroupIndex, detailPopoverSize, detailPopoverFooter, detailPopoverSeriesContent, xTitle, yTitle, ariaLabel, ariaLabelledby, ariaDescription, i18nStrings }) : null, legend: showLegend ? import_react148.default.createElement(InternalChartLegend, { series, visibleSeries: externalVisibleSeries || [], highlightedSeries: legendSeries, onHighlightChange, legendTitle, ariaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.legendAriaLabel, plotContainerRef: containerRef }) : null, onBlur }));
}

// node_modules/@cloudscape-design/components/bar-chart/index.js
function BarChart(_a) {
  var { series = [], height = 500, xScaleType = "categorical", yScaleType = "linear", stackedBars = false, horizontalBars = false, detailPopoverSize = "medium", statusType = "finished", emphasizeBaselineAxis = true, detailPopoverSeriesContent } = _a, props = __rest(_a, ["series", "height", "xScaleType", "yScaleType", "stackedBars", "horizontalBars", "detailPopoverSize", "statusType", "emphasizeBaselineAxis", "detailPopoverSeriesContent"]);
  const baseComponentProps = useBaseComponent("BarChart", {
    props: {
      detailPopoverSize,
      emphasizeBaselineAxis,
      fitHeight: props.fitHeight,
      hideFilter: props.hideFilter,
      hideLegend: props.hideLegend,
      horizontalBars,
      stackedBars,
      xScaleType,
      yScaleType
    }
  });
  const baseProps = getBaseProps(props);
  const className2 = clsx_m_default(baseProps.className, styles_css_default46.root);
  return import_react149.default.createElement(InternalMixedLineBarChart, Object.assign({}, props, baseComponentProps, { className: className2, height, xScaleType, yScaleType, stackedBars, horizontalBars, series, detailPopoverSize, statusType, emphasizeBaselineAxis, detailPopoverSeriesContent }));
}
applyDisplayName(BarChart, "BarChart");
var bar_chart_default = BarChart;

// node_modules/@cloudscape-design/components/breadcrumb-group/index.js
var import_react153 = __toESM(require_react());

// node_modules/@cloudscape-design/components/breadcrumb-group/internal.js
var import_react152 = __toESM(require_react());

// node_modules/@cloudscape-design/components/breadcrumb-group/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/breadcrumb-group/styles.scoped.css";
var styles_css_default48 = {
  "breadcrumb-group": "awsui_breadcrumb-group_d19fg_z6pwg_99",
  "item": "awsui_item_d19fg_z6pwg_137",
  "breadcrumb-group-list": "awsui_breadcrumb-group-list_d19fg_z6pwg_172",
  "ellipsis": "awsui_ellipsis_d19fg_z6pwg_184",
  "icon": "awsui_icon_d19fg_z6pwg_194",
  "mobile": "awsui_mobile_d19fg_z6pwg_199",
  "mobile-short": "awsui_mobile-short_d19fg_z6pwg_212"
};

// node_modules/@cloudscape-design/components/breadcrumb-group/item/item.js
var import_react151 = __toESM(require_react());

// node_modules/@cloudscape-design/components/breadcrumb-group/item/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/breadcrumb-group/item/styles.scoped.css";
var styles_css_default49 = {
  "link": "awsui_link_1kosq_r0i6w_99",
  "breadcrumb": "awsui_breadcrumb_1kosq_r0i6w_103",
  "icon": "awsui_icon_1kosq_r0i6w_106",
  "anchor": "awsui_anchor_1kosq_r0i6w_111",
  "last": "awsui_last_1kosq_r0i6w_157",
  "compressed": "awsui_compressed_1kosq_r0i6w_167",
  "text": "awsui_text_1kosq_r0i6w_171",
  "virtual-item": "awsui_virtual-item_1kosq_r0i6w_178"
};

// node_modules/@cloudscape-design/components/internal/components/tooltip/index.js
var import_react150 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/tooltip/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/tooltip/styles.scoped.css";
var styles_css_default50 = {
  "root": "awsui_root_1qprf_160mh_5"
};

// node_modules/@cloudscape-design/components/internal/components/tooltip/index.js
function Tooltip2({ value, trackRef }) {
  return import_react150.default.createElement(
    Portal,
    null,
    import_react150.default.createElement(
      "div",
      { className: styles_css_default50.root },
      import_react150.default.createElement(Transition, { in: true }, () => import_react150.default.createElement(
        PopoverContainer,
        { trackRef, trackKey: value, size: "small", fixedWidth: false, position: "top", arrow: (position) => import_react150.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default7.arrow, styles_css_default7[`arrow-position-${position}`]) },
          import_react150.default.createElement("div", { className: styles_css_default7["arrow-outer"] }),
          import_react150.default.createElement("div", { className: styles_css_default7["arrow-inner"] })
        ) },
        import_react150.default.createElement(PopoverBody, { dismissButton: false, dismissAriaLabel: void 0, onDismiss: void 0, header: void 0 }, value)
      ))
    )
  );
}

// node_modules/@cloudscape-design/components/breadcrumb-group/item/item.js
var BreadcrumbItemWithPopover = (_a) => {
  var { item, isLast, anchorAttributes, funnelAttributes } = _a, itemAttributes = __rest(_a, ["item", "isLast", "anchorAttributes", "funnelAttributes"]);
  const [showPopover, setShowPopover] = (0, import_react151.useState)(false);
  const textRef = (0, import_react151.useRef)(null);
  const virtualTextRef = (0, import_react151.useRef)(null);
  const isTruncated = (textRef2, virtualTextRef2) => {
    if (!textRef2 || !virtualTextRef2 || !textRef2.current || !virtualTextRef2.current) {
      return false;
    }
    const virtualTextWidth = virtualTextRef2.current.getBoundingClientRect().width;
    const textWidth = textRef2.current.getBoundingClientRect().width;
    if (virtualTextWidth > textWidth) {
      return true;
    }
    return false;
  };
  const popoverContent = import_react151.default.createElement(Tooltip2, { trackRef: textRef, value: item.text });
  (0, import_react151.useEffect)(() => {
    const onKeyDown = (event) => {
      if (event.key === "Escape") {
        setShowPopover(false);
      }
    };
    if (showPopover) {
      document.addEventListener("keydown", onKeyDown);
    }
    return () => {
      document.removeEventListener("keydown", onKeyDown);
    };
  }, [showPopover]);
  return import_react151.default.createElement(
    import_react151.default.Fragment,
    null,
    import_react151.default.createElement(
      Item,
      Object.assign({ isLast }, itemAttributes, { onFocus: () => {
        isTruncated(textRef, virtualTextRef) && setShowPopover(true);
      }, onBlur: () => setShowPopover(false), onMouseEnter: () => {
        isTruncated(textRef, virtualTextRef) && setShowPopover(true);
      }, onMouseLeave: () => setShowPopover(false), anchorAttributes }),
      import_react151.default.createElement("span", Object.assign({}, funnelAttributes, { className: styles_css_default49.text, ref: textRef }), item.text),
      import_react151.default.createElement("span", { className: styles_css_default49["virtual-item"], ref: virtualTextRef }, item.text)
    ),
    showPopover && popoverContent
  );
};
var Item = (_a) => {
  var { anchorAttributes, children, isLast } = _a, itemAttributes = __rest(_a, ["anchorAttributes", "children", "isLast"]);
  return isLast ? import_react151.default.createElement("span", Object.assign({}, itemAttributes), children) : import_react151.default.createElement("a", Object.assign({}, itemAttributes, anchorAttributes), children);
};
function BreadcrumbItem({ item, onClick, onFollow, isDisplayed, isLast = false, isCompressed = false }) {
  const preventDefault3 = (event) => event.preventDefault();
  const onClickHandler = (event) => {
    if (isPlainLeftClick(event)) {
      fireCancelableEvent(onFollow, getEventDetail(item), event);
    }
    fireCancelableEvent(onClick, getEventDetail(item), event);
  };
  const itemAttributes = {
    className: clsx_m_default(styles_css_default49.anchor, { [styles_css_default49.compressed]: isCompressed })
  };
  const anchorAttributes = {
    href: item.href || "#",
    onClick: isLast ? preventDefault3 : onClickHandler
  };
  const funnelAttributes = {};
  if (isLast) {
    funnelAttributes[DATA_ATTR_FUNNEL_KEY] = FUNNEL_KEY_FUNNEL_NAME;
  }
  return import_react151.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default49.breadcrumb, isLast && styles_css_default49.last) },
    isDisplayed && isCompressed ? import_react151.default.createElement(BreadcrumbItemWithPopover, Object.assign({ item, isLast, anchorAttributes, funnelAttributes }, itemAttributes)) : import_react151.default.createElement(
      Item,
      Object.assign({ isLast, anchorAttributes }, itemAttributes),
      import_react151.default.createElement("span", Object.assign({}, funnelAttributes, { className: styles_css_default49.text }), item.text)
    ),
    !isLast ? import_react151.default.createElement(
      "span",
      { className: styles_css_default49.icon },
      import_react151.default.createElement(internal_default, { name: "angle-right" })
    ) : null
  );
}

// node_modules/@cloudscape-design/components/breadcrumb-group/internal.js
var DEFAULT_EXPAND_ARIA_LABEL = "Show path";
var getDropdownTrigger = ({ ariaLabel, triggerRef, disabled, testUtilsClass, isOpen, onClick }) => {
  return import_react152.default.createElement(InternalButton, { ref: triggerRef, className: testUtilsClass, disabled, onClick: (event) => {
    event.preventDefault();
    onClick();
  }, ariaExpanded: isOpen, "aria-haspopup": true, ariaLabel, variant: "breadcrumb-group", formAction: "none" }, "...");
};
var EllipsisDropdown = ({ ariaLabel, dropdownItems, onDropdownItemClick, onDropdownItemFollow }) => {
  var _a;
  const i18n = useInternalI18n("breadcrumb-group");
  return import_react152.default.createElement(
    "li",
    { className: styles_css_default48.ellipsis },
    import_react152.default.createElement(internal_default7, { ariaLabel: (_a = i18n("expandAriaLabel", ariaLabel)) !== null && _a !== void 0 ? _a : DEFAULT_EXPAND_ARIA_LABEL, items: dropdownItems, onItemClick: onDropdownItemClick, onItemFollow: onDropdownItemFollow, customTriggerBuilder: getDropdownTrigger }),
    import_react152.default.createElement(
      "span",
      { className: styles_css_default48.icon },
      import_react152.default.createElement(internal_default, { name: "angle-right" })
    )
  );
};
var getEventDetail = (item) => ({
  item,
  text: item.text,
  href: item.href
});
function InternalBreadcrumbGroup(_a) {
  var { items = [], ariaLabel, expandAriaLabel, onClick, onFollow, __internalRootRef } = _a, props = __rest(_a, ["items", "ariaLabel", "expandAriaLabel", "onClick", "onFollow", "__internalRootRef"]);
  for (const item of items) {
    checkSafeUrl("BreadcrumbGroup", item.href);
  }
  const baseProps = getBaseProps(props);
  const isMobile = useMobile();
  let breadcrumbItems = items.map((item, index) => {
    const isLast = index === items.length - 1;
    return import_react152.default.createElement(
      "li",
      { className: styles_css_default48.item, key: index },
      import_react152.default.createElement(BreadcrumbItem, { item, onClick, onFollow, isCompressed: isMobile, isLast, isDisplayed: !isMobile || isLast || index === 0 })
    );
  });
  const getEventItem = (e) => {
    const { id } = e.detail;
    return items[parseInt(id)];
  };
  if (breadcrumbItems.length >= 2) {
    const dropdownItems = items.slice(1, items.length - 1).map((item, index) => ({
      id: (index + 1).toString(),
      text: item.text,
      href: item.href || "#"
    }));
    breadcrumbItems = [
      breadcrumbItems[0],
      import_react152.default.createElement(EllipsisDropdown, { key: "ellipsis", ariaLabel: expandAriaLabel, dropdownItems, onDropdownItemClick: (e) => fireCancelableEvent(onClick, getEventDetail(getEventItem(e)), e), onDropdownItemFollow: (e) => fireCancelableEvent(onFollow, getEventDetail(getEventItem(e)), e) }),
      ...breadcrumbItems.slice(1)
    ];
  }
  return import_react152.default.createElement(
    "nav",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default48["breadcrumb-group"], isMobile && styles_css_default48.mobile, items.length <= 2 && styles_css_default48["mobile-short"], baseProps.className), "aria-label": ariaLabel || void 0, ref: __internalRootRef }),
    import_react152.default.createElement("ol", { className: styles_css_default48["breadcrumb-group-list"] }, breadcrumbItems)
  );
}

// node_modules/@cloudscape-design/components/breadcrumb-group/index.js
function BreadcrumbGroup(_a) {
  var { items = [] } = _a, props = __rest(_a, ["items"]);
  const baseComponentProps = useBaseComponent("BreadcrumbGroup");
  return import_react153.default.createElement(InternalBreadcrumbGroup, Object.assign({ items }, props, baseComponentProps));
}
applyDisplayName(BreadcrumbGroup, "BreadcrumbGroup");

// node_modules/@cloudscape-design/components/button-dropdown/index.js
var import_react154 = __toESM(require_react());
var ButtonDropdown = import_react154.default.forwardRef((_a, ref) => {
  var { items, variant = "normal", loading = false, loadingText, disabled = false, expandableGroups = false, expandToViewport = false, ariaLabel, children, onItemClick, onItemFollow, mainAction } = _a, props = __rest(_a, ["items", "variant", "loading", "loadingText", "disabled", "expandableGroups", "expandToViewport", "ariaLabel", "children", "onItemClick", "onItemFollow", "mainAction"]);
  const baseComponentProps = useBaseComponent("ButtonDropdown", {
    props: { expandToViewport, expandableGroups, variant }
  });
  const baseProps = getBaseProps(props);
  return import_react154.default.createElement(internal_default7, Object.assign({}, baseProps, baseComponentProps, { ref, items, variant, loading, loadingText, disabled, expandableGroups, expandToViewport, ariaLabel, onItemClick, onItemFollow, mainAction }), children);
});
applyDisplayName(ButtonDropdown, "ButtonDropdown");
var button_dropdown_default = ButtonDropdown;

// node_modules/@cloudscape-design/components/calendar/index.js
var import_react162 = __toESM(require_react());

// node_modules/@cloudscape-design/components/calendar/internal.js
var import_react161 = __toESM(require_react());

// node_modules/@cloudscape-design/components/calendar/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/calendar/styles.scoped.css";
var styles_css_default51 = {
  "calendar": "awsui_calendar_1ykar_1boof_99",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_1ykar_1boof_1",
  "root": "awsui_root_1ykar_1boof_130",
  "calendar-inner": "awsui_calendar-inner_1ykar_1boof_171",
  "calendar-header": "awsui_calendar-header_1ykar_1boof_175",
  "calendar-header-title": "awsui_calendar-header-title_1ykar_1boof_180",
  "calendar-next-btn": "awsui_calendar-next-btn_1ykar_1boof_188",
  "calendar-prev-btn": "awsui_calendar-prev-btn_1ykar_1boof_191",
  "calendar-grid": "awsui_calendar-grid_1ykar_1boof_194",
  "calendar-grid-dense": "awsui_calendar-grid-dense_1ykar_1boof_198",
  "calendar-grid-cell": "awsui_calendar-grid-cell_1ykar_1boof_206",
  "calendar-date-header": "awsui_calendar-date-header_1ykar_1boof_211",
  "calendar-date": "awsui_calendar-date_1ykar_1boof_211",
  "calendar-date-enabled": "awsui_calendar-date-enabled_1ykar_1boof_231",
  "calendar-date-current-page": "awsui_calendar-date-current-page_1ykar_1boof_241",
  "calendar-date-selected": "awsui_calendar-date-selected_1ykar_1boof_252",
  "calendar-date-current": "awsui_calendar-date-current_1ykar_1boof_241",
  "calendar-date-dense": "awsui_calendar-date-dense_1ykar_1boof_273",
  "date-inner": "awsui_date-inner_1ykar_1boof_281",
  "calendar-row": "awsui_calendar-row_1ykar_1boof_356"
};

// node_modules/@cloudscape-design/components/calendar/header/index.js
var import_react156 = __toESM(require_react());

// node_modules/@cloudscape-design/components/calendar/header/header-button.js
var import_react155 = __toESM(require_react());
function HeaderPrevButton({ ariaLabel, onChange }) {
  return import_react155.default.createElement(InternalButton, { iconName: "angle-left", ariaLabel, variant: "icon", onClick: () => onChange(-1), formAction: "none", className: styles_css_default51["calendar-prev-btn"] });
}
function HeaderNextButton({ ariaLabel, onChange }) {
  return import_react155.default.createElement(InternalButton, { iconName: "angle-right", ariaLabel, variant: "icon", onClick: () => onChange(1), formAction: "none", className: styles_css_default51["calendar-next-btn"] });
}

// node_modules/@cloudscape-design/components/calendar/header/index.js
var CalendarHeader = ({ formattedDate, onChange, previousLabel, nextLabel, headingId }) => {
  return import_react156.default.createElement(
    "div",
    { className: styles_css_default51["calendar-header"] },
    import_react156.default.createElement(HeaderPrevButton, { ariaLabel: previousLabel, onChange }),
    import_react156.default.createElement("h2", { className: styles_css_default51["calendar-header-title"], id: headingId }, formattedDate),
    import_react156.default.createElement(HeaderNextButton, { ariaLabel: nextLabel, onChange })
  );
};
var header_default = CalendarHeader;

// node_modules/@cloudscape-design/components/calendar/grid/index.js
var import_react157 = __toESM(require_react());
function Grid({ isDateEnabled, focusedDate, focusableDate, onSelectDate, selectedDate, ariaLabelledby, header, rows, isCurrentPage, renderDate, renderDateAnnouncement, isSameDate, onGridKeyDownHandler }) {
  const focusedDateRef = (0, import_react157.useRef)(null);
  useEffectOnUpdate(() => {
    if (focusedDate && focusedDateRef.current) {
      focusedDateRef.current.focus();
    }
  }, [focusedDate]);
  const rowLength = rows[0].length;
  const denseGrid = rowLength > 3;
  return import_react157.default.createElement(
    "table",
    { role: "grid", className: clsx_m_default(styles_css_default51["calendar-grid"], denseGrid && styles_css_default51["calendar-grid-dense"]), "aria-labelledby": ariaLabelledby },
    header,
    import_react157.default.createElement("tbody", { onKeyDown: onGridKeyDownHandler }, rows.map((row, rowIndex) => import_react157.default.createElement("tr", { key: rowIndex, className: styles_css_default51["calendar-row"] }, row.map((date2, dateIndex) => {
      const isFocusable = !!focusableDate && isSameDate(date2, focusableDate);
      const isSelected = !!selectedDate && isSameDate(date2, selectedDate);
      const isEnabled = !isDateEnabled || isDateEnabled(date2);
      const isCurrentDate = isSameDate(date2, /* @__PURE__ */ new Date());
      let tabIndex = void 0;
      if (isFocusable && isEnabled) {
        tabIndex = 0;
      } else if (isEnabled) {
        tabIndex = -1;
      }
      return import_react157.default.createElement(
        "td",
        {
          key: `${rowIndex}:${dateIndex}`,
          ref: tabIndex === 0 ? focusedDateRef : void 0,
          tabIndex,
          "aria-current": isCurrentDate ? "date" : void 0,
          "aria-selected": isEnabled ? isSelected : void 0,
          "aria-disabled": !isEnabled,
          // Do not attach click event when the date is disabled, otherwise VO+safari announces clickable
          onClick: isEnabled ? () => onSelectDate(date2) : void 0,
          className: clsx_m_default(styles_css_default51["calendar-grid-cell"], styles_css_default51["calendar-date"], {
            [styles_css_default51["calendar-date-current-page"]]: isCurrentPage(date2),
            [styles_css_default51["calendar-date-enabled"]]: isEnabled,
            [styles_css_default51["calendar-date-selected"]]: isSelected,
            [styles_css_default51["calendar-date-current"]]: isCurrentDate,
            [styles_css_default51["calendar-date-dense"]]: denseGrid
          })
        },
        import_react157.default.createElement("span", { className: styles_css_default51["date-inner"], "aria-hidden": "true" }, renderDate(date2)),
        import_react157.default.createElement(ScreenreaderOnly, null, renderDateAnnouncement(date2, isCurrentDate))
      );
    }))))
  );
}

// node_modules/@cloudscape-design/components/internal/utils/locale/merge-locales.js
function mergeLocales(locale2, fullLocale) {
  const isShort = locale2.length === 2;
  if (isShort && fullLocale.indexOf(locale2) === 0) {
    return fullLocale;
  }
  return locale2;
}

// node_modules/@cloudscape-design/components/internal/utils/locale/normalize-locale.js
function normalizeLocale(component, locale2) {
  var _a;
  locale2 = checkLocale(component, locale2);
  const browserLocale = getBrowserLocale();
  if (locale2) {
    return mergeLocales(locale2, browserLocale);
  }
  const htmlLocale = checkLocale(component, (_a = getHtmlElement()) === null || _a === void 0 ? void 0 : _a.getAttribute("lang"));
  if (htmlLocale) {
    return mergeLocales(htmlLocale, browserLocale);
  }
  return browserLocale;
}
function checkLocale(component, locale2) {
  if (!locale2 || locale2 === "") {
    return "";
  }
  locale2 = locale2 && locale2.replace(/^([a-z]{2})_/, "$1-");
  if (locale2 && !locale2.match(/^[a-z]{2}(-[A-Z]{2})?$/)) {
    warnOnce(component, `Invalid locale provided: ${locale2}. Falling back to default`);
    locale2 = "";
  }
  return locale2;
}
function getHtmlElement() {
  return typeof document !== "undefined" ? document.querySelector("html") : null;
}
function getBrowserLocale() {
  return new Intl.DateTimeFormat().resolvedOptions().locale;
}

// node_modules/weekstart/dist/es-module/api.js
function getWeekStartByRegion(regionCode, regionDayMap2) {
  var code = regionDayMap2[typeof regionCode === "string" ? regionCode.toUpperCase() : regionCode];
  return typeof code === "number" ? code : 1;
}
function getWeekStartByLocale(locale2, langRegionMap2, regionDayMap2) {
  if (locale2) {
    var data = locale2.toLowerCase().split(/[-_]/);
    var language = data[0];
    var country;
    if (data[1] && data[1].length === 4) {
      language += "_" + data[1];
      country = data[2];
    } else {
      country = data[1];
    }
    if (!country) {
      country = langRegionMap2[language];
    }
    if (country) {
      return getWeekStartByRegion(country.match(/^\d+$/) ? Number(country) : country, regionDayMap2);
    }
  }
  return 1;
}

// node_modules/weekstart/dist/es-module/langRegionMap.js
var langRegionMap = {
  en: "US",
  zh: "CN",
  zh_hans: "CN",
  hans: "CN",
  wuu: "CN",
  hsn: "CN",
  hak: "CN",
  nan: "CN",
  gan: "CN",
  hi: "IN",
  te: "IN",
  mr: "IN",
  ta: "IN",
  gu: "IN",
  kn: "IN",
  or: "IN",
  ml: "IN",
  pa_guru: "IN",
  bho: "IN",
  awa: "IN",
  as: "IN",
  mwr: "IN",
  mai: "IN",
  mag: "IN",
  bgc: "IN",
  hne: "IN",
  dcc: "IN",
  dz: "BT",
  tn: "BW",
  am: "ET",
  om: "ET",
  quc: "GT",
  id: "ID",
  jv: "ID",
  su: "ID",
  mad: "ID",
  ms_arab: "ID",
  ga: "IE",
  he: "IL",
  jam: "JM",
  ja: "JP",
  km: "KH",
  ko: "KR",
  lo: "LA",
  mh: "MH",
  my: "MM",
  mt: "MT",
  ne: "NP",
  fil: "PH",
  ceb: "PH",
  ilo: "PH",
  ur: "PK",
  pa: "PK",
  pa_arab: "PK",
  arab: "PK",
  lah: "PK",
  ps: "PK",
  sd: "PK",
  sd_arab: "PK",
  skr: "PK",
  gn: "PY",
  th: "TH",
  tts: "TH",
  aeb: "TN",
  zh_hant: "TW",
  hant: "TW",
  sm: "WS",
  zu: "ZA",
  sn: "ZW",
  arq: "DZ",
  ar: "EG",
  arz: "EG",
  fa: "IR",
  az_arab: "IR",
  ary: "MA",
  bn: "BD",
  rkt: "BD",
  dv: "MV"
};
var langRegionMap_default = langRegionMap;

// node_modules/weekstart/dist/es-module/regionDayMap.js
var regionDayMap = {
  AG: 0,
  ATG: 0,
  28: 0,
  AR: 0,
  ARG: 0,
  32: 0,
  AS: 0,
  ASM: 0,
  16: 0,
  AU: 0,
  AUS: 0,
  36: 0,
  BR: 0,
  BRA: 0,
  76: 0,
  BS: 0,
  BHS: 0,
  44: 0,
  BT: 0,
  BTN: 0,
  64: 0,
  BW: 0,
  BWA: 0,
  72: 0,
  BZ: 0,
  BLZ: 0,
  84: 0,
  CA: 0,
  CAN: 0,
  124: 0,
  CN: 0,
  CHN: 0,
  156: 0,
  CO: 0,
  COL: 0,
  170: 0,
  DM: 0,
  DMA: 0,
  212: 0,
  DO: 0,
  DOM: 0,
  214: 0,
  ET: 0,
  ETH: 0,
  231: 0,
  GT: 0,
  GTM: 0,
  320: 0,
  GU: 0,
  GUM: 0,
  316: 0,
  HK: 0,
  HKG: 0,
  344: 0,
  HN: 0,
  HND: 0,
  340: 0,
  ID: 0,
  IDN: 0,
  360: 0,
  IE: 0,
  IRL: 0,
  372: 0,
  IL: 0,
  ISR: 0,
  376: 0,
  IN: 0,
  IND: 0,
  356: 0,
  JM: 0,
  JAM: 0,
  388: 0,
  JP: 0,
  JPN: 0,
  392: 0,
  KE: 0,
  KEN: 0,
  404: 0,
  KH: 0,
  KHM: 0,
  116: 0,
  KR: 0,
  KOR: 0,
  410: 0,
  LA: 0,
  LA0: 0,
  418: 0,
  MH: 0,
  MHL: 0,
  584: 0,
  MM: 0,
  MMR: 0,
  104: 0,
  MO: 0,
  MAC: 0,
  446: 0,
  MT: 0,
  MLT: 0,
  470: 0,
  MX: 0,
  MEX: 0,
  484: 0,
  MZ: 0,
  MOZ: 0,
  508: 0,
  NI: 0,
  NIC: 0,
  558: 0,
  NP: 0,
  NPL: 0,
  524: 0,
  NZ: 0,
  NZL: 0,
  554: 0,
  PA: 0,
  PAN: 0,
  591: 0,
  PE: 0,
  PER: 0,
  604: 0,
  PH: 0,
  PHL: 0,
  608: 0,
  PK: 0,
  PAK: 0,
  586: 0,
  PR: 0,
  PRI: 0,
  630: 0,
  PY: 0,
  PRY: 0,
  600: 0,
  SA: 0,
  SAU: 0,
  682: 0,
  SG: 0,
  SGP: 0,
  702: 0,
  SV: 0,
  SLV: 0,
  222: 0,
  TH: 0,
  THA: 0,
  764: 0,
  TN: 0,
  TUN: 0,
  788: 0,
  TT: 0,
  TTO: 0,
  780: 0,
  TW: 0,
  TWN: 0,
  158: 0,
  UM: 0,
  UMI: 0,
  581: 0,
  US: 0,
  USA: 0,
  840: 0,
  VE: 0,
  VEN: 0,
  862: 0,
  VI: 0,
  VIR: 0,
  850: 0,
  WS: 0,
  WSM: 0,
  882: 0,
  YE: 0,
  YEM: 0,
  887: 0,
  ZA: 0,
  ZAF: 0,
  710: 0,
  ZW: 0,
  ZWE: 0,
  716: 0,
  AE: 6,
  ARE: 6,
  784: 6,
  AF: 6,
  AFG: 6,
  4: 6,
  BH: 6,
  BHR: 6,
  48: 6,
  DJ: 6,
  DJI: 6,
  262: 6,
  DZ: 6,
  DZA: 6,
  12: 6,
  EG: 6,
  EGY: 6,
  818: 6,
  IQ: 6,
  IRQ: 6,
  368: 6,
  IR: 6,
  IRN: 6,
  364: 6,
  JO: 6,
  JOR: 6,
  400: 6,
  KW: 6,
  KWT: 6,
  414: 6,
  LY: 6,
  LBY: 6,
  434: 6,
  MA: 6,
  MAR: 6,
  504: 6,
  OM: 6,
  OMN: 6,
  512: 6,
  QA: 6,
  QAT: 6,
  634: 6,
  SD: 6,
  SDN: 6,
  729: 6,
  SY: 6,
  SYR: 6,
  760: 6,
  BD: 5,
  BGD: 5,
  50: 5,
  MV: 5,
  MDV: 5,
  462: 5
};
var regionDayMap_default = regionDayMap;

// node_modules/weekstart/dist/es-module/main.js
function getWeekStartByLocale$1(locale2) {
  return getWeekStartByLocale(locale2, langRegionMap_default, regionDayMap_default);
}

// node_modules/@cloudscape-design/components/internal/utils/locale/normalize-start-of-week.js
function normalizeStartOfWeek(startOfWeek2, locale2) {
  return typeof startOfWeek2 === "number" ? startOfWeek2 % 7 : getWeekStartByLocale$1(locale2);
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/display-format.js
function isoToDisplay(value) {
  return value.replace(/-/g, "/");
}
function displayToIso(value) {
  return value.replace(/\//g, "-");
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/is-iso-date-only.js
var dateRegex = /^\d{4}-\d{2}-\d{2}$/;
function isIsoDateOnly(dateString) {
  return dateRegex.test(dateString);
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/format-time-offset.js
function formatTimeOffsetISO(isoDate, offsetInMinutes) {
  offsetInMinutes = defaultToLocal(isoDate, offsetInMinutes);
  const { hours, minutes } = getMinutesAndHours(offsetInMinutes);
  const sign2 = offsetInMinutes < 0 ? "-" : "+";
  const formattedOffset = `${sign2}${formatISO2Digits(hours)}:${formatISO2Digits(minutes)}`;
  return formattedOffset;
}
function formatTimeOffsetLocalized(isoDate, offsetInMinutes) {
  offsetInMinutes = defaultToLocal(isoDate, offsetInMinutes);
  if (offsetInMinutes === 0) {
    return "(UTC)";
  }
  const { hours, minutes } = getMinutesAndHours(offsetInMinutes);
  const sign2 = offsetInMinutes < 0 ? "-" : "+";
  const formattedMinutes = minutes === 0 ? "" : `:${minutes}`;
  const formattedOffset = `(UTC${sign2}${hours}${formattedMinutes})`;
  return formattedOffset;
}
function defaultToLocal(isoDate, offsetInMinutes) {
  return offsetInMinutes !== null && offsetInMinutes !== void 0 ? offsetInMinutes : 0 - new Date(isoDate).getTimezoneOffset();
}
function getMinutesAndHours(minutes) {
  return { hours: Math.floor(Math.abs(minutes) / 60), minutes: Math.abs(minutes % 60) };
}
function formatISO2Digits(n) {
  return padLeftZeros(n.toFixed(0), 2);
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/format-date-iso.js
function format_date_iso_default({ date: isoDate, hideTimeOffset, isDateOnly: isDateOnly2, timeOffset }) {
  const formattedOffset = hideTimeOffset || isDateOnly2 ? "" : formatTimeOffsetISO(isoDate, timeOffset);
  return isoDate + formattedOffset;
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/format-date-localized.js
function formatDateLocalized({ date: isoDate, hideTimeOffset, isDateOnly: isDateOnly2, timeOffset, locale: locale2 }) {
  const date2 = new Date(isoDate);
  const formattedDate = new Intl.DateTimeFormat(locale2, {
    day: "numeric",
    month: "long",
    year: "numeric"
  }).format(date2);
  if (isDateOnly2) {
    return formattedDate;
  }
  const formattedTime = new Intl.DateTimeFormat(locale2, {
    hour: "2-digit",
    hourCycle: "h23",
    minute: "2-digit",
    second: "2-digit"
  }).format(date2);
  const formattedDateTime = formattedDate + getDateTimeSeparator(locale2) + formattedTime;
  if (hideTimeOffset) {
    return formattedDateTime;
  }
  const formattedTimeOffset = formatTimeOffsetLocalized(isoDate, timeOffset);
  return formattedDateTime + " " + formattedTimeOffset;
}
var languagesWithoutDateTimeSeparator = ["ja", "zh-CN", "zh-TW"];
function getDateTimeSeparator(locale2) {
  return locale2 && languagesWithoutDateTimeSeparator.includes(locale2) ? " " : ", ";
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/format-date-range.js
function formatDateRange({ startDate, endDate, timeOffset, hideTimeOffset, format: format3, locale: locale2 }) {
  const isDateOnly2 = isIsoDateOnly(startDate) && isIsoDateOnly(endDate);
  return formatDate({
    date: startDate,
    format: format3,
    hideTimeOffset,
    isDateOnly: isDateOnly2,
    timeOffset: timeOffset.startDate,
    locale: locale2
  }) + " — " + formatDate({
    date: endDate,
    format: format3,
    hideTimeOffset,
    isDateOnly: isDateOnly2,
    timeOffset: timeOffset.endDate,
    locale: locale2
  });
}
function formatDate({ date: date2, format: format3, hideTimeOffset, isDateOnly: isDateOnly2, timeOffset, locale: locale2 }) {
  switch (format3) {
    case "long-localized": {
      return formatDateLocalized({ date: date2, hideTimeOffset, isDateOnly: isDateOnly2, locale: locale2, timeOffset });
    }
    default: {
      return format_date_iso_default({ date: date2, hideTimeOffset, isDateOnly: isDateOnly2, timeOffset });
    }
  }
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/format-date.js
function formatDate2(value, granularity = "day") {
  const year = value.getFullYear();
  const month = padLeftZeros(`${value.getMonth() + 1}`, 2);
  if (granularity === "month") {
    return `${year}-${month}`;
  }
  const date2 = padLeftZeros(`${value.getDate()}`, 2);
  return `${year}-${month}-${date2}`;
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/format-time.js
var formatTime = (value) => {
  const hours = padLeftZeros(`${value.getHours()}`, 2);
  const minutes = padLeftZeros(`${value.getMinutes()}`, 2);
  const seconds = padLeftZeros(`${value.getSeconds()}`, 2);
  return `${hours}:${minutes}:${seconds}`;
};

// node_modules/@cloudscape-design/components/internal/utils/date-time/format-date-time.js
function formatDateTime(date2) {
  return formatDate2(date2) + "T" + formatTime(date2);
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/join-date-time.js
function normalizeTimeString(timeString) {
  const parts = timeString.split(":");
  while (parts.length < 3) {
    parts.push("00");
  }
  return parts.join(":");
}
function joinDateTime(dateString, timeString) {
  return `${dateString}T${timeString}`;
}
function splitDateTime(dateStr) {
  const [date2 = "", time2 = ""] = dateStr.split("T");
  return { date: date2, time: time2 };
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/parse-date.js
function parseDate(value, strict = false) {
  const [yearString, monthString, dayString] = value.split("-");
  const year = Number(yearString);
  const month = Number(monthString);
  const day = Number(dayString);
  if (strict) {
    if (isNaN(year) || isNaN(month) || isNaN(day)) {
      return null;
    }
  }
  return new Date(year, (month || 1) - 1, day || 1);
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/parse-timezone-offset.js
function parseTimezoneOffset(isoDate) {
  const [, time2 = ""] = isoDate.split("T");
  const [, signCharacter, offsetPart] = time2.split(/(-|\+)/);
  if (signCharacter && offsetPart) {
    const [offsetHours, offsetMinutes] = offsetPart.split(":");
    return Number(signCharacter + "1") * (Number(offsetHours) * 60 + Number(offsetMinutes));
  }
  const utcTimezoneIndicator = isoDate.indexOf("Z");
  if (utcTimezoneIndicator !== -1) {
    return 0;
  }
  const date2 = new Date(isoDate);
  return 0 - date2.getTimezoneOffset();
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/shift-timezone-offset.js
function shiftTimezoneOffset(dateString, targetTimezoneOffset) {
  const [datePart, timeAndOffsetPart = ""] = dateString.split("T");
  const [timePart] = timeAndOffsetPart.split(/-|\+|Z/);
  const valueWithoutOffset = joinDateTime(datePart, timePart);
  const originalTimezoneOffset = parseTimezoneOffset(dateString);
  const date2 = new Date(valueWithoutOffset);
  targetTimezoneOffset = targetTimezoneOffset !== null && targetTimezoneOffset !== void 0 ? targetTimezoneOffset : 0 - date2.getTimezoneOffset();
  const adjustedDate = addMinutes(date2, targetTimezoneOffset - originalTimezoneOffset);
  return joinDateTime(formatDate2(adjustedDate), formatTime(adjustedDate));
}

// node_modules/@cloudscape-design/components/calendar/utils/navigation.js
function moveNextDay(startDate, isDateEnabled) {
  return moveDay(startDate, isDateEnabled, 1);
}
function movePrevDay(startDate, isDateEnabled) {
  return moveDay(startDate, isDateEnabled, -1);
}
function moveNextWeek(startDate, isDateEnabled) {
  return moveDay(startDate, isDateEnabled, 7);
}
function movePrevWeek(startDate, isDateEnabled) {
  return moveDay(startDate, isDateEnabled, -7);
}
function moveNextMonth(startDate, isDateEnabled) {
  return moveMonth(startDate, isDateEnabled, 1);
}
function movePrevMonth(startDate, isDateEnabled) {
  return moveMonth(startDate, isDateEnabled, -1);
}
function moveMonthDown(startDate, isDateEnabled) {
  return moveMonth(startDate, isDateEnabled, 3);
}
function moveMonthUp(startDate, isDateEnabled) {
  return moveMonth(startDate, isDateEnabled, -3);
}
function getBaseDay(date2, isDateEnabled) {
  return getBaseDate({ date: date2, isDateEnabled, granularity: "day" });
}
function getBaseMonth(date2, isDateEnabled) {
  return getBaseDate({ date: date2, isDateEnabled, granularity: "month" });
}
function getBaseDate({ date: date2, granularity, isDateEnabled }) {
  const isMonthGranularity = granularity === "month";
  const getStartDate = isMonthGranularity ? startOfYear : startOfMonth;
  const moveDate2 = isMonthGranularity ? moveMonth : moveDay;
  const isSamePage = isMonthGranularity ? isSameYear : isSameMonth;
  const startDate = getStartDate(date2);
  if (isDateEnabled(startDate)) {
    return startDate;
  }
  const firstEnabledDate = moveDate2(startDate, isDateEnabled, 1);
  return isSamePage(startDate, firstEnabledDate) ? firstEnabledDate : startDate;
}
function moveDay(startDate, isDateEnabled, step) {
  return moveDate({ startDate, granularity: "day", isDateEnabled, step });
}
function moveMonth(startDate, isDateEnabled, step) {
  return moveDate({ startDate, granularity: "month", isDateEnabled, step });
}
function moveDate({ startDate, granularity, isDateEnabled, step }) {
  const isMonthGranularity = granularity === "month";
  const addSteps = isMonthGranularity ? addMonths : addDays;
  const limitYears = isMonthGranularity ? 1 : 10;
  let current = addSteps(startDate, step);
  while (!isDateEnabled(current)) {
    if (Math.abs(differenceInYears(startDate, current)) > limitYears) {
      return startDate;
    }
    current = addSteps(current, step);
  }
  return current;
}

// node_modules/@cloudscape-design/components/internal/hooks/use-date-cache/index.js
var import_react158 = __toESM(require_react());
function useDateCache() {
  const cacheRef = (0, import_react158.useRef)(/* @__PURE__ */ new Map());
  return (date2) => {
    const current = cacheRef.current.get(date2.getTime());
    if (current) {
      return current;
    }
    cacheRef.current.set(date2.getTime(), date2);
    return date2;
  };
}

// node_modules/@cloudscape-design/components/calendar/utils/intl.js
function setDayIndex(date2, dayIndex) {
  const diff = dayIndex - date2.getDay();
  date2.setDate(date2.getDate() + diff);
}
function renderDayName(locale2, dayIndex, mode) {
  const tempDate = /* @__PURE__ */ new Date();
  setDayIndex(tempDate, dayIndex);
  return tempDate.toLocaleDateString(locale2, { weekday: mode });
}
function renderMonthAndYear(locale2, baseDate) {
  const result = baseDate.toLocaleDateString(locale2, {
    year: "numeric",
    month: "long"
  });
  return result;
}
function renderYear(locale2, date2) {
  return date2.toLocaleDateString(locale2, {
    year: "numeric"
  });
}
var dayLabelCache = /* @__PURE__ */ new Map();
function getDateLabel(locale2, date2, mode = "full") {
  const cacheKey = locale2 + date2.getTime() + mode;
  const cachedValue = dayLabelCache.get(cacheKey);
  if (cachedValue) {
    return cachedValue;
  }
  const value = date2.toLocaleDateString(locale2, {
    weekday: mode === "full" ? "long" : void 0,
    month: "long",
    day: "numeric",
    year: "numeric"
  });
  dayLabelCache.set(cacheKey, value);
  return value;
}
function renderTimeLabel(locale2, date2, format3) {
  let options = {};
  if (format3 === "hh") {
    options = { hour: "2-digit" };
  }
  if (format3 === "hh:mm") {
    options = { hour: "2-digit", minute: "2-digit" };
  }
  const value = date2.toLocaleTimeString(locale2, options);
  return value;
}

// node_modules/@cloudscape-design/components/calendar/use-calendar-labels.js
function useCalendarLabels({ granularity, locale: locale2, i18nStrings, previousMonthAriaLabel, nextMonthAriaLabel, todayAriaLabel }) {
  var _a, _b, _c;
  const i18n = useInternalI18n("calendar");
  const isMonthPicker = granularity === "month";
  const previousButtonLabel = isMonthPicker ? i18n("i18nStrings.previousYearAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.previousYearAriaLabel) : i18n("previousMonthAriaLabel", (_a = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.previousMonthAriaLabel) !== null && _a !== void 0 ? _a : previousMonthAriaLabel);
  const nextButtonLabel = isMonthPicker ? i18n("i18nStrings.nextYearAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.nextYearAriaLabel) : i18n("nextMonthAriaLabel", (_b = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.nextMonthAriaLabel) !== null && _b !== void 0 ? _b : nextMonthAriaLabel);
  const currentDateLabel = isMonthPicker ? i18n("i18nStrings.currentMonthAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.currentMonthAriaLabel) : i18n("todayAriaLabel", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.todayAriaLabel) !== null && _c !== void 0 ? _c : todayAriaLabel);
  const renderDate = (date2) => isMonthPicker ? date2.toLocaleString(locale2, { month: "short" }) : date2.getDate().toString();
  const renderDateAnnouncement = (date2, isCurrentDate) => {
    const formattedDate = isMonthPicker ? renderMonthAndYear(locale2, date2) : getDateLabel(locale2, date2, "short");
    if (isCurrentDate && currentDateLabel) {
      return formattedDate + ". " + currentDateLabel;
    }
    return formattedDate;
  };
  const renderHeaderText = (date2) => isMonthPicker ? date2.getFullYear().toString() : renderMonthAndYear(locale2, date2);
  return {
    previousButtonLabel,
    nextButtonLabel,
    renderDate,
    renderDateAnnouncement,
    renderHeaderText
  };
}

// node_modules/@cloudscape-design/components/calendar/grid/use-calendar-grid-rows.js
var import_react159 = __toESM(require_react());

// node_modules/mnth/web/add-days.js
var addDays2 = function addDays3(date2, days) {
  var result = new Date(date2);
  result.setDate(result.getDate() + days);
  return result;
};

// node_modules/mnth/web/set-date.js
var setDate2 = function setDate3(date2, day) {
  var result = new Date(date2);
  result.setDate(day);
  return result;
};

// node_modules/mnth/web/index.js
function ownKeys(object2, enumerableOnly) {
  var keys = Object.keys(object2);
  if (Object.getOwnPropertySymbols) {
    var symbols2 = Object.getOwnPropertySymbols(object2);
    if (enumerableOnly) symbols2 = symbols2.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
    });
    keys.push.apply(keys, symbols2);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key2) {
        _defineProperty(target, key2, source[key2]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key2) {
        Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
      });
    }
  }
  return target;
}
var DAYS_IN_WEEK = 7;
var getCalendarMonth = function getCalendarMonth2(date2, options) {
  var _firstDayOfWeek$optio = _objectSpread({
    firstDayOfWeek: 1
  }, options), firstDayOfWeek = _firstDayOfWeek$optio.firstDayOfWeek;
  var firstDateOfMonth = new Date(date2.getFullYear(), date2.getMonth(), 1);
  var lastDateOfMonth = new Date(date2.getFullYear(), date2.getMonth() + 1, 0);
  var firstWeekdayOfMonth = firstDateOfMonth.getDay();
  var lastWeekdayOfMonth = lastDateOfMonth.getDay();
  var daysInMonth = lastDateOfMonth.getDate();
  var daysToPrepend = (firstWeekdayOfMonth - firstDayOfWeek + DAYS_IN_WEEK) % DAYS_IN_WEEK;
  var daysToAppend = (DAYS_IN_WEEK - 1 - lastWeekdayOfMonth + firstDayOfWeek) % DAYS_IN_WEEK;
  var month = [];
  var week = [];
  for (var i = 1 - daysToPrepend; i <= daysInMonth + daysToAppend + 1; i++) {
    if (i <= 0) {
      week.push(addDays2(firstDateOfMonth, i - 1));
    } else if (i > daysInMonth) {
      week.push(addDays2(lastDateOfMonth, i - daysInMonth));
    } else {
      week.push(setDate2(date2, i));
    }
    if (week.length === 7) {
      month.push(week);
      week = [];
    }
  }
  return month;
};

// node_modules/@cloudscape-design/components/calendar/grid/use-calendar-grid-rows.js
function useCalendarGridRows({ baseDate, granularity, locale: locale2, startOfWeek: startOfWeek2 }) {
  const isMonthPicker = granularity === "month";
  const rows = (0, import_react159.useMemo)(() => isMonthPicker ? getCalendarYear(baseDate) : getCalendarMonth(baseDate, { firstDayOfWeek: normalizeStartOfWeek(startOfWeek2, locale2) }), [baseDate, isMonthPicker, startOfWeek2, locale2]);
  return rows;
}
function getCalendarYear(date2) {
  const year = date2.getFullYear();
  return new Array(4).fill(0).map((_, i) => new Array(3).fill(0).map((_2, j) => new Date(year, i * 3 + j)));
}

// node_modules/@cloudscape-design/components/calendar/grid/use-calendar-grid-keyboard-navigation.js
function useCalendarGridKeyboardNavigation({ baseDate, focusableDate, granularity, isDateEnabled, onChangePage, onFocusDate, onSelectDate }) {
  const isMonthPicker = granularity === "month";
  const moveDown = isMonthPicker ? moveMonthDown : moveNextWeek;
  const moveLeft = isMonthPicker ? movePrevMonth : movePrevDay;
  const moveRight = isMonthPicker ? moveNextMonth : moveNextDay;
  const moveUp = isMonthPicker ? moveMonthUp : movePrevWeek;
  const isSamePage = isMonthPicker ? isSameYear : isSameMonth;
  const onGridKeyDownHandler = (event) => {
    let updatedFocusDate;
    const keys = [KeyCode.up, KeyCode.down, KeyCode.left, KeyCode.right, KeyCode.space, KeyCode.enter];
    if (focusableDate === null || keys.indexOf(event.keyCode) === -1) {
      return;
    }
    event.preventDefault();
    handleKey(event, {
      onActivate: () => {
        onFocusDate(null);
        onSelectDate(focusableDate);
      },
      onBlockEnd: () => updatedFocusDate = moveDown(focusableDate, isDateEnabled),
      onBlockStart: () => updatedFocusDate = moveUp(focusableDate, isDateEnabled),
      onInlineStart: () => updatedFocusDate = moveLeft(focusableDate, isDateEnabled),
      onInlineEnd: () => updatedFocusDate = moveRight(focusableDate, isDateEnabled)
    });
    if (!updatedFocusDate) {
      return;
    }
    if (!isSamePage(updatedFocusDate, baseDate)) {
      onChangePage(updatedFocusDate);
    }
    onFocusDate(updatedFocusDate);
  };
  return onGridKeyDownHandler;
}

// node_modules/@cloudscape-design/components/calendar/grid/calendar-grid-header.js
var import_react160 = __toESM(require_react());
function CalendarGridHeader({ locale: locale2, rows }) {
  return import_react160.default.createElement(
    "thead",
    null,
    import_react160.default.createElement("tr", null, rows[0].map((date2) => date2.getDay()).map((dayIndex) => import_react160.default.createElement(
      "th",
      { key: dayIndex, scope: "col", className: clsx_m_default(styles_css_default51["calendar-grid-cell"], styles_css_default51["calendar-date-header"]) },
      import_react160.default.createElement("span", { "aria-hidden": "true" }, renderDayName(locale2, dayIndex, "short")),
      import_react160.default.createElement(ScreenreaderOnly, null, renderDayName(locale2, dayIndex, "long"))
    )))
  );
}

// node_modules/@cloudscape-design/components/calendar/internal.js
function Calendar(_a) {
  var { value, locale: locale2 = "", startOfWeek: startOfWeek2, isDateEnabled = () => true, ariaLabel, ariaLabelledby, ariaDescribedby, onChange, __internalRootRef, i18nStrings, granularity = "day", previousMonthAriaLabel, nextMonthAriaLabel, todayAriaLabel } = _a, rest = __rest(_a, ["value", "locale", "startOfWeek", "isDateEnabled", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "onChange", "__internalRootRef", "i18nStrings", "granularity", "previousMonthAriaLabel", "nextMonthAriaLabel", "todayAriaLabel"]);
  checkControlled("Calendar", "value", value, "onChange", onChange);
  const baseProps = getBaseProps(rest);
  const normalizedLocale = normalizeLocale("Calendar", locale2);
  const gridWrapperRef = (0, import_react161.useRef)(null);
  const [focusedDate, setFocusedDate] = (0, import_react161.useState)(null);
  const valueDateCache = useDateCache();
  const focusedDateCache = useDateCache();
  const parsedValue = value && value.length >= 4 ? parseDate(value) : null;
  const memoizedValue = parsedValue ? valueDateCache(parsedValue) : null;
  const defaultDisplayedDate = memoizedValue !== null && memoizedValue !== void 0 ? memoizedValue : /* @__PURE__ */ new Date();
  const [displayedDate, setDisplayedDate] = (0, import_react161.useState)(defaultDisplayedDate);
  const headingId = useUniqueId("calendar-heading");
  const isMonthPicker = granularity === "month";
  const baseDate = isMonthPicker ? getBaseMonth(displayedDate, isDateEnabled) : getBaseDay(displayedDate, isDateEnabled);
  const isSameDate = isMonthPicker ? isSameMonth : isSameDay;
  const isSamePage = isMonthPicker ? isSameYear : isSameMonth;
  const isCurrentPage = (date2) => isMonthPicker || isSameMonth(date2, baseDate);
  const { previousButtonLabel, nextButtonLabel, renderDate, renderDateAnnouncement, renderHeaderText } = useCalendarLabels({
    granularity,
    i18nStrings,
    locale: normalizedLocale,
    previousMonthAriaLabel,
    nextMonthAriaLabel,
    todayAriaLabel
  });
  const gridRows = useCalendarGridRows({ baseDate, granularity, startOfWeek: startOfWeek2, locale: normalizedLocale });
  (0, import_react161.useEffect)(() => {
    memoizedValue && setDisplayedDate((prev) => prev.getTime() !== memoizedValue.getTime() ? memoizedValue : prev);
  }, [memoizedValue]);
  const selectFocusedDate = (selected, baseDate2) => {
    if (selected && isDateEnabled(selected) && isSamePage(selected, baseDate2)) {
      return selected;
    }
    const today = /* @__PURE__ */ new Date();
    if (isDateEnabled(today) && isSamePage(today, baseDate2)) {
      return today;
    }
    if (isDateEnabled(baseDate2)) {
      return baseDate2;
    }
    return null;
  };
  const focusableDate = focusedDate || selectFocusedDate(memoizedValue, baseDate);
  const onHeaderChangePageHandler = (amount) => {
    const movePage = isMonthPicker ? addYears : addMonths;
    const newDate2 = movePage(baseDate, amount);
    onChangePageHandler(newDate2);
  };
  const onChangePageHandler = (newDate2) => {
    setDisplayedDate(newDate2);
    setFocusedDate(null);
  };
  const onGridFocusDateHandler = (date2) => {
    if (date2) {
      setFocusedDate(date2 ? focusedDateCache(date2) : null);
    }
  };
  const onGridSelectDateHandler = (date2) => {
    fireNonCancelableEvent(onChange, { value: formatDate2(date2, granularity) });
    setFocusedDate(null);
  };
  const onGridBlur = (event) => {
    var _a2;
    const newFocusTargetIsInGrid = event.relatedTarget && ((_a2 = gridWrapperRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(event.relatedTarget));
    if (!newFocusTargetIsInGrid) {
      setFocusedDate(null);
    }
  };
  const onGridKeyDownHandler = useCalendarGridKeyboardNavigation({
    baseDate,
    focusableDate,
    granularity,
    isDateEnabled,
    onChangePage: onChangePageHandler,
    onFocusDate: onGridFocusDateHandler,
    onSelectDate: onGridSelectDateHandler
  });
  const headerText = renderHeaderText(baseDate);
  return import_react161.default.createElement(
    "div",
    Object.assign({ ref: __internalRootRef }, baseProps, { role: "group", "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby, className: clsx_m_default(styles_css_default51.root, styles_css_default51.calendar, baseProps.className) }),
    import_react161.default.createElement(
      "div",
      { className: styles_css_default51["calendar-inner"] },
      import_react161.default.createElement(header_default, { formattedDate: headerText, onChange: onHeaderChangePageHandler, previousLabel: previousButtonLabel, nextLabel: nextButtonLabel, headingId }),
      import_react161.default.createElement(
        "div",
        { onBlur: onGridBlur, ref: gridWrapperRef },
        import_react161.default.createElement(Grid, { isDateEnabled, focusedDate, focusableDate, onSelectDate: onGridSelectDateHandler, onFocusDate: onGridFocusDateHandler, onChangePage: onChangePageHandler, selectedDate: memoizedValue, ariaLabelledby: headingId, header: isMonthPicker ? null : import_react161.default.createElement(CalendarGridHeader, { locale: normalizedLocale, rows: gridRows }), rows: gridRows, isCurrentPage, renderDate, renderDateAnnouncement, isSameDate, onGridKeyDownHandler })
      )
    )
  );
}

// node_modules/@cloudscape-design/components/calendar/index.js
function Calendar2(_a) {
  var { locale: locale2 = "", isDateEnabled = () => true, granularity = "day" } = _a, props = __rest(_a, ["locale", "isDateEnabled", "granularity"]);
  const baseComponentProps = useBaseComponent("Calendar");
  return import_react162.default.createElement(Calendar, Object.assign({}, props, baseComponentProps, { locale: locale2, isDateEnabled, granularity }));
}
applyDisplayName(Calendar2, "Calendar");

// node_modules/@cloudscape-design/components/cards/index.js
var import_react170 = __toESM(require_react());

// node_modules/@cloudscape-design/components/cards/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/cards/styles.scoped.css";
var styles_css_default52 = {
  "card-inner": "awsui_card-inner_p8a6i_6eu0b_103",
  "root": "awsui_root_p8a6i_6eu0b_139",
  "header-variant-full-page": "awsui_header-variant-full-page_p8a6i_6eu0b_181",
  "header-refresh": "awsui_header-refresh_p8a6i_6eu0b_181",
  "list": "awsui_list_p8a6i_6eu0b_190",
  "list-grid-1": "awsui_list-grid-1_p8a6i_6eu0b_201",
  "card": "awsui_card_p8a6i_6eu0b_103",
  "list-grid-2": "awsui_list-grid-2_p8a6i_6eu0b_204",
  "list-grid-3": "awsui_list-grid-3_p8a6i_6eu0b_207",
  "list-grid-4": "awsui_list-grid-4_p8a6i_6eu0b_210",
  "list-grid-5": "awsui_list-grid-5_p8a6i_6eu0b_213",
  "list-grid-6": "awsui_list-grid-6_p8a6i_6eu0b_216",
  "list-grid-7": "awsui_list-grid-7_p8a6i_6eu0b_219",
  "list-grid-8": "awsui_list-grid-8_p8a6i_6eu0b_222",
  "list-grid-9": "awsui_list-grid-9_p8a6i_6eu0b_225",
  "list-grid-10": "awsui_list-grid-10_p8a6i_6eu0b_228",
  "list-grid-11": "awsui_list-grid-11_p8a6i_6eu0b_231",
  "list-grid-12": "awsui_list-grid-12_p8a6i_6eu0b_234",
  "list-grid-13": "awsui_list-grid-13_p8a6i_6eu0b_237",
  "list-grid-14": "awsui_list-grid-14_p8a6i_6eu0b_240",
  "list-grid-15": "awsui_list-grid-15_p8a6i_6eu0b_243",
  "list-grid-16": "awsui_list-grid-16_p8a6i_6eu0b_246",
  "list-grid-17": "awsui_list-grid-17_p8a6i_6eu0b_249",
  "list-grid-18": "awsui_list-grid-18_p8a6i_6eu0b_252",
  "list-grid-19": "awsui_list-grid-19_p8a6i_6eu0b_255",
  "list-grid-20": "awsui_list-grid-20_p8a6i_6eu0b_258",
  "selection-control": "awsui_selection-control_p8a6i_6eu0b_262",
  "loading": "awsui_loading_p8a6i_6eu0b_272",
  "empty": "awsui_empty_p8a6i_6eu0b_273",
  "has-header": "awsui_has-header_p8a6i_6eu0b_280",
  "refresh": "awsui_refresh_p8a6i_6eu0b_283",
  "remove-high-contrast-header": "awsui_remove-high-contrast-header_p8a6i_6eu0b_283",
  "card-header": "awsui_card-header_p8a6i_6eu0b_354",
  "card-header-inner": "awsui_card-header-inner_p8a6i_6eu0b_362",
  "card-selectable": "awsui_card-selectable_p8a6i_6eu0b_366",
  "card-selected": "awsui_card-selected_p8a6i_6eu0b_369",
  "section": "awsui_section_p8a6i_6eu0b_377",
  "section-header": "awsui_section-header_p8a6i_6eu0b_385",
  "section-content": "awsui_section-content_p8a6i_6eu0b_391",
  "footer-pagination": "awsui_footer-pagination_p8a6i_6eu0b_401"
};

// node_modules/@cloudscape-design/components/cards/cards-layout-helper.js
var WIDTHS = [1920, 1400, 1200, 992, 768];
var defaultCardsPerRow = WIDTHS.map((value, index, widths) => ({
  minWidth: value,
  cards: widths.length + 1 - index
}));
var getCardsPerRow = (width, config) => {
  if (config.length === 0) {
    config = defaultCardsPerRow;
  }
  let cardsPerRow = 1;
  const sortedConfig = config.slice().map((value) => ({
    minWidth: value.minWidth || 0,
    cards: value.cards
  })).sort((a2, b) => b.minWidth - a2.minWidth);
  sortedConfig.some((layout) => {
    if (width >= layout.minWidth) {
      cardsPerRow = layout.cards;
      return true;
    }
  });
  return cardsPerRow;
};

// node_modules/@cloudscape-design/components/table/tools-header.js
var import_react163 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/table/styles.scoped.css";
var styles_css_default53 = {
  "root": "awsui_root_wih1l_qzfuf_103",
  "tools": "awsui_tools_wih1l_qzfuf_114",
  "tools-filtering": "awsui_tools-filtering_wih1l_qzfuf_122",
  "tools-align-right": "awsui_tools-align-right_wih1l_qzfuf_136",
  "tools-pagination": "awsui_tools-pagination_wih1l_qzfuf_140",
  "tools-preferences": "awsui_tools-preferences_wih1l_qzfuf_140",
  "tools-small": "awsui_tools-small_wih1l_qzfuf_146",
  "table": "awsui_table_wih1l_qzfuf_152",
  "table-layout-fixed": "awsui_table-layout-fixed_wih1l_qzfuf_158",
  "wrapper": "awsui_wrapper_wih1l_qzfuf_162",
  "variant-stacked": "awsui_variant-stacked_wih1l_qzfuf_169",
  "wrapper-content-measure": "awsui_wrapper-content-measure_wih1l_qzfuf_169",
  "variant-container": "awsui_variant-container_wih1l_qzfuf_169",
  "has-footer": "awsui_has-footer_wih1l_qzfuf_172",
  "has-header": "awsui_has-header_wih1l_qzfuf_175",
  "cell-merged": "awsui_cell-merged_wih1l_qzfuf_192",
  "cell-merged-content": "awsui_cell-merged-content_wih1l_qzfuf_204",
  "empty": "awsui_empty_wih1l_qzfuf_222",
  "loading": "awsui_loading_wih1l_qzfuf_226",
  "selection-control": "awsui_selection-control_wih1l_qzfuf_235",
  "selection-control-header": "awsui_selection-control-header_wih1l_qzfuf_242",
  "dark-header": "awsui_dark-header_wih1l_qzfuf_252",
  "header-secondary": "awsui_header-secondary_wih1l_qzfuf_257",
  "table-has-header": "awsui_table-has-header_wih1l_qzfuf_275",
  "header-controls": "awsui_header-controls_wih1l_qzfuf_279",
  "variant-full-page": "awsui_variant-full-page_wih1l_qzfuf_282",
  "variant-embedded": "awsui_variant-embedded_wih1l_qzfuf_288",
  "variant-borderless": "awsui_variant-borderless_wih1l_qzfuf_288",
  "footer-wrapper": "awsui_footer-wrapper_wih1l_qzfuf_293",
  "footer": "awsui_footer_wih1l_qzfuf_293",
  "footer-with-pagination": "awsui_footer-with-pagination_wih1l_qzfuf_301",
  "footer-pagination": "awsui_footer-pagination_wih1l_qzfuf_309",
  "thead-active": "awsui_thead-active_wih1l_qzfuf_313",
  "row": "awsui_row_wih1l_qzfuf_314",
  "row-selected": "awsui_row-selected_wih1l_qzfuf_315"
};

// node_modules/@cloudscape-design/components/table/tools-header.js
function ToolsHeader({ header, filter, pagination, preferences }) {
  const [breakpoint, ref] = useContainerBreakpoints(["xs"]);
  const isHeaderString = typeof header === "string";
  const assignHeaderId = (0, import_react163.useContext)(CollectionLabelContext).assignId;
  const headingId = useUniqueId("heading");
  if (assignHeaderId !== void 0 && isHeaderString) {
    assignHeaderId(headingId);
  }
  const isSmall = breakpoint === "default";
  const hasTools = filter || pagination || preferences;
  return import_react163.default.createElement(
    import_react163.default.Fragment,
    null,
    isHeaderString ? import_react163.default.createElement("span", { id: headingId }, header) : header,
    hasTools && import_react163.default.createElement(
      "div",
      { ref, className: clsx_m_default(styles_css_default53.tools, isSmall && styles_css_default53["tools-small"]) },
      filter && import_react163.default.createElement("div", { className: styles_css_default53["tools-filtering"] }, filter),
      import_react163.default.createElement(
        "div",
        { className: styles_css_default53["tools-align-right"] },
        pagination && import_react163.default.createElement("div", { className: styles_css_default53["tools-pagination"] }, pagination),
        preferences && import_react163.default.createElement("div", { className: styles_css_default53["tools-preferences"] }, preferences)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/table/utils.js
var applyTrackBy = (trackBy, item) => {
  if (typeof trackBy === "function") {
    return trackBy(item);
  }
  return item[trackBy];
};
var getItemKey = (trackBy, item, index) => {
  if (!trackBy) {
    return index;
  }
  return applyTrackBy(trackBy, item);
};
var getTrackableValue = (trackBy, item) => {
  if (!trackBy) {
    return item;
  }
  return applyTrackBy(trackBy, item);
};
var getColumnKey = (column, index) => {
  return column.id || index;
};
var toContainerVariant = (variant) => {
  const isDefaultVariant = !variant || variant === "container";
  return isDefaultVariant ? "default" : variant === "borderless" ? "embedded" : variant;
};
function checkSortingState(columnDefinitions, sortingComparator) {
  const matchedColumn = columnDefinitions.filter((column) => column.sortingComparator === sortingComparator)[0];
  if (!matchedColumn) {
    warnOnce("Table", "Currently active sorting comparator was not found in any columns. Make sure to provide the same comparator function instance on each render.");
  }
}
function getVisibleColumnDefinitions({ columnDisplay, visibleColumns, columnDefinitions }) {
  if (columnDisplay) {
    return getVisibleColumnDefinitionsFromColumnDisplay({ columnDisplay, columnDefinitions });
  } else if (visibleColumns) {
    return getVisibleColumnDefinitionsFromVisibleColumns({ visibleColumns, columnDefinitions });
  } else {
    return columnDefinitions;
  }
}
function getVisibleColumnDefinitionsFromColumnDisplay({ columnDisplay, columnDefinitions }) {
  const columnDefinitionsById = columnDefinitions.reduce((accumulator, item) => item.id === void 0 ? accumulator : Object.assign(Object.assign({}, accumulator), { [item.id]: item }), {});
  return columnDisplay.filter((item) => item.visible).map((item) => columnDefinitionsById[item.id]).filter(Boolean);
}
function getVisibleColumnDefinitionsFromVisibleColumns({ visibleColumns, columnDefinitions }) {
  const ids2 = new Set(visibleColumns);
  return columnDefinitions.filter(({ id }) => id !== void 0 && ids2.has(id));
}
function getStickyClassNames(styles, props) {
  return {
    [styles["sticky-cell"]]: !!props,
    [styles["sticky-cell-pad-left"]]: !!(props === null || props === void 0 ? void 0 : props.padLeft),
    [styles["sticky-cell-last-left"]]: !!(props === null || props === void 0 ? void 0 : props.lastLeft),
    [styles["sticky-cell-last-right"]]: !!(props === null || props === void 0 ? void 0 : props.lastRight)
  };
}

// node_modules/@cloudscape-design/components/table/selection/selection-control.js
var import_react167 = __toESM(require_react());

// node_modules/@cloudscape-design/components/checkbox/internal.js
var import_react165 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/abstract-switch/index.js
var import_react164 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/abstract-switch/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/abstract-switch/styles.scoped.css";
var styles_css_default54 = {
  "content": "awsui_content_1wepg_11g7b_99",
  "description": "awsui_description_1wepg_11g7b_100",
  "label": "awsui_label_1wepg_11g7b_101",
  "outline": "awsui_outline_1wepg_11g7b_109",
  "show-outline": "awsui_show-outline_1wepg_11g7b_112",
  "native-input": "awsui_native-input_1wepg_11g7b_116",
  "wrapper": "awsui_wrapper_1wepg_11g7b_120",
  "label-wrapper": "awsui_label-wrapper_1wepg_11g7b_126",
  "empty-content": "awsui_empty-content_1wepg_11g7b_137",
  "description-bottom-padding": "awsui_description-bottom-padding_1wepg_11g7b_147",
  "label-disabled": "awsui_label-disabled_1wepg_11g7b_155",
  "description-disabled": "awsui_description-disabled_1wepg_11g7b_156",
  "control": "awsui_control_1wepg_11g7b_161"
};

// node_modules/@cloudscape-design/components/internal/components/abstract-switch/index.js
function joinString(values) {
  return values.filter((value) => !!value).join(" ");
}
function AbstractSwitch(_a) {
  var { controlId, controlClassName, outlineClassName, showOutline: showOutline2, disabled, nativeControl, styledControl, label, description, descriptionBottomPadding, ariaLabel, ariaLabelledby, ariaDescribedby, ariaControls, onClick, __internalRootRef } = _a, rest = __rest(_a, ["controlId", "controlClassName", "outlineClassName", "showOutline", "disabled", "nativeControl", "styledControl", "label", "description", "descriptionBottomPadding", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "ariaControls", "onClick", "__internalRootRef"]);
  const uniqueId = useUniqueId();
  const id = controlId || uniqueId;
  const labelId = `${id}-label`;
  const descriptionId = `${id}-description`;
  const ariaLabelledByIds = [];
  if (label && !ariaLabel) {
    ariaLabelledByIds.push(labelId);
  }
  if (ariaLabelledby) {
    ariaLabelledByIds.push(ariaLabelledby);
  }
  const ariaDescriptions = [];
  if (ariaDescribedby) {
    ariaDescriptions.push(ariaDescribedby);
  }
  if (description) {
    ariaDescriptions.push(descriptionId);
  }
  return import_react164.default.createElement(
    "span",
    Object.assign({}, rest, { className: clsx_m_default(styles_css_default54.wrapper, rest.className), ref: __internalRootRef }),
    import_react164.default.createElement(
      "span",
      { className: styles_css_default54["label-wrapper"], "aria-disabled": disabled ? "true" : void 0, onClick: disabled ? void 0 : onClick },
      import_react164.default.createElement(
        "span",
        { className: clsx_m_default(styles_css_default54.control, controlClassName) },
        styledControl,
        nativeControl({
          id,
          disabled,
          className: styles_css_default54["native-input"],
          "aria-describedby": ariaDescriptions.length ? joinString(ariaDescriptions) : void 0,
          "aria-labelledby": ariaLabelledByIds.length ? joinString(ariaLabelledByIds) : void 0,
          "aria-label": ariaLabel,
          "aria-controls": ariaControls
        }),
        import_react164.default.createElement("span", { className: clsx_m_default(styles_css_default54.outline, outlineClassName, showOutline2 && styles_css_default54["show-outline"]) })
      ),
      import_react164.default.createElement(
        "span",
        { className: clsx_m_default(styles_css_default54.content, !label && !description && styles_css_default54["empty-content"]) },
        label && import_react164.default.createElement("span", { id: labelId, className: clsx_m_default(styles_css_default54.label, { [styles_css_default54["label-disabled"]]: disabled }) }, label),
        description && import_react164.default.createElement("span", { id: descriptionId, className: clsx_m_default(styles_css_default54.description, {
          [styles_css_default54["description-disabled"]]: disabled,
          [styles_css_default54["description-bottom-padding"]]: descriptionBottomPadding
        }) }, description)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/checkbox/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/checkbox/styles.scoped.css";
var styles_css_default55 = {
  "root": "awsui_root_k2y2q_16s24_99",
  "checkbox-control": "awsui_checkbox-control_k2y2q_16s24_135",
  "outline": "awsui_outline_k2y2q_16s24_143"
};

// node_modules/@cloudscape-design/components/checkbox/internal.js
var InternalCheckbox = import_react165.default.forwardRef((_a, ref) => {
  var { controlId, name, checked, disabled, ariaRequired, indeterminate, children, description, ariaLabel, onFocus, onBlur, onChange, tabIndex: explicitTabIndex, showOutline: showOutline2, ariaControls, __internalRootRef } = _a, rest = __rest(_a, ["controlId", "name", "checked", "disabled", "ariaRequired", "indeterminate", "children", "description", "ariaLabel", "onFocus", "onBlur", "onChange", "tabIndex", "showOutline", "ariaControls", "__internalRootRef"]);
  const { ariaDescribedby, ariaLabelledby } = useFormFieldContext(rest);
  const baseProps = getBaseProps(rest);
  const checkboxRef = (0, import_react165.useRef)(null);
  useForwardFocus(ref, checkboxRef);
  (0, import_react165.useEffect)(() => {
    if (checkboxRef.current) {
      checkboxRef.current.indeterminate = Boolean(indeterminate);
    }
  });
  const { tabIndex } = useSingleTabStopNavigation(checkboxRef, { tabIndex: explicitTabIndex });
  return import_react165.default.createElement(AbstractSwitch, Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default55.root, baseProps.className), controlClassName: styles_css_default55["checkbox-control"], outlineClassName: styles_css_default55.outline, controlId, disabled, label: children, description, descriptionBottomPadding: true, ariaLabel, ariaLabelledby, ariaDescribedby, ariaControls, showOutline: showOutline2, nativeControl: (nativeControlProps) => import_react165.default.createElement("input", Object.assign({}, nativeControlProps, {
    ref: checkboxRef,
    type: "checkbox",
    checked,
    name,
    "aria-required": ariaRequired ? "true" : void 0,
    tabIndex,
    onFocus: () => fireNonCancelableEvent(onFocus),
    onBlur: () => fireNonCancelableEvent(onBlur),
    // empty handler to suppress React controllability warning
    onChange: () => {
    }
  })), onClick: () => {
    var _a2;
    (_a2 = checkboxRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    fireNonCancelableEvent(
      onChange,
      // for deterministic transitions "indeterminate" -> "checked" -> "unchecked"
      indeterminate ? { checked: true, indeterminate: false } : { checked: !checked, indeterminate: false }
    );
  }, styledControl: import_react165.default.createElement(checkbox_icon_default, { checked, indeterminate, disabled }), __internalRootRef }));
});
var internal_default12 = InternalCheckbox;

// node_modules/@cloudscape-design/components/radio-group/radio-button.js
var import_react166 = __toESM(require_react());

// node_modules/@cloudscape-design/components/radio-group/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/radio-group/styles.scoped.css";
var styles_css_default56 = {
  "root": "awsui_root_1mabk_kpa3a_99",
  "radio": "awsui_radio_1mabk_kpa3a_135",
  "radio--has-description": "awsui_radio--has-description_1mabk_kpa3a_143",
  "radio-control": "awsui_radio-control_1mabk_kpa3a_147",
  "outline": "awsui_outline_1mabk_kpa3a_155",
  "styled-circle-border": "awsui_styled-circle-border_1mabk_kpa3a_177",
  "styled-circle-disabled": "awsui_styled-circle-disabled_1mabk_kpa3a_181",
  "styled-circle-fill": "awsui_styled-circle-fill_1mabk_kpa3a_186",
  "styled-circle-checked": "awsui_styled-circle-checked_1mabk_kpa3a_192"
};

// node_modules/@cloudscape-design/components/radio-group/radio-button.js
var radio_button_default = import_react166.default.forwardRef(function RadioButton({ name, label, value, checked, description, disabled, controlId, onChange }, ref) {
  const isVisualRefresh = useVisualRefresh();
  const radioButtonRef = (0, import_react166.useRef)(null);
  const mergedRefs = useMergeRefs(radioButtonRef, ref);
  const { tabIndex } = useSingleTabStopNavigation(radioButtonRef);
  return import_react166.default.createElement(AbstractSwitch, { className: clsx_m_default(styles_css_default56.radio, description && styles_css_default56["radio--has-description"]), controlClassName: styles_css_default56["radio-control"], outlineClassName: styles_css_default56.outline, label, description, disabled, controlId, nativeControl: (nativeControlProps) => import_react166.default.createElement("input", Object.assign({}, nativeControlProps, {
    tabIndex,
    type: "radio",
    ref: mergedRefs,
    name,
    value,
    checked,
    // empty handler to suppress React controllability warning
    onChange: () => {
    }
  })), onClick: () => {
    var _a;
    (_a = radioButtonRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    if (checked) {
      return;
    }
    fireNonCancelableEvent(onChange, { value });
  }, styledControl: import_react166.default.createElement(
    "svg",
    { viewBox: "0 0 100 100", focusable: "false", "aria-hidden": "true" },
    import_react166.default.createElement("circle", { className: clsx_m_default(styles_css_default56["styled-circle-border"], { [styles_css_default56["styled-circle-disabled"]]: disabled }), strokeWidth: isVisualRefresh ? 12 : 8, cx: 50, cy: 50, r: isVisualRefresh ? 44 : 46 }),
    import_react166.default.createElement("circle", { className: clsx_m_default(styles_css_default56["styled-circle-fill"], {
      [styles_css_default56["styled-circle-disabled"]]: disabled,
      [styles_css_default56["styled-circle-checked"]]: checked
    }), strokeWidth: 30, cx: 50, cy: 50, r: 35 })
  ) });
});

// node_modules/@cloudscape-design/components/table/selection/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/table/selection/styles.scoped.css";
var styles_css_default57 = {
  "root": "awsui_root_1s55x_d36ci_99",
  "label": "awsui_label_1s55x_d36ci_103",
  "stud": "awsui_stud_1s55x_d36ci_117"
};

// node_modules/@cloudscape-design/components/table/selection/selection-control.js
function SelectionControl(_a) {
  var { selectionType, indeterminate = false, onShiftToggle, onFocusUp, onFocusDown, name, ariaLabel, focusedComponent } = _a, sharedProps = __rest(_a, ["selectionType", "indeterminate", "onShiftToggle", "onFocusUp", "onFocusDown", "name", "ariaLabel", "focusedComponent"]);
  const controlId = useUniqueId();
  const isMultiSelection = selectionType === "multi";
  const { navigationActive } = (0, import_react167.useContext)(SingleTabStopNavigationContext);
  const setShiftState = (event) => {
    if (isMultiSelection) {
      onShiftToggle && onShiftToggle(event.shiftKey);
    }
  };
  const onMouseDownHandler = (event) => {
    setShiftState(event);
    if (isMultiSelection) {
      event.preventDefault();
    }
  };
  const handleKeyDown = (event) => {
    setShiftState(event);
    if (isMultiSelection && !navigationActive) {
      if (event.keyCode === KeyCode.up) {
        event.preventDefault();
        onFocusUp && onFocusUp(event);
      }
      if (event.keyCode === KeyCode.down) {
        event.preventDefault();
        onFocusDown && onFocusDown(event);
      }
    }
  };
  const handleClick = (event) => {
    const target = event.currentTarget;
    const nativeInput = target.tagName === "INPUT" ? target : target.querySelector("input");
    nativeInput === null || nativeInput === void 0 ? void 0 : nativeInput.focus();
  };
  const selector = isMultiSelection ? import_react167.default.createElement(internal_default12, Object.assign({}, sharedProps, { showOutline: focusedComponent === "selection-control", controlId, "data-focus-id": "selection-control", indeterminate })) : import_react167.default.createElement(radio_button_default, Object.assign({}, sharedProps, { controlId, name, value: "", label: "" }));
  return import_react167.default.createElement(
    import_react167.default.Fragment,
    null,
    import_react167.default.createElement("label", { onKeyDown: handleKeyDown, onKeyUp: setShiftState, onMouseDown: onMouseDownHandler, onMouseUp: setShiftState, onClick: handleClick, htmlFor: controlId, className: clsx_m_default(styles_css_default57.label, styles_css_default57.root), "aria-label": ariaLabel, title: ariaLabel }, selector),
    import_react167.default.createElement("span", { className: clsx_m_default(styles_css_default57.stud), "aria-hidden": true }, " ")
  );
}

// node_modules/@cloudscape-design/components/table/selection/utils.js
var SELECTION_ITEM = "selection-item";
var SELECTION_ROOT = "selection-root";
var ItemSet = class {
  constructor(trackBy, items) {
    this.map = /* @__PURE__ */ new Map();
    this.put = (item) => this.map.set.call(this.map, getTrackableValue(this.trackBy, item), item);
    this.has = (item) => this.map.has.call(this.map, getTrackableValue(this.trackBy, item));
    this.forEach = this.map.forEach.bind(this.map);
    this.trackBy = trackBy;
    items.forEach(this.put);
  }
};
var focusMarkers = {
  item: { ["data-" + SELECTION_ITEM]: "item" },
  all: { ["data-" + SELECTION_ITEM]: "all" },
  root: { ["data-" + SELECTION_ROOT]: "true" }
};

// node_modules/@cloudscape-design/components/table/selection/use-selection-focus-move.js
function useSelectionFocusMove(selectionType, totalItems) {
  if (selectionType !== "multi") {
    return {};
  }
  function moveFocus(sourceElement, fromIndex, direction) {
    let index = fromIndex;
    const rootContainer = findRootContainer(sourceElement);
    while (index >= -1 && index < totalItems) {
      index += direction;
      const control = findSelectionControlByIndex(rootContainer, index);
      if (control && !control.disabled) {
        control.focus();
        break;
      }
    }
  }
  const [moveFocusDown, moveFocusUp] = [1, -1].map((direction) => {
    return (event) => {
      const target = event.currentTarget;
      const itemNode = findUpUntil2(target, (node) => node.dataset.selectionItem === "item");
      const fromIndex = Array.prototype.indexOf.call(itemNode.parentElement.children, itemNode);
      moveFocus(target, fromIndex, direction);
    };
  });
  return {
    moveFocusDown,
    moveFocusUp,
    moveFocus
  };
}
function findSelectionControlByIndex(rootContainer, index) {
  if (index === -1) {
    return rootContainer.querySelector(`[data-${SELECTION_ITEM}="all"] .${styles_css_default57.root} input`);
  }
  return rootContainer.querySelectorAll(`[data-${SELECTION_ITEM}="item"] .${styles_css_default57.root} input`)[index];
}
function findRootContainer(element) {
  return findUpUntil2(element, (node) => node.dataset.selectionRoot === "true");
}

// node_modules/@cloudscape-design/components/table/selection/use-selection.js
var import_react168 = __toESM(require_react());
function useSelection({ items, selectedItems = [], selectionType, isItemDisabled = () => false, trackBy, onSelectionChange, ariaLabels, loading }) {
  const [shiftPressed, setShiftPressed] = (0, import_react168.useState)(false);
  const [lastClickedItem, setLastClickedItem] = (0, import_react168.useState)(null);
  const selectionName = useUniqueId();
  const finalSelectedItems = selectionType === "single" ? selectedItems.slice(0, 1) : selectedItems;
  const selectedSet = new ItemSet(trackBy, finalSelectedItems);
  const itemIndexesMap = /* @__PURE__ */ new Map();
  items.forEach((item, i) => itemIndexesMap.set(getTrackableValue(trackBy, item), i));
  const isItemSelected = selectedSet.has.bind(selectedSet);
  const getItemState = (item) => ({
    disabled: isItemDisabled(item),
    selected: isItemSelected(item)
  });
  const [allDisabled, allEnabledSelected] = selectionType ? items.reduce(([allDisabled2, allEnabledSelected2], item) => {
    const { disabled, selected } = getItemState(item);
    return [
      // all items are disabled (or none are present)
      allDisabled2 && disabled,
      // all enabled items are selected (or none are present)
      allEnabledSelected2 && (selected || disabled)
    ];
  }, [true, true]) : [true, true];
  const hasSelected = finalSelectedItems.length > 0;
  const handleToggleAll = () => {
    const requestedItems = new ItemSet(trackBy, items);
    const newSelectedItems = allEnabledSelected ? deselectItems(requestedItems) : selectItems(requestedItems);
    fireNonCancelableEvent(onSelectionChange, { selectedItems: newSelectedItems });
  };
  const getRequestedItems = (item) => {
    const requestedItems = new ItemSet(trackBy, [item]);
    let lastClickedItemIndex = lastClickedItem ? itemIndexesMap.get(getTrackableValue(trackBy, lastClickedItem)) : -1;
    if (lastClickedItemIndex === void 0) {
      lastClickedItemIndex = -1;
    }
    if (shiftPressed && lastClickedItemIndex !== -1) {
      const currentItemIndex = itemIndexesMap.get(getTrackableValue(trackBy, item));
      const start = Math.min(currentItemIndex, lastClickedItemIndex);
      const end = Math.max(currentItemIndex, lastClickedItemIndex);
      items.slice(start, end + 1).forEach((item2) => requestedItems.put(item2));
    }
    return requestedItems;
  };
  const deselectItems = (requestedItems) => {
    const newSelectedItems = [];
    selectedItems.forEach((selectedItem) => {
      const toUnselect = requestedItems.has(selectedItem);
      if (!toUnselect || isItemDisabled(selectedItem)) {
        newSelectedItems.push(selectedItem);
      }
    });
    return newSelectedItems;
  };
  const selectItems = (requestedItems) => {
    const newSelectedItems = [...selectedItems];
    requestedItems.forEach((newItem) => {
      const { selected, disabled } = getItemState(newItem);
      if (!selected && !disabled) {
        newSelectedItems.push(newItem);
      }
    });
    return newSelectedItems;
  };
  const handleToggleItem = (item) => () => {
    const { disabled, selected } = getItemState(item);
    if (disabled || selectionType === "single" && selected) {
      return;
    }
    if (selectionType === "single") {
      fireNonCancelableEvent(onSelectionChange, { selectedItems: [item] });
    } else {
      const requestedItems = getRequestedItems(item);
      const selectedItems2 = selected ? deselectItems(requestedItems) : selectItems(requestedItems);
      fireNonCancelableEvent(onSelectionChange, { selectedItems: selectedItems2 });
      setLastClickedItem(item);
    }
  };
  return {
    isItemSelected,
    getSelectAllProps: () => {
      var _a;
      if (!selectionType) {
        throw new Error("Invariant violation: calling selection props with missing selection type.");
      }
      return {
        name: selectionName,
        disabled: allDisabled || !!loading,
        selectionType,
        indeterminate: hasSelected && !allEnabledSelected,
        checked: hasSelected && allEnabledSelected,
        onChange: handleToggleAll,
        ariaLabel: joinStrings(ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel, (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.allItemsSelectionLabel) === null || _a === void 0 ? void 0 : _a.call(ariaLabels, { selectedItems }))
      };
    },
    getItemSelectionProps: (item) => {
      var _a;
      if (!selectionType) {
        throw new Error("Invariant violation: calling selection props with missing selection type.");
      }
      return {
        name: selectionName,
        selectionType,
        ariaLabel: joinStrings(ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel, (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.itemSelectionLabel) === null || _a === void 0 ? void 0 : _a.call(ariaLabels, { selectedItems }, item)),
        onChange: handleToggleItem(item),
        checked: isItemSelected(item),
        disabled: isItemDisabled(item)
      };
    },
    updateShiftToggle: (value) => {
      setShiftPressed(value);
    }
  };
}

// node_modules/@cloudscape-design/components/table/sticky-scrolling.js
function stickyScrolling(containerRef, stickyRef) {
  const scrollToTop = () => {
    if (!containerRef.current || !stickyRef.current) {
      return;
    }
    const scrollingOffset = calculateScrollingOffset(containerRef.current, stickyRef.current);
    if (scrollingOffset > 0) {
      scrollUpBy(scrollingOffset, containerRef.current);
    }
  };
  const scrollToItem = (item) => {
    if (!item || !containerRef.current || !stickyRef.current) {
      return;
    }
    const stickyBottom = stickyRef.current.getBoundingClientRect().bottom;
    const scrollingOffset = stickyBottom - item.getBoundingClientRect().top;
    if (scrollingOffset > 0) {
      scrollUpBy(scrollingOffset, containerRef.current);
    }
  };
  return {
    scrollToTop,
    scrollToItem
  };
}
function calculateScrollingOffset(container, sticky) {
  const stickyRect = sticky.getBoundingClientRect();
  const containerRect = container.getBoundingClientRect();
  return stickyRect.top - containerRect.top;
}
function scrollUpBy(amount, container) {
  const parent = getOverflowParents(container);
  if (parent.length) {
    parent[0].scrollTop -= amount;
  } else {
    window.scrollTo({ top: window.pageYOffset - amount });
  }
}

// node_modules/@cloudscape-design/components/internal/hooks/use-mouse-down-target.js
var import_react169 = __toESM(require_react());
var useEventListenersSingleton = createSingletonHandler((setTarget) => {
  function handleMouseDown(event) {
    setTarget(event.target);
  }
  function handleKeyDown() {
    setTarget(null);
  }
  window.addEventListener("mousedown", handleMouseDown);
  window.addEventListener("keydown", handleKeyDown);
  return () => {
    window.removeEventListener("mousedown", handleMouseDown);
    window.removeEventListener("keydown", handleKeyDown);
  };
});
function useMouseDownTarget() {
  const mouseDownTargetRef = (0, import_react169.useRef)(null);
  useEventListenersSingleton((target) => {
    mouseDownTargetRef.current = target;
  });
  return () => mouseDownTargetRef.current;
}

// node_modules/@cloudscape-design/components/cards/index.js
var Cards = import_react170.default.forwardRef(function(_a, ref) {
  var { items = [], cardDefinition, cardsPerRow = [], header, filter, pagination, preferences, empty, loading, loadingText, trackBy, selectedItems, selectionType, isItemDisabled, onSelectionChange, ariaLabels, visibleSections, stickyHeader, stickyHeaderVerticalOffset, variant = "container", renderAriaLive, firstIndex, totalItemsCount, entireCardClickable } = _a, rest = __rest(_a, ["items", "cardDefinition", "cardsPerRow", "header", "filter", "pagination", "preferences", "empty", "loading", "loadingText", "trackBy", "selectedItems", "selectionType", "isItemDisabled", "onSelectionChange", "ariaLabels", "visibleSections", "stickyHeader", "stickyHeaderVerticalOffset", "variant", "renderAriaLive", "firstIndex", "totalItemsCount", "entireCardClickable"]);
  const { __internalRootRef } = useBaseComponent("Cards", {
    props: { entireCardClickable, selectionType, stickyHeader, variant }
  });
  const baseProps = getBaseProps(rest);
  const isRefresh = useVisualRefresh();
  const isMobile = useMobile();
  const computedVariant = isRefresh ? variant : "container";
  const headerIdRef = (0, import_react170.useRef)(void 0);
  const setHeaderRef = (0, import_react170.useCallback)((id) => {
    headerIdRef.current = id;
  }, []);
  const isLabelledByHeader = !(ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.cardsLabel) && !!header;
  const [columns, measureRef] = useContainerQuery(({ contentBoxWidth }) => getCardsPerRow(contentBoxWidth, cardsPerRow), [cardsPerRow]);
  const refObject = (0, import_react170.useRef)(null);
  const mergedRef = useMergeRefs(measureRef, refObject, __internalRootRef);
  const getMouseDownTarget = useMouseDownTarget();
  const i18n = useInternalI18n("cards");
  const { isItemSelected, getItemSelectionProps, updateShiftToggle } = useSelection({
    items,
    trackBy,
    selectedItems,
    selectionType,
    isItemDisabled,
    onSelectionChange,
    ariaLabels: {
      itemSelectionLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.itemSelectionLabel,
      selectionGroupLabel: i18n("ariaLabels.selectionGroupLabel", ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel)
    }
  });
  const hasToolsHeader = header || filter || pagination || preferences;
  const hasFooterPagination = isMobile && variant === "full-page" && !!pagination;
  const headerRef = (0, import_react170.useRef)(null);
  const { scrollToTop, scrollToItem } = stickyScrolling(refObject, headerRef);
  stickyHeader = supportsStickyPosition() && !isMobile && stickyHeader;
  const onCardFocus = (event) => {
    if (stickyHeader && !event.currentTarget.contains(getMouseDownTarget())) {
      scrollToItem(event.currentTarget);
    }
  };
  (0, import_react170.useImperativeHandle)(ref, () => ({
    scrollToTop: () => {
      if (stickyHeader) {
        scrollToTop();
      }
    }
  }), [stickyHeader, scrollToTop]);
  let status;
  if (loading) {
    status = import_react170.default.createElement(
      "div",
      { className: styles_css_default52.loading },
      import_react170.default.createElement(
        StatusIndicator,
        { type: "loading" },
        import_react170.default.createElement(live_region_default, { visible: true }, loadingText)
      )
    );
  } else if (empty && !items.length) {
    status = import_react170.default.createElement("div", { className: styles_css_default52.empty }, empty);
  }
  return import_react170.default.createElement(
    LinkDefaultVariantContext.Provider,
    { value: { defaultVariant: "primary" } },
    import_react170.default.createElement(
      AnalyticsFunnelSubStep,
      null,
      import_react170.default.createElement(
        "div",
        Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default52.root), ref: mergedRef }),
        import_react170.default.createElement(
          InternalContainerAsSubstep,
          { header: hasToolsHeader && import_react170.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default52.header, isRefresh && styles_css_default52["header-refresh"], styles_css_default52[`header-variant-${computedVariant}`], shouldRemoveHighContrastHeader() && styles_css_default52["remove-high-contrast-header"]) },
            import_react170.default.createElement(
              CollectionLabelContext.Provider,
              { value: { assignId: setHeaderRef } },
              import_react170.default.createElement(ToolsHeader, { header, filter, pagination, preferences })
            )
          ), footer: hasFooterPagination && import_react170.default.createElement("div", { className: styles_css_default52["footer-pagination"] }, pagination), disableContentPaddings: true, disableHeaderPaddings: computedVariant === "full-page", variant: computedVariant === "container" ? "cards" : computedVariant, __stickyHeader: stickyHeader, __stickyOffset: stickyHeaderVerticalOffset, __headerRef: headerRef, __darkHeader: computedVariant === "full-page", __disableFooterDivider: true },
          import_react170.default.createElement(
            "div",
            { className: clsx_m_default(hasToolsHeader && styles_css_default52["has-header"], isRefresh && styles_css_default52.refresh, styles_css_default52[`header-variant-${computedVariant}`], shouldRemoveHighContrastHeader() && styles_css_default52["remove-high-contrast-header"]) },
            !!renderAriaLive && !!firstIndex && import_react170.default.createElement(
              live_region_default,
              null,
              import_react170.default.createElement("span", null, renderAriaLive({ totalItemsCount, firstIndex, lastIndex: firstIndex + items.length - 1 }))
            ),
            status !== null && status !== void 0 ? status : import_react170.default.createElement(CardsList, { items, cardDefinition, trackBy, selectionType, columns, isItemSelected, getItemSelectionProps, visibleSections, updateShiftToggle, onFocus: onCardFocus, ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.cardsLabel, ariaLabelledby: isLabelledByHeader && headerIdRef.current ? headerIdRef.current : void 0, entireCardClickable })
          )
        )
      )
    )
  );
});
var cards_default = Cards;
var CardsList = ({ items, cardDefinition, trackBy, selectionType, columns, isItemSelected, getItemSelectionProps, visibleSections, updateShiftToggle, onFocus, ariaLabelledby, ariaLabel, entireCardClickable }) => {
  const selectable = !!selectionType;
  const canClickEntireCard = selectable && entireCardClickable;
  const isRefresh = useVisualRefresh();
  const { moveFocusDown, moveFocusUp } = useSelectionFocusMove(selectionType, items.length);
  let visibleSectionsDefinition = cardDefinition.sections || [];
  visibleSectionsDefinition = visibleSections ? visibleSectionsDefinition.filter((section) => section.id && visibleSections.indexOf(section.id) !== -1) : visibleSectionsDefinition;
  let listRole = void 0;
  let listItemRole = void 0;
  if (selectable) {
    listRole = "group";
    listItemRole = "presentation";
  }
  return import_react170.default.createElement("ol", Object.assign({ className: clsx_m_default(styles_css_default52.list, styles_css_default52[`list-grid-${columns || 1}`]), role: listRole, "aria-labelledby": ariaLabelledby, "aria-label": ariaLabel }, focusMarkers && focusMarkers.root), items.map((item, index) => import_react170.default.createElement(
    "li",
    Object.assign({ className: clsx_m_default(styles_css_default52.card, {
      [styles_css_default52["card-selectable"]]: selectable,
      [styles_css_default52["card-selected"]]: selectable && isItemSelected(item)
    }), key: getItemKey(trackBy, item, index), onFocus }, focusMarkers && focusMarkers.item, { role: listItemRole }),
    import_react170.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default52["card-inner"], isRefresh && styles_css_default52.refresh), onClick: canClickEntireCard ? (event) => {
        var _a;
        getItemSelectionProps(item).onChange();
        (_a = event.currentTarget.querySelector("input")) === null || _a === void 0 ? void 0 : _a.focus();
      } : void 0 },
      import_react170.default.createElement(
        "div",
        { className: styles_css_default52["card-header"] },
        import_react170.default.createElement("div", { className: styles_css_default52["card-header-inner"] }, cardDefinition.header ? cardDefinition.header(item) : ""),
        selectable && import_react170.default.createElement(
          "div",
          { className: styles_css_default52["selection-control"] },
          import_react170.default.createElement(SelectionControl, Object.assign({ onFocusDown: moveFocusDown, onFocusUp: moveFocusUp, onShiftToggle: updateShiftToggle }, getItemSelectionProps(item)))
        )
      ),
      visibleSectionsDefinition.map(({ width = 100, header, content, id }, index2) => import_react170.default.createElement(
        "div",
        { key: id || index2, className: styles_css_default52.section, style: { width: `${width}%` } },
        header ? import_react170.default.createElement("div", { className: styles_css_default52["section-header"] }, header) : "",
        content ? import_react170.default.createElement("div", { className: styles_css_default52["section-content"] }, content(item)) : ""
      ))
    )
  )));
};
applyDisplayName(Cards, "Cards");

// node_modules/@cloudscape-design/components/checkbox/index.js
var import_react171 = __toESM(require_react());
var Checkbox = import_react171.default.forwardRef((_a, ref) => {
  var props = __rest(_a, []);
  const baseComponentProps = useBaseComponent("Checkbox");
  return import_react171.default.createElement(internal_default12, Object.assign({}, props, baseComponentProps, { ref }));
});
applyDisplayName(Checkbox, "Checkbox");
var checkbox_default = Checkbox;

// node_modules/@cloudscape-design/components/code-editor/index.js
var import_react184 = __toESM(require_react());

// node_modules/@cloudscape-design/components/code-editor/pane.js
var import_react173 = __toESM(require_react());

// node_modules/@cloudscape-design/components/code-editor/resizable-box/index.js
var import_react172 = __toESM(require_react());

// node_modules/@cloudscape-design/components/code-editor/resizable-box/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/code-editor/resizable-box/styles.scoped.css";
var styles_css_default58 = {
  "resizable-box": "awsui_resizable-box_cufu9_1kvmu_17",
  "resizable-box-handle": "awsui_resizable-box-handle_cufu9_1kvmu_22",
  "resize-active": "awsui_resize-active_cufu9_1kvmu_49"
};

// node_modules/@cloudscape-design/components/code-editor/resizable-box/index.js
function ResizableBox({ children, height, minHeight, onResize }) {
  const [dragOffset, setDragOffset] = (0, import_react172.useState)(null);
  const onResizeStable = useStableCallback(onResize);
  const containerRef = (0, import_react172.useRef)(null);
  const onMouseDown = (event) => {
    if (event.button !== 0 || !containerRef.current) {
      return;
    }
    const containerBottom = containerRef.current.getBoundingClientRect().bottom;
    setDragOffset(containerBottom - event.clientY);
  };
  (0, import_react172.useEffect)(() => {
    if (dragOffset === null || !containerRef.current) {
      return;
    }
    const container = containerRef.current;
    const onMouseMove = (event) => {
      const { top } = container.getBoundingClientRect();
      const cursor = event.clientY;
      onResizeStable(Math.max(cursor + dragOffset - top, minHeight));
    };
    const onMouseUp = () => {
      setDragOffset(null);
    };
    document.body.classList.add(styles_css_default58["resize-active"]);
    document.addEventListener("mousemove", onMouseMove);
    document.addEventListener("mouseup", onMouseUp);
    return () => {
      document.removeEventListener("mousemove", onMouseMove);
      document.removeEventListener("mouseup", onMouseUp);
      document.body.classList.remove(styles_css_default58["resize-active"]);
    };
  }, [dragOffset, minHeight, onResizeStable]);
  return import_react172.default.createElement(
    "div",
    { ref: containerRef, className: styles_css_default58["resizable-box"], style: { height } },
    children,
    import_react172.default.createElement("span", { className: styles_css_default58["resizable-box-handle"], onMouseDown })
  );
}

// node_modules/@cloudscape-design/components/code-editor/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/code-editor/styles.scoped.css";
var styles_css_default59 = {
  "code-editor-refresh": "awsui_code-editor-refresh_1gl9c_162o6_104",
  "code-editor": "awsui_code-editor_1gl9c_162o6_104",
  "pane": "awsui_pane_1gl9c_162o6_450",
  "pane__close-container": "awsui_pane__close-container_1gl9c_162o6_461",
  "pane__list": "awsui_pane__list_1gl9c_162o6_466",
  "pane__table": "awsui_pane__table_1gl9c_162o6_473",
  "pane__item": "awsui_pane__item_1gl9c_162o6_479",
  "pane__cell": "awsui_pane__cell_1gl9c_162o6_479",
  "pane__item--highlighted": "awsui_pane__item--highlighted_1gl9c_162o6_493",
  "pane__location": "awsui_pane__location_1gl9c_162o6_514",
  "pane__description": "awsui_pane__description_1gl9c_162o6_514",
  "focus-lock": "awsui_focus-lock_1gl9c_162o6_529",
  "editor": "awsui_editor_1gl9c_162o6_580",
  "editor-refresh": "awsui_editor-refresh_1gl9c_162o6_608",
  "status-bar": "awsui_status-bar_1gl9c_162o6_613",
  "status-bar-with-hidden-pane": "awsui_status-bar-with-hidden-pane_1gl9c_162o6_621",
  "status-bar__left": "awsui_status-bar__left_1gl9c_162o6_625",
  "status-bar__left-virtual": "awsui_status-bar__left-virtual_1gl9c_162o6_632",
  "status-bar__right": "awsui_status-bar__right_1gl9c_162o6_636",
  "status-bar__language-mode": "awsui_status-bar__language-mode_1gl9c_162o6_640",
  "status-bar__cursor-position": "awsui_status-bar__cursor-position_1gl9c_162o6_640",
  "status-bar__cog-button": "awsui_status-bar__cog-button_1gl9c_162o6_646",
  "status-bar-virtual": "awsui_status-bar-virtual_1gl9c_162o6_651",
  "tab-button": "awsui_tab-button_1gl9c_162o6_657",
  "tab-button--refresh": "awsui_tab-button--refresh_1gl9c_162o6_689",
  "tab-button--warnings": "awsui_tab-button--warnings_1gl9c_162o6_692",
  "tab-button--active": "awsui_tab-button--active_1gl9c_162o6_701",
  "tab-button--disabled": "awsui_tab-button--disabled_1gl9c_162o6_717",
  "tab-button--divider": "awsui_tab-button--divider_1gl9c_162o6_750",
  "tab-button--errors": "awsui_tab-button--errors_1gl9c_162o6_757",
  "loading-screen": "awsui_loading-screen_1gl9c_162o6_761",
  "error-screen": "awsui_error-screen_1gl9c_162o6_762"
};

// node_modules/@cloudscape-design/components/code-editor/ace-modes.js
var AceModes = [
  { value: "abap", label: "ABAP" },
  { value: "abc", label: "ABC" },
  { value: "actionscript", label: "ActionScript" },
  { value: "ada", label: "ADA" },
  { value: "alda", label: "Alda" },
  { value: "apache_conf", label: "Apache Conf" },
  { value: "apex", label: "Apex" },
  { value: "aql", label: "AQL" },
  { value: "asciidoc", label: "AsciiDoc" },
  { value: "asl", label: "ASL" },
  { value: "assembly_x86", label: "Assembly x86" },
  { value: "autohotkey", label: "AutoHotkey/AutoIt" },
  { value: "batchfile", label: "BatchFile" },
  { value: "c_cpp", label: "C/C++" },
  { value: "c9search", label: "C9Search" },
  { value: "cirru", label: "Cirru" },
  { value: "clojure", label: "Clojure" },
  { value: "cobol", label: "Cobol" },
  { value: "coffee", label: "CoffeeScript" },
  { value: "coldfusion", label: "ColdFusion" },
  { value: "crystal", label: "Crystal" },
  { value: "csharp", label: "C#" },
  { value: "csound_document", label: "Csound Document" },
  { value: "csound_orchestra", label: "Csound" },
  { value: "csound_score", label: "Csound Score" },
  { value: "css", label: "CSS" },
  { value: "curly", label: "Curly" },
  { value: "d", label: "D" },
  { value: "dart", label: "Dart" },
  { value: "diff", label: "Diff" },
  { value: "django", label: "Django" },
  { value: "dockerfile", label: "Dockerfile" },
  { value: "dot", label: "Dot" },
  { value: "drools", label: "Drools" },
  { value: "edifact", label: "Edifact" },
  { value: "eiffel", label: "Eiffel" },
  { value: "ejs", label: "EJS" },
  { value: "elixir", label: "Elixir" },
  { value: "elm", label: "Elm" },
  { value: "erlang", label: "Erlang" },
  { value: "forth", label: "Forth" },
  { value: "fortran", label: "Fortran" },
  { value: "fsharp", label: "FSharp" },
  { value: "fsl", label: "FSL" },
  { value: "ftl", label: "FreeMarker" },
  { value: "gcode", label: "Gcode" },
  { value: "gherkin", label: "Gherkin" },
  { value: "gitignore", label: "Gitignore" },
  { value: "glsl", label: "Glsl" },
  { value: "gobstones", label: "Gobstones" },
  { value: "golang", label: "Go" },
  { value: "graphqlschema", label: "GraphQLSchema" },
  { value: "groovy", label: "Groovy" },
  { value: "haml", label: "HAML" },
  { value: "handlebars", label: "Handlebars" },
  { value: "haskell", label: "Haskell" },
  { value: "haskell_cabal", label: "Haskell Cabal" },
  { value: "haxe", label: "haXe" },
  { value: "hjson", label: "Hjson" },
  { value: "html", label: "HTML" },
  { value: "html_elixir", label: "HTML (Elixir)" },
  { value: "html_ruby", label: "HTML (Ruby)" },
  { value: "ini", label: "INI" },
  { value: "io", label: "Io" },
  { value: "jack", label: "Jack" },
  { value: "jade", label: "Jade" },
  { value: "java", label: "Java" },
  { value: "javascript", label: "JavaScript" },
  { value: "json", label: "JSON" },
  { value: "json5", label: "JSON5" },
  { value: "jsoniq", label: "JSONiq" },
  { value: "jsp", label: "JSP" },
  { value: "jssm", label: "JSSM" },
  { value: "jsx", label: "JSX" },
  { value: "julia", label: "Julia" },
  { value: "kotlin", label: "Kotlin" },
  { value: "latex", label: "LaTeX" },
  { value: "less", label: "LESS" },
  { value: "liquid", label: "Liquid" },
  { value: "lisp", label: "Lisp" },
  { value: "livescript", label: "LiveScript" },
  { value: "logiql", label: "LogiQL" },
  { value: "lsl", label: "LSL" },
  { value: "lua", label: "Lua" },
  { value: "luapage", label: "LuaPage" },
  { value: "lucene", label: "Lucene" },
  { value: "makefile", label: "Makefile" },
  { value: "markdown", label: "Markdown" },
  { value: "mask", label: "Mask" },
  { value: "matlab", label: "MATLAB" },
  { value: "maze", label: "Maze" },
  { value: "mediawiki", label: "MediaWiki" },
  { value: "mel", label: "MEL" },
  { value: "mixal", label: "MIXAL" },
  { value: "mushcode", label: "MUSHCode" },
  { value: "mysql", label: "MySQL" },
  { value: "nginx", label: "Nginx" },
  { value: "nim", label: "Nim" },
  { value: "nix", label: "Nix" },
  { value: "nsis", label: "NSIS" },
  { value: "nunjucks", label: "Nunjucks" },
  { value: "objectivec", label: "Objective-C" },
  { value: "ocaml", label: "OCaml" },
  { value: "pascal", label: "Pascal" },
  { value: "perl", label: "Perl" },
  { value: "perl6", label: "Perl 6" },
  { value: "pgsql", label: "pgSQL" },
  { value: "php", label: "PHP" },
  { value: "php_laravel_blade", label: "PHP (Blade Template)" },
  { value: "pig", label: "Pig" },
  { value: "powershell", label: "Powershell" },
  { value: "praat", label: "Praat" },
  { value: "prisma", label: "Prisma" },
  { value: "prolog", label: "Prolog" },
  { value: "properties", label: "Properties" },
  { value: "protobuf", label: "Protobuf" },
  { value: "puppet", label: "Puppet" },
  { value: "python", label: "Python" },
  { value: "qml", label: "QML" },
  { value: "r", label: "R" },
  { value: "razor", label: "Razor" },
  { value: "rdoc", label: "RDoc" },
  { value: "red", label: "Red" },
  { value: "rhtml", label: "RHTML" },
  { value: "rst", label: "RST" },
  { value: "ruby", label: "Ruby" },
  { value: "rust", label: "Rust" },
  { value: "sass", label: "SASS" },
  { value: "scad", label: "SCAD" },
  { value: "scala", label: "Scala" },
  { value: "scheme", label: "Scheme" },
  { value: "scss", label: "SCSS" },
  { value: "sh", label: "SH" },
  { value: "sjs", label: "SJS" },
  { value: "slim", label: "Slim" },
  { value: "smarty", label: "Smarty" },
  { value: "snippets", label: "snippets" },
  { value: "soy_template", label: "Soy Template" },
  { value: "space", label: "Space" },
  { value: "sql", label: "SQL" },
  { value: "sqlserver", label: "SQLServer" },
  { value: "stylus", label: "Stylus" },
  { value: "svg", label: "SVG" },
  { value: "swift", label: "Swift" },
  { value: "tcl", label: "Tcl" },
  { value: "terraform", label: "Terraform" },
  { value: "tex", label: "Tex" },
  { value: "text", label: "Text" },
  { value: "textile", label: "Textile" },
  { value: "toml", label: "Toml" },
  { value: "tsx", label: "TSX" },
  { value: "twig", label: "Twig" },
  { value: "typescript", label: "TypeScript" },
  { value: "vala", label: "Vala" },
  { value: "vbscript", label: "VBScript" },
  { value: "velocity", label: "Velocity" },
  { value: "verilog", label: "Verilog" },
  { value: "vhdl", label: "VHDL" },
  { value: "visualforce", label: "Visualforce" },
  { value: "wollok", label: "Wollok" },
  { value: "xml", label: "XML" },
  { value: "xquery", label: "XQuery" },
  { value: "yaml", label: "YAML" },
  { value: "zeek", label: "Zeek" }
];

// node_modules/@cloudscape-design/components/code-editor/ace-themes.js
var LightThemes = [
  { value: "chrome", label: "Chrome" },
  { value: "clouds", label: "Clouds" },
  { value: "crimson_editor", label: "Crimson Editor" },
  { value: "dawn", label: "Dawn" },
  { value: "dreamweaver", label: "Dreamweaver" },
  { value: "eclipse", label: "Eclipse" },
  { value: "github", label: "GitHub" },
  { value: "iplastic", label: "IPlastic" },
  { value: "solarized_light", label: "Solarized Light" },
  { value: "textmate", label: "TextMate" },
  { value: "tomorrow", label: "Tomorrow" },
  { value: "xcode", label: "Xcode" },
  { value: "kuroir", label: "Kuroir" },
  { value: "katzenmilch", label: "KatzenMilch" },
  { value: "sqlserver", label: "SQL Server" },
  { value: "cloud_editor", label: "CloudEditor" }
];
var DarkThemes = [
  { value: "ambiance", label: "Ambiance" },
  { value: "chaos", label: "Chaos" },
  { value: "clouds_midnight", label: "Clouds Midnight" },
  { value: "dracula", label: "Dracula" },
  { value: "cobalt", label: "Cobalt" },
  { value: "gruvbox", label: "Gruvbox" },
  { value: "gob", label: "Green on Black" },
  { value: "idle_fingers", label: "idle Fingers" },
  { value: "kr_theme", label: "krTheme" },
  { value: "merbivore", label: "Merbivore" },
  { value: "merbivore_soft", label: "Merbivore Soft" },
  { value: "mono_industrial", label: "Mono Industrial" },
  { value: "monokai", label: "Monokai" },
  { value: "nord_dark", label: "Nord Dark" },
  { value: "pastel_on_dark", label: "Pastel on dark" },
  { value: "solarized_dark", label: "Solarized Dark" },
  { value: "terminal", label: "Terminal" },
  { value: "tomorrow_night", label: "Tomorrow Night" },
  { value: "tomorrow_night_blue", label: "Tomorrow Night Blue" },
  { value: "tomorrow_night_bright", label: "Tomorrow Night Bright" },
  { value: "tomorrow_night_eighties", label: "Tomorrow Night 80s" },
  { value: "twilight", label: "Twilight" },
  { value: "vibrant_ink", label: "Vibrant Ink" },
  { value: "cloud_editor_dark", label: "CloudEditor Dark" }
];

// node_modules/@cloudscape-design/components/code-editor/util.js
var CLOUD_EDITOR_LIGHT_THEME = "cloud_editor";
var CLOUD_EDITOR_DARK_THEME = "cloud_editor_dark";
var FALLBACK_LIGHT_THEME = "dawn";
var FALLBACK_DARK_THEME = "tomorrow_night_bright";
var DEFAULT_AVAILABLE_THEMES = {
  light: LightThemes.map((theme) => theme.value).filter((value) => value !== CLOUD_EDITOR_LIGHT_THEME),
  dark: DarkThemes.map((theme) => theme.value).filter((value) => value !== CLOUD_EDITOR_DARK_THEME)
};
function isAceVersionAtLeast(ace, minVersion) {
  var _a;
  const semanticVersion = (_a = ace === null || ace === void 0 ? void 0 : ace.version) === null || _a === void 0 ? void 0 : _a.split(".").map((part) => {
    const parsed = parseInt(part);
    return Number.isNaN(parsed) ? part : parsed;
  });
  return !!semanticVersion && typeof semanticVersion[0] === "number" && semanticVersion[0] >= minVersion[0] && typeof semanticVersion[1] === "number" && semanticVersion[1] >= minVersion[1] && typeof semanticVersion[2] === "number" && semanticVersion[2] >= minVersion[2];
}
function supportsKeyboardAccessibility(ace) {
  return isAceVersionAtLeast(ace, [1, 23, 0]);
}
function getDefaultConfig(ace) {
  return Object.assign({ behavioursEnabled: true }, supportsKeyboardAccessibility(ace) ? { enableKeyboardAccessibility: true } : {});
}
function getDefaultTheme(mode, themes) {
  if (mode === "light") {
    return (themes === null || themes === void 0 ? void 0 : themes.light.some((value) => value === CLOUD_EDITOR_LIGHT_THEME)) ? CLOUD_EDITOR_LIGHT_THEME : FALLBACK_LIGHT_THEME;
  } else {
    return (themes === null || themes === void 0 ? void 0 : themes.dark.some((value) => value === CLOUD_EDITOR_DARK_THEME)) ? CLOUD_EDITOR_DARK_THEME : FALLBACK_DARK_THEME;
  }
}
function getAceTheme(theme) {
  return `ace/theme/${theme}`;
}
function getLanguageLabel(language) {
  var _a;
  return ((_a = AceModes.filter((mode) => mode.value === language)[0]) === null || _a === void 0 ? void 0 : _a.label) || language;
}
function getStatusButtonId({ paneId, paneStatus }) {
  return paneId ? `${paneId}-button-${paneStatus}` : void 0;
}

// node_modules/@cloudscape-design/components/code-editor/pane.js
var ANNOTATION_ITEM_HEIGHT = 31;
var PANE_ANNOTATIONS_PADDING = 12;
var MIN_HEIGHT = 3 * ANNOTATION_ITEM_HEIGHT + 2 * PANE_ANNOTATIONS_PADDING;
var Pane = ({ id, paneStatus, visible, annotations, highlighted, onClose, onAnnotationClick, onAnnotationClear, cursorPositionLabel, closeButtonAriaLabel }) => {
  const [paneHeight, setPaneHeight] = (0, import_react173.useState)(MIN_HEIGHT);
  const listRef = (0, import_react173.useRef)(null);
  (0, import_react173.useEffect)(() => {
    var _a;
    if (!highlighted) {
      return;
    }
    const { row, column } = highlighted;
    const highlightedAnnotationIndex = annotations.indexOf(annotations.filter((a2) => a2.row === row && a2.column === column)[0]);
    if (highlightedAnnotationIndex > -1) {
      const errorItem = (_a = listRef.current) === null || _a === void 0 ? void 0 : _a.children[highlightedAnnotationIndex];
      errorItem === null || errorItem === void 0 ? void 0 : errorItem.focus();
    }
  }, [highlighted, annotations]);
  const onItemClick = (annotation) => {
    onAnnotationClick(annotation);
  };
  const onItemKeyDown = (annotation, event) => {
    if (event.keyCode === KeyCode.enter || event.keyCode === KeyCode.space) {
      event.preventDefault();
      onAnnotationClick(annotation);
    }
  };
  const onEscKeyDown = (event) => {
    if (event.keyCode === KeyCode.escape) {
      event.preventDefault();
      onClose();
    }
  };
  const ariaLabelledBy = getStatusButtonId({ paneId: id, paneStatus });
  if (!visible) {
    return null;
  }
  return import_react173.default.createElement(
    "div",
    { id, className: styles_css_default59.pane, onKeyDown: onEscKeyDown, role: "tabpanel", "aria-labelledby": ariaLabelledBy },
    import_react173.default.createElement(
      ResizableBox,
      { height: paneHeight, minHeight: MIN_HEIGHT, onResize: (newHeight) => setPaneHeight(newHeight) },
      import_react173.default.createElement(
        focus_lock_default,
        { className: styles_css_default59["focus-lock"], autoFocus: true, restoreFocus: true },
        import_react173.default.createElement(
          "div",
          { className: styles_css_default59.pane__list, tabIndex: -1 },
          import_react173.default.createElement(
            "table",
            { className: styles_css_default59.pane__table, role: "presentation" },
            import_react173.default.createElement(
              "colgroup",
              null,
              import_react173.default.createElement("col", {
                style: { width: 1 }
                /* shrink to fit content */
              }),
              import_react173.default.createElement("col", { style: { width: "auto" } })
            ),
            import_react173.default.createElement("tbody", { ref: listRef }, annotations.map((annotation, i) => {
              var _a;
              return import_react173.default.createElement(
                "tr",
                { key: i, role: "link", className: styles_css_default59.pane__item, onMouseOver: onAnnotationClear, onClick: onItemClick.bind(null, annotation), onKeyDown: onItemKeyDown.bind(null, annotation), tabIndex: 0 },
                import_react173.default.createElement("td", { className: clsx_m_default(styles_css_default59.pane__location, styles_css_default59.pane__cell), tabIndex: -1 }, (_a = cursorPositionLabel === null || cursorPositionLabel === void 0 ? void 0 : cursorPositionLabel((annotation.row || 0) + 1, (annotation.column || 0) + 1)) !== null && _a !== void 0 ? _a : ""),
                import_react173.default.createElement("td", { className: clsx_m_default(styles_css_default59.pane__description, styles_css_default59.pane__cell), tabIndex: -1 }, annotation.text)
              );
            }))
          )
        ),
        import_react173.default.createElement(
          "div",
          { className: styles_css_default59["pane__close-container"] },
          import_react173.default.createElement(InternalButton, { formAction: "none", variant: "icon", iconName: "close", onClick: onClose, ariaLabel: closeButtonAriaLabel })
        )
      )
    )
  );
};

// node_modules/@cloudscape-design/components/code-editor/listeners.js
var import_react174 = __toESM(require_react());
function useChangeEffect(editor, onChange, onDelayedChange) {
  const debouncedChangeHandler = useDebounceCallback((detail) => {
    fireNonCancelableEvent(onDelayedChange, detail);
  }, 0);
  const handleChange = useStableCallback(() => {
    const changeDetail = { value: (editor === null || editor === void 0 ? void 0 : editor.getValue()) || "" };
    fireNonCancelableEvent(onChange, changeDetail);
    debouncedChangeHandler(changeDetail);
  });
  (0, import_react174.useEffect)(() => {
    if (!editor) {
      return;
    }
    editor.on("change", handleChange);
    return () => editor.off("change", handleChange);
  }, [editor, handleChange]);
}

// node_modules/@cloudscape-design/components/code-editor/setup-editor.js
function setupEditor(ace, editor, setAnnotations, setCursorPosition, setHighlightedAnnotation, setPaneStatus) {
  setEditorDefaults(ace, editor);
  editor.session.selection.on("changeCursor", () => {
    setCursorPosition(editor.getCursorPosition());
  });
  editor.session.on("changeAnnotation", () => {
    const editorAnnotations = editor.session.getAnnotations();
    const newAnnotations = editorAnnotations.filter((a2) => a2.type !== "info");
    if (editorAnnotations.length !== newAnnotations.length) {
      editor.session.setAnnotations(newAnnotations);
    }
    setAnnotations(newAnnotations);
  });
  const moveCursorToAnnotation = (a2) => {
    if (typeof a2.row === "number") {
      editor.gotoLine(a2.row + 1, a2.column || 0, false);
    }
  };
  const openAnnotation = (row) => {
    const currentAnnotations = editor.session.getAnnotations().filter((a2) => a2.row === row && a2.type !== "info");
    const errors = currentAnnotations.filter((a2) => a2.type === "error");
    if (errors.length > 0) {
      setHighlightedAnnotation(errors[0]);
      setPaneStatus("error");
      moveCursorToAnnotation(errors[0]);
    } else if (currentAnnotations.length > 0) {
      setHighlightedAnnotation(currentAnnotations[0]);
      setPaneStatus("warning");
      moveCursorToAnnotation(currentAnnotations[0]);
    } else {
      setHighlightedAnnotation(void 0);
      setPaneStatus("hidden");
      editor.gotoLine(row + 1, 0, false);
    }
  };
  editor.on("gutterclick", (e) => {
    const { row } = e.getDocumentPosition();
    openAnnotation(row);
  });
  editor.on("gutterkeydown", (e) => {
    if (e.isInAnnotationLane() && (e.getKey() === "space" || e.getKey() === "return")) {
      const row = e.getRow();
      openAnnotation(row);
    }
  });
  editor.on("change", () => {
    if (editor.getValue().length === 0) {
      editor.session.clearAnnotations();
    }
  });
}
function setEditorDefaults(ace, editor) {
  ace.config.loadModule("ace/ext/language_tools", function() {
    editor.setOptions({
      displayIndentGuides: false,
      enableSnippets: true,
      enableBasicAutocompletion: true
    });
  });
  editor.setAutoScrollEditorIntoView(true);
  if (!supportsKeyboardAccessibility(ace)) {
    editor.commands.addCommand({
      name: "exitCodeEditor",
      bindKey: "Esc",
      exec: () => {
        editor.container.focus();
      }
    });
  }
  editor.on("focus", () => {
    editor.textInput.getElement().setAttribute("tabindex", 0);
  });
  editor.on("blur", () => {
    editor.textInput.getElement().setAttribute("tabindex", -1);
  });
  editor.textInput.getElement().setAttribute("tabindex", -1);
  editor.commands.removeCommand("showSettingsMenu", false);
  editor.on("guttermousedown", (e) => {
    e.stop();
  });
  editor.setHighlightActiveLine(false);
  editor.$updateHighlightActiveLine = function() {
    const session = this.getSession();
    let highlight;
    if (this.$highlightActiveLine) {
      if (this.$selectionStyle !== "line" || !this.selection.isMultiLine()) {
        highlight = this.getCursorPosition();
      }
      if (this.renderer.$maxLines && this.session.getLength() === 1 && !(this.renderer.$minLines > 1)) {
        highlight = false;
      }
    }
    if (session.$highlightLineMarker && !highlight) {
      session.removeMarker(session.$highlightLineMarker.id);
      session.$highlightLineMarker = null;
    } else if (!session.$highlightLineMarker && highlight) {
      const range3 = new ace.Range(highlight.row, 0, highlight.row, Infinity);
      range3.id = session.addMarker(range3, "ace_active-line", "fullLine");
      session.$highlightLineMarker = range3;
    } else if (highlight) {
      session.$highlightLineMarker.start.row = highlight.row;
      session.$highlightLineMarker.end.row = highlight.row;
      session.$highlightLineMarker.start.column = 0;
      session._signal("changeBackMarker");
    }
  };
  editor.setHighlightActiveLine(true);
  editor.on("showGutterTooltip", (tooltip) => {
    tooltip.hide();
  });
}

// node_modules/@cloudscape-design/components/code-editor/preferences-modal.js
var import_react178 = __toESM(require_react());

// node_modules/@cloudscape-design/components/modal/internal.js
var import_react177 = __toESM(require_react());

// node_modules/@cloudscape-design/components/modal/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/modal/styles.scoped.css";
var styles_css_default60 = {
  "dialog": "awsui_dialog_1d2i7_exyuv_111",
  "modal-slide-up": "awsui_modal-slide-up_1d2i7_exyuv_1",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_1d2i7_exyuv_1",
  "refresh": "awsui_refresh_1d2i7_exyuv_134",
  "awsui-motion-scale-popup": "awsui_awsui-motion-scale-popup_1d2i7_exyuv_1",
  "root": "awsui_root_1d2i7_exyuv_167",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_1d2i7_exyuv_1",
  "hidden": "awsui_hidden_1d2i7_exyuv_251",
  "focus-lock": "awsui_focus-lock_1d2i7_exyuv_255",
  "small": "awsui_small_1d2i7_exyuv_275",
  "medium": "awsui_medium_1d2i7_exyuv_278",
  "large": "awsui_large_1d2i7_exyuv_281",
  "max": "awsui_max_1d2i7_exyuv_284",
  "breakpoint-xs": "awsui_breakpoint-xs_1d2i7_exyuv_284",
  "container": "awsui_container_1d2i7_exyuv_290",
  "content": "awsui_content_1d2i7_exyuv_334",
  "no-paddings": "awsui_no-paddings_1d2i7_exyuv_339",
  "header": "awsui_header_1d2i7_exyuv_344",
  "header--text": "awsui_header--text_1d2i7_exyuv_356",
  "footer": "awsui_footer_1d2i7_exyuv_360",
  "footer--stuck": "awsui_footer--stuck_1d2i7_exyuv_369",
  "dismiss-control": "awsui_dismiss-control_1d2i7_exyuv_381",
  "modal-open": "awsui_modal-open_1d2i7_exyuv_385"
};

// node_modules/@cloudscape-design/components/internal/utils/browser-scrollbar-size.js
var browserScrollbarSize = calculateOnce(() => {
  if (typeof document === "undefined") {
    return { width: 0, height: 0 };
  }
  const scrollDiv = document.createElement("div");
  scrollDiv.style.overflow = "scroll";
  scrollDiv.style.height = "100px";
  scrollDiv.style.width = "100px";
  scrollDiv.style.position = "absolute";
  scrollDiv.style.top = "-9999px";
  scrollDiv.style.left = "-9999px";
  document.body.appendChild(scrollDiv);
  const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;
  const height = scrollDiv.offsetHeight - scrollDiv.clientHeight;
  document.body.removeChild(scrollDiv);
  return { width, height };
});

// node_modules/@cloudscape-design/components/modal/body-scroll.js
var initialBodyPaddingRightStyle = void 0;
function disableBodyScrolling() {
  setBodyScrollbarPadding();
  document.body.classList.add(styles_css_default60["modal-open"]);
}
function enableBodyScrolling() {
  document.body.classList.remove(styles_css_default60["modal-open"]);
  restoreBodyScrollbarPadding();
}
function setBodyScrollbarPadding() {
  if (bodyHasScrollbar()) {
    initialBodyPaddingRightStyle = document.body.style.paddingRight;
    const initialBodyPaddingRight = computedBodyPaddingRightPixels();
    const scrollbarWidth = browserScrollbarSize().width;
    const newBodyPaddingRight = initialBodyPaddingRight + scrollbarWidth;
    document.body.style.paddingRight = newBodyPaddingRight + "px";
  }
}
function computedBodyPaddingRightPixels() {
  return parseInt(window.getComputedStyle(document.body).paddingRight, 10);
}
function restoreBodyScrollbarPadding() {
  if (initialBodyPaddingRightStyle) {
    document.body.style.setProperty("padding-right", initialBodyPaddingRightStyle);
  } else {
    document.body.style.removeProperty("padding-right");
  }
  initialBodyPaddingRightStyle = void 0;
}
function bodyHasScrollbar() {
  return document.body.clientWidth < window.innerWidth;
}

// node_modules/@cloudscape-design/components/internal/hooks/use-intersection-observer/index.js
var import_react175 = __toESM(require_react());
function useIntersectionObserver() {
  const observerRef = (0, import_react175.useRef)(null);
  const [isIntersecting, setIsIntersecting] = (0, import_react175.useState)(false);
  const ref = (0, import_react175.useCallback)((targetElement) => {
    if (typeof IntersectionObserver === "undefined") {
      return;
    }
    if (observerRef.current) {
      observerRef.current.disconnect();
    }
    if (targetElement) {
      observerRef.current = new IntersectionObserver(([entry]) => setIsIntersecting(entry.isIntersecting));
      observerRef.current.observe(targetElement);
    }
  }, []);
  return { ref, isIntersecting };
}

// node_modules/@cloudscape-design/components/internal/context/reset-contexts-for-modal.js
var import_react176 = __toESM(require_react());
var ResetContextsForModal = ({ children }) => import_react176.default.createElement(
  AppLayoutContext.Provider,
  { value: defaultValue3 },
  import_react176.default.createElement(
    ButtonContext.Provider,
    { value: { onClick: () => {
    } } },
    import_react176.default.createElement(
      CollectionLabelContext.Provider,
      { value: { assignId: () => {
      } } },
      import_react176.default.createElement(
        FormFieldContext.Provider,
        { value: {} },
        import_react176.default.createElement(
          InfoLinkLabelContext.Provider,
          { value: "" },
          import_react176.default.createElement(
            LinkDefaultVariantContext.Provider,
            { value: defaultValue2 },
            import_react176.default.createElement(SingleTabStopNavigationContext.Provider, { value: defaultValue }, children)
          )
        )
      )
    )
  )
);
var reset_contexts_for_modal_default = ResetContextsForModal;

// node_modules/@cloudscape-design/components/modal/internal.js
function InternalModal(_a) {
  var { modalRoot, getModalRoot, removeModalRoot } = _a, rest = __rest(_a, ["modalRoot", "getModalRoot", "removeModalRoot"]);
  return import_react177.default.createElement(
    Portal,
    { container: modalRoot, getContainer: getModalRoot, removeContainer: removeModalRoot },
    import_react177.default.createElement(PortaledModal, Object.assign({}, rest))
  );
}
function PortaledModal(_a) {
  var _b;
  var { size, visible, header, children, footer, disableContentPaddings, onDismiss, __internalRootRef = null } = _a, rest = __rest(_a, ["size", "visible", "header", "children", "footer", "disableContentPaddings", "onDismiss", "__internalRootRef"]);
  const instanceUniqueId = useUniqueId();
  const headerId = `${rest.id || instanceUniqueId}-header`;
  const lastMouseDownElementRef = (0, import_react177.useRef)(null);
  const [breakpoint, breakpointsRef] = useContainerBreakpoints(["xs"]);
  const i18n = useInternalI18n("modal");
  const closeAriaLabel = i18n("closeAriaLabel", rest.closeAriaLabel);
  const refObject = (0, import_react177.useRef)(null);
  const mergedRef = useMergeRefs(breakpointsRef, refObject, __internalRootRef);
  const isRefresh = useVisualRefresh();
  const baseProps = getBaseProps(rest);
  (0, import_react177.useEffect)(() => {
    return () => {
      enableBodyScrolling();
    };
  }, []);
  (0, import_react177.useEffect)(() => {
    if (visible) {
      disableBodyScrolling();
    } else {
      enableBodyScrolling();
    }
  }, [visible]);
  (0, import_react177.useEffect)(() => {
    if (visible && refObject.current) {
      refObject.current.scrollTop = 0;
    }
  }, [visible]);
  const dismiss = (reason) => fireNonCancelableEvent(onDismiss, { reason });
  const onOverlayMouseDown = (event) => {
    lastMouseDownElementRef.current = event.target;
  };
  const onOverlayClick = (event) => {
    const overlay = refObject.current;
    const lastClicked = lastMouseDownElementRef.current;
    if (event.target === overlay && lastClicked === overlay) {
      dismiss("overlay");
    }
  };
  const onCloseButtonClick = () => dismiss("closeButton");
  const escKeyHandler = (event) => {
    if (event.keyCode === KeyCode.escape) {
      dismiss("keyboard");
    }
  };
  const { ref: stickySentinelRef, isIntersecting: footerStuck } = useIntersectionObserver();
  const [footerHeight, footerRef] = useContainerQuery((rect) => rect.borderBoxHeight);
  const { subStepRef } = useFunnelSubStep();
  return import_react177.default.createElement(
    FunnelNameSelectorContext.Provider,
    { value: `.${styles_css_default60["header--text"]}` },
    import_react177.default.createElement(
      reset_contexts_for_modal_default,
      null,
      import_react177.default.createElement(
        ModalContext.Provider,
        { value: { isInModal: true } },
        import_react177.default.createElement(
          "div",
          Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default60.root, { [styles_css_default60.hidden]: !visible }, baseProps.className, isRefresh && styles_css_default60.refresh), role: "dialog", "aria-modal": true, "aria-labelledby": headerId, onMouseDown: onOverlayMouseDown, onClick: onOverlayClick, ref: mergedRef, style: footerHeight ? { scrollPaddingBottom: footerHeight } : void 0, "data-awsui-referrer-id": (_b = subStepRef.current) === null || _b === void 0 ? void 0 : _b.id }),
          import_react177.default.createElement(
            focus_lock_default,
            { disabled: !visible, autoFocus: true, restoreFocus: true, className: styles_css_default60["focus-lock"] },
            import_react177.default.createElement(
              "div",
              { className: clsx_m_default(styles_css_default60.dialog, styles_css_default60[size], styles_css_default60[`breakpoint-${breakpoint}`], isRefresh && styles_css_default60.refresh), onKeyDown: escKeyHandler },
              import_react177.default.createElement(
                "div",
                { className: styles_css_default60.container },
                import_react177.default.createElement(
                  "div",
                  { className: styles_css_default60.header },
                  import_react177.default.createElement(
                    InternalHeader,
                    { variant: "h2", __disableActionsWrapping: true, actions: import_react177.default.createElement(InternalButton, { ariaLabel: closeAriaLabel, className: styles_css_default60["dismiss-control"], variant: "modal-dismiss", iconName: "close", formAction: "none", onClick: onCloseButtonClick }) },
                    import_react177.default.createElement("span", { id: headerId, className: styles_css_default60["header--text"] }, header)
                  )
                ),
                import_react177.default.createElement(
                  "div",
                  { className: clsx_m_default(styles_css_default60.content, { [styles_css_default60["no-paddings"]]: disableContentPaddings }) },
                  children,
                  import_react177.default.createElement("div", { ref: stickySentinelRef })
                ),
                footer && import_react177.default.createElement("div", { ref: footerRef, className: clsx_m_default(styles_css_default60.footer, footerStuck && styles_css_default60["footer--stuck"]) }, footer)
              )
            )
          )
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/code-editor/preferences-modal.js
function filterThemes(allThemes, available) {
  return allThemes.filter((theme) => available.indexOf(theme.value) > -1);
}
var preferences_modal_default = (props) => {
  var _a, _b, _c, _d;
  const [wrapLines, setWrapLines] = (0, import_react178.useState)((_b = (_a = props.preferences) === null || _a === void 0 ? void 0 : _a.wrapLines) !== null && _b !== void 0 ? _b : true);
  const [theme, setTheme] = (0, import_react178.useState)((_d = (_c = props.preferences) === null || _c === void 0 ? void 0 : _c.theme) !== null && _d !== void 0 ? _d : props.defaultTheme);
  const themeOptions = [
    {
      label: props.i18nStrings.lightThemes,
      options: filterThemes(LightThemes, props.themes.light)
    },
    {
      label: props.i18nStrings.darkThemes,
      options: filterThemes(DarkThemes, props.themes.dark)
    }
  ];
  const [selectedThemeOption, setSelectedThemeOption] = (0, import_react178.useState)(() => [...LightThemes, ...DarkThemes].filter((t) => t.value === theme)[0]);
  const onThemeSelected = (e) => {
    setTheme(e.detail.selectedOption.value);
    setSelectedThemeOption(e.detail.selectedOption);
  };
  return import_react178.default.createElement(
    InternalModal,
    { size: "medium", visible: true, getModalRoot: props.getModalRoot, removeModalRoot: props.removeModalRoot, onDismiss: props.onDismiss, header: props.i18nStrings.header, closeAriaLabel: props.i18nStrings.cancel, footer: import_react178.default.createElement(
      InternalBox,
      { float: "right" },
      import_react178.default.createElement(
        InternalSpaceBetween,
        { direction: "horizontal", size: "xs" },
        import_react178.default.createElement(InternalButton, { onClick: props.onDismiss }, props.i18nStrings.cancel),
        import_react178.default.createElement(InternalButton, { onClick: () => props.onConfirm({ wrapLines, theme }), variant: "primary" }, props.i18nStrings.confirm)
      )
    ) },
    import_react178.default.createElement(
      ColumnLayout,
      { columns: 2, variant: "text-grid" },
      import_react178.default.createElement(
        "div",
        null,
        import_react178.default.createElement(internal_default12, { checked: wrapLines, onChange: (e) => setWrapLines(e.detail.checked) }, props.i18nStrings.wrapLines)
      ),
      import_react178.default.createElement(
        "div",
        null,
        import_react178.default.createElement(
          InternalFormField,
          { label: props.i18nStrings.theme },
          import_react178.default.createElement(internal_default5, { selectedOption: selectedThemeOption, onChange: onThemeSelected, options: themeOptions, filteringType: "auto", filteringAriaLabel: props.i18nStrings.themeFilteringAriaLabel, filteringClearAriaLabel: props.i18nStrings.themeFilteringClearAriaLabel, filteringPlaceholder: props.i18nStrings.themeFilteringPlaceholder })
        )
      )
    )
  );
};

// node_modules/@cloudscape-design/components/code-editor/loading-screen.js
var import_react179 = __toESM(require_react());
var loading_screen_default = (props) => import_react179.default.createElement(
  "div",
  { className: styles_css_default59["loading-screen"] },
  import_react179.default.createElement(InternalSpinner, { size: "normal", variant: "normal" }),
  " ",
  props.children
);

// node_modules/@cloudscape-design/components/code-editor/error-screen.js
var import_react180 = __toESM(require_react());
var error_screen_default = ({ children, recoveryText, onRecoveryClick }) => {
  const onFollow = (0, import_react180.useCallback)(() => fireNonCancelableEvent(onRecoveryClick), [onRecoveryClick]);
  return import_react180.default.createElement(
    "div",
    { className: styles_css_default59["error-screen"] },
    import_react180.default.createElement(internal_default, { name: "status-negative", variant: "error" }),
    " ",
    children,
    " ",
    import_react180.default.createElement(internal_default3, { variant: "recovery", onFollow }, recoveryText)
  );
};

// node_modules/@cloudscape-design/components/code-editor/status-bar.js
var import_react182 = __toESM(require_react());

// node_modules/@cloudscape-design/components/code-editor/tab-button.js
var import_react181 = __toESM(require_react());
var TabButton = import_react181.default.forwardRef(({ active, disabled, iconName, onClick, onFocus, onBlur, tabIndex, ariaHidden, ariaLabel, paneId, isRefresh, text, className: className2, id }, ref) => {
  return import_react181.default.createElement(
    "button",
    { className: clsx_m_default([styles_css_default59["tab-button"], className2], {
      [styles_css_default59["tab-button--active"]]: active,
      [styles_css_default59["tab-button--disabled"]]: disabled,
      [styles_css_default59["tab-button--refresh"]]: isRefresh
    }), id, type: "button", onClick, onFocus, onBlur, disabled, ref, tabIndex, role: "tab", "aria-selected": active, "aria-controls": paneId, "aria-hidden": ariaHidden, "aria-label": ariaLabel },
    import_react181.default.createElement(internal_default, { name: iconName }),
    " ",
    text
  );
});

// node_modules/@cloudscape-design/components/code-editor/status-bar.js
function InternalStatusBar({ languageLabel, cursorPosition, paneStatus, onErrorPaneToggle, onWarningPaneToggle, onTabFocus, onTabBlur, errorsTabRef, warningsTabRef, isTabFocused, paneId, onPreferencesOpen, i18nStrings, errorCount, warningCount, leftBarRef, isVirtual, minifyCounters, isRefresh }) {
  const i18n = useInternalI18n("code-editor");
  const errorText = `${i18n("i18nStrings.errorsTab", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorsTab)}: ${errorCount}`;
  const warningText = `${i18n("i18nStrings.warningsTab", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.warningsTab)}: ${warningCount}`;
  const errorButtonId = !isVirtual ? getStatusButtonId({ paneId, paneStatus: "error" }) : void 0;
  const warningButtonId = !isVirtual ? getStatusButtonId({ paneId, paneStatus: "warning" }) : void 0;
  return import_react182.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default59["status-bar"], {
      [styles_css_default59["status-bar-with-hidden-pane"]]: paneStatus === "hidden",
      [styles_css_default59["status-bar-virtual"]]: isVirtual
    }), "aria-hidden": isVirtual },
    import_react182.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default59["status-bar__left"], {
        [styles_css_default59["status-bar__left-virtual"]]: isVirtual
      }), ref: leftBarRef },
      import_react182.default.createElement("span", { className: styles_css_default59["status-bar__language-mode"] }, languageLabel),
      import_react182.default.createElement("span", { className: styles_css_default59["status-bar__cursor-position"] }, cursorPosition),
      import_react182.default.createElement(
        "div",
        { role: "tablist" },
        import_react182.default.createElement(TabButton, { id: errorButtonId, text: minifyCounters ? ` ${errorCount}` : errorText, className: styles_css_default59["tab-button--errors"], iconName: "status-negative", disabled: errorCount === 0 || isVirtual, active: paneStatus === "error", onClick: onErrorPaneToggle, onFocus: onTabFocus, onBlur: onTabBlur, ref: errorsTabRef, ariaLabel: errorText, paneId, isRefresh }),
        import_react182.default.createElement("span", { className: styles_css_default59["tab-button--divider"] }),
        import_react182.default.createElement(TabButton, { id: warningButtonId, text: minifyCounters ? ` ${warningCount}` : warningText, className: styles_css_default59["tab-button--warnings"], iconName: "status-warning", disabled: warningCount === 0 || isVirtual, active: paneStatus === "warning", onClick: onWarningPaneToggle, onFocus: onTabFocus, onBlur: onTabBlur, ref: warningsTabRef, tabIndex: paneStatus === "error" && isTabFocused ? -1 : void 0, ariaHidden: paneStatus === "error" && isTabFocused ? true : void 0, ariaLabel: warningText, paneId, isRefresh })
      ),
      import_react182.default.createElement(
        live_region_default,
        { assertive: true },
        import_react182.default.createElement(
          "span",
          null,
          errorText,
          " "
        ),
        import_react182.default.createElement("span", null, warningText)
      )
    ),
    import_react182.default.createElement(
      "div",
      { className: styles_css_default59["status-bar__right"] },
      import_react182.default.createElement(
        "div",
        { className: styles_css_default59["status-bar__cog-button"] },
        import_react182.default.createElement(InternalButton, { disabled: isVirtual, formAction: "none", variant: "icon", iconName: "settings", iconAlt: "Settings", ariaLabel: i18n("i18nStrings.preferencesButtonAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesButtonAriaLabel), onClick: onPreferencesOpen, __nativeAttributes: {
          tabIndex: paneStatus !== "hidden" && isTabFocused ? -1 : void 0,
          "aria-hidden": paneStatus !== "hidden" && isTabFocused ? true : void 0
        } })
      )
    )
  );
}
var StatusBar = (_a) => {
  var { errorsTabRef, warningsTabRef } = _a, restProps = __rest(_a, ["errorsTabRef", "warningsTabRef"]);
  const [realWidth, statusLeftBarRef] = useContainerQuery((rect) => rect.contentBoxWidth);
  const [virtualWidth, virtualStatusLeftBarRef] = useContainerQuery((rect) => rect.contentBoxWidth);
  const minifyCounters = virtualWidth !== null && realWidth !== null && virtualWidth > realWidth;
  return import_react182.default.createElement(
    import_react182.default.Fragment,
    null,
    import_react182.default.createElement(InternalStatusBar, Object.assign({}, restProps, { isVirtual: false, leftBarRef: statusLeftBarRef, errorsTabRef, warningsTabRef, minifyCounters })),
    import_react182.default.createElement(InternalStatusBar, Object.assign({}, restProps, { isVirtual: true, leftBarRef: virtualStatusLeftBarRef, minifyCounters: false }))
  );
};

// node_modules/@cloudscape-design/components/code-editor/use-editor.js
var import_react183 = __toESM(require_react());
function useEditor(ace, themes, loading) {
  const editorRef = (0, import_react183.useRef)(null);
  const [editor, setEditor] = (0, import_react183.useState)(null);
  const [initialTheme] = (0, import_react183.useState)(getAceTheme(getDefaultTheme(useCurrentMode(editorRef), themes)));
  (0, import_react183.useEffect)(() => {
    const elem = editorRef.current;
    if (!ace || !elem) {
      return;
    }
    const config = getDefaultConfig(ace);
    setEditor(ace.edit(elem, Object.assign(Object.assign({}, config), { theme: initialTheme })));
  }, [ace, loading, initialTheme]);
  return { editorRef, editor };
}
function useSyncEditorLabels(editor, { controlId, ariaLabel, ariaLabelledby, ariaDescribedby }) {
  (0, import_react183.useEffect)(() => {
    if (!editor) {
      return;
    }
    const { textarea } = editor.renderer;
    if (!textarea) {
      return;
    }
    const updateAttribute = (attribute, value) => value ? textarea.setAttribute(attribute, value) : textarea.removeAttribute(attribute);
    updateAttribute("id", controlId);
    updateAttribute("aria-label", ariaLabel);
    updateAttribute("aria-labelledby", ariaLabelledby);
    updateAttribute("aria-describedby", ariaDescribedby);
  }, [ariaLabel, ariaDescribedby, ariaLabelledby, controlId, editor]);
}
function useSyncEditorSize(editor, { width, height }) {
  (0, import_react183.useEffect)(() => {
    editor === null || editor === void 0 ? void 0 : editor.resize();
  }, [editor, width, height]);
  const onResize = (0, import_react183.useCallback)(() => {
    editor === null || editor === void 0 ? void 0 : editor.resize();
  }, [editor]);
  return { onResize };
}
function useSyncEditorValue(editor, value) {
  (0, import_react183.useEffect)(() => {
    if (!editor) {
      return;
    }
    if (value === editor.getValue()) {
      return;
    }
    const pos = editor.session.selection.toJSON();
    editor.setValue(value, -1);
    editor.session.selection.fromJSON(pos);
  }, [editor, value]);
}
function useSyncEditorLanguage(editor, language) {
  (0, import_react183.useEffect)(() => {
    editor === null || editor === void 0 ? void 0 : editor.session.setMode(`ace/mode/${language}`);
  }, [editor, language]);
}
function useSyncEditorWrapLines(editor, wrapLines) {
  (0, import_react183.useEffect)(() => {
    editor === null || editor === void 0 ? void 0 : editor.session.setUseWrapMode(wrapLines !== null && wrapLines !== void 0 ? wrapLines : true);
  }, [editor, wrapLines]);
}
function useSyncEditorTheme(editor, theme) {
  (0, import_react183.useEffect)(() => {
    editor === null || editor === void 0 ? void 0 : editor.setTheme(getAceTheme(theme));
  }, [editor, theme]);
}

// node_modules/@cloudscape-design/components/code-editor/index.js
var CodeEditor = (0, import_react184.forwardRef)((props, ref) => {
  var _a, _b;
  const { ace, value, language, i18nStrings, editorContentHeight, onEditorContentResize, ariaLabel, languageLabel: customLanguageLabel, preferences, loading, themes, getModalRoot, removeModalRoot } = props, rest = __rest(props, ["ace", "value", "language", "i18nStrings", "editorContentHeight", "onEditorContentResize", "ariaLabel", "languageLabel", "preferences", "loading", "themes", "getModalRoot", "removeModalRoot"]);
  const { __internalRootRef } = useBaseComponent("CodeEditor", { props: { language } });
  const { controlId, ariaLabelledby, ariaDescribedby } = useFormFieldContext(props);
  const [editorHeight = 480, setEditorHeight] = useControllable(editorContentHeight, onEditorContentResize, 480, {
    componentName: "code-editor",
    changeHandler: "onEditorContentResize",
    controlledProp: "editorContentHeight"
  });
  const mode = useCurrentMode(__internalRootRef);
  const isRefresh = useVisualRefresh();
  const baseProps = getBaseProps(rest);
  const i18n = useInternalI18n("code-editor");
  const errorsTabRef = (0, import_react184.useRef)(null);
  const warningsTabRef = (0, import_react184.useRef)(null);
  const [codeEditorWidth, codeEditorMeasureRef] = useContainerQuery((rect) => rect.contentBoxWidth);
  const mergedRef = useMergeRefs(codeEditorMeasureRef, __internalRootRef);
  const paneId = useUniqueId("code-editor-pane");
  const [paneStatus, setPaneStatus] = (0, import_react184.useState)("hidden");
  const [annotations, setAnnotations] = (0, import_react184.useState)([]);
  const [highlightedAnnotation, setHighlightedAnnotation] = (0, import_react184.useState)();
  const [cursorPosition, setCursorPosition] = (0, import_react184.useState)({ row: 0, column: 0 });
  const [isTabFocused, setTabFocused] = (0, import_react184.useState)(false);
  const { editorRef, editor } = useEditor(ace, themes, loading);
  useForwardFocus(ref, editorRef);
  (0, import_react184.useEffect)(() => {
    if (!ace || !editor) {
      return;
    }
    setupEditor(ace, editor, setAnnotations, setCursorPosition, setHighlightedAnnotation, setPaneStatus);
    return () => {
      editor === null || editor === void 0 ? void 0 : editor.destroy();
    };
  }, [ace, editor]);
  useSyncEditorLabels(editor, { controlId, ariaLabel, ariaLabelledby, ariaDescribedby });
  const { onResize } = useSyncEditorSize(editor, { width: codeEditorWidth, height: editorContentHeight });
  useSyncEditorValue(editor, value);
  useSyncEditorLanguage(editor, language);
  useSyncEditorWrapLines(editor, preferences === null || preferences === void 0 ? void 0 : preferences.wrapLines);
  const defaultTheme = getDefaultTheme(mode, themes);
  useSyncEditorTheme(editor, (_a = preferences === null || preferences === void 0 ? void 0 : preferences.theme) !== null && _a !== void 0 ? _a : defaultTheme);
  useChangeEffect(editor, props.onChange, props.onDelayedChange);
  (0, import_react184.useEffect)(() => {
    if (annotations.length === 0) {
      setPaneStatus("hidden");
    }
    if (props.onValidate) {
      fireNonCancelableEvent(props.onValidate, { annotations });
    }
  }, [annotations, props.onValidate]);
  const languageLabel = customLanguageLabel !== null && customLanguageLabel !== void 0 ? customLanguageLabel : getLanguageLabel(language);
  const errorCount = annotations.filter((a2) => a2.type === "error").length;
  const warningCount = annotations.filter((a2) => a2.type === "warning").length;
  const currentAnnotations = (0, import_react184.useMemo)(() => annotations.filter((a2) => a2.type === paneStatus), [annotations, paneStatus]);
  const onEditorKeydown = (0, import_react184.useCallback)((e) => {
    if (editor && e.target === editor.container && e.keyCode === KeyCode.enter) {
      e.stopPropagation();
      e.preventDefault();
      editor.focus();
    }
  }, [editor]);
  const onTabFocus = (0, import_react184.useCallback)(() => setTabFocused(true), []);
  const onTabBlur = (0, import_react184.useCallback)(() => setTabFocused(false), []);
  const onErrorPaneToggle = (0, import_react184.useCallback)(() => {
    setPaneStatus(paneStatus !== "error" ? "error" : "hidden");
  }, [paneStatus]);
  const onWarningPaneToggle = (0, import_react184.useCallback)(() => {
    setPaneStatus(paneStatus !== "warning" ? "warning" : "hidden");
  }, [paneStatus]);
  const onPaneClose = () => {
    setPaneStatus("hidden");
  };
  const onAnnotationClick = ({ row = 0, column = 0 }) => {
    if (!editor) {
      return;
    }
    editor.focus();
    editor.gotoLine(row + 1, column, false);
    setHighlightedAnnotation(void 0);
  };
  const onAnnotationClear = (0, import_react184.useCallback)(() => {
    setHighlightedAnnotation(void 0);
  }, []);
  const [isPreferencesModalVisible, setPreferencesModalVisible] = (0, import_react184.useState)(false);
  const onPreferencesOpen = () => setPreferencesModalVisible(true);
  const onPreferencesConfirm = (p) => {
    fireNonCancelableEvent(props.onPreferencesChange, p);
    setPreferencesModalVisible(false);
  };
  const onPreferencesDismiss = () => setPreferencesModalVisible(false);
  const isPaneVisible = paneStatus !== "hidden";
  return import_react184.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default59["code-editor"], baseProps.className, { [styles_css_default59["code-editor-refresh"]]: isRefresh }), ref: mergedRef }),
    loading && import_react184.default.createElement(
      loading_screen_default,
      null,
      import_react184.default.createElement(live_region_default, { visible: true }, i18n("i18nStrings.loadingState", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.loadingState))
    ),
    !ace && !loading && import_react184.default.createElement(error_screen_default, { recoveryText: i18n("i18nStrings.errorStateRecovery", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorStateRecovery), onRecoveryClick: props.onRecoveryClick }, i18n("i18nStrings.errorState", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorState)),
    ace && !loading && import_react184.default.createElement(
      import_react184.default.Fragment,
      null,
      import_react184.default.createElement(
        ResizableBox,
        { height: Math.max(editorHeight, 20), minHeight: 20, onResize: (height) => {
          setEditorHeight(height);
          onResize();
          fireNonCancelableEvent(onEditorContentResize, { height });
        } },
        import_react184.default.createElement("div", { ref: editorRef, className: clsx_m_default(styles_css_default59.editor, styles_css_default59.ace, isRefresh && styles_css_default59["editor-refresh"]), onKeyDown: onEditorKeydown, tabIndex: 0, role: "group", "aria-label": i18n("i18nStrings.editorGroupAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.editorGroupAriaLabel) })
      ),
      import_react184.default.createElement(
        "div",
        { role: "group", "aria-label": i18n("i18nStrings.statusBarGroupAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.statusBarGroupAriaLabel) },
        import_react184.default.createElement(StatusBar, { languageLabel, cursorPosition: i18n("i18nStrings.cursorPosition", (_b = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.cursorPosition) === null || _b === void 0 ? void 0 : _b.call(i18nStrings, cursorPosition.row + 1, cursorPosition.column + 1), (format3) => format3({ row: cursorPosition.row + 1, column: cursorPosition.column + 1 })), errorCount, warningCount, paneStatus, onErrorPaneToggle, onWarningPaneToggle, onTabFocus, onTabBlur, errorsTabRef, warningsTabRef, i18nStrings, isTabFocused, paneId: isPaneVisible ? paneId : void 0, onPreferencesOpen, isRefresh }),
        import_react184.default.createElement(Pane, { id: paneId, paneStatus, visible: isPaneVisible, annotations: currentAnnotations, highlighted: highlightedAnnotation, onAnnotationClick, onAnnotationClear, onClose: onPaneClose, cursorPositionLabel: i18n("i18nStrings.cursorPosition", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.cursorPosition, (format3) => (row, column) => format3({ row, column })), closeButtonAriaLabel: i18n("i18nStrings.paneCloseButtonAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.paneCloseButtonAriaLabel) })
      ),
      isPreferencesModalVisible && import_react184.default.createElement(preferences_modal_default, { getModalRoot, removeModalRoot, onConfirm: onPreferencesConfirm, onDismiss: onPreferencesDismiss, themes: themes !== null && themes !== void 0 ? themes : DEFAULT_AVAILABLE_THEMES, preferences, defaultTheme, i18nStrings: {
        header: i18n("i18nStrings.preferencesModalHeader", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalHeader),
        cancel: i18n("i18nStrings.preferencesModalCancel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalCancel),
        confirm: i18n("i18nStrings.preferencesModalConfirm", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalConfirm),
        wrapLines: i18n("i18nStrings.preferencesModalWrapLines", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalWrapLines),
        theme: i18n("i18nStrings.preferencesModalTheme", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalTheme),
        lightThemes: i18n("i18nStrings.preferencesModalLightThemes", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalLightThemes),
        darkThemes: i18n("i18nStrings.preferencesModalDarkThemes", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalDarkThemes),
        themeFilteringAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalThemeFilteringAriaLabel,
        themeFilteringClearAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalThemeFilteringClearAriaLabel,
        themeFilteringPlaceholder: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalThemeFilteringPlaceholder
      } })
    )
  );
});
applyDisplayName(CodeEditor, "CodeEditor");
var code_editor_default = CodeEditor;

// node_modules/@cloudscape-design/components/collection-preferences/index.js
var import_react201 = __toESM(require_react());

// node_modules/@cloudscape-design/components/collection-preferences/utils.js
var import_react187 = __toESM(require_react());

// node_modules/@cloudscape-design/components/radio-group/internal.js
var import_react186 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/forward-focus/radio-group.js
var import_react185 = __toESM(require_react());
function useRadioGroupForwardFocus(forwardedRef, items, value) {
  const itemRef = (0, import_react185.useRef)(null);
  const itemIndex = items && findIndex2(items, (item) => item.value === value);
  (0, import_react185.useImperativeHandle)(forwardedRef, () => ({
    focus() {
      var _a;
      (_a = itemRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }
  }));
  return [itemRef, itemIndex !== void 0 && itemIndex !== -1 ? itemIndex : 0];
}
function findIndex2(items, predicate) {
  for (let i = 0; i < items.length; i++) {
    if (predicate(items[i])) {
      return i;
    }
  }
  return -1;
}

// node_modules/@cloudscape-design/components/radio-group/internal.js
var InternalRadioGroup = import_react186.default.forwardRef((_a, ref) => {
  var { name, value, items, ariaLabel, ariaRequired, ariaControls, onChange, __internalRootRef = null } = _a, props = __rest(_a, ["name", "value", "items", "ariaLabel", "ariaRequired", "ariaControls", "onChange", "__internalRootRef"]);
  const { ariaDescribedby, ariaLabelledby } = useFormFieldContext(props);
  const baseProps = getBaseProps(props);
  const generatedName = useUniqueId("awsui-radio-");
  const [radioButtonRef, radioButtonRefIndex] = useRadioGroupForwardFocus(ref, items, value);
  return import_react186.default.createElement("div", Object.assign({ role: "radiogroup", "aria-labelledby": ariaLabelledby, "aria-label": ariaLabel, "aria-describedby": ariaDescribedby, "aria-required": ariaRequired, "aria-controls": ariaControls }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default56.root), ref: __internalRootRef }), items && items.map((item, index) => import_react186.default.createElement(radio_button_default, { key: item.value, ref: index === radioButtonRefIndex ? radioButtonRef : void 0, checked: item.value === value, name: name || generatedName, value: item.value, label: item.label, description: item.description, disabled: item.disabled, onChange, controlId: item.controlId })));
});
var internal_default13 = InternalRadioGroup;

// node_modules/@cloudscape-design/components/collection-preferences/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/collection-preferences/styles.scoped.css";
var styles_css_default61 = {
  "visible-content": "awsui_visible-content_tc96w_5j4hz_197",
  "visible-content-toggle": "awsui_visible-content-toggle_tc96w_5j4hz_198",
  "visible-content-groups": "awsui_visible-content-groups_tc96w_5j4hz_199",
  "visible-content-group": "awsui_visible-content-group_tc96w_5j4hz_199",
  "visible-content-title": "awsui_visible-content-title_tc96w_5j4hz_204",
  "visible-content-group-label": "awsui_visible-content-group-label_tc96w_5j4hz_214",
  "visible-content-option": "awsui_visible-content-option_tc96w_5j4hz_220",
  "visible-content-option-label": "awsui_visible-content-option-label_tc96w_5j4hz_233",
  "content-display-option-toggle": "awsui_content-display-option-toggle_tc96w_5j4hz_436",
  "content-display-option-content": "awsui_content-display-option-content_tc96w_5j4hz_440",
  "content-display-option": "awsui_content-display-option_tc96w_5j4hz_436",
  "placeholder": "awsui_placeholder_tc96w_5j4hz_490",
  "sorting": "awsui_sorting_tc96w_5j4hz_490",
  "content-display-option-label": "awsui_content-display-option-label_tc96w_5j4hz_517",
  "drag-overlay": "awsui_drag-overlay_tc96w_5j4hz_524",
  "content-display": "awsui_content-display_tc96w_5j4hz_436",
  "content-display-title": "awsui_content-display-title_tc96w_5j4hz_557",
  "content-display-description": "awsui_content-display-description_tc96w_5j4hz_566",
  "content-display-option-list": "awsui_content-display-option-list_tc96w_5j4hz_574",
  "root": "awsui_root_tc96w_5j4hz_581",
  "modal-root": "awsui_modal-root_tc96w_5j4hz_582",
  "trigger-button": "awsui_trigger-button_tc96w_5j4hz_583",
  "cancel-button": "awsui_cancel-button_tc96w_5j4hz_584",
  "confirm-button": "awsui_confirm-button_tc96w_5j4hz_585",
  "custom": "awsui_custom_tc96w_5j4hz_586",
  "second-column-small": "awsui_second-column-small_tc96w_5j4hz_590",
  "wrap-lines": "awsui_wrap-lines_tc96w_5j4hz_594",
  "striped-rows": "awsui_striped-rows_tc96w_5j4hz_595",
  "content-density": "awsui_content-density_tc96w_5j4hz_596",
  "page-size": "awsui_page-size_tc96w_5j4hz_597",
  "page-size-form-field": "awsui_page-size-form-field_tc96w_5j4hz_598",
  "page-size-radio-group": "awsui_page-size-radio-group_tc96w_5j4hz_599",
  "sticky-columns": "awsui_sticky-columns_tc96w_5j4hz_600",
  "sticky-columns-form-field": "awsui_sticky-columns-form-field_tc96w_5j4hz_601",
  "sticky-columns-radio-group": "awsui_sticky-columns-radio-group_tc96w_5j4hz_602",
  "sticky-columns-first": "awsui_sticky-columns-first_tc96w_5j4hz_603",
  "sticky-columns-last": "awsui_sticky-columns-last_tc96w_5j4hz_604"
};

// node_modules/@cloudscape-design/components/collection-preferences/utils.js
var copyPreferences = ({ pageSize, wrapLines, stripedRows, contentDensity, visibleContent, contentDisplay, stickyColumns, custom: custom8 }) => ({
  pageSize,
  wrapLines,
  stripedRows,
  contentDensity,
  visibleContent,
  contentDisplay,
  stickyColumns,
  custom: custom8
});
var mergePreferences = (newPref, oldPref) => {
  const newObj = Object.assign({}, oldPref);
  const prefNames = [
    "pageSize",
    "wrapLines",
    "stripedRows",
    "contentDensity",
    "visibleContent",
    "custom",
    "contentDisplay",
    "stickyColumns"
  ];
  for (const prefName of prefNames) {
    if (newPref[prefName] !== void 0) {
      newObj[prefName] = newPref[prefName];
    }
  }
  return newObj;
};
var ModalContentLayout = ({ left, right }) => {
  const [breakpoint, ref] = useContainerBreakpoints(["xs"]);
  const smallContainer = breakpoint === "default";
  if (smallContainer) {
    return import_react187.default.createElement(
      "div",
      { ref },
      left && import_react187.default.createElement("div", null, left),
      right && import_react187.default.createElement("div", { className: clsx_m_default(left && styles_css_default61["second-column-small"]) }, right)
    );
  }
  const columns = left && right ? 2 : 1;
  return import_react187.default.createElement(
    "div",
    { ref },
    import_react187.default.createElement(
      ColumnLayout,
      { columns, variant: "text-grid" },
      left && import_react187.default.createElement("div", null, left),
      right && import_react187.default.createElement("div", null, right)
    )
  );
};
var PageSizePreference = ({ title, options, value, onChange }) => {
  const i18n = useInternalI18n("collection-preferences");
  return import_react187.default.createElement(
    "div",
    { className: styles_css_default61["page-size"] },
    import_react187.default.createElement(
      InternalFormField,
      { label: i18n("pageSizePreference.title", title), stretch: true, className: styles_css_default61["page-size-form-field"] },
      import_react187.default.createElement(internal_default13, { className: styles_css_default61["page-size-radio-group"], value: `${value}`, items: options.map(({ label, value: value2 }) => ({ label, value: `${value2}` })), onChange: ({ detail }) => onChange(parseInt(detail.value, 10)) })
    )
  );
};
var WrapLinesPreference = ({ label, description, value, onChange }) => {
  const i18n = useInternalI18n("collection-preferences");
  return import_react187.default.createElement(internal_default12, { checked: !!value, description: i18n("wrapLinesPreference.description", description), onChange: ({ detail }) => onChange(detail.checked), className: styles_css_default61["wrap-lines"] }, i18n("wrapLinesPreference.label", label));
};
function StripedRowsPreference({ label, description, value, onChange }) {
  const i18n = useInternalI18n("collection-preferences");
  return import_react187.default.createElement(internal_default12, { checked: !!value, description: i18n("stripedRowsPreference.description", description), onChange: ({ detail }) => onChange(detail.checked), className: styles_css_default61["striped-rows"] }, i18n("stripedRowsPreference.label", label));
}
var ContentDensityPreference = ({ label, description, value, onChange }) => {
  const i18n = useInternalI18n("collection-preferences");
  return import_react187.default.createElement(internal_default12, { checked: value === "compact", description: i18n("contentDensityPreference.description", description), onChange: ({ detail }) => onChange(detail.checked ? "compact" : "comfortable"), className: styles_css_default61["content-density"] }, i18n("contentDensityPreference.label", label));
};
var StickyPreference = ({ firstOrLast, preference, value, onChange }) => {
  const { title, description, options } = preference;
  return import_react187.default.createElement(
    "div",
    { className: styles_css_default61[`sticky-columns-${firstOrLast}`] },
    import_react187.default.createElement(
      InternalFormField,
      { className: styles_css_default61["sticky-columns-form-field"], label: title, description },
      import_react187.default.createElement(internal_default13, { className: styles_css_default61["sticky-columns-radio-group"], value: typeof value !== "undefined" ? `${value}` : null, items: options.map(({ label, value: value2 }) => ({ label, value: `${value2}` })), onChange: ({ detail }) => onChange(Number(detail.value)) })
    )
  );
};
var StickyColumnsPreference = ({ firstColumns, lastColumns, onChange, value }) => {
  return import_react187.default.createElement(
    InternalSpaceBetween,
    { className: styles_css_default61["sticky-columns"], size: "l" },
    firstColumns && import_react187.default.createElement(StickyPreference, { firstOrLast: "first", preference: firstColumns, value: value === null || value === void 0 ? void 0 : value.first, onChange: (newValue) => onChange(Object.assign(Object.assign({}, value), { first: newValue })) }),
    lastColumns && import_react187.default.createElement(StickyPreference, { firstOrLast: "last", preference: lastColumns, value: value === null || value === void 0 ? void 0 : value.last, onChange: (newValue) => onChange(Object.assign(Object.assign({}, value), { last: newValue })) })
  );
};
var CustomPreference = ({ value, customPreference, onChange }) => {
  const [customState, setCustomState] = (0, import_react187.useState)(value);
  if (customPreference) {
    return import_react187.default.createElement("div", { className: styles_css_default61.custom }, customPreference(customState, (value2) => {
      setCustomState(() => value2);
      onChange(value2);
    }));
  }
  return null;
};

// node_modules/@cloudscape-design/components/collection-preferences/visible-content.js
var import_react189 = __toESM(require_react());

// node_modules/@cloudscape-design/components/toggle/internal.js
var import_react188 = __toESM(require_react());

// node_modules/@cloudscape-design/components/toggle/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/toggle/styles.scoped.css";
var styles_css_default62 = {
  "root": "awsui_root_4yi2u_11uib_99",
  "outline": "awsui_outline_4yi2u_11uib_135",
  "toggle-control": "awsui_toggle-control_4yi2u_11uib_157",
  "toggle-control-checked": "awsui_toggle-control-checked_4yi2u_11uib_170",
  "toggle-control-disabled": "awsui_toggle-control-disabled_4yi2u_11uib_173",
  "toggle-handle": "awsui_toggle-handle_4yi2u_11uib_180",
  "toggle-handle-checked": "awsui_toggle-handle-checked_4yi2u_11uib_195",
  "toggle-handle-disabled": "awsui_toggle-handle-disabled_4yi2u_11uib_201"
};

// node_modules/@cloudscape-design/components/toggle/internal.js
var InternalToggle = import_react188.default.forwardRef((_a, ref) => {
  var { controlId, checked, name, disabled, children, description, ariaLabel, ariaControls, onFocus, onBlur, onChange, __internalRootRef = null } = _a, rest = __rest(_a, ["controlId", "checked", "name", "disabled", "children", "description", "ariaLabel", "ariaControls", "onFocus", "onBlur", "onChange", "__internalRootRef"]);
  const { ariaDescribedby, ariaLabelledby } = useFormFieldContext(rest);
  const baseProps = getBaseProps(rest);
  const checkboxRef = (0, import_react188.useRef)(null);
  useForwardFocus(ref, checkboxRef);
  return import_react188.default.createElement(AbstractSwitch, Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default62.root, baseProps.className), controlClassName: clsx_m_default(styles_css_default62["toggle-control"], {
    [styles_css_default62["toggle-control-checked"]]: checked,
    [styles_css_default62["toggle-control-disabled"]]: disabled
  }), outlineClassName: styles_css_default62.outline, controlId, disabled, label: children, description, descriptionBottomPadding: true, ariaLabel, ariaLabelledby, ariaDescribedby, ariaControls, nativeControl: (nativeControlProps) => import_react188.default.createElement("input", Object.assign({}, nativeControlProps, {
    ref: checkboxRef,
    type: "checkbox",
    checked,
    name,
    onFocus: () => fireNonCancelableEvent(onFocus),
    onBlur: () => fireNonCancelableEvent(onBlur),
    // empty handler to suppress React controllability warning
    onChange: () => {
    }
  })), onClick: () => {
    var _a2;
    (_a2 = checkboxRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    fireNonCancelableEvent(onChange, { checked: !checked });
  }, styledControl: (
    /*Using span, not div for HTML validity*/
    import_react188.default.createElement("span", { className: clsx_m_default(styles_css_default62["toggle-handle"], {
      [styles_css_default62["toggle-handle-checked"]]: checked,
      [styles_css_default62["toggle-handle-disabled"]]: disabled
    }) })
  ), __internalRootRef }));
});
var internal_default14 = InternalToggle;

// node_modules/@cloudscape-design/components/collection-preferences/visible-content.js
var isVisible = (id, visibleIds) => visibleIds.indexOf(id) !== -1;
var className = (suffix) => ({
  className: styles_css_default61[`visible-content-${suffix}`]
});
function VisibleContentPreference({ title, options, value = [], onChange }) {
  const idPrefix = useUniqueId("visible-content");
  const flatOptionsIds = options.reduce((ids2, group) => [...ids2, ...group.options.reduce((groupIds, option) => [...groupIds, option.id], [])], []);
  const onToggle = (id) => {
    if (!isVisible(id, value)) {
      onChange([...value, id].sort((firstId, secondId) => flatOptionsIds.indexOf(firstId) - flatOptionsIds.indexOf(secondId)));
    } else {
      onChange(value.filter((currentId) => currentId !== id));
    }
  };
  const selectionOption = (option, optionGroupIndex, optionIndex) => {
    const labelId = `${idPrefix}-${optionGroupIndex}-${optionIndex}`;
    return import_react189.default.createElement(
      "div",
      Object.assign({ key: optionIndex }, className("option")),
      import_react189.default.createElement("label", Object.assign({}, className("option-label"), { htmlFor: labelId }), option.label),
      import_react189.default.createElement(
        "div",
        Object.assign({}, className("toggle")),
        import_react189.default.createElement(internal_default14, { checked: isVisible(option.id, value), onChange: () => onToggle(option.id), disabled: option.editable === false, controlId: labelId })
      )
    );
  };
  const outerGroupLabelId = `${idPrefix}-outer`;
  return import_react189.default.createElement(
    "div",
    { className: styles_css_default61["visible-content"] },
    import_react189.default.createElement("h3", Object.assign({}, className("title"), { id: outerGroupLabelId }), title),
    import_react189.default.createElement(InternalSpaceBetween, Object.assign({}, className("groups"), { size: "xs" }), options.map((optionGroup, optionGroupIndex) => {
      const groupLabelId = `${idPrefix}-${optionGroupIndex}`;
      return import_react189.default.createElement(
        "div",
        Object.assign({ key: optionGroupIndex }, className("group"), { role: "group", "aria-labelledby": `${outerGroupLabelId} ${groupLabelId}` }),
        import_react189.default.createElement("div", Object.assign({}, className("group-label"), { id: groupLabelId }), optionGroup.label),
        import_react189.default.createElement("div", null, optionGroup.options.map((option, optionIndex) => selectionOption(option, optionGroupIndex, optionIndex)))
      );
    }))
  );
}

// node_modules/@cloudscape-design/components/collection-preferences/content-display/index.js
var import_react200 = __toESM(require_react());

// node_modules/@cloudscape-design/components/collection-preferences/content-display/utils.js
function getSortedOptions({ options, contentDisplay }) {
  const optionsById = options.reduce((currentValue, option) => Object.assign(Object.assign({}, currentValue), { [option.id]: option }), {});
  return contentDisplay.map(({ id, visible }) => Object.assign(Object.assign({}, optionsById[id]), { visible })).filter(Boolean);
}

// node_modules/@dnd-kit/core/dist/core.esm.js
var import_react192 = __toESM(require_react());
var import_react_dom3 = __toESM(require_react_dom());

// node_modules/@dnd-kit/utilities/dist/utilities.esm.js
var import_react190 = __toESM(require_react());
function useCombinedRefs() {
  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
    refs[_key] = arguments[_key];
  }
  return (0, import_react190.useMemo)(
    () => (node) => {
      refs.forEach((ref) => ref(node));
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    refs
  );
}
var canUseDOM = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
function isWindow(element) {
  const elementString = Object.prototype.toString.call(element);
  return elementString === "[object Window]" || // In Electron context the Window object serializes to [object global]
  elementString === "[object global]";
}
function isNode(node) {
  return "nodeType" in node;
}
function getWindow(target) {
  var _target$ownerDocument, _target$ownerDocument2;
  if (!target) {
    return window;
  }
  if (isWindow(target)) {
    return target;
  }
  if (!isNode(target)) {
    return window;
  }
  return (_target$ownerDocument = (_target$ownerDocument2 = target.ownerDocument) == null ? void 0 : _target$ownerDocument2.defaultView) != null ? _target$ownerDocument : window;
}
function isDocument(node) {
  const {
    Document
  } = getWindow(node);
  return node instanceof Document;
}
function isHTMLElement(node) {
  if (isWindow(node)) {
    return false;
  }
  return node instanceof getWindow(node).HTMLElement;
}
function isSVGElement(node) {
  return node instanceof getWindow(node).SVGElement;
}
function getOwnerDocument(target) {
  if (!target) {
    return document;
  }
  if (isWindow(target)) {
    return target.document;
  }
  if (!isNode(target)) {
    return document;
  }
  if (isDocument(target)) {
    return target;
  }
  if (isHTMLElement(target) || isSVGElement(target)) {
    return target.ownerDocument;
  }
  return document;
}
var useIsomorphicLayoutEffect = canUseDOM ? import_react190.useLayoutEffect : import_react190.useEffect;
function useEvent(handler) {
  const handlerRef = (0, import_react190.useRef)(handler);
  useIsomorphicLayoutEffect(() => {
    handlerRef.current = handler;
  });
  return (0, import_react190.useCallback)(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return handlerRef.current == null ? void 0 : handlerRef.current(...args);
  }, []);
}
function useInterval() {
  const intervalRef = (0, import_react190.useRef)(null);
  const set2 = (0, import_react190.useCallback)((listener, duration) => {
    intervalRef.current = setInterval(listener, duration);
  }, []);
  const clear = (0, import_react190.useCallback)(() => {
    if (intervalRef.current !== null) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
  }, []);
  return [set2, clear];
}
function useLatestValue(value, dependencies) {
  if (dependencies === void 0) {
    dependencies = [value];
  }
  const valueRef = (0, import_react190.useRef)(value);
  useIsomorphicLayoutEffect(() => {
    if (valueRef.current !== value) {
      valueRef.current = value;
    }
  }, dependencies);
  return valueRef;
}
function useLazyMemo(callback, dependencies) {
  const valueRef = (0, import_react190.useRef)();
  return (0, import_react190.useMemo)(
    () => {
      const newValue = callback(valueRef.current);
      valueRef.current = newValue;
      return newValue;
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [...dependencies]
  );
}
function useNodeRef(onChange) {
  const onChangeHandler = useEvent(onChange);
  const node = (0, import_react190.useRef)(null);
  const setNodeRef = (0, import_react190.useCallback)(
    (element) => {
      if (element !== node.current) {
        onChangeHandler == null ? void 0 : onChangeHandler(element, node.current);
      }
      node.current = element;
    },
    //eslint-disable-next-line
    []
  );
  return [node, setNodeRef];
}
function usePrevious2(value) {
  const ref = (0, import_react190.useRef)();
  (0, import_react190.useEffect)(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}
var ids = {};
function useUniqueId2(prefix, value) {
  return (0, import_react190.useMemo)(() => {
    if (value) {
      return value;
    }
    const id = ids[prefix] == null ? 0 : ids[prefix] + 1;
    ids[prefix] = id;
    return prefix + "-" + id;
  }, [prefix, value]);
}
function createAdjustmentFn(modifier) {
  return function(object2) {
    for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      adjustments[_key - 1] = arguments[_key];
    }
    return adjustments.reduce((accumulator, adjustment) => {
      const entries = Object.entries(adjustment);
      for (const [key2, valueAdjustment] of entries) {
        const value = accumulator[key2];
        if (value != null) {
          accumulator[key2] = value + modifier * valueAdjustment;
        }
      }
      return accumulator;
    }, {
      ...object2
    });
  };
}
var add2 = createAdjustmentFn(1);
var subtract = createAdjustmentFn(-1);
function hasViewportRelativeCoordinates(event) {
  return "clientX" in event && "clientY" in event;
}
function isKeyboardEvent(event) {
  if (!event) {
    return false;
  }
  const {
    KeyboardEvent
  } = getWindow(event.target);
  return KeyboardEvent && event instanceof KeyboardEvent;
}
function isTouchEvent(event) {
  if (!event) {
    return false;
  }
  const {
    TouchEvent
  } = getWindow(event.target);
  return TouchEvent && event instanceof TouchEvent;
}
function getEventCoordinates(event) {
  if (isTouchEvent(event)) {
    if (event.touches && event.touches.length) {
      const {
        clientX: x2,
        clientY: y2
      } = event.touches[0];
      return {
        x: x2,
        y: y2
      };
    } else if (event.changedTouches && event.changedTouches.length) {
      const {
        clientX: x2,
        clientY: y2
      } = event.changedTouches[0];
      return {
        x: x2,
        y: y2
      };
    }
  }
  if (hasViewportRelativeCoordinates(event)) {
    return {
      x: event.clientX,
      y: event.clientY
    };
  }
  return null;
}
var CSS2 = Object.freeze({
  Translate: {
    toString(transform) {
      if (!transform) {
        return;
      }
      const {
        x: x2,
        y: y2
      } = transform;
      return "translate3d(" + (x2 ? Math.round(x2) : 0) + "px, " + (y2 ? Math.round(y2) : 0) + "px, 0)";
    }
  },
  Scale: {
    toString(transform) {
      if (!transform) {
        return;
      }
      const {
        scaleX,
        scaleY
      } = transform;
      return "scaleX(" + scaleX + ") scaleY(" + scaleY + ")";
    }
  },
  Transform: {
    toString(transform) {
      if (!transform) {
        return;
      }
      return [CSS2.Translate.toString(transform), CSS2.Scale.toString(transform)].join(" ");
    }
  },
  Transition: {
    toString(_ref) {
      let {
        property,
        duration,
        easing
      } = _ref;
      return property + " " + duration + "ms " + easing;
    }
  }
});
var SELECTOR = "a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not(:disabled),*[tabindex]";
function findFirstFocusableNode(element) {
  if (element.matches(SELECTOR)) {
    return element;
  }
  return element.querySelector(SELECTOR);
}

// node_modules/@dnd-kit/accessibility/dist/accessibility.esm.js
var import_react191 = __toESM(require_react());
var hiddenStyles = {
  display: "none"
};
function HiddenText(_ref) {
  let {
    id,
    value
  } = _ref;
  return import_react191.default.createElement("div", {
    id,
    style: hiddenStyles
  }, value);
}
function LiveRegion(_ref) {
  let {
    id,
    announcement,
    ariaLiveType = "assertive"
  } = _ref;
  const visuallyHidden = {
    position: "fixed",
    width: 1,
    height: 1,
    margin: -1,
    border: 0,
    padding: 0,
    overflow: "hidden",
    clip: "rect(0 0 0 0)",
    clipPath: "inset(100%)",
    whiteSpace: "nowrap"
  };
  return import_react191.default.createElement("div", {
    id,
    style: visuallyHidden,
    role: "status",
    "aria-live": ariaLiveType,
    "aria-atomic": true
  }, announcement);
}
function useAnnouncement2() {
  const [announcement, setAnnouncement] = (0, import_react191.useState)("");
  const announce = (0, import_react191.useCallback)((value) => {
    if (value != null) {
      setAnnouncement(value);
    }
  }, []);
  return {
    announce,
    announcement
  };
}

// node_modules/@dnd-kit/core/dist/core.esm.js
var DndMonitorContext = (0, import_react192.createContext)(null);
function useDndMonitor(listener) {
  const registerListener = (0, import_react192.useContext)(DndMonitorContext);
  (0, import_react192.useEffect)(() => {
    if (!registerListener) {
      throw new Error("useDndMonitor must be used within a children of <DndContext>");
    }
    const unsubscribe = registerListener(listener);
    return unsubscribe;
  }, [listener, registerListener]);
}
function useDndMonitorProvider() {
  const [listeners] = (0, import_react192.useState)(() => /* @__PURE__ */ new Set());
  const registerListener = (0, import_react192.useCallback)((listener) => {
    listeners.add(listener);
    return () => listeners.delete(listener);
  }, [listeners]);
  const dispatch = (0, import_react192.useCallback)((_ref) => {
    let {
      type,
      event
    } = _ref;
    listeners.forEach((listener) => {
      var _listener$type;
      return (_listener$type = listener[type]) == null ? void 0 : _listener$type.call(listener, event);
    });
  }, [listeners]);
  return [dispatch, registerListener];
}
var defaultScreenReaderInstructions = {
  draggable: "\n    To pick up a draggable item, press the space bar.\n    While dragging, use the arrow keys to move the item.\n    Press space again to drop the item in its new position, or press escape to cancel.\n  "
};
var defaultAnnouncements = {
  onDragStart(_ref) {
    let {
      active
    } = _ref;
    return "Picked up draggable item " + active.id + ".";
  },
  onDragOver(_ref2) {
    let {
      active,
      over
    } = _ref2;
    if (over) {
      return "Draggable item " + active.id + " was moved over droppable area " + over.id + ".";
    }
    return "Draggable item " + active.id + " is no longer over a droppable area.";
  },
  onDragEnd(_ref3) {
    let {
      active,
      over
    } = _ref3;
    if (over) {
      return "Draggable item " + active.id + " was dropped over droppable area " + over.id;
    }
    return "Draggable item " + active.id + " was dropped.";
  },
  onDragCancel(_ref4) {
    let {
      active
    } = _ref4;
    return "Dragging was cancelled. Draggable item " + active.id + " was dropped.";
  }
};
function Accessibility(_ref) {
  let {
    announcements = defaultAnnouncements,
    container,
    hiddenTextDescribedById,
    screenReaderInstructions = defaultScreenReaderInstructions
  } = _ref;
  const {
    announce,
    announcement
  } = useAnnouncement2();
  const liveRegionId = useUniqueId2("DndLiveRegion");
  const [mounted, setMounted] = (0, import_react192.useState)(false);
  (0, import_react192.useEffect)(() => {
    setMounted(true);
  }, []);
  useDndMonitor((0, import_react192.useMemo)(() => ({
    onDragStart(_ref2) {
      let {
        active
      } = _ref2;
      announce(announcements.onDragStart({
        active
      }));
    },
    onDragMove(_ref3) {
      let {
        active,
        over
      } = _ref3;
      if (announcements.onDragMove) {
        announce(announcements.onDragMove({
          active,
          over
        }));
      }
    },
    onDragOver(_ref4) {
      let {
        active,
        over
      } = _ref4;
      announce(announcements.onDragOver({
        active,
        over
      }));
    },
    onDragEnd(_ref5) {
      let {
        active,
        over
      } = _ref5;
      announce(announcements.onDragEnd({
        active,
        over
      }));
    },
    onDragCancel(_ref6) {
      let {
        active,
        over
      } = _ref6;
      announce(announcements.onDragCancel({
        active,
        over
      }));
    }
  }), [announce, announcements]));
  if (!mounted) {
    return null;
  }
  const markup = import_react192.default.createElement(import_react192.default.Fragment, null, import_react192.default.createElement(HiddenText, {
    id: hiddenTextDescribedById,
    value: screenReaderInstructions.draggable
  }), import_react192.default.createElement(LiveRegion, {
    id: liveRegionId,
    announcement
  }));
  return container ? (0, import_react_dom3.createPortal)(markup, container) : markup;
}
var Action;
(function(Action2) {
  Action2["DragStart"] = "dragStart";
  Action2["DragMove"] = "dragMove";
  Action2["DragEnd"] = "dragEnd";
  Action2["DragCancel"] = "dragCancel";
  Action2["DragOver"] = "dragOver";
  Action2["RegisterDroppable"] = "registerDroppable";
  Action2["SetDroppableDisabled"] = "setDroppableDisabled";
  Action2["UnregisterDroppable"] = "unregisterDroppable";
})(Action || (Action = {}));
function noop() {
}
function useSensor(sensor, options) {
  return (0, import_react192.useMemo)(
    () => ({
      sensor,
      options: options != null ? options : {}
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [sensor, options]
  );
}
function useSensors() {
  for (var _len = arguments.length, sensors = new Array(_len), _key = 0; _key < _len; _key++) {
    sensors[_key] = arguments[_key];
  }
  return (0, import_react192.useMemo)(
    () => [...sensors].filter((sensor) => sensor != null),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [...sensors]
  );
}
var defaultCoordinates = Object.freeze({
  x: 0,
  y: 0
});
function distanceBetween(p1, p2) {
  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
}
function getRelativeTransformOrigin(event, rect) {
  const eventCoordinates = getEventCoordinates(event);
  if (!eventCoordinates) {
    return "0 0";
  }
  const transformOrigin = {
    x: (eventCoordinates.x - rect.left) / rect.width * 100,
    y: (eventCoordinates.y - rect.top) / rect.height * 100
  };
  return transformOrigin.x + "% " + transformOrigin.y + "%";
}
function sortCollisionsAsc(_ref, _ref2) {
  let {
    data: {
      value: a2
    }
  } = _ref;
  let {
    data: {
      value: b
    }
  } = _ref2;
  return a2 - b;
}
function sortCollisionsDesc(_ref3, _ref4) {
  let {
    data: {
      value: a2
    }
  } = _ref3;
  let {
    data: {
      value: b
    }
  } = _ref4;
  return b - a2;
}
function getFirstCollision(collisions, property) {
  if (!collisions || collisions.length === 0) {
    return null;
  }
  const [firstCollision] = collisions;
  return property ? firstCollision[property] : firstCollision;
}
function centerOfRectangle(rect, left, top) {
  if (left === void 0) {
    left = rect.left;
  }
  if (top === void 0) {
    top = rect.top;
  }
  return {
    x: left + rect.width * 0.5,
    y: top + rect.height * 0.5
  };
}
var closestCenter = (_ref) => {
  let {
    collisionRect,
    droppableRects,
    droppableContainers
  } = _ref;
  const centerRect = centerOfRectangle(collisionRect, collisionRect.left, collisionRect.top);
  const collisions = [];
  for (const droppableContainer of droppableContainers) {
    const {
      id
    } = droppableContainer;
    const rect = droppableRects.get(id);
    if (rect) {
      const distBetween = distanceBetween(centerOfRectangle(rect), centerRect);
      collisions.push({
        id,
        data: {
          droppableContainer,
          value: distBetween
        }
      });
    }
  }
  return collisions.sort(sortCollisionsAsc);
};
function getIntersectionRatio(entry, target) {
  const top = Math.max(target.top, entry.top);
  const left = Math.max(target.left, entry.left);
  const right = Math.min(target.left + target.width, entry.left + entry.width);
  const bottom = Math.min(target.top + target.height, entry.top + entry.height);
  const width = right - left;
  const height = bottom - top;
  if (left < right && top < bottom) {
    const targetArea = target.width * target.height;
    const entryArea = entry.width * entry.height;
    const intersectionArea = width * height;
    const intersectionRatio = intersectionArea / (targetArea + entryArea - intersectionArea);
    return Number(intersectionRatio.toFixed(4));
  }
  return 0;
}
var rectIntersection = (_ref) => {
  let {
    collisionRect,
    droppableRects,
    droppableContainers
  } = _ref;
  const collisions = [];
  for (const droppableContainer of droppableContainers) {
    const {
      id
    } = droppableContainer;
    const rect = droppableRects.get(id);
    if (rect) {
      const intersectionRatio = getIntersectionRatio(rect, collisionRect);
      if (intersectionRatio > 0) {
        collisions.push({
          id,
          data: {
            droppableContainer,
            value: intersectionRatio
          }
        });
      }
    }
  }
  return collisions.sort(sortCollisionsDesc);
};
function adjustScale(transform, rect1, rect2) {
  return {
    ...transform,
    scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,
    scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1
  };
}
function getRectDelta(rect1, rect2) {
  return rect1 && rect2 ? {
    x: rect1.left - rect2.left,
    y: rect1.top - rect2.top
  } : defaultCoordinates;
}
function createRectAdjustmentFn(modifier) {
  return function adjustClientRect(rect) {
    for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      adjustments[_key - 1] = arguments[_key];
    }
    return adjustments.reduce((acc, adjustment) => ({
      ...acc,
      top: acc.top + modifier * adjustment.y,
      bottom: acc.bottom + modifier * adjustment.y,
      left: acc.left + modifier * adjustment.x,
      right: acc.right + modifier * adjustment.x
    }), {
      ...rect
    });
  };
}
var getAdjustedRect = createRectAdjustmentFn(1);
function parseTransform(transform) {
  if (transform.startsWith("matrix3d(")) {
    const transformArray = transform.slice(9, -1).split(/, /);
    return {
      x: +transformArray[12],
      y: +transformArray[13],
      scaleX: +transformArray[0],
      scaleY: +transformArray[5]
    };
  } else if (transform.startsWith("matrix(")) {
    const transformArray = transform.slice(7, -1).split(/, /);
    return {
      x: +transformArray[4],
      y: +transformArray[5],
      scaleX: +transformArray[0],
      scaleY: +transformArray[3]
    };
  }
  return null;
}
function inverseTransform(rect, transform, transformOrigin) {
  const parsedTransform = parseTransform(transform);
  if (!parsedTransform) {
    return rect;
  }
  const {
    scaleX,
    scaleY,
    x: translateX,
    y: translateY
  } = parsedTransform;
  const x2 = rect.left - translateX - (1 - scaleX) * parseFloat(transformOrigin);
  const y2 = rect.top - translateY - (1 - scaleY) * parseFloat(transformOrigin.slice(transformOrigin.indexOf(" ") + 1));
  const w = scaleX ? rect.width / scaleX : rect.width;
  const h = scaleY ? rect.height / scaleY : rect.height;
  return {
    width: w,
    height: h,
    top: y2,
    right: x2 + w,
    bottom: y2 + h,
    left: x2
  };
}
var defaultOptions2 = {
  ignoreTransform: false
};
function getClientRect(element, options) {
  if (options === void 0) {
    options = defaultOptions2;
  }
  let rect = element.getBoundingClientRect();
  if (options.ignoreTransform) {
    const {
      transform,
      transformOrigin
    } = getWindow(element).getComputedStyle(element);
    if (transform) {
      rect = inverseTransform(rect, transform, transformOrigin);
    }
  }
  const {
    top,
    left,
    width,
    height,
    bottom,
    right
  } = rect;
  return {
    top,
    left,
    width,
    height,
    bottom,
    right
  };
}
function getTransformAgnosticClientRect(element) {
  return getClientRect(element, {
    ignoreTransform: true
  });
}
function getWindowClientRect(element) {
  const width = element.innerWidth;
  const height = element.innerHeight;
  return {
    top: 0,
    left: 0,
    right: width,
    bottom: height,
    width,
    height
  };
}
function isFixed(node, computedStyle) {
  if (computedStyle === void 0) {
    computedStyle = getWindow(node).getComputedStyle(node);
  }
  return computedStyle.position === "fixed";
}
function isScrollable(element, computedStyle) {
  if (computedStyle === void 0) {
    computedStyle = getWindow(element).getComputedStyle(element);
  }
  const overflowRegex = /(auto|scroll|overlay)/;
  const properties2 = ["overflow", "overflowX", "overflowY"];
  return properties2.some((property) => {
    const value = computedStyle[property];
    return typeof value === "string" ? overflowRegex.test(value) : false;
  });
}
function getScrollableAncestors(element, limit) {
  const scrollParents = [];
  function findScrollableAncestors(node) {
    if (limit != null && scrollParents.length >= limit) {
      return scrollParents;
    }
    if (!node) {
      return scrollParents;
    }
    if (isDocument(node) && node.scrollingElement != null && !scrollParents.includes(node.scrollingElement)) {
      scrollParents.push(node.scrollingElement);
      return scrollParents;
    }
    if (!isHTMLElement(node) || isSVGElement(node)) {
      return scrollParents;
    }
    if (scrollParents.includes(node)) {
      return scrollParents;
    }
    const computedStyle = getWindow(element).getComputedStyle(node);
    if (node !== element) {
      if (isScrollable(node, computedStyle)) {
        scrollParents.push(node);
      }
    }
    if (isFixed(node, computedStyle)) {
      return scrollParents;
    }
    return findScrollableAncestors(node.parentNode);
  }
  if (!element) {
    return scrollParents;
  }
  return findScrollableAncestors(element);
}
function getFirstScrollableAncestor(node) {
  const [firstScrollableAncestor] = getScrollableAncestors(node, 1);
  return firstScrollableAncestor != null ? firstScrollableAncestor : null;
}
function getScrollableElement(element) {
  if (!canUseDOM || !element) {
    return null;
  }
  if (isWindow(element)) {
    return element;
  }
  if (!isNode(element)) {
    return null;
  }
  if (isDocument(element) || element === getOwnerDocument(element).scrollingElement) {
    return window;
  }
  if (isHTMLElement(element)) {
    return element;
  }
  return null;
}
function getScrollXCoordinate(element) {
  if (isWindow(element)) {
    return element.scrollX;
  }
  return element.scrollLeft;
}
function getScrollYCoordinate(element) {
  if (isWindow(element)) {
    return element.scrollY;
  }
  return element.scrollTop;
}
function getScrollCoordinates(element) {
  return {
    x: getScrollXCoordinate(element),
    y: getScrollYCoordinate(element)
  };
}
var Direction;
(function(Direction2) {
  Direction2[Direction2["Forward"] = 1] = "Forward";
  Direction2[Direction2["Backward"] = -1] = "Backward";
})(Direction || (Direction = {}));
function isDocumentScrollingElement(element) {
  if (!canUseDOM || !element) {
    return false;
  }
  return element === document.scrollingElement;
}
function getScrollPosition(scrollingContainer) {
  const minScroll = {
    x: 0,
    y: 0
  };
  const dimensions = isDocumentScrollingElement(scrollingContainer) ? {
    height: window.innerHeight,
    width: window.innerWidth
  } : {
    height: scrollingContainer.clientHeight,
    width: scrollingContainer.clientWidth
  };
  const maxScroll = {
    x: scrollingContainer.scrollWidth - dimensions.width,
    y: scrollingContainer.scrollHeight - dimensions.height
  };
  const isTop = scrollingContainer.scrollTop <= minScroll.y;
  const isLeft = scrollingContainer.scrollLeft <= minScroll.x;
  const isBottom = scrollingContainer.scrollTop >= maxScroll.y;
  const isRight = scrollingContainer.scrollLeft >= maxScroll.x;
  return {
    isTop,
    isLeft,
    isBottom,
    isRight,
    maxScroll,
    minScroll
  };
}
var defaultThreshold = {
  x: 0.2,
  y: 0.2
};
function getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, _ref, acceleration, thresholdPercentage) {
  let {
    top,
    left,
    right,
    bottom
  } = _ref;
  if (acceleration === void 0) {
    acceleration = 10;
  }
  if (thresholdPercentage === void 0) {
    thresholdPercentage = defaultThreshold;
  }
  const {
    isTop,
    isBottom,
    isLeft,
    isRight
  } = getScrollPosition(scrollContainer);
  const direction = {
    x: 0,
    y: 0
  };
  const speed = {
    x: 0,
    y: 0
  };
  const threshold = {
    height: scrollContainerRect.height * thresholdPercentage.y,
    width: scrollContainerRect.width * thresholdPercentage.x
  };
  if (!isTop && top <= scrollContainerRect.top + threshold.height) {
    direction.y = Direction.Backward;
    speed.y = acceleration * Math.abs((scrollContainerRect.top + threshold.height - top) / threshold.height);
  } else if (!isBottom && bottom >= scrollContainerRect.bottom - threshold.height) {
    direction.y = Direction.Forward;
    speed.y = acceleration * Math.abs((scrollContainerRect.bottom - threshold.height - bottom) / threshold.height);
  }
  if (!isRight && right >= scrollContainerRect.right - threshold.width) {
    direction.x = Direction.Forward;
    speed.x = acceleration * Math.abs((scrollContainerRect.right - threshold.width - right) / threshold.width);
  } else if (!isLeft && left <= scrollContainerRect.left + threshold.width) {
    direction.x = Direction.Backward;
    speed.x = acceleration * Math.abs((scrollContainerRect.left + threshold.width - left) / threshold.width);
  }
  return {
    direction,
    speed
  };
}
function getScrollElementRect(element) {
  if (element === document.scrollingElement) {
    const {
      innerWidth,
      innerHeight
    } = window;
    return {
      top: 0,
      left: 0,
      right: innerWidth,
      bottom: innerHeight,
      width: innerWidth,
      height: innerHeight
    };
  }
  const {
    top,
    left,
    right,
    bottom
  } = element.getBoundingClientRect();
  return {
    top,
    left,
    right,
    bottom,
    width: element.clientWidth,
    height: element.clientHeight
  };
}
function getScrollOffsets(scrollableAncestors) {
  return scrollableAncestors.reduce((acc, node) => {
    return add2(acc, getScrollCoordinates(node));
  }, defaultCoordinates);
}
function getScrollXOffset(scrollableAncestors) {
  return scrollableAncestors.reduce((acc, node) => {
    return acc + getScrollXCoordinate(node);
  }, 0);
}
function getScrollYOffset(scrollableAncestors) {
  return scrollableAncestors.reduce((acc, node) => {
    return acc + getScrollYCoordinate(node);
  }, 0);
}
function scrollIntoViewIfNeeded(element, measure) {
  if (measure === void 0) {
    measure = getClientRect;
  }
  if (!element) {
    return;
  }
  const {
    top,
    left,
    bottom,
    right
  } = measure(element);
  const firstScrollableAncestor = getFirstScrollableAncestor(element);
  if (!firstScrollableAncestor) {
    return;
  }
  if (bottom <= 0 || right <= 0 || top >= window.innerHeight || left >= window.innerWidth) {
    element.scrollIntoView({
      block: "center",
      inline: "center"
    });
  }
}
var properties = [["x", ["left", "right"], getScrollXOffset], ["y", ["top", "bottom"], getScrollYOffset]];
var Rect = class {
  constructor(rect, element) {
    this.rect = void 0;
    this.width = void 0;
    this.height = void 0;
    this.top = void 0;
    this.bottom = void 0;
    this.right = void 0;
    this.left = void 0;
    const scrollableAncestors = getScrollableAncestors(element);
    const scrollOffsets = getScrollOffsets(scrollableAncestors);
    this.rect = {
      ...rect
    };
    this.width = rect.width;
    this.height = rect.height;
    for (const [axis, keys, getScrollOffset] of properties) {
      for (const key2 of keys) {
        Object.defineProperty(this, key2, {
          get: () => {
            const currentOffsets = getScrollOffset(scrollableAncestors);
            const scrollOffsetsDeltla = scrollOffsets[axis] - currentOffsets;
            return this.rect[key2] + scrollOffsetsDeltla;
          },
          enumerable: true
        });
      }
    }
    Object.defineProperty(this, "rect", {
      enumerable: false
    });
  }
};
var Listeners = class {
  constructor(target) {
    this.target = void 0;
    this.listeners = [];
    this.removeAll = () => {
      this.listeners.forEach((listener) => {
        var _this$target;
        return (_this$target = this.target) == null ? void 0 : _this$target.removeEventListener(...listener);
      });
    };
    this.target = target;
  }
  add(eventName, handler, options) {
    var _this$target2;
    (_this$target2 = this.target) == null ? void 0 : _this$target2.addEventListener(eventName, handler, options);
    this.listeners.push([eventName, handler, options]);
  }
};
function getEventListenerTarget(target) {
  const {
    EventTarget
  } = getWindow(target);
  return target instanceof EventTarget ? target : getOwnerDocument(target);
}
function hasExceededDistance(delta, measurement) {
  const dx = Math.abs(delta.x);
  const dy = Math.abs(delta.y);
  if (typeof measurement === "number") {
    return Math.sqrt(dx ** 2 + dy ** 2) > measurement;
  }
  if ("x" in measurement && "y" in measurement) {
    return dx > measurement.x && dy > measurement.y;
  }
  if ("x" in measurement) {
    return dx > measurement.x;
  }
  if ("y" in measurement) {
    return dy > measurement.y;
  }
  return false;
}
var EventName;
(function(EventName3) {
  EventName3["Click"] = "click";
  EventName3["DragStart"] = "dragstart";
  EventName3["Keydown"] = "keydown";
  EventName3["ContextMenu"] = "contextmenu";
  EventName3["Resize"] = "resize";
  EventName3["SelectionChange"] = "selectionchange";
  EventName3["VisibilityChange"] = "visibilitychange";
})(EventName || (EventName = {}));
function preventDefault(event) {
  event.preventDefault();
}
function stopPropagation(event) {
  event.stopPropagation();
}
var KeyboardCode;
(function(KeyboardCode3) {
  KeyboardCode3["Space"] = "Space";
  KeyboardCode3["Down"] = "ArrowDown";
  KeyboardCode3["Right"] = "ArrowRight";
  KeyboardCode3["Left"] = "ArrowLeft";
  KeyboardCode3["Up"] = "ArrowUp";
  KeyboardCode3["Esc"] = "Escape";
  KeyboardCode3["Enter"] = "Enter";
})(KeyboardCode || (KeyboardCode = {}));
var defaultKeyboardCodes = {
  start: [KeyboardCode.Space, KeyboardCode.Enter],
  cancel: [KeyboardCode.Esc],
  end: [KeyboardCode.Space, KeyboardCode.Enter]
};
var defaultKeyboardCoordinateGetter = (event, _ref) => {
  let {
    currentCoordinates
  } = _ref;
  switch (event.code) {
    case KeyboardCode.Right:
      return {
        ...currentCoordinates,
        x: currentCoordinates.x + 25
      };
    case KeyboardCode.Left:
      return {
        ...currentCoordinates,
        x: currentCoordinates.x - 25
      };
    case KeyboardCode.Down:
      return {
        ...currentCoordinates,
        y: currentCoordinates.y + 25
      };
    case KeyboardCode.Up:
      return {
        ...currentCoordinates,
        y: currentCoordinates.y - 25
      };
  }
  return void 0;
};
var KeyboardSensor = class {
  constructor(props) {
    this.props = void 0;
    this.autoScrollEnabled = false;
    this.referenceCoordinates = void 0;
    this.listeners = void 0;
    this.windowListeners = void 0;
    this.props = props;
    const {
      event: {
        target
      }
    } = props;
    this.props = props;
    this.listeners = new Listeners(getOwnerDocument(target));
    this.windowListeners = new Listeners(getWindow(target));
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.handleCancel = this.handleCancel.bind(this);
    this.attach();
  }
  attach() {
    this.handleStart();
    this.windowListeners.add(EventName.Resize, this.handleCancel);
    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);
    setTimeout(() => this.listeners.add(EventName.Keydown, this.handleKeyDown));
  }
  handleStart() {
    const {
      activeNode,
      onStart
    } = this.props;
    const node = activeNode.node.current;
    if (node) {
      scrollIntoViewIfNeeded(node);
    }
    onStart(defaultCoordinates);
  }
  handleKeyDown(event) {
    if (isKeyboardEvent(event)) {
      const {
        active,
        context,
        options
      } = this.props;
      const {
        keyboardCodes = defaultKeyboardCodes,
        coordinateGetter = defaultKeyboardCoordinateGetter,
        scrollBehavior = "smooth"
      } = options;
      const {
        code
      } = event;
      if (keyboardCodes.end.includes(code)) {
        this.handleEnd(event);
        return;
      }
      if (keyboardCodes.cancel.includes(code)) {
        this.handleCancel(event);
        return;
      }
      const {
        collisionRect
      } = context.current;
      const currentCoordinates = collisionRect ? {
        x: collisionRect.left,
        y: collisionRect.top
      } : defaultCoordinates;
      if (!this.referenceCoordinates) {
        this.referenceCoordinates = currentCoordinates;
      }
      const newCoordinates = coordinateGetter(event, {
        active,
        context: context.current,
        currentCoordinates
      });
      if (newCoordinates) {
        const coordinatesDelta = subtract(newCoordinates, currentCoordinates);
        const scrollDelta = {
          x: 0,
          y: 0
        };
        const {
          scrollableAncestors
        } = context.current;
        for (const scrollContainer of scrollableAncestors) {
          const direction = event.code;
          const {
            isTop,
            isRight,
            isLeft,
            isBottom,
            maxScroll,
            minScroll
          } = getScrollPosition(scrollContainer);
          const scrollElementRect = getScrollElementRect(scrollContainer);
          const clampedCoordinates = {
            x: Math.min(direction === KeyboardCode.Right ? scrollElementRect.right - scrollElementRect.width / 2 : scrollElementRect.right, Math.max(direction === KeyboardCode.Right ? scrollElementRect.left : scrollElementRect.left + scrollElementRect.width / 2, newCoordinates.x)),
            y: Math.min(direction === KeyboardCode.Down ? scrollElementRect.bottom - scrollElementRect.height / 2 : scrollElementRect.bottom, Math.max(direction === KeyboardCode.Down ? scrollElementRect.top : scrollElementRect.top + scrollElementRect.height / 2, newCoordinates.y))
          };
          const canScrollX = direction === KeyboardCode.Right && !isRight || direction === KeyboardCode.Left && !isLeft;
          const canScrollY = direction === KeyboardCode.Down && !isBottom || direction === KeyboardCode.Up && !isTop;
          if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {
            const newScrollCoordinates = scrollContainer.scrollLeft + coordinatesDelta.x;
            const canScrollToNewCoordinates = direction === KeyboardCode.Right && newScrollCoordinates <= maxScroll.x || direction === KeyboardCode.Left && newScrollCoordinates >= minScroll.x;
            if (canScrollToNewCoordinates && !coordinatesDelta.y) {
              scrollContainer.scrollTo({
                left: newScrollCoordinates,
                behavior: scrollBehavior
              });
              return;
            }
            if (canScrollToNewCoordinates) {
              scrollDelta.x = scrollContainer.scrollLeft - newScrollCoordinates;
            } else {
              scrollDelta.x = direction === KeyboardCode.Right ? scrollContainer.scrollLeft - maxScroll.x : scrollContainer.scrollLeft - minScroll.x;
            }
            if (scrollDelta.x) {
              scrollContainer.scrollBy({
                left: -scrollDelta.x,
                behavior: scrollBehavior
              });
            }
            break;
          } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {
            const newScrollCoordinates = scrollContainer.scrollTop + coordinatesDelta.y;
            const canScrollToNewCoordinates = direction === KeyboardCode.Down && newScrollCoordinates <= maxScroll.y || direction === KeyboardCode.Up && newScrollCoordinates >= minScroll.y;
            if (canScrollToNewCoordinates && !coordinatesDelta.x) {
              scrollContainer.scrollTo({
                top: newScrollCoordinates,
                behavior: scrollBehavior
              });
              return;
            }
            if (canScrollToNewCoordinates) {
              scrollDelta.y = scrollContainer.scrollTop - newScrollCoordinates;
            } else {
              scrollDelta.y = direction === KeyboardCode.Down ? scrollContainer.scrollTop - maxScroll.y : scrollContainer.scrollTop - minScroll.y;
            }
            if (scrollDelta.y) {
              scrollContainer.scrollBy({
                top: -scrollDelta.y,
                behavior: scrollBehavior
              });
            }
            break;
          }
        }
        this.handleMove(event, add2(subtract(newCoordinates, this.referenceCoordinates), scrollDelta));
      }
    }
  }
  handleMove(event, coordinates) {
    const {
      onMove
    } = this.props;
    event.preventDefault();
    onMove(coordinates);
  }
  handleEnd(event) {
    const {
      onEnd
    } = this.props;
    event.preventDefault();
    this.detach();
    onEnd();
  }
  handleCancel(event) {
    const {
      onCancel
    } = this.props;
    event.preventDefault();
    this.detach();
    onCancel();
  }
  detach() {
    this.listeners.removeAll();
    this.windowListeners.removeAll();
  }
};
KeyboardSensor.activators = [{
  eventName: "onKeyDown",
  handler: (event, _ref, _ref2) => {
    let {
      keyboardCodes = defaultKeyboardCodes,
      onActivation
    } = _ref;
    let {
      active
    } = _ref2;
    const {
      code
    } = event.nativeEvent;
    if (keyboardCodes.start.includes(code)) {
      const activator = active.activatorNode.current;
      if (activator && event.target !== activator) {
        return false;
      }
      event.preventDefault();
      onActivation == null ? void 0 : onActivation({
        event: event.nativeEvent
      });
      return true;
    }
    return false;
  }
}];
function isDistanceConstraint(constraint) {
  return Boolean(constraint && "distance" in constraint);
}
function isDelayConstraint(constraint) {
  return Boolean(constraint && "delay" in constraint);
}
var AbstractPointerSensor = class {
  constructor(props, events2, listenerTarget) {
    var _getEventCoordinates;
    if (listenerTarget === void 0) {
      listenerTarget = getEventListenerTarget(props.event.target);
    }
    this.props = void 0;
    this.events = void 0;
    this.autoScrollEnabled = true;
    this.document = void 0;
    this.activated = false;
    this.initialCoordinates = void 0;
    this.timeoutId = null;
    this.listeners = void 0;
    this.documentListeners = void 0;
    this.windowListeners = void 0;
    this.props = props;
    this.events = events2;
    const {
      event
    } = props;
    const {
      target
    } = event;
    this.props = props;
    this.events = events2;
    this.document = getOwnerDocument(target);
    this.documentListeners = new Listeners(this.document);
    this.listeners = new Listeners(listenerTarget);
    this.windowListeners = new Listeners(getWindow(target));
    this.initialCoordinates = (_getEventCoordinates = getEventCoordinates(event)) != null ? _getEventCoordinates : defaultCoordinates;
    this.handleStart = this.handleStart.bind(this);
    this.handleMove = this.handleMove.bind(this);
    this.handleEnd = this.handleEnd.bind(this);
    this.handleCancel = this.handleCancel.bind(this);
    this.handleKeydown = this.handleKeydown.bind(this);
    this.removeTextSelection = this.removeTextSelection.bind(this);
    this.attach();
  }
  attach() {
    const {
      events: events2,
      props: {
        options: {
          activationConstraint,
          bypassActivationConstraint
        }
      }
    } = this;
    this.listeners.add(events2.move.name, this.handleMove, {
      passive: false
    });
    this.listeners.add(events2.end.name, this.handleEnd);
    this.windowListeners.add(EventName.Resize, this.handleCancel);
    this.windowListeners.add(EventName.DragStart, preventDefault);
    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);
    this.windowListeners.add(EventName.ContextMenu, preventDefault);
    this.documentListeners.add(EventName.Keydown, this.handleKeydown);
    if (activationConstraint) {
      if (bypassActivationConstraint != null && bypassActivationConstraint({
        event: this.props.event,
        activeNode: this.props.activeNode,
        options: this.props.options
      })) {
        return this.handleStart();
      }
      if (isDelayConstraint(activationConstraint)) {
        this.timeoutId = setTimeout(this.handleStart, activationConstraint.delay);
        return;
      }
      if (isDistanceConstraint(activationConstraint)) {
        return;
      }
    }
    this.handleStart();
  }
  detach() {
    this.listeners.removeAll();
    this.windowListeners.removeAll();
    setTimeout(this.documentListeners.removeAll, 50);
    if (this.timeoutId !== null) {
      clearTimeout(this.timeoutId);
      this.timeoutId = null;
    }
  }
  handleStart() {
    const {
      initialCoordinates
    } = this;
    const {
      onStart
    } = this.props;
    if (initialCoordinates) {
      this.activated = true;
      this.documentListeners.add(EventName.Click, stopPropagation, {
        capture: true
      });
      this.removeTextSelection();
      this.documentListeners.add(EventName.SelectionChange, this.removeTextSelection);
      onStart(initialCoordinates);
    }
  }
  handleMove(event) {
    var _getEventCoordinates2;
    const {
      activated,
      initialCoordinates,
      props
    } = this;
    const {
      onMove,
      options: {
        activationConstraint
      }
    } = props;
    if (!initialCoordinates) {
      return;
    }
    const coordinates = (_getEventCoordinates2 = getEventCoordinates(event)) != null ? _getEventCoordinates2 : defaultCoordinates;
    const delta = subtract(initialCoordinates, coordinates);
    if (!activated && activationConstraint) {
      if (isDistanceConstraint(activationConstraint)) {
        if (activationConstraint.tolerance != null && hasExceededDistance(delta, activationConstraint.tolerance)) {
          return this.handleCancel();
        }
        if (hasExceededDistance(delta, activationConstraint.distance)) {
          return this.handleStart();
        }
      }
      if (isDelayConstraint(activationConstraint)) {
        if (hasExceededDistance(delta, activationConstraint.tolerance)) {
          return this.handleCancel();
        }
      }
      return;
    }
    if (event.cancelable) {
      event.preventDefault();
    }
    onMove(coordinates);
  }
  handleEnd() {
    const {
      onEnd
    } = this.props;
    this.detach();
    onEnd();
  }
  handleCancel() {
    const {
      onCancel
    } = this.props;
    this.detach();
    onCancel();
  }
  handleKeydown(event) {
    if (event.code === KeyboardCode.Esc) {
      this.handleCancel();
    }
  }
  removeTextSelection() {
    var _this$document$getSel;
    (_this$document$getSel = this.document.getSelection()) == null ? void 0 : _this$document$getSel.removeAllRanges();
  }
};
var events = {
  move: {
    name: "pointermove"
  },
  end: {
    name: "pointerup"
  }
};
var PointerSensor = class extends AbstractPointerSensor {
  constructor(props) {
    const {
      event
    } = props;
    const listenerTarget = getOwnerDocument(event.target);
    super(props, events, listenerTarget);
  }
};
PointerSensor.activators = [{
  eventName: "onPointerDown",
  handler: (_ref, _ref2) => {
    let {
      nativeEvent: event
    } = _ref;
    let {
      onActivation
    } = _ref2;
    if (!event.isPrimary || event.button !== 0) {
      return false;
    }
    onActivation == null ? void 0 : onActivation({
      event
    });
    return true;
  }
}];
var events$1 = {
  move: {
    name: "mousemove"
  },
  end: {
    name: "mouseup"
  }
};
var MouseButton;
(function(MouseButton2) {
  MouseButton2[MouseButton2["RightClick"] = 2] = "RightClick";
})(MouseButton || (MouseButton = {}));
var MouseSensor = class extends AbstractPointerSensor {
  constructor(props) {
    super(props, events$1, getOwnerDocument(props.event.target));
  }
};
MouseSensor.activators = [{
  eventName: "onMouseDown",
  handler: (_ref, _ref2) => {
    let {
      nativeEvent: event
    } = _ref;
    let {
      onActivation
    } = _ref2;
    if (event.button === MouseButton.RightClick) {
      return false;
    }
    onActivation == null ? void 0 : onActivation({
      event
    });
    return true;
  }
}];
var events$2 = {
  move: {
    name: "touchmove"
  },
  end: {
    name: "touchend"
  }
};
var TouchSensor = class extends AbstractPointerSensor {
  constructor(props) {
    super(props, events$2);
  }
  static setup() {
    window.addEventListener(events$2.move.name, noop3, {
      capture: false,
      passive: false
    });
    return function teardown() {
      window.removeEventListener(events$2.move.name, noop3);
    };
    function noop3() {
    }
  }
};
TouchSensor.activators = [{
  eventName: "onTouchStart",
  handler: (_ref, _ref2) => {
    let {
      nativeEvent: event
    } = _ref;
    let {
      onActivation
    } = _ref2;
    const {
      touches
    } = event;
    if (touches.length > 1) {
      return false;
    }
    onActivation == null ? void 0 : onActivation({
      event
    });
    return true;
  }
}];
var AutoScrollActivator;
(function(AutoScrollActivator2) {
  AutoScrollActivator2[AutoScrollActivator2["Pointer"] = 0] = "Pointer";
  AutoScrollActivator2[AutoScrollActivator2["DraggableRect"] = 1] = "DraggableRect";
})(AutoScrollActivator || (AutoScrollActivator = {}));
var TraversalOrder;
(function(TraversalOrder2) {
  TraversalOrder2[TraversalOrder2["TreeOrder"] = 0] = "TreeOrder";
  TraversalOrder2[TraversalOrder2["ReversedTreeOrder"] = 1] = "ReversedTreeOrder";
})(TraversalOrder || (TraversalOrder = {}));
function useAutoScroller(_ref) {
  let {
    acceleration,
    activator = AutoScrollActivator.Pointer,
    canScroll,
    draggingRect,
    enabled,
    interval = 5,
    order = TraversalOrder.TreeOrder,
    pointerCoordinates,
    scrollableAncestors,
    scrollableAncestorRects,
    delta,
    threshold
  } = _ref;
  const scrollIntent = useScrollIntent({
    delta,
    disabled: !enabled
  });
  const [setAutoScrollInterval, clearAutoScrollInterval] = useInterval();
  const scrollSpeed = (0, import_react192.useRef)({
    x: 0,
    y: 0
  });
  const scrollDirection = (0, import_react192.useRef)({
    x: 0,
    y: 0
  });
  const rect = (0, import_react192.useMemo)(() => {
    switch (activator) {
      case AutoScrollActivator.Pointer:
        return pointerCoordinates ? {
          top: pointerCoordinates.y,
          bottom: pointerCoordinates.y,
          left: pointerCoordinates.x,
          right: pointerCoordinates.x
        } : null;
      case AutoScrollActivator.DraggableRect:
        return draggingRect;
    }
  }, [activator, draggingRect, pointerCoordinates]);
  const scrollContainerRef = (0, import_react192.useRef)(null);
  const autoScroll = (0, import_react192.useCallback)(() => {
    const scrollContainer = scrollContainerRef.current;
    if (!scrollContainer) {
      return;
    }
    const scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;
    const scrollTop = scrollSpeed.current.y * scrollDirection.current.y;
    scrollContainer.scrollBy(scrollLeft, scrollTop);
  }, []);
  const sortedScrollableAncestors = (0, import_react192.useMemo)(() => order === TraversalOrder.TreeOrder ? [...scrollableAncestors].reverse() : scrollableAncestors, [order, scrollableAncestors]);
  (0, import_react192.useEffect)(
    () => {
      if (!enabled || !scrollableAncestors.length || !rect) {
        clearAutoScrollInterval();
        return;
      }
      for (const scrollContainer of sortedScrollableAncestors) {
        if ((canScroll == null ? void 0 : canScroll(scrollContainer)) === false) {
          continue;
        }
        const index = scrollableAncestors.indexOf(scrollContainer);
        const scrollContainerRect = scrollableAncestorRects[index];
        if (!scrollContainerRect) {
          continue;
        }
        const {
          direction,
          speed
        } = getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, rect, acceleration, threshold);
        for (const axis of ["x", "y"]) {
          if (!scrollIntent[axis][direction[axis]]) {
            speed[axis] = 0;
            direction[axis] = 0;
          }
        }
        if (speed.x > 0 || speed.y > 0) {
          clearAutoScrollInterval();
          scrollContainerRef.current = scrollContainer;
          setAutoScrollInterval(autoScroll, interval);
          scrollSpeed.current = speed;
          scrollDirection.current = direction;
          return;
        }
      }
      scrollSpeed.current = {
        x: 0,
        y: 0
      };
      scrollDirection.current = {
        x: 0,
        y: 0
      };
      clearAutoScrollInterval();
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      acceleration,
      autoScroll,
      canScroll,
      clearAutoScrollInterval,
      enabled,
      interval,
      // eslint-disable-next-line react-hooks/exhaustive-deps
      JSON.stringify(rect),
      // eslint-disable-next-line react-hooks/exhaustive-deps
      JSON.stringify(scrollIntent),
      setAutoScrollInterval,
      scrollableAncestors,
      sortedScrollableAncestors,
      scrollableAncestorRects,
      // eslint-disable-next-line react-hooks/exhaustive-deps
      JSON.stringify(threshold)
    ]
  );
}
var defaultScrollIntent = {
  x: {
    [Direction.Backward]: false,
    [Direction.Forward]: false
  },
  y: {
    [Direction.Backward]: false,
    [Direction.Forward]: false
  }
};
function useScrollIntent(_ref2) {
  let {
    delta,
    disabled
  } = _ref2;
  const previousDelta = usePrevious2(delta);
  return useLazyMemo((previousIntent) => {
    if (disabled || !previousDelta || !previousIntent) {
      return defaultScrollIntent;
    }
    const direction = {
      x: Math.sign(delta.x - previousDelta.x),
      y: Math.sign(delta.y - previousDelta.y)
    };
    return {
      x: {
        [Direction.Backward]: previousIntent.x[Direction.Backward] || direction.x === -1,
        [Direction.Forward]: previousIntent.x[Direction.Forward] || direction.x === 1
      },
      y: {
        [Direction.Backward]: previousIntent.y[Direction.Backward] || direction.y === -1,
        [Direction.Forward]: previousIntent.y[Direction.Forward] || direction.y === 1
      }
    };
  }, [disabled, delta, previousDelta]);
}
function useCachedNode(draggableNodes, id) {
  const draggableNode = id !== null ? draggableNodes.get(id) : void 0;
  const node = draggableNode ? draggableNode.node.current : null;
  return useLazyMemo((cachedNode) => {
    var _ref;
    if (id === null) {
      return null;
    }
    return (_ref = node != null ? node : cachedNode) != null ? _ref : null;
  }, [node, id]);
}
function useCombineActivators(sensors, getSyntheticHandler) {
  return (0, import_react192.useMemo)(() => sensors.reduce((accumulator, sensor) => {
    const {
      sensor: Sensor
    } = sensor;
    const sensorActivators = Sensor.activators.map((activator) => ({
      eventName: activator.eventName,
      handler: getSyntheticHandler(activator.handler, sensor)
    }));
    return [...accumulator, ...sensorActivators];
  }, []), [sensors, getSyntheticHandler]);
}
var MeasuringStrategy;
(function(MeasuringStrategy2) {
  MeasuringStrategy2[MeasuringStrategy2["Always"] = 0] = "Always";
  MeasuringStrategy2[MeasuringStrategy2["BeforeDragging"] = 1] = "BeforeDragging";
  MeasuringStrategy2[MeasuringStrategy2["WhileDragging"] = 2] = "WhileDragging";
})(MeasuringStrategy || (MeasuringStrategy = {}));
var MeasuringFrequency;
(function(MeasuringFrequency2) {
  MeasuringFrequency2["Optimized"] = "optimized";
})(MeasuringFrequency || (MeasuringFrequency = {}));
var defaultValue4 = /* @__PURE__ */ new Map();
function useDroppableMeasuring(containers, _ref) {
  let {
    dragging,
    dependencies,
    config
  } = _ref;
  const [queue, setQueue] = (0, import_react192.useState)(null);
  const {
    frequency,
    measure,
    strategy
  } = config;
  const containersRef = (0, import_react192.useRef)(containers);
  const disabled = isDisabled();
  const disabledRef = useLatestValue(disabled);
  const measureDroppableContainers = (0, import_react192.useCallback)(function(ids2) {
    if (ids2 === void 0) {
      ids2 = [];
    }
    if (disabledRef.current) {
      return;
    }
    setQueue((value) => {
      if (value === null) {
        return ids2;
      }
      return value.concat(ids2.filter((id) => !value.includes(id)));
    });
  }, [disabledRef]);
  const timeoutId = (0, import_react192.useRef)(null);
  const droppableRects = useLazyMemo((previousValue) => {
    if (disabled && !dragging) {
      return defaultValue4;
    }
    if (!previousValue || previousValue === defaultValue4 || containersRef.current !== containers || queue != null) {
      const map2 = /* @__PURE__ */ new Map();
      for (let container of containers) {
        if (!container) {
          continue;
        }
        if (queue && queue.length > 0 && !queue.includes(container.id) && container.rect.current) {
          map2.set(container.id, container.rect.current);
          continue;
        }
        const node = container.node.current;
        const rect = node ? new Rect(measure(node), node) : null;
        container.rect.current = rect;
        if (rect) {
          map2.set(container.id, rect);
        }
      }
      return map2;
    }
    return previousValue;
  }, [containers, queue, dragging, disabled, measure]);
  (0, import_react192.useEffect)(() => {
    containersRef.current = containers;
  }, [containers]);
  (0, import_react192.useEffect)(
    () => {
      if (disabled) {
        return;
      }
      measureDroppableContainers();
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [dragging, disabled]
  );
  (0, import_react192.useEffect)(
    () => {
      if (queue && queue.length > 0) {
        setQueue(null);
      }
    },
    //eslint-disable-next-line react-hooks/exhaustive-deps
    [JSON.stringify(queue)]
  );
  (0, import_react192.useEffect)(
    () => {
      if (disabled || typeof frequency !== "number" || timeoutId.current !== null) {
        return;
      }
      timeoutId.current = setTimeout(() => {
        measureDroppableContainers();
        timeoutId.current = null;
      }, frequency);
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [frequency, disabled, measureDroppableContainers, ...dependencies]
  );
  return {
    droppableRects,
    measureDroppableContainers,
    measuringScheduled: queue != null
  };
  function isDisabled() {
    switch (strategy) {
      case MeasuringStrategy.Always:
        return false;
      case MeasuringStrategy.BeforeDragging:
        return dragging;
      default:
        return !dragging;
    }
  }
}
function useInitialValue(value, computeFn) {
  return useLazyMemo((previousValue) => {
    if (!value) {
      return null;
    }
    if (previousValue) {
      return previousValue;
    }
    return typeof computeFn === "function" ? computeFn(value) : value;
  }, [computeFn, value]);
}
function useInitialRect(node, measure) {
  return useInitialValue(node, measure);
}
function useMutationObserver(_ref) {
  let {
    callback,
    disabled
  } = _ref;
  const handleMutations = useEvent(callback);
  const mutationObserver = (0, import_react192.useMemo)(() => {
    if (disabled || typeof window === "undefined" || typeof window.MutationObserver === "undefined") {
      return void 0;
    }
    const {
      MutationObserver
    } = window;
    return new MutationObserver(handleMutations);
  }, [handleMutations, disabled]);
  (0, import_react192.useEffect)(() => {
    return () => mutationObserver == null ? void 0 : mutationObserver.disconnect();
  }, [mutationObserver]);
  return mutationObserver;
}
function useResizeObserver2(_ref) {
  let {
    callback,
    disabled
  } = _ref;
  const handleResize = useEvent(callback);
  const resizeObserver = (0, import_react192.useMemo)(
    () => {
      if (disabled || typeof window === "undefined" || typeof window.ResizeObserver === "undefined") {
        return void 0;
      }
      const {
        ResizeObserver: ResizeObserver2
      } = window;
      return new ResizeObserver2(handleResize);
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [disabled]
  );
  (0, import_react192.useEffect)(() => {
    return () => resizeObserver == null ? void 0 : resizeObserver.disconnect();
  }, [resizeObserver]);
  return resizeObserver;
}
function defaultMeasure(element) {
  return new Rect(getClientRect(element), element);
}
function useRect(element, measure, fallbackRect) {
  if (measure === void 0) {
    measure = defaultMeasure;
  }
  const [rect, measureRect] = (0, import_react192.useReducer)(reducer2, null);
  const mutationObserver = useMutationObserver({
    callback(records) {
      if (!element) {
        return;
      }
      for (const record of records) {
        const {
          type,
          target
        } = record;
        if (type === "childList" && target instanceof HTMLElement && target.contains(element)) {
          measureRect();
          break;
        }
      }
    }
  });
  const resizeObserver = useResizeObserver2({
    callback: measureRect
  });
  useIsomorphicLayoutEffect(() => {
    measureRect();
    if (element) {
      resizeObserver == null ? void 0 : resizeObserver.observe(element);
      mutationObserver == null ? void 0 : mutationObserver.observe(document.body, {
        childList: true,
        subtree: true
      });
    } else {
      resizeObserver == null ? void 0 : resizeObserver.disconnect();
      mutationObserver == null ? void 0 : mutationObserver.disconnect();
    }
  }, [element]);
  return rect;
  function reducer2(currentRect) {
    if (!element) {
      return null;
    }
    if (element.isConnected === false) {
      var _ref;
      return (_ref = currentRect != null ? currentRect : fallbackRect) != null ? _ref : null;
    }
    const newRect = measure(element);
    if (JSON.stringify(currentRect) === JSON.stringify(newRect)) {
      return currentRect;
    }
    return newRect;
  }
}
function useRectDelta(rect) {
  const initialRect = useInitialValue(rect);
  return getRectDelta(rect, initialRect);
}
var defaultValue$1 = [];
function useScrollableAncestors(node) {
  const previousNode = (0, import_react192.useRef)(node);
  const ancestors = useLazyMemo((previousValue) => {
    if (!node) {
      return defaultValue$1;
    }
    if (previousValue && previousValue !== defaultValue$1 && node && previousNode.current && node.parentNode === previousNode.current.parentNode) {
      return previousValue;
    }
    return getScrollableAncestors(node);
  }, [node]);
  (0, import_react192.useEffect)(() => {
    previousNode.current = node;
  }, [node]);
  return ancestors;
}
function useScrollOffsets(elements) {
  const [scrollCoordinates, setScrollCoordinates] = (0, import_react192.useState)(null);
  const prevElements = (0, import_react192.useRef)(elements);
  const handleScroll = (0, import_react192.useCallback)((event) => {
    const scrollingElement = getScrollableElement(event.target);
    if (!scrollingElement) {
      return;
    }
    setScrollCoordinates((scrollCoordinates2) => {
      if (!scrollCoordinates2) {
        return null;
      }
      scrollCoordinates2.set(scrollingElement, getScrollCoordinates(scrollingElement));
      return new Map(scrollCoordinates2);
    });
  }, []);
  (0, import_react192.useEffect)(() => {
    const previousElements = prevElements.current;
    if (elements !== previousElements) {
      cleanup(previousElements);
      const entries = elements.map((element) => {
        const scrollableElement = getScrollableElement(element);
        if (scrollableElement) {
          scrollableElement.addEventListener("scroll", handleScroll, {
            passive: true
          });
          return [scrollableElement, getScrollCoordinates(scrollableElement)];
        }
        return null;
      }).filter((entry) => entry != null);
      setScrollCoordinates(entries.length ? new Map(entries) : null);
      prevElements.current = elements;
    }
    return () => {
      cleanup(elements);
      cleanup(previousElements);
    };
    function cleanup(elements2) {
      elements2.forEach((element) => {
        const scrollableElement = getScrollableElement(element);
        scrollableElement == null ? void 0 : scrollableElement.removeEventListener("scroll", handleScroll);
      });
    }
  }, [handleScroll, elements]);
  return (0, import_react192.useMemo)(() => {
    if (elements.length) {
      return scrollCoordinates ? Array.from(scrollCoordinates.values()).reduce((acc, coordinates) => add2(acc, coordinates), defaultCoordinates) : getScrollOffsets(elements);
    }
    return defaultCoordinates;
  }, [elements, scrollCoordinates]);
}
function useScrollOffsetsDelta(scrollOffsets, dependencies) {
  if (dependencies === void 0) {
    dependencies = [];
  }
  const initialScrollOffsets = (0, import_react192.useRef)(null);
  (0, import_react192.useEffect)(
    () => {
      initialScrollOffsets.current = null;
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    dependencies
  );
  (0, import_react192.useEffect)(() => {
    const hasScrollOffsets = scrollOffsets !== defaultCoordinates;
    if (hasScrollOffsets && !initialScrollOffsets.current) {
      initialScrollOffsets.current = scrollOffsets;
    }
    if (!hasScrollOffsets && initialScrollOffsets.current) {
      initialScrollOffsets.current = null;
    }
  }, [scrollOffsets]);
  return initialScrollOffsets.current ? subtract(scrollOffsets, initialScrollOffsets.current) : defaultCoordinates;
}
function useSensorSetup(sensors) {
  (0, import_react192.useEffect)(
    () => {
      if (!canUseDOM) {
        return;
      }
      const teardownFns = sensors.map((_ref) => {
        let {
          sensor
        } = _ref;
        return sensor.setup == null ? void 0 : sensor.setup();
      });
      return () => {
        for (const teardown of teardownFns) {
          teardown == null ? void 0 : teardown();
        }
      };
    },
    // TO-DO: Sensors length could theoretically change which would not be a valid dependency
    // eslint-disable-next-line react-hooks/exhaustive-deps
    sensors.map((_ref2) => {
      let {
        sensor
      } = _ref2;
      return sensor;
    })
  );
}
function useSyntheticListeners(listeners, id) {
  return (0, import_react192.useMemo)(() => {
    return listeners.reduce((acc, _ref) => {
      let {
        eventName,
        handler
      } = _ref;
      acc[eventName] = (event) => {
        handler(event, id);
      };
      return acc;
    }, {});
  }, [listeners, id]);
}
function useWindowRect(element) {
  return (0, import_react192.useMemo)(() => element ? getWindowClientRect(element) : null, [element]);
}
var defaultValue$2 = [];
function useRects(elements, measure) {
  if (measure === void 0) {
    measure = getClientRect;
  }
  const [firstElement] = elements;
  const windowRect = useWindowRect(firstElement ? getWindow(firstElement) : null);
  const [rects, measureRects] = (0, import_react192.useReducer)(reducer2, defaultValue$2);
  const resizeObserver = useResizeObserver2({
    callback: measureRects
  });
  if (elements.length > 0 && rects === defaultValue$2) {
    measureRects();
  }
  useIsomorphicLayoutEffect(() => {
    if (elements.length) {
      elements.forEach((element) => resizeObserver == null ? void 0 : resizeObserver.observe(element));
    } else {
      resizeObserver == null ? void 0 : resizeObserver.disconnect();
      measureRects();
    }
  }, [elements]);
  return rects;
  function reducer2() {
    if (!elements.length) {
      return defaultValue$2;
    }
    return elements.map((element) => isDocumentScrollingElement(element) ? windowRect : new Rect(measure(element), element));
  }
}
function getMeasurableNode(node) {
  if (!node) {
    return null;
  }
  if (node.children.length > 1) {
    return node;
  }
  const firstChild = node.children[0];
  return isHTMLElement(firstChild) ? firstChild : node;
}
function useDragOverlayMeasuring(_ref) {
  let {
    measure
  } = _ref;
  const [rect, setRect] = (0, import_react192.useState)(null);
  const handleResize = (0, import_react192.useCallback)((entries) => {
    for (const {
      target
    } of entries) {
      if (isHTMLElement(target)) {
        setRect((rect2) => {
          const newRect = measure(target);
          return rect2 ? {
            ...rect2,
            width: newRect.width,
            height: newRect.height
          } : newRect;
        });
        break;
      }
    }
  }, [measure]);
  const resizeObserver = useResizeObserver2({
    callback: handleResize
  });
  const handleNodeChange = (0, import_react192.useCallback)((element) => {
    const node = getMeasurableNode(element);
    resizeObserver == null ? void 0 : resizeObserver.disconnect();
    if (node) {
      resizeObserver == null ? void 0 : resizeObserver.observe(node);
    }
    setRect(node ? measure(node) : null);
  }, [measure, resizeObserver]);
  const [nodeRef, setRef] = useNodeRef(handleNodeChange);
  return (0, import_react192.useMemo)(() => ({
    nodeRef,
    rect,
    setRef
  }), [rect, nodeRef, setRef]);
}
var defaultSensors = [{
  sensor: PointerSensor,
  options: {}
}, {
  sensor: KeyboardSensor,
  options: {}
}];
var defaultData = {
  current: {}
};
var defaultMeasuringConfiguration = {
  draggable: {
    measure: getTransformAgnosticClientRect
  },
  droppable: {
    measure: getTransformAgnosticClientRect,
    strategy: MeasuringStrategy.WhileDragging,
    frequency: MeasuringFrequency.Optimized
  },
  dragOverlay: {
    measure: getClientRect
  }
};
var DroppableContainersMap = class extends Map {
  get(id) {
    var _super$get;
    return id != null ? (_super$get = super.get(id)) != null ? _super$get : void 0 : void 0;
  }
  toArray() {
    return Array.from(this.values());
  }
  getEnabled() {
    return this.toArray().filter((_ref) => {
      let {
        disabled
      } = _ref;
      return !disabled;
    });
  }
  getNodeFor(id) {
    var _this$get$node$curren, _this$get;
    return (_this$get$node$curren = (_this$get = this.get(id)) == null ? void 0 : _this$get.node.current) != null ? _this$get$node$curren : void 0;
  }
};
var defaultPublicContext = {
  activatorEvent: null,
  active: null,
  activeNode: null,
  activeNodeRect: null,
  collisions: null,
  containerNodeRect: null,
  draggableNodes: /* @__PURE__ */ new Map(),
  droppableRects: /* @__PURE__ */ new Map(),
  droppableContainers: new DroppableContainersMap(),
  over: null,
  dragOverlay: {
    nodeRef: {
      current: null
    },
    rect: null,
    setRef: noop
  },
  scrollableAncestors: [],
  scrollableAncestorRects: [],
  measuringConfiguration: defaultMeasuringConfiguration,
  measureDroppableContainers: noop,
  windowRect: null,
  measuringScheduled: false
};
var defaultInternalContext = {
  activatorEvent: null,
  activators: [],
  active: null,
  activeNodeRect: null,
  ariaDescribedById: {
    draggable: ""
  },
  dispatch: noop,
  draggableNodes: /* @__PURE__ */ new Map(),
  over: null,
  measureDroppableContainers: noop
};
var InternalContext = (0, import_react192.createContext)(defaultInternalContext);
var PublicContext = (0, import_react192.createContext)(defaultPublicContext);
function getInitialState() {
  return {
    draggable: {
      active: null,
      initialCoordinates: {
        x: 0,
        y: 0
      },
      nodes: /* @__PURE__ */ new Map(),
      translate: {
        x: 0,
        y: 0
      }
    },
    droppable: {
      containers: new DroppableContainersMap()
    }
  };
}
function reducer(state, action) {
  switch (action.type) {
    case Action.DragStart:
      return {
        ...state,
        draggable: {
          ...state.draggable,
          initialCoordinates: action.initialCoordinates,
          active: action.active
        }
      };
    case Action.DragMove:
      if (!state.draggable.active) {
        return state;
      }
      return {
        ...state,
        draggable: {
          ...state.draggable,
          translate: {
            x: action.coordinates.x - state.draggable.initialCoordinates.x,
            y: action.coordinates.y - state.draggable.initialCoordinates.y
          }
        }
      };
    case Action.DragEnd:
    case Action.DragCancel:
      return {
        ...state,
        draggable: {
          ...state.draggable,
          active: null,
          initialCoordinates: {
            x: 0,
            y: 0
          },
          translate: {
            x: 0,
            y: 0
          }
        }
      };
    case Action.RegisterDroppable: {
      const {
        element
      } = action;
      const {
        id
      } = element;
      const containers = new DroppableContainersMap(state.droppable.containers);
      containers.set(id, element);
      return {
        ...state,
        droppable: {
          ...state.droppable,
          containers
        }
      };
    }
    case Action.SetDroppableDisabled: {
      const {
        id,
        key: key2,
        disabled
      } = action;
      const element = state.droppable.containers.get(id);
      if (!element || key2 !== element.key) {
        return state;
      }
      const containers = new DroppableContainersMap(state.droppable.containers);
      containers.set(id, {
        ...element,
        disabled
      });
      return {
        ...state,
        droppable: {
          ...state.droppable,
          containers
        }
      };
    }
    case Action.UnregisterDroppable: {
      const {
        id,
        key: key2
      } = action;
      const element = state.droppable.containers.get(id);
      if (!element || key2 !== element.key) {
        return state;
      }
      const containers = new DroppableContainersMap(state.droppable.containers);
      containers.delete(id);
      return {
        ...state,
        droppable: {
          ...state.droppable,
          containers
        }
      };
    }
    default: {
      return state;
    }
  }
}
function RestoreFocus(_ref) {
  let {
    disabled
  } = _ref;
  const {
    active,
    activatorEvent,
    draggableNodes
  } = (0, import_react192.useContext)(InternalContext);
  const previousActivatorEvent = usePrevious2(activatorEvent);
  const previousActiveId = usePrevious2(active == null ? void 0 : active.id);
  (0, import_react192.useEffect)(() => {
    if (disabled) {
      return;
    }
    if (!activatorEvent && previousActivatorEvent && previousActiveId != null) {
      if (!isKeyboardEvent(previousActivatorEvent)) {
        return;
      }
      if (document.activeElement === previousActivatorEvent.target) {
        return;
      }
      const draggableNode = draggableNodes.get(previousActiveId);
      if (!draggableNode) {
        return;
      }
      const {
        activatorNode,
        node
      } = draggableNode;
      if (!activatorNode.current && !node.current) {
        return;
      }
      requestAnimationFrame(() => {
        for (const element of [activatorNode.current, node.current]) {
          if (!element) {
            continue;
          }
          const focusableNode = findFirstFocusableNode(element);
          if (focusableNode) {
            focusableNode.focus();
            break;
          }
        }
      });
    }
  }, [activatorEvent, disabled, draggableNodes, previousActiveId, previousActivatorEvent]);
  return null;
}
function applyModifiers(modifiers, _ref) {
  let {
    transform,
    ...args
  } = _ref;
  return modifiers != null && modifiers.length ? modifiers.reduce((accumulator, modifier) => {
    return modifier({
      transform: accumulator,
      ...args
    });
  }, transform) : transform;
}
function useMeasuringConfiguration(config) {
  return (0, import_react192.useMemo)(
    () => ({
      draggable: {
        ...defaultMeasuringConfiguration.draggable,
        ...config == null ? void 0 : config.draggable
      },
      droppable: {
        ...defaultMeasuringConfiguration.droppable,
        ...config == null ? void 0 : config.droppable
      },
      dragOverlay: {
        ...defaultMeasuringConfiguration.dragOverlay,
        ...config == null ? void 0 : config.dragOverlay
      }
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [config == null ? void 0 : config.draggable, config == null ? void 0 : config.droppable, config == null ? void 0 : config.dragOverlay]
  );
}
function useLayoutShiftScrollCompensation(_ref) {
  let {
    activeNode,
    measure,
    initialRect,
    config = true
  } = _ref;
  const initialized = (0, import_react192.useRef)(false);
  const {
    x: x2,
    y: y2
  } = typeof config === "boolean" ? {
    x: config,
    y: config
  } : config;
  useIsomorphicLayoutEffect(() => {
    const disabled = !x2 && !y2;
    if (disabled || !activeNode) {
      initialized.current = false;
      return;
    }
    if (initialized.current || !initialRect) {
      return;
    }
    const node = activeNode == null ? void 0 : activeNode.node.current;
    if (!node || node.isConnected === false) {
      return;
    }
    const rect = measure(node);
    const rectDelta = getRectDelta(rect, initialRect);
    if (!x2) {
      rectDelta.x = 0;
    }
    if (!y2) {
      rectDelta.y = 0;
    }
    initialized.current = true;
    if (Math.abs(rectDelta.x) > 0 || Math.abs(rectDelta.y) > 0) {
      const firstScrollableAncestor = getFirstScrollableAncestor(node);
      if (firstScrollableAncestor) {
        firstScrollableAncestor.scrollBy({
          top: rectDelta.y,
          left: rectDelta.x
        });
      }
    }
  }, [activeNode, x2, y2, initialRect, measure]);
}
var ActiveDraggableContext = (0, import_react192.createContext)({
  ...defaultCoordinates,
  scaleX: 1,
  scaleY: 1
});
var Status;
(function(Status2) {
  Status2[Status2["Uninitialized"] = 0] = "Uninitialized";
  Status2[Status2["Initializing"] = 1] = "Initializing";
  Status2[Status2["Initialized"] = 2] = "Initialized";
})(Status || (Status = {}));
var DndContext = (0, import_react192.memo)(function DndContext2(_ref) {
  var _sensorContext$curren, _dragOverlay$nodeRef$, _dragOverlay$rect, _over$rect;
  let {
    id,
    accessibility,
    autoScroll = true,
    children,
    sensors = defaultSensors,
    collisionDetection = rectIntersection,
    measuring,
    modifiers,
    ...props
  } = _ref;
  const store = (0, import_react192.useReducer)(reducer, void 0, getInitialState);
  const [state, dispatch] = store;
  const [dispatchMonitorEvent, registerMonitorListener] = useDndMonitorProvider();
  const [status, setStatus] = (0, import_react192.useState)(Status.Uninitialized);
  const isInitialized = status === Status.Initialized;
  const {
    draggable: {
      active: activeId,
      nodes: draggableNodes,
      translate
    },
    droppable: {
      containers: droppableContainers
    }
  } = state;
  const node = activeId ? draggableNodes.get(activeId) : null;
  const activeRects = (0, import_react192.useRef)({
    initial: null,
    translated: null
  });
  const active = (0, import_react192.useMemo)(() => {
    var _node$data;
    return activeId != null ? {
      id: activeId,
      // It's possible for the active node to unmount while dragging
      data: (_node$data = node == null ? void 0 : node.data) != null ? _node$data : defaultData,
      rect: activeRects
    } : null;
  }, [activeId, node]);
  const activeRef = (0, import_react192.useRef)(null);
  const [activeSensor, setActiveSensor] = (0, import_react192.useState)(null);
  const [activatorEvent, setActivatorEvent] = (0, import_react192.useState)(null);
  const latestProps = useLatestValue(props, Object.values(props));
  const draggableDescribedById = useUniqueId2("DndDescribedBy", id);
  const enabledDroppableContainers = (0, import_react192.useMemo)(() => droppableContainers.getEnabled(), [droppableContainers]);
  const measuringConfiguration = useMeasuringConfiguration(measuring);
  const {
    droppableRects,
    measureDroppableContainers,
    measuringScheduled
  } = useDroppableMeasuring(enabledDroppableContainers, {
    dragging: isInitialized,
    dependencies: [translate.x, translate.y],
    config: measuringConfiguration.droppable
  });
  const activeNode = useCachedNode(draggableNodes, activeId);
  const activationCoordinates = (0, import_react192.useMemo)(() => activatorEvent ? getEventCoordinates(activatorEvent) : null, [activatorEvent]);
  const autoScrollOptions = getAutoScrollerOptions();
  const initialActiveNodeRect = useInitialRect(activeNode, measuringConfiguration.draggable.measure);
  useLayoutShiftScrollCompensation({
    activeNode: activeId ? draggableNodes.get(activeId) : null,
    config: autoScrollOptions.layoutShiftCompensation,
    initialRect: initialActiveNodeRect,
    measure: measuringConfiguration.draggable.measure
  });
  const activeNodeRect = useRect(activeNode, measuringConfiguration.draggable.measure, initialActiveNodeRect);
  const containerNodeRect = useRect(activeNode ? activeNode.parentElement : null);
  const sensorContext = (0, import_react192.useRef)({
    activatorEvent: null,
    active: null,
    activeNode,
    collisionRect: null,
    collisions: null,
    droppableRects,
    draggableNodes,
    draggingNode: null,
    draggingNodeRect: null,
    droppableContainers,
    over: null,
    scrollableAncestors: [],
    scrollAdjustedTranslate: null
  });
  const overNode = droppableContainers.getNodeFor((_sensorContext$curren = sensorContext.current.over) == null ? void 0 : _sensorContext$curren.id);
  const dragOverlay = useDragOverlayMeasuring({
    measure: measuringConfiguration.dragOverlay.measure
  });
  const draggingNode = (_dragOverlay$nodeRef$ = dragOverlay.nodeRef.current) != null ? _dragOverlay$nodeRef$ : activeNode;
  const draggingNodeRect = isInitialized ? (_dragOverlay$rect = dragOverlay.rect) != null ? _dragOverlay$rect : activeNodeRect : null;
  const usesDragOverlay = Boolean(dragOverlay.nodeRef.current && dragOverlay.rect);
  const nodeRectDelta = useRectDelta(usesDragOverlay ? null : activeNodeRect);
  const windowRect = useWindowRect(draggingNode ? getWindow(draggingNode) : null);
  const scrollableAncestors = useScrollableAncestors(isInitialized ? overNode != null ? overNode : activeNode : null);
  const scrollableAncestorRects = useRects(scrollableAncestors);
  const modifiedTranslate = applyModifiers(modifiers, {
    transform: {
      x: translate.x - nodeRectDelta.x,
      y: translate.y - nodeRectDelta.y,
      scaleX: 1,
      scaleY: 1
    },
    activatorEvent,
    active,
    activeNodeRect,
    containerNodeRect,
    draggingNodeRect,
    over: sensorContext.current.over,
    overlayNodeRect: dragOverlay.rect,
    scrollableAncestors,
    scrollableAncestorRects,
    windowRect
  });
  const pointerCoordinates = activationCoordinates ? add2(activationCoordinates, translate) : null;
  const scrollOffsets = useScrollOffsets(scrollableAncestors);
  const scrollAdjustment = useScrollOffsetsDelta(scrollOffsets);
  const activeNodeScrollDelta = useScrollOffsetsDelta(scrollOffsets, [activeNodeRect]);
  const scrollAdjustedTranslate = add2(modifiedTranslate, scrollAdjustment);
  const collisionRect = draggingNodeRect ? getAdjustedRect(draggingNodeRect, modifiedTranslate) : null;
  const collisions = active && collisionRect ? collisionDetection({
    active,
    collisionRect,
    droppableRects,
    droppableContainers: enabledDroppableContainers,
    pointerCoordinates
  }) : null;
  const overId = getFirstCollision(collisions, "id");
  const [over, setOver] = (0, import_react192.useState)(null);
  const appliedTranslate = usesDragOverlay ? modifiedTranslate : add2(modifiedTranslate, activeNodeScrollDelta);
  const transform = adjustScale(appliedTranslate, (_over$rect = over == null ? void 0 : over.rect) != null ? _over$rect : null, activeNodeRect);
  const instantiateSensor = (0, import_react192.useCallback)(
    (event, _ref2) => {
      let {
        sensor: Sensor,
        options
      } = _ref2;
      if (activeRef.current == null) {
        return;
      }
      const activeNode2 = draggableNodes.get(activeRef.current);
      if (!activeNode2) {
        return;
      }
      const activatorEvent2 = event.nativeEvent;
      const sensorInstance = new Sensor({
        active: activeRef.current,
        activeNode: activeNode2,
        event: activatorEvent2,
        options,
        // Sensors need to be instantiated with refs for arguments that change over time
        // otherwise they are frozen in time with the stale arguments
        context: sensorContext,
        onStart(initialCoordinates) {
          const id2 = activeRef.current;
          if (id2 == null) {
            return;
          }
          const draggableNode = draggableNodes.get(id2);
          if (!draggableNode) {
            return;
          }
          const {
            onDragStart
          } = latestProps.current;
          const event2 = {
            active: {
              id: id2,
              data: draggableNode.data,
              rect: activeRects
            }
          };
          (0, import_react_dom3.unstable_batchedUpdates)(() => {
            onDragStart == null ? void 0 : onDragStart(event2);
            setStatus(Status.Initializing);
            dispatch({
              type: Action.DragStart,
              initialCoordinates,
              active: id2
            });
            dispatchMonitorEvent({
              type: "onDragStart",
              event: event2
            });
          });
        },
        onMove(coordinates) {
          dispatch({
            type: Action.DragMove,
            coordinates
          });
        },
        onEnd: createHandler(Action.DragEnd),
        onCancel: createHandler(Action.DragCancel)
      });
      (0, import_react_dom3.unstable_batchedUpdates)(() => {
        setActiveSensor(sensorInstance);
        setActivatorEvent(event.nativeEvent);
      });
      function createHandler(type) {
        return async function handler() {
          const {
            active: active2,
            collisions: collisions2,
            over: over2,
            scrollAdjustedTranslate: scrollAdjustedTranslate2
          } = sensorContext.current;
          let event2 = null;
          if (active2 && scrollAdjustedTranslate2) {
            const {
              cancelDrop
            } = latestProps.current;
            event2 = {
              activatorEvent: activatorEvent2,
              active: active2,
              collisions: collisions2,
              delta: scrollAdjustedTranslate2,
              over: over2
            };
            if (type === Action.DragEnd && typeof cancelDrop === "function") {
              const shouldCancel = await Promise.resolve(cancelDrop(event2));
              if (shouldCancel) {
                type = Action.DragCancel;
              }
            }
          }
          activeRef.current = null;
          (0, import_react_dom3.unstable_batchedUpdates)(() => {
            dispatch({
              type
            });
            setStatus(Status.Uninitialized);
            setOver(null);
            setActiveSensor(null);
            setActivatorEvent(null);
            const eventName = type === Action.DragEnd ? "onDragEnd" : "onDragCancel";
            if (event2) {
              const handler2 = latestProps.current[eventName];
              handler2 == null ? void 0 : handler2(event2);
              dispatchMonitorEvent({
                type: eventName,
                event: event2
              });
            }
          });
        };
      }
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [draggableNodes]
  );
  const bindActivatorToSensorInstantiator = (0, import_react192.useCallback)((handler, sensor) => {
    return (event, active2) => {
      const nativeEvent = event.nativeEvent;
      const activeDraggableNode = draggableNodes.get(active2);
      if (
        // Another sensor is already instantiating
        activeRef.current !== null || // No active draggable
        !activeDraggableNode || // Event has already been captured
        nativeEvent.dndKit || nativeEvent.defaultPrevented
      ) {
        return;
      }
      const activationContext = {
        active: activeDraggableNode
      };
      const shouldActivate = handler(event, sensor.options, activationContext);
      if (shouldActivate === true) {
        nativeEvent.dndKit = {
          capturedBy: sensor.sensor
        };
        activeRef.current = active2;
        instantiateSensor(event, sensor);
      }
    };
  }, [draggableNodes, instantiateSensor]);
  const activators = useCombineActivators(sensors, bindActivatorToSensorInstantiator);
  useSensorSetup(sensors);
  useIsomorphicLayoutEffect(() => {
    if (activeNodeRect && status === Status.Initializing) {
      setStatus(Status.Initialized);
    }
  }, [activeNodeRect, status]);
  (0, import_react192.useEffect)(
    () => {
      const {
        onDragMove
      } = latestProps.current;
      const {
        active: active2,
        activatorEvent: activatorEvent2,
        collisions: collisions2,
        over: over2
      } = sensorContext.current;
      if (!active2 || !activatorEvent2) {
        return;
      }
      const event = {
        active: active2,
        activatorEvent: activatorEvent2,
        collisions: collisions2,
        delta: {
          x: scrollAdjustedTranslate.x,
          y: scrollAdjustedTranslate.y
        },
        over: over2
      };
      (0, import_react_dom3.unstable_batchedUpdates)(() => {
        onDragMove == null ? void 0 : onDragMove(event);
        dispatchMonitorEvent({
          type: "onDragMove",
          event
        });
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [scrollAdjustedTranslate.x, scrollAdjustedTranslate.y]
  );
  (0, import_react192.useEffect)(
    () => {
      const {
        active: active2,
        activatorEvent: activatorEvent2,
        collisions: collisions2,
        droppableContainers: droppableContainers2,
        scrollAdjustedTranslate: scrollAdjustedTranslate2
      } = sensorContext.current;
      if (!active2 || activeRef.current == null || !activatorEvent2 || !scrollAdjustedTranslate2) {
        return;
      }
      const {
        onDragOver
      } = latestProps.current;
      const overContainer = droppableContainers2.get(overId);
      const over2 = overContainer && overContainer.rect.current ? {
        id: overContainer.id,
        rect: overContainer.rect.current,
        data: overContainer.data,
        disabled: overContainer.disabled
      } : null;
      const event = {
        active: active2,
        activatorEvent: activatorEvent2,
        collisions: collisions2,
        delta: {
          x: scrollAdjustedTranslate2.x,
          y: scrollAdjustedTranslate2.y
        },
        over: over2
      };
      (0, import_react_dom3.unstable_batchedUpdates)(() => {
        setOver(over2);
        onDragOver == null ? void 0 : onDragOver(event);
        dispatchMonitorEvent({
          type: "onDragOver",
          event
        });
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [overId]
  );
  useIsomorphicLayoutEffect(() => {
    sensorContext.current = {
      activatorEvent,
      active,
      activeNode,
      collisionRect,
      collisions,
      droppableRects,
      draggableNodes,
      draggingNode,
      draggingNodeRect,
      droppableContainers,
      over,
      scrollableAncestors,
      scrollAdjustedTranslate
    };
    activeRects.current = {
      initial: draggingNodeRect,
      translated: collisionRect
    };
  }, [active, activeNode, collisions, collisionRect, draggableNodes, draggingNode, draggingNodeRect, droppableRects, droppableContainers, over, scrollableAncestors, scrollAdjustedTranslate]);
  useAutoScroller({
    ...autoScrollOptions,
    delta: translate,
    draggingRect: collisionRect,
    pointerCoordinates,
    scrollableAncestors,
    scrollableAncestorRects
  });
  const publicContext = (0, import_react192.useMemo)(() => {
    const context = {
      active,
      activeNode,
      activeNodeRect,
      activatorEvent,
      collisions,
      containerNodeRect,
      dragOverlay,
      draggableNodes,
      droppableContainers,
      droppableRects,
      over,
      measureDroppableContainers,
      scrollableAncestors,
      scrollableAncestorRects,
      measuringConfiguration,
      measuringScheduled,
      windowRect
    };
    return context;
  }, [active, activeNode, activeNodeRect, activatorEvent, collisions, containerNodeRect, dragOverlay, draggableNodes, droppableContainers, droppableRects, over, measureDroppableContainers, scrollableAncestors, scrollableAncestorRects, measuringConfiguration, measuringScheduled, windowRect]);
  const internalContext = (0, import_react192.useMemo)(() => {
    const context = {
      activatorEvent,
      activators,
      active,
      activeNodeRect,
      ariaDescribedById: {
        draggable: draggableDescribedById
      },
      dispatch,
      draggableNodes,
      over,
      measureDroppableContainers
    };
    return context;
  }, [activatorEvent, activators, active, activeNodeRect, dispatch, draggableDescribedById, draggableNodes, over, measureDroppableContainers]);
  return import_react192.default.createElement(DndMonitorContext.Provider, {
    value: registerMonitorListener
  }, import_react192.default.createElement(InternalContext.Provider, {
    value: internalContext
  }, import_react192.default.createElement(PublicContext.Provider, {
    value: publicContext
  }, import_react192.default.createElement(ActiveDraggableContext.Provider, {
    value: transform
  }, children)), import_react192.default.createElement(RestoreFocus, {
    disabled: (accessibility == null ? void 0 : accessibility.restoreFocus) === false
  })), import_react192.default.createElement(Accessibility, {
    ...accessibility,
    hiddenTextDescribedById: draggableDescribedById
  }));
  function getAutoScrollerOptions() {
    const activeSensorDisablesAutoscroll = (activeSensor == null ? void 0 : activeSensor.autoScrollEnabled) === false;
    const autoScrollGloballyDisabled = typeof autoScroll === "object" ? autoScroll.enabled === false : autoScroll === false;
    const enabled = isInitialized && !activeSensorDisablesAutoscroll && !autoScrollGloballyDisabled;
    if (typeof autoScroll === "object") {
      return {
        ...autoScroll,
        enabled
      };
    }
    return {
      enabled
    };
  }
});
var NullContext = (0, import_react192.createContext)(null);
var defaultRole = "button";
var ID_PREFIX = "Droppable";
function useDraggable(_ref) {
  let {
    id,
    data,
    disabled = false,
    attributes
  } = _ref;
  const key2 = useUniqueId2(ID_PREFIX);
  const {
    activators,
    activatorEvent,
    active,
    activeNodeRect,
    ariaDescribedById,
    draggableNodes,
    over
  } = (0, import_react192.useContext)(InternalContext);
  const {
    role = defaultRole,
    roleDescription = "draggable",
    tabIndex = 0
  } = attributes != null ? attributes : {};
  const isDragging = (active == null ? void 0 : active.id) === id;
  const transform = (0, import_react192.useContext)(isDragging ? ActiveDraggableContext : NullContext);
  const [node, setNodeRef] = useNodeRef();
  const [activatorNode, setActivatorNodeRef] = useNodeRef();
  const listeners = useSyntheticListeners(activators, id);
  const dataRef = useLatestValue(data);
  useIsomorphicLayoutEffect(
    () => {
      draggableNodes.set(id, {
        id,
        key: key2,
        node,
        activatorNode,
        data: dataRef
      });
      return () => {
        const node2 = draggableNodes.get(id);
        if (node2 && node2.key === key2) {
          draggableNodes.delete(id);
        }
      };
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [draggableNodes, id]
  );
  const memoizedAttributes = (0, import_react192.useMemo)(() => ({
    role,
    tabIndex,
    "aria-disabled": disabled,
    "aria-pressed": isDragging && role === defaultRole ? true : void 0,
    "aria-roledescription": roleDescription,
    "aria-describedby": ariaDescribedById.draggable
  }), [disabled, role, tabIndex, isDragging, roleDescription, ariaDescribedById.draggable]);
  return {
    active,
    activatorEvent,
    activeNodeRect,
    attributes: memoizedAttributes,
    isDragging,
    listeners: disabled ? void 0 : listeners,
    node,
    over,
    setNodeRef,
    setActivatorNodeRef,
    transform
  };
}
function useDndContext() {
  return (0, import_react192.useContext)(PublicContext);
}
var ID_PREFIX$1 = "Droppable";
var defaultResizeObserverConfig = {
  timeout: 25
};
function useDroppable(_ref) {
  let {
    data,
    disabled = false,
    id,
    resizeObserverConfig
  } = _ref;
  const key2 = useUniqueId2(ID_PREFIX$1);
  const {
    active,
    dispatch,
    over,
    measureDroppableContainers
  } = (0, import_react192.useContext)(InternalContext);
  const previous = (0, import_react192.useRef)({
    disabled
  });
  const resizeObserverConnected = (0, import_react192.useRef)(false);
  const rect = (0, import_react192.useRef)(null);
  const callbackId = (0, import_react192.useRef)(null);
  const {
    disabled: resizeObserverDisabled,
    updateMeasurementsFor,
    timeout: resizeObserverTimeout
  } = {
    ...defaultResizeObserverConfig,
    ...resizeObserverConfig
  };
  const ids2 = useLatestValue(updateMeasurementsFor != null ? updateMeasurementsFor : id);
  const handleResize = (0, import_react192.useCallback)(
    () => {
      if (!resizeObserverConnected.current) {
        resizeObserverConnected.current = true;
        return;
      }
      if (callbackId.current != null) {
        clearTimeout(callbackId.current);
      }
      callbackId.current = setTimeout(() => {
        measureDroppableContainers(Array.isArray(ids2.current) ? ids2.current : [ids2.current]);
        callbackId.current = null;
      }, resizeObserverTimeout);
    },
    //eslint-disable-next-line react-hooks/exhaustive-deps
    [resizeObserverTimeout]
  );
  const resizeObserver = useResizeObserver2({
    callback: handleResize,
    disabled: resizeObserverDisabled || !active
  });
  const handleNodeChange = (0, import_react192.useCallback)((newElement, previousElement) => {
    if (!resizeObserver) {
      return;
    }
    if (previousElement) {
      resizeObserver.unobserve(previousElement);
      resizeObserverConnected.current = false;
    }
    if (newElement) {
      resizeObserver.observe(newElement);
    }
  }, [resizeObserver]);
  const [nodeRef, setNodeRef] = useNodeRef(handleNodeChange);
  const dataRef = useLatestValue(data);
  (0, import_react192.useEffect)(() => {
    if (!resizeObserver || !nodeRef.current) {
      return;
    }
    resizeObserver.disconnect();
    resizeObserverConnected.current = false;
    resizeObserver.observe(nodeRef.current);
  }, [nodeRef, resizeObserver]);
  useIsomorphicLayoutEffect(
    () => {
      dispatch({
        type: Action.RegisterDroppable,
        element: {
          id,
          key: key2,
          disabled,
          node: nodeRef,
          rect,
          data: dataRef
        }
      });
      return () => dispatch({
        type: Action.UnregisterDroppable,
        key: key2,
        id
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [id]
  );
  (0, import_react192.useEffect)(() => {
    if (disabled !== previous.current.disabled) {
      dispatch({
        type: Action.SetDroppableDisabled,
        id,
        key: key2,
        disabled
      });
      previous.current.disabled = disabled;
    }
  }, [id, key2, disabled, dispatch]);
  return {
    active,
    rect,
    isOver: (over == null ? void 0 : over.id) === id,
    node: nodeRef,
    over,
    setNodeRef
  };
}
function AnimationManager(_ref) {
  let {
    animation,
    children
  } = _ref;
  const [clonedChildren, setClonedChildren] = (0, import_react192.useState)(null);
  const [element, setElement] = (0, import_react192.useState)(null);
  const previousChildren = usePrevious2(children);
  if (!children && !clonedChildren && previousChildren) {
    setClonedChildren(previousChildren);
  }
  useIsomorphicLayoutEffect(() => {
    if (!element) {
      return;
    }
    const key2 = clonedChildren == null ? void 0 : clonedChildren.key;
    const id = clonedChildren == null ? void 0 : clonedChildren.props.id;
    if (key2 == null || id == null) {
      setClonedChildren(null);
      return;
    }
    Promise.resolve(animation(id, element)).then(() => {
      setClonedChildren(null);
    });
  }, [animation, clonedChildren, element]);
  return import_react192.default.createElement(import_react192.default.Fragment, null, children, clonedChildren ? (0, import_react192.cloneElement)(clonedChildren, {
    ref: setElement
  }) : null);
}
var defaultTransform = {
  x: 0,
  y: 0,
  scaleX: 1,
  scaleY: 1
};
function NullifiedContextProvider(_ref) {
  let {
    children
  } = _ref;
  return import_react192.default.createElement(InternalContext.Provider, {
    value: defaultInternalContext
  }, import_react192.default.createElement(ActiveDraggableContext.Provider, {
    value: defaultTransform
  }, children));
}
var baseStyles = {
  position: "fixed",
  touchAction: "none"
};
var defaultTransition = (activatorEvent) => {
  const isKeyboardActivator = isKeyboardEvent(activatorEvent);
  return isKeyboardActivator ? "transform 250ms ease" : void 0;
};
var PositionedOverlay = (0, import_react192.forwardRef)((_ref, ref) => {
  let {
    as,
    activatorEvent,
    adjustScale: adjustScale2,
    children,
    className: className2,
    rect,
    style,
    transform,
    transition = defaultTransition
  } = _ref;
  if (!rect) {
    return null;
  }
  const scaleAdjustedTransform = adjustScale2 ? transform : {
    ...transform,
    scaleX: 1,
    scaleY: 1
  };
  const styles = {
    ...baseStyles,
    width: rect.width,
    height: rect.height,
    top: rect.top,
    left: rect.left,
    transform: CSS2.Transform.toString(scaleAdjustedTransform),
    transformOrigin: adjustScale2 && activatorEvent ? getRelativeTransformOrigin(activatorEvent, rect) : void 0,
    transition: typeof transition === "function" ? transition(activatorEvent) : transition,
    ...style
  };
  return import_react192.default.createElement(as, {
    className: className2,
    style: styles,
    ref
  }, children);
});
var defaultDropAnimationSideEffects = (options) => (_ref) => {
  let {
    active,
    dragOverlay
  } = _ref;
  const originalStyles = {};
  const {
    styles,
    className: className2
  } = options;
  if (styles != null && styles.active) {
    for (const [key2, value] of Object.entries(styles.active)) {
      if (value === void 0) {
        continue;
      }
      originalStyles[key2] = active.node.style.getPropertyValue(key2);
      active.node.style.setProperty(key2, value);
    }
  }
  if (styles != null && styles.dragOverlay) {
    for (const [key2, value] of Object.entries(styles.dragOverlay)) {
      if (value === void 0) {
        continue;
      }
      dragOverlay.node.style.setProperty(key2, value);
    }
  }
  if (className2 != null && className2.active) {
    active.node.classList.add(className2.active);
  }
  if (className2 != null && className2.dragOverlay) {
    dragOverlay.node.classList.add(className2.dragOverlay);
  }
  return function cleanup() {
    for (const [key2, value] of Object.entries(originalStyles)) {
      active.node.style.setProperty(key2, value);
    }
    if (className2 != null && className2.active) {
      active.node.classList.remove(className2.active);
    }
  };
};
var defaultKeyframeResolver = (_ref2) => {
  let {
    transform: {
      initial,
      final
    }
  } = _ref2;
  return [{
    transform: CSS2.Transform.toString(initial)
  }, {
    transform: CSS2.Transform.toString(final)
  }];
};
var defaultDropAnimationConfiguration = {
  duration: 250,
  easing: "ease",
  keyframes: defaultKeyframeResolver,
  sideEffects: defaultDropAnimationSideEffects({
    styles: {
      active: {
        opacity: "0"
      }
    }
  })
};
function useDropAnimation(_ref3) {
  let {
    config,
    draggableNodes,
    droppableContainers,
    measuringConfiguration
  } = _ref3;
  return useEvent((id, node) => {
    if (config === null) {
      return;
    }
    const activeDraggable = draggableNodes.get(id);
    if (!activeDraggable) {
      return;
    }
    const activeNode = activeDraggable.node.current;
    if (!activeNode) {
      return;
    }
    const measurableNode = getMeasurableNode(node);
    if (!measurableNode) {
      return;
    }
    const {
      transform
    } = getWindow(node).getComputedStyle(node);
    const parsedTransform = parseTransform(transform);
    if (!parsedTransform) {
      return;
    }
    const animation = typeof config === "function" ? config : createDefaultDropAnimation(config);
    scrollIntoViewIfNeeded(activeNode, measuringConfiguration.draggable.measure);
    return animation({
      active: {
        id,
        data: activeDraggable.data,
        node: activeNode,
        rect: measuringConfiguration.draggable.measure(activeNode)
      },
      draggableNodes,
      dragOverlay: {
        node,
        rect: measuringConfiguration.dragOverlay.measure(measurableNode)
      },
      droppableContainers,
      measuringConfiguration,
      transform: parsedTransform
    });
  });
}
function createDefaultDropAnimation(options) {
  const {
    duration,
    easing,
    sideEffects,
    keyframes
  } = {
    ...defaultDropAnimationConfiguration,
    ...options
  };
  return (_ref4) => {
    let {
      active,
      dragOverlay,
      transform,
      ...rest
    } = _ref4;
    if (!duration) {
      return;
    }
    const delta = {
      x: dragOverlay.rect.left - active.rect.left,
      y: dragOverlay.rect.top - active.rect.top
    };
    const scale = {
      scaleX: transform.scaleX !== 1 ? active.rect.width * transform.scaleX / dragOverlay.rect.width : 1,
      scaleY: transform.scaleY !== 1 ? active.rect.height * transform.scaleY / dragOverlay.rect.height : 1
    };
    const finalTransform = {
      x: transform.x - delta.x,
      y: transform.y - delta.y,
      ...scale
    };
    const animationKeyframes = keyframes({
      ...rest,
      active,
      dragOverlay,
      transform: {
        initial: transform,
        final: finalTransform
      }
    });
    const [firstKeyframe] = animationKeyframes;
    const lastKeyframe = animationKeyframes[animationKeyframes.length - 1];
    if (JSON.stringify(firstKeyframe) === JSON.stringify(lastKeyframe)) {
      return;
    }
    const cleanup = sideEffects == null ? void 0 : sideEffects({
      active,
      dragOverlay,
      ...rest
    });
    const animation = dragOverlay.node.animate(animationKeyframes, {
      duration,
      easing,
      fill: "forwards"
    });
    return new Promise((resolve) => {
      animation.onfinish = () => {
        cleanup == null ? void 0 : cleanup();
        resolve();
      };
    });
  };
}
var key = 0;
function useKey(id) {
  return (0, import_react192.useMemo)(() => {
    if (id == null) {
      return;
    }
    key++;
    return key;
  }, [id]);
}
var DragOverlay = import_react192.default.memo((_ref) => {
  let {
    adjustScale: adjustScale2 = false,
    children,
    dropAnimation: dropAnimationConfig,
    style,
    transition,
    modifiers,
    wrapperElement = "div",
    className: className2,
    zIndex = 999
  } = _ref;
  const {
    activatorEvent,
    active,
    activeNodeRect,
    containerNodeRect,
    draggableNodes,
    droppableContainers,
    dragOverlay,
    over,
    measuringConfiguration,
    scrollableAncestors,
    scrollableAncestorRects,
    windowRect
  } = useDndContext();
  const transform = (0, import_react192.useContext)(ActiveDraggableContext);
  const key2 = useKey(active == null ? void 0 : active.id);
  const modifiedTransform = applyModifiers(modifiers, {
    activatorEvent,
    active,
    activeNodeRect,
    containerNodeRect,
    draggingNodeRect: dragOverlay.rect,
    over,
    overlayNodeRect: dragOverlay.rect,
    scrollableAncestors,
    scrollableAncestorRects,
    transform,
    windowRect
  });
  const initialRect = useInitialValue(activeNodeRect);
  const dropAnimation = useDropAnimation({
    config: dropAnimationConfig,
    draggableNodes,
    droppableContainers,
    measuringConfiguration
  });
  const ref = initialRect ? dragOverlay.setRef : void 0;
  return import_react192.default.createElement(NullifiedContextProvider, null, import_react192.default.createElement(AnimationManager, {
    animation: dropAnimation
  }, active && key2 ? import_react192.default.createElement(PositionedOverlay, {
    key: key2,
    id: active.id,
    ref,
    as: wrapperElement,
    activatorEvent,
    adjustScale: adjustScale2,
    className: className2,
    transition,
    rect: initialRect,
    style: {
      zIndex,
      ...style
    },
    transform: modifiedTransform
  }, children) : null));
});

// node_modules/@dnd-kit/sortable/dist/sortable.esm.js
var import_react193 = __toESM(require_react());
function arrayMove(array, from, to) {
  const newArray = array.slice();
  newArray.splice(to < 0 ? newArray.length + to : to, 0, newArray.splice(from, 1)[0]);
  return newArray;
}
function getSortedRects(items, rects) {
  return items.reduce((accumulator, id, index) => {
    const rect = rects.get(id);
    if (rect) {
      accumulator[index] = rect;
    }
    return accumulator;
  }, Array(items.length));
}
function isValidIndex(index) {
  return index !== null && index >= 0;
}
function itemsEqual(a2, b) {
  if (a2 === b) {
    return true;
  }
  if (a2.length !== b.length) {
    return false;
  }
  for (let i = 0; i < a2.length; i++) {
    if (a2[i] !== b[i]) {
      return false;
    }
  }
  return true;
}
function normalizeDisabled(disabled) {
  if (typeof disabled === "boolean") {
    return {
      draggable: disabled,
      droppable: disabled
    };
  }
  return disabled;
}
var rectSortingStrategy = (_ref) => {
  let {
    rects,
    activeIndex,
    overIndex,
    index
  } = _ref;
  const newRects = arrayMove(rects, overIndex, activeIndex);
  const oldRect = rects[index];
  const newRect = newRects[index];
  if (!newRect || !oldRect) {
    return null;
  }
  return {
    x: newRect.left - oldRect.left,
    y: newRect.top - oldRect.top,
    scaleX: newRect.width / oldRect.width,
    scaleY: newRect.height / oldRect.height
  };
};
var defaultScale$1 = {
  scaleX: 1,
  scaleY: 1
};
var verticalListSortingStrategy = (_ref) => {
  var _rects$activeIndex;
  let {
    activeIndex,
    activeNodeRect: fallbackActiveRect,
    index,
    rects,
    overIndex
  } = _ref;
  const activeNodeRect = (_rects$activeIndex = rects[activeIndex]) != null ? _rects$activeIndex : fallbackActiveRect;
  if (!activeNodeRect) {
    return null;
  }
  if (index === activeIndex) {
    const overIndexRect = rects[overIndex];
    if (!overIndexRect) {
      return null;
    }
    return {
      x: 0,
      y: activeIndex < overIndex ? overIndexRect.top + overIndexRect.height - (activeNodeRect.top + activeNodeRect.height) : overIndexRect.top - activeNodeRect.top,
      ...defaultScale$1
    };
  }
  const itemGap = getItemGap$1(rects, index, activeIndex);
  if (index > activeIndex && index <= overIndex) {
    return {
      x: 0,
      y: -activeNodeRect.height - itemGap,
      ...defaultScale$1
    };
  }
  if (index < activeIndex && index >= overIndex) {
    return {
      x: 0,
      y: activeNodeRect.height + itemGap,
      ...defaultScale$1
    };
  }
  return {
    x: 0,
    y: 0,
    ...defaultScale$1
  };
};
function getItemGap$1(clientRects, index, activeIndex) {
  const currentRect = clientRects[index];
  const previousRect = clientRects[index - 1];
  const nextRect = clientRects[index + 1];
  if (!currentRect) {
    return 0;
  }
  if (activeIndex < index) {
    return previousRect ? currentRect.top - (previousRect.top + previousRect.height) : nextRect ? nextRect.top - (currentRect.top + currentRect.height) : 0;
  }
  return nextRect ? nextRect.top - (currentRect.top + currentRect.height) : previousRect ? currentRect.top - (previousRect.top + previousRect.height) : 0;
}
var ID_PREFIX2 = "Sortable";
var Context = import_react193.default.createContext({
  activeIndex: -1,
  containerId: ID_PREFIX2,
  disableTransforms: false,
  items: [],
  overIndex: -1,
  useDragOverlay: false,
  sortedRects: [],
  strategy: rectSortingStrategy,
  disabled: {
    draggable: false,
    droppable: false
  }
});
function SortableContext(_ref) {
  let {
    children,
    id,
    items: userDefinedItems,
    strategy = rectSortingStrategy,
    disabled: disabledProp = false
  } = _ref;
  const {
    active,
    dragOverlay,
    droppableRects,
    over,
    measureDroppableContainers
  } = useDndContext();
  const containerId = useUniqueId2(ID_PREFIX2, id);
  const useDragOverlay = Boolean(dragOverlay.rect !== null);
  const items = (0, import_react193.useMemo)(() => userDefinedItems.map((item) => typeof item === "object" && "id" in item ? item.id : item), [userDefinedItems]);
  const isDragging = active != null;
  const activeIndex = active ? items.indexOf(active.id) : -1;
  const overIndex = over ? items.indexOf(over.id) : -1;
  const previousItemsRef = (0, import_react193.useRef)(items);
  const itemsHaveChanged = !itemsEqual(items, previousItemsRef.current);
  const disableTransforms = overIndex !== -1 && activeIndex === -1 || itemsHaveChanged;
  const disabled = normalizeDisabled(disabledProp);
  useIsomorphicLayoutEffect(() => {
    if (itemsHaveChanged && isDragging) {
      measureDroppableContainers(items);
    }
  }, [itemsHaveChanged, items, isDragging, measureDroppableContainers]);
  (0, import_react193.useEffect)(() => {
    previousItemsRef.current = items;
  }, [items]);
  const contextValue = (0, import_react193.useMemo)(
    () => ({
      activeIndex,
      containerId,
      disabled,
      disableTransforms,
      items,
      overIndex,
      useDragOverlay,
      sortedRects: getSortedRects(items, droppableRects),
      strategy
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [activeIndex, containerId, disabled.draggable, disabled.droppable, disableTransforms, items, overIndex, droppableRects, useDragOverlay, strategy]
  );
  return import_react193.default.createElement(Context.Provider, {
    value: contextValue
  }, children);
}
var defaultNewIndexGetter = (_ref) => {
  let {
    id,
    items,
    activeIndex,
    overIndex
  } = _ref;
  return arrayMove(items, activeIndex, overIndex).indexOf(id);
};
var defaultAnimateLayoutChanges = (_ref2) => {
  let {
    containerId,
    isSorting,
    wasDragging,
    index,
    items,
    newIndex,
    previousItems,
    previousContainerId,
    transition
  } = _ref2;
  if (!transition || !wasDragging) {
    return false;
  }
  if (previousItems !== items && index === newIndex) {
    return false;
  }
  if (isSorting) {
    return true;
  }
  return newIndex !== index && containerId === previousContainerId;
};
var defaultTransition2 = {
  duration: 200,
  easing: "ease"
};
var transitionProperty = "transform";
var disabledTransition = CSS2.Transition.toString({
  property: transitionProperty,
  duration: 0,
  easing: "linear"
});
var defaultAttributes = {
  roleDescription: "sortable"
};
function useDerivedTransform(_ref) {
  let {
    disabled,
    index,
    node,
    rect
  } = _ref;
  const [derivedTransform, setDerivedtransform] = (0, import_react193.useState)(null);
  const previousIndex = (0, import_react193.useRef)(index);
  useIsomorphicLayoutEffect(() => {
    if (!disabled && index !== previousIndex.current && node.current) {
      const initial = rect.current;
      if (initial) {
        const current = getClientRect(node.current, {
          ignoreTransform: true
        });
        const delta = {
          x: initial.left - current.left,
          y: initial.top - current.top,
          scaleX: initial.width / current.width,
          scaleY: initial.height / current.height
        };
        if (delta.x || delta.y) {
          setDerivedtransform(delta);
        }
      }
    }
    if (index !== previousIndex.current) {
      previousIndex.current = index;
    }
  }, [disabled, index, node, rect]);
  (0, import_react193.useEffect)(() => {
    if (derivedTransform) {
      setDerivedtransform(null);
    }
  }, [derivedTransform]);
  return derivedTransform;
}
function useSortable(_ref) {
  let {
    animateLayoutChanges = defaultAnimateLayoutChanges,
    attributes: userDefinedAttributes,
    disabled: localDisabled,
    data: customData,
    getNewIndex = defaultNewIndexGetter,
    id,
    strategy: localStrategy,
    resizeObserverConfig,
    transition = defaultTransition2
  } = _ref;
  const {
    items,
    containerId,
    activeIndex,
    disabled: globalDisabled,
    disableTransforms,
    sortedRects,
    overIndex,
    useDragOverlay,
    strategy: globalStrategy
  } = (0, import_react193.useContext)(Context);
  const disabled = normalizeLocalDisabled(localDisabled, globalDisabled);
  const index = items.indexOf(id);
  const data = (0, import_react193.useMemo)(() => ({
    sortable: {
      containerId,
      index,
      items
    },
    ...customData
  }), [containerId, customData, index, items]);
  const itemsAfterCurrentSortable = (0, import_react193.useMemo)(() => items.slice(items.indexOf(id)), [items, id]);
  const {
    rect,
    node,
    isOver,
    setNodeRef: setDroppableNodeRef
  } = useDroppable({
    id,
    data,
    disabled: disabled.droppable,
    resizeObserverConfig: {
      updateMeasurementsFor: itemsAfterCurrentSortable,
      ...resizeObserverConfig
    }
  });
  const {
    active,
    activatorEvent,
    activeNodeRect,
    attributes,
    setNodeRef: setDraggableNodeRef,
    listeners,
    isDragging,
    over,
    setActivatorNodeRef,
    transform
  } = useDraggable({
    id,
    data,
    attributes: {
      ...defaultAttributes,
      ...userDefinedAttributes
    },
    disabled: disabled.draggable
  });
  const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);
  const isSorting = Boolean(active);
  const displaceItem = isSorting && !disableTransforms && isValidIndex(activeIndex) && isValidIndex(overIndex);
  const shouldDisplaceDragSource = !useDragOverlay && isDragging;
  const dragSourceDisplacement = shouldDisplaceDragSource && displaceItem ? transform : null;
  const strategy = localStrategy != null ? localStrategy : globalStrategy;
  const finalTransform = displaceItem ? dragSourceDisplacement != null ? dragSourceDisplacement : strategy({
    rects: sortedRects,
    activeNodeRect,
    activeIndex,
    overIndex,
    index
  }) : null;
  const newIndex = isValidIndex(activeIndex) && isValidIndex(overIndex) ? getNewIndex({
    id,
    items,
    activeIndex,
    overIndex
  }) : index;
  const activeId = active == null ? void 0 : active.id;
  const previous = (0, import_react193.useRef)({
    activeId,
    items,
    newIndex,
    containerId
  });
  const itemsHaveChanged = items !== previous.current.items;
  const shouldAnimateLayoutChanges = animateLayoutChanges({
    active,
    containerId,
    isDragging,
    isSorting,
    id,
    index,
    items,
    newIndex: previous.current.newIndex,
    previousItems: previous.current.items,
    previousContainerId: previous.current.containerId,
    transition,
    wasDragging: previous.current.activeId != null
  });
  const derivedTransform = useDerivedTransform({
    disabled: !shouldAnimateLayoutChanges,
    index,
    node,
    rect
  });
  (0, import_react193.useEffect)(() => {
    if (isSorting && previous.current.newIndex !== newIndex) {
      previous.current.newIndex = newIndex;
    }
    if (containerId !== previous.current.containerId) {
      previous.current.containerId = containerId;
    }
    if (items !== previous.current.items) {
      previous.current.items = items;
    }
  }, [isSorting, newIndex, containerId, items]);
  (0, import_react193.useEffect)(() => {
    if (activeId === previous.current.activeId) {
      return;
    }
    if (activeId && !previous.current.activeId) {
      previous.current.activeId = activeId;
      return;
    }
    const timeoutId = setTimeout(() => {
      previous.current.activeId = activeId;
    }, 50);
    return () => clearTimeout(timeoutId);
  }, [activeId]);
  return {
    active,
    activeIndex,
    attributes,
    data,
    rect,
    index,
    newIndex,
    items,
    isOver,
    isSorting,
    isDragging,
    listeners,
    node,
    overIndex,
    over,
    setNodeRef,
    setActivatorNodeRef,
    setDroppableNodeRef,
    setDraggableNodeRef,
    transform: derivedTransform != null ? derivedTransform : finalTransform,
    transition: getTransition()
  };
  function getTransition() {
    if (
      // Temporarily disable transitions for a single frame to set up derived transforms
      derivedTransform || // Or to prevent items jumping to back to their "new" position when items change
      itemsHaveChanged && previous.current.newIndex === index
    ) {
      return disabledTransition;
    }
    if (shouldDisplaceDragSource && !isKeyboardEvent(activatorEvent) || !transition) {
      return void 0;
    }
    if (isSorting || shouldAnimateLayoutChanges) {
      return CSS2.Transition.toString({
        ...transition,
        property: transitionProperty
      });
    }
    return void 0;
  }
}
function normalizeLocalDisabled(localDisabled, globalDisabled) {
  var _localDisabled$dragga, _localDisabled$droppa;
  if (typeof localDisabled === "boolean") {
    return {
      draggable: localDisabled,
      // Backwards compatibility
      droppable: false
    };
  }
  return {
    draggable: (_localDisabled$dragga = localDisabled == null ? void 0 : localDisabled.draggable) != null ? _localDisabled$dragga : globalDisabled.draggable,
    droppable: (_localDisabled$droppa = localDisabled == null ? void 0 : localDisabled.droppable) != null ? _localDisabled$droppa : globalDisabled.droppable
  };
}
function hasSortableData(entry) {
  if (!entry) {
    return false;
  }
  const data = entry.data.current;
  if (data && "sortable" in data && typeof data.sortable === "object" && "containerId" in data.sortable && "items" in data.sortable && "index" in data.sortable) {
    return true;
  }
  return false;
}
var directions = [KeyboardCode.Down, KeyboardCode.Right, KeyboardCode.Up, KeyboardCode.Left];

// node_modules/@cloudscape-design/components/collection-preferences/content-display/draggable-option.js
var import_react197 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/drag-handle/index.js
var import_react195 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/handle/index.js
var import_react194 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/handle/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/handle/styles.scoped.css";
var styles_css_default63 = {
  "handle": "awsui_handle_iykw5_1lvye_99",
  "hide-focus": "awsui_hide-focus_iykw5_1lvye_113"
};

// node_modules/@cloudscape-design/components/internal/components/handle/index.js
function Handle(props) {
  return import_react194.default.createElement("div", Object.assign({ role: "button", tabIndex: 0 }, props, { onPointerDown: props.onPointerDown, className: clsx_m_default(styles_css_default63.handle, props.className) }));
}

// node_modules/@cloudscape-design/components/internal/components/drag-handle/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/drag-handle/styles.scoped.css";
var styles_css_default64 = {
  "handle": "awsui_handle_sdha6_1v8zk_5"
};

// node_modules/@cloudscape-design/components/internal/components/drag-handle/index.js
function DragHandle({ attributes, hideFocus, listeners }) {
  return import_react195.default.createElement(
    Handle,
    Object.assign({ className: clsx_m_default(styles_css_default64.handle, hideFocus && styles_css_default63["hide-focus"]) }, attributes, listeners),
    import_react195.default.createElement(internal_default, { name: "drag-indicator" })
  );
}

// node_modules/@cloudscape-design/components/collection-preferences/content-display/content-display-option.js
var import_react196 = __toESM(require_react());
var componentPrefix = "content-display-option";
var getClassName = (suffix) => styles_css_default61[[componentPrefix, suffix].filter(Boolean).join("-")];
var ContentDisplayOption = (0, import_react196.forwardRef)(({ dragHandleAriaLabel, listeners, onToggle, option }, ref) => {
  const idPrefix = useUniqueId(componentPrefix);
  const controlId = `${idPrefix}-control-${option.id}`;
  const dragHandleAttributes = {
    ["aria-label"]: [dragHandleAriaLabel, option.label].join(", ")
  };
  return import_react196.default.createElement(
    "div",
    { ref, className: getClassName("content") },
    import_react196.default.createElement(DragHandle, { attributes: dragHandleAttributes, listeners }),
    import_react196.default.createElement("label", { className: getClassName("label"), htmlFor: controlId }, option.label),
    import_react196.default.createElement(
      "div",
      { className: getClassName("toggle") },
      import_react196.default.createElement(internal_default14, { checked: !!option.visible, onChange: () => onToggle && onToggle(option), disabled: option.alwaysVisible === true, controlId })
    )
  );
});
var content_display_option_default = ContentDisplayOption;

// node_modules/@cloudscape-design/components/collection-preferences/content-display/draggable-option.js
function DraggableOption({ dragHandleAriaLabel, onKeyDown, onToggle, option }) {
  const { isDragging, isSorting, listeners, setNodeRef, transform } = useSortable({
    id: option.id
  });
  const style = {
    transform: CSS2.Translate.toString(transform)
  };
  const combinedListeners = Object.assign(Object.assign({}, listeners), { onKeyDown: (event) => {
    if (onKeyDown) {
      onKeyDown(event);
    }
    if (listeners === null || listeners === void 0 ? void 0 : listeners.onKeyDown) {
      listeners.onKeyDown(event);
    }
  } });
  return import_react197.default.createElement(
    "li",
    { className: clsx_m_default(getClassName(), isDragging && styles_css_default61.placeholder, isSorting && styles_css_default61.sorting), style },
    import_react197.default.createElement(content_display_option_default, { ref: setNodeRef, listeners: combinedListeners, dragHandleAriaLabel, onToggle, option })
  );
}

// node_modules/@cloudscape-design/components/collection-preferences/content-display/use-drag-and-drop-reorder.js
var import_react198 = __toESM(require_react());

// node_modules/@cloudscape-design/components/collection-preferences/content-display/keyboard-sensor/utilities/scroll.js
function isDocumentScrollingElement2(element) {
  if (!canUseDOM || !element) {
    return false;
  }
  return element === document.scrollingElement;
}
function getScrollPosition2(scrollingContainer) {
  const minScroll = {
    x: 0,
    y: 0
  };
  const dimensions = isDocumentScrollingElement2(scrollingContainer) ? {
    height: window.innerHeight,
    width: window.innerWidth
  } : {
    height: scrollingContainer.clientHeight,
    width: scrollingContainer.clientWidth
  };
  const maxScroll = {
    x: scrollingContainer.scrollWidth - dimensions.width,
    y: scrollingContainer.scrollHeight - dimensions.height
  };
  const isTop = scrollingContainer.scrollTop <= minScroll.y;
  const isLeft = scrollingContainer.scrollLeft <= minScroll.x;
  const isBottom = scrollingContainer.scrollTop >= maxScroll.y;
  const isRight = scrollingContainer.scrollLeft >= maxScroll.x;
  return {
    isTop,
    isLeft,
    isBottom,
    isRight,
    maxScroll,
    minScroll
  };
}
function getScrollElementRect2(element) {
  if (element === document.scrollingElement) {
    const { innerWidth, innerHeight } = window;
    return {
      top: 0,
      left: 0,
      right: innerWidth,
      bottom: innerHeight,
      width: innerWidth,
      height: innerHeight
    };
  }
  const { top, left, right, bottom } = element.getBoundingClientRect();
  return {
    top,
    left,
    right,
    bottom,
    width: element.clientWidth,
    height: element.clientHeight
  };
}
function applyScroll({ currentCoordinates, direction, newCoordinates, scrollableAncestors }) {
  for (const scrollContainer of scrollableAncestors) {
    const coordinatesDelta = subtract(newCoordinates, currentCoordinates);
    const { isTop, isBottom, maxScroll, minScroll } = getScrollPosition2(scrollContainer);
    const scrollElementRect = getScrollElementRect2(scrollContainer);
    const clampedCoordinates = {
      y: Math.min(direction === KeyboardCode.Down ? scrollElementRect.bottom - scrollElementRect.height / 2 : scrollElementRect.bottom, Math.max(direction === KeyboardCode.Down ? scrollElementRect.top : scrollElementRect.top + scrollElementRect.height / 2, newCoordinates.y))
    };
    const canScrollY = direction === KeyboardCode.Down && !isBottom || direction === KeyboardCode.Up && !isTop;
    if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {
      const newScrollCoordinates = scrollContainer.scrollTop + coordinatesDelta.y;
      const canScrollToNewCoordinates = direction === KeyboardCode.Down && newScrollCoordinates <= maxScroll.y || direction === KeyboardCode.Up && newScrollCoordinates >= minScroll.y;
      if (canScrollToNewCoordinates) {
        scrollContainer.scrollTo({
          top: newScrollCoordinates,
          behavior: "smooth"
        });
        return true;
      }
      break;
    }
  }
  return false;
}

// node_modules/@cloudscape-design/components/collection-preferences/content-display/keyboard-sensor/utilities/events.js
var EventName2;
(function(EventName3) {
  EventName3["Blur"] = "blur";
  EventName3["Click"] = "click";
  EventName3["DragStart"] = "dragstart";
  EventName3["Keydown"] = "keydown";
  EventName3["ContextMenu"] = "contextmenu";
  EventName3["Resize"] = "resize";
  EventName3["SelectionChange"] = "selectionchange";
  EventName3["VisibilityChange"] = "visibilitychange";
})(EventName2 || (EventName2 = {}));

// node_modules/@cloudscape-design/components/collection-preferences/content-display/keyboard-sensor/utilities/listeners.js
var Listeners2 = class {
  constructor(target) {
    this.target = target;
    this.listeners = [];
    this.removeAll = () => {
      this.listeners.forEach((listener) => {
        var _a;
        return (_a = this.target) === null || _a === void 0 ? void 0 : _a.removeEventListener(...listener);
      });
    };
  }
  add(eventName, handler, options) {
    var _a;
    (_a = this.target) === null || _a === void 0 ? void 0 : _a.addEventListener(eventName, handler, options);
    this.listeners.push([eventName, handler, options]);
  }
};

// node_modules/@cloudscape-design/components/collection-preferences/content-display/keyboard-sensor/defaults.js
var defaultKeyboardCodes2 = {
  start: [KeyboardCode.Space, KeyboardCode.Enter],
  cancel: [KeyboardCode.Esc],
  end: [KeyboardCode.Space, KeyboardCode.Enter]
};

// node_modules/@cloudscape-design/components/collection-preferences/content-display/keyboard-sensor/index.js
var KeyboardSensor2 = class {
  constructor(props) {
    this.props = props;
    this.autoScrollEnabled = false;
    const { event: { target } } = props;
    this.props = props;
    this.listeners = new Listeners2(getOwnerDocument(target));
    this.windowListeners = new Listeners2(getWindow(target));
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.handleCancel = this.handleCancel.bind(this);
    this.attach();
  }
  attach() {
    var _a;
    this.handleStart();
    this.windowListeners.add(EventName2.Resize, this.handleCancel);
    this.windowListeners.add(EventName2.VisibilityChange, this.handleCancel);
    (_a = this.props.event.target) === null || _a === void 0 ? void 0 : _a.addEventListener(EventName2.Blur, this.handleCancel);
    setTimeout(() => this.listeners.add(EventName2.Keydown, this.handleKeyDown));
  }
  handleStart() {
    const { activeNode, onStart } = this.props;
    const node = activeNode.node.current;
    if (node) {
      scrollElementIntoView(node);
    }
    onStart(defaultCoordinates);
  }
  handleKeyDown(event) {
    if (isKeyboardEvent(event)) {
      const { active, context, options } = this.props;
      const { keyboardCodes = defaultKeyboardCodes2, coordinateGetter } = options;
      const { code } = event;
      if (keyboardCodes.end.indexOf(code) !== -1) {
        this.handleEnd(event);
        return;
      }
      if (keyboardCodes.cancel.indexOf(code) !== -1) {
        this.handleCancel(event);
        return;
      }
      const { collisionRect } = context.current;
      const currentCoordinates = collisionRect ? { x: collisionRect.left, y: collisionRect.top } : defaultCoordinates;
      if (!this.referenceCoordinates) {
        this.referenceCoordinates = currentCoordinates;
      }
      if (!coordinateGetter) {
        return;
      }
      const newCoordinates = coordinateGetter(event, {
        active,
        context: context.current,
        currentCoordinates
      });
      if (newCoordinates) {
        const { scrollableAncestors } = context.current;
        const direction = event.code;
        const scrolled = applyScroll({ currentCoordinates, direction, newCoordinates, scrollableAncestors });
        if (!scrolled) {
          this.handleMove(event, subtract(newCoordinates, this.referenceCoordinates));
        }
      }
    }
  }
  handleMove(event, coordinates) {
    const { onMove } = this.props;
    event.preventDefault();
    onMove(coordinates);
  }
  handleEnd(event) {
    const { onEnd } = this.props;
    event.preventDefault();
    this.detach();
    onEnd();
  }
  handleCancel(event) {
    const { onCancel } = this.props;
    if (event.type !== EventName2.Blur) {
      event.preventDefault();
    }
    this.detach();
    onCancel();
  }
  detach() {
    var _a;
    (_a = this.props.event.target) === null || _a === void 0 ? void 0 : _a.removeEventListener(EventName2.Blur, this.handleCancel);
    this.listeners.removeAll();
    this.windowListeners.removeAll();
  }
};
KeyboardSensor2.activators = [
  {
    eventName: "onKeyDown",
    handler: (event, { keyboardCodes = defaultKeyboardCodes2, onActivation }, { active }) => {
      const { code } = event.nativeEvent;
      if (keyboardCodes.start.indexOf(code) !== -1) {
        const activator = active.activatorNode.current;
        if (activator && event.target !== activator) {
          return false;
        }
        event.preventDefault();
        onActivation === null || onActivation === void 0 ? void 0 : onActivation({ event: event.nativeEvent });
        return true;
      }
      return false;
    }
  }
];

// node_modules/@cloudscape-design/components/collection-preferences/content-display/use-drag-and-drop-reorder.js
var KeyboardCode2;
(function(KeyboardCode3) {
  KeyboardCode3["Space"] = "Space";
  KeyboardCode3["Down"] = "ArrowDown";
  KeyboardCode3["Right"] = "ArrowRight";
  KeyboardCode3["Left"] = "ArrowLeft";
  KeyboardCode3["Up"] = "ArrowUp";
  KeyboardCode3["Esc"] = "Escape";
  KeyboardCode3["Enter"] = "Enter";
})(KeyboardCode2 || (KeyboardCode2 = {}));
function useDragAndDropReorder({ sortedOptions }) {
  const isKeyboard = (0, import_react198.useRef)(false);
  const positionDelta = (0, import_react198.useRef)(0);
  const [activeItemId, setActiveItemId] = (0, import_react198.useState)(null);
  const setActiveItem = (id) => {
    setActiveItemId(id);
    if (!id) {
      isKeyboard.current = false;
      positionDelta.current = 0;
    }
  };
  const handleKeyDown = (event) => {
    if (isKeyboard.current && activeItemId) {
      const currentTargetIndex = sortedOptions.findIndex(({ id }) => id === activeItemId) + positionDelta.current;
      if (event.key === "ArrowDown" && currentTargetIndex < sortedOptions.length - 1) {
        positionDelta.current += 1;
      } else if (event.key === "ArrowUp" && currentTargetIndex > 0) {
        positionDelta.current -= 1;
      }
    }
    if (activeItemId && isEscape2(event.key)) {
      event.stopPropagation();
    }
  };
  const getClosestId = (active) => {
    if (positionDelta.current === 0) {
      return active.id;
    }
    const currentIndex = sortedOptions.findIndex(({ id }) => id === active.id);
    const newIndex = Math.max(0, Math.min(sortedOptions.length - 1, currentIndex + positionDelta.current));
    return sortedOptions[newIndex].id;
  };
  const collisionDetection = ({ active, collisionRect, droppableContainers, droppableRects, pointerCoordinates }) => {
    if (isKeyboard.current) {
      const collidingContainer = getCollidingContainer({
        activeId: active.id,
        closestId: getClosestId(active),
        droppableContainers
      });
      return collidingContainer ? [collidingContainer] : [];
    } else {
      return closestCenter({ active, collisionRect, droppableRects, droppableContainers, pointerCoordinates });
    }
  };
  const coordinateGetter = (event, { context: { active, collisionRect, droppableRects, droppableContainers } }) => {
    if (event.code === KeyboardCode2.Up || event.code === KeyboardCode2.Down) {
      event.preventDefault();
      if (!active || !collisionRect) {
        return;
      }
      const closestId = getClosestId(active);
      if (closestId !== null) {
        const activeDroppable = droppableContainers.get(active.id);
        const newDroppable = droppableContainers.get(closestId);
        const newRect = newDroppable ? droppableRects.get(newDroppable.id) : null;
        const newNode = newDroppable === null || newDroppable === void 0 ? void 0 : newDroppable.node.current;
        if (newNode && newRect && activeDroppable && newDroppable) {
          const isAfterActive = isAfter2(activeDroppable, newDroppable);
          const offset = {
            x: isAfterActive ? collisionRect.width - newRect.width : 0,
            y: isAfterActive ? collisionRect.height - newRect.height : 0
          };
          const rectCoordinates = {
            x: newRect.left,
            y: newRect.top
          };
          return {
            x: rectCoordinates.x - offset.x,
            y: rectCoordinates.y - offset.y
          };
        }
      }
    }
  };
  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor2, {
    coordinateGetter,
    onActivation: () => {
      isKeyboard.current = true;
    }
  }));
  return {
    activeItem: activeItemId,
    collisionDetection,
    coordinateGetter,
    handleKeyDown,
    sensors,
    setActiveItem
  };
}
function isAfter2(a2, b) {
  return hasSortableData(a2) && hasSortableData(b) && a2.data.current.sortable.index < b.data.current.sortable.index;
}
function getCollidingContainer({ activeId, closestId, droppableContainers }) {
  if (closestId === activeId) {
    return;
  }
  const collidingContainer = droppableContainers.find(({ id }) => id === closestId);
  if (collidingContainer) {
    return {
      id: collidingContainer.id,
      data: {
        droppableContainer: collidingContainer,
        value: 0
      }
    };
  }
}
var isEscape2 = (key2) => key2 === "Escape" || key2 === "Esc";

// node_modules/@cloudscape-design/components/collection-preferences/content-display/use-live-announcements.js
var import_react199 = __toESM(require_react());
function useLiveAnnouncements({ isDragging, liveAnnouncementDndStarted, liveAnnouncementDndItemReordered, liveAnnouncementDndItemCommitted, liveAnnouncementDndDiscarded, sortedOptions }) {
  const isFirstAnnouncement = (0, import_react199.useRef)(true);
  if (!isDragging) {
    isFirstAnnouncement.current = true;
  }
  return {
    onDragStart({ active }) {
      if (active && liveAnnouncementDndStarted) {
        const index = sortedOptions.findIndex((option) => option.id === active.id);
        return liveAnnouncementDndStarted(index + 1, sortedOptions.length);
      }
    },
    onDragOver({ active, over }) {
      if (liveAnnouncementDndItemReordered) {
        if (isFirstAnnouncement.current) {
          isFirstAnnouncement.current = false;
          if (!over || over.id === active.id) {
            return;
          }
        }
        const initialIndex = sortedOptions.findIndex((option) => option.id === active.id);
        const currentIdex = over ? sortedOptions.findIndex((option) => option.id === over.id) : initialIndex;
        return liveAnnouncementDndItemReordered(initialIndex + 1, currentIdex + 1, sortedOptions.length);
      }
    },
    onDragEnd({ active, over }) {
      if (liveAnnouncementDndItemCommitted) {
        const initialIndex = sortedOptions.findIndex((option) => option.id === active.id);
        const finalIndex = over ? sortedOptions.findIndex((option) => option.id === over.id) : initialIndex;
        return liveAnnouncementDndItemCommitted(initialIndex + 1, finalIndex + 1, sortedOptions.length);
      }
    },
    onDragCancel() {
      return liveAnnouncementDndDiscarded;
    }
  };
}

// node_modules/@cloudscape-design/components/collection-preferences/content-display/index.js
var componentPrefix2 = "content-display";
var getClassName2 = (suffix) => styles_css_default61[`${componentPrefix2}-${suffix}`];
function ContentDisplayPreference({ title, description, options, value = options.map(({ id }) => ({
  id,
  visible: true
})), onChange, liveAnnouncementDndStarted, liveAnnouncementDndItemReordered, liveAnnouncementDndItemCommitted, liveAnnouncementDndDiscarded, dragHandleAriaDescription, dragHandleAriaLabel }) {
  const idPrefix = useUniqueId(componentPrefix2);
  const i18n = useInternalI18n("collection-preferences");
  const onToggle = (option) => {
    onChange(value.map((item) => item.id === option.id ? Object.assign(Object.assign({}, item), { visible: !option.visible }) : item));
  };
  const titleId = `${idPrefix}-title`;
  const descriptionId = `${idPrefix}-description`;
  const sortedOptions = getSortedOptions({ options, contentDisplay: value });
  const { activeItem, collisionDetection, handleKeyDown, sensors, setActiveItem } = useDragAndDropReorder({
    sortedOptions
  });
  const activeOption = activeItem ? sortedOptions.find(({ id }) => id === activeItem) : null;
  const announcements = useLiveAnnouncements({
    isDragging: activeItem !== null,
    liveAnnouncementDndStarted: i18n("contentDisplayPreference.liveAnnouncementDndStarted", liveAnnouncementDndStarted, (format3) => (position, total) => format3({ position, total })),
    liveAnnouncementDndItemReordered: i18n("contentDisplayPreference.liveAnnouncementDndItemReordered", liveAnnouncementDndItemReordered, (format3) => (initialPosition, currentPosition, total) => format3({ currentPosition, total, isInitialPosition: `${initialPosition === currentPosition}` })),
    liveAnnouncementDndItemCommitted: i18n("contentDisplayPreference.liveAnnouncementDndItemCommitted", liveAnnouncementDndItemCommitted, (format3) => (initialPosition, finalPosition, total) => format3({ initialPosition, finalPosition, total, isInitialPosition: `${initialPosition === finalPosition}` })),
    liveAnnouncementDndDiscarded: i18n("contentDisplayPreference.liveAnnouncementDndDiscarded", liveAnnouncementDndDiscarded),
    sortedOptions: value
  });
  const renderedDragHandleAriaDescription = i18n("contentDisplayPreference.dragHandleAriaDescription", dragHandleAriaDescription);
  return import_react200.default.createElement(
    "div",
    { className: styles_css_default61[componentPrefix2] },
    import_react200.default.createElement("h3", { className: getClassName2("title"), id: titleId }, i18n("contentDisplayPreference.title", title)),
    import_react200.default.createElement("p", { className: getClassName2("description"), id: descriptionId }, i18n("contentDisplayPreference.description", description)),
    import_react200.default.createElement(
      DndContext,
      { sensors, collisionDetection, accessibility: {
        announcements,
        restoreFocus: false,
        screenReaderInstructions: renderedDragHandleAriaDescription ? { draggable: renderedDragHandleAriaDescription } : void 0
      }, onDragStart: ({ active }) => setActiveItem(active.id), onDragEnd: (event) => {
        setActiveItem(null);
        const { active, over } = event;
        if (over && active.id !== over.id) {
          const oldIndex = value.findIndex(({ id }) => id === active.id);
          const newIndex = value.findIndex(({ id }) => id === over.id);
          onChange(arrayMove([...value], oldIndex, newIndex));
        }
      }, onDragCancel: () => setActiveItem(null) },
      import_react200.default.createElement(
        "ul",
        { className: getClassName2("option-list"), "aria-describedby": descriptionId, "aria-labelledby": titleId, role: "list" },
        import_react200.default.createElement(SortableContext, { items: sortedOptions.map(({ id }) => id), strategy: verticalListSortingStrategy }, sortedOptions.map((option) => {
          return import_react200.default.createElement(DraggableOption, { dragHandleAriaLabel: i18n("contentDisplayPreference.dragHandleAriaLabel", dragHandleAriaLabel), key: option.id, onKeyDown: handleKeyDown, onToggle, option });
        }))
      ),
      import_react200.default.createElement(
        Portal,
        null,
        import_react200.default.createElement(DragOverlay, { className: styles_css_default61["drag-overlay"], dropAnimation: null, style: { zIndex: 5e3 } }, activeOption && import_react200.default.createElement(content_display_option_default, { listeners: { onKeyDown: handleKeyDown }, dragHandleAriaLabel: i18n("contentDisplayPreference.dragHandleAriaLabel", dragHandleAriaLabel), onToggle, option: activeOption }))
      )
    )
  );
}

// node_modules/@cloudscape-design/components/collection-preferences/index.js
var componentName2 = "CollectionPreferences";
function CollectionPreferences(_a) {
  var { title, confirmLabel, cancelLabel, disabled = false, onConfirm, onCancel, visibleContentPreference, contentDisplayPreference, pageSizePreference, wrapLinesPreference, stripedRowsPreference, contentDensityPreference, stickyColumnsPreference, preferences, customPreference, getModalRoot, removeModalRoot } = _a, rest = __rest(_a, ["title", "confirmLabel", "cancelLabel", "disabled", "onConfirm", "onCancel", "visibleContentPreference", "contentDisplayPreference", "pageSizePreference", "wrapLinesPreference", "stripedRowsPreference", "contentDensityPreference", "stickyColumnsPreference", "preferences", "customPreference", "getModalRoot", "removeModalRoot"]);
  const { __internalRootRef } = useBaseComponent("CollectionPreferences");
  checkControlled("CollectionPreferences", "preferences", preferences, "onConfirm", onConfirm);
  const i18n = useInternalI18n("collection-preferences");
  const baseProps = getBaseProps(rest);
  const [modalVisible, setModalVisible] = (0, import_react201.useState)(false);
  const [temporaryPreferences, setTemporaryPreferences] = (0, import_react201.useState)(copyPreferences(preferences || {}));
  const triggerRef = (0, import_react201.useRef)(null);
  const dialogPreviouslyOpen = (0, import_react201.useRef)(false);
  (0, import_react201.useEffect)(() => {
    if (!modalVisible) {
      dialogPreviouslyOpen.current && triggerRef.current && triggerRef.current.focus();
    } else {
      dialogPreviouslyOpen.current = true;
    }
  }, [modalVisible]);
  const onConfirmListener = () => {
    setModalVisible(false);
    fireNonCancelableEvent(onConfirm, temporaryPreferences);
  };
  const onCancelListener = () => {
    fireNonCancelableEvent(onCancel, {});
    setModalVisible(false);
    setTemporaryPreferences(copyPreferences(preferences || {}));
  };
  const hasContentOnTheLeft = !!(pageSizePreference || wrapLinesPreference || stripedRowsPreference || contentDensityPreference || stickyColumnsPreference || customPreference);
  const hasContentOnTheRight = !!(visibleContentPreference || contentDisplayPreference);
  const onChange = (changedPreferences) => setTemporaryPreferences(mergePreferences(changedPreferences, temporaryPreferences));
  if (visibleContentPreference && contentDisplayPreference) {
    warnOnce(componentName2, "You provided both `visibleContentPreference` and `contentDisplayPreference` props. `visibleContentPreference` will be ignored and only `contentDisplayPreference` will be rendered.");
  }
  return import_react201.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default61.root), ref: __internalRootRef }),
    import_react201.default.createElement(InternalButton, { ref: triggerRef, className: styles_css_default61["trigger-button"], disabled, ariaLabel: i18n("title", title), onClick: () => {
      setTemporaryPreferences(copyPreferences(preferences || {}));
      setModalVisible(true);
    }, variant: "icon", iconName: "settings", formAction: "none" }),
    !disabled && modalVisible && import_react201.default.createElement(
      InternalModal,
      { className: styles_css_default61["modal-root"], visible: true, getModalRoot, removeModalRoot, header: i18n("title", title), footer: import_react201.default.createElement(
        InternalBox,
        { float: "right" },
        import_react201.default.createElement(
          InternalSpaceBetween,
          { direction: "horizontal", size: "xs" },
          import_react201.default.createElement(InternalButton, { className: styles_css_default61["cancel-button"], variant: "link", formAction: "none", onClick: onCancelListener }, i18n("cancelLabel", cancelLabel)),
          import_react201.default.createElement(InternalButton, { className: styles_css_default61["confirm-button"], variant: "primary", formAction: "none", onClick: onConfirmListener }, i18n("confirmLabel", confirmLabel))
        )
      ), closeAriaLabel: cancelLabel, size: hasContentOnTheLeft && hasContentOnTheRight ? "large" : "medium", onDismiss: onCancelListener },
      import_react201.default.createElement(ModalContentLayout, { left: hasContentOnTheLeft && import_react201.default.createElement(
        InternalSpaceBetween,
        { size: "l" },
        pageSizePreference && import_react201.default.createElement(PageSizePreference, Object.assign({ value: temporaryPreferences.pageSize }, pageSizePreference, { onChange: (pageSize) => onChange({ pageSize }) })),
        wrapLinesPreference && import_react201.default.createElement(WrapLinesPreference, Object.assign({ value: temporaryPreferences.wrapLines }, wrapLinesPreference, { onChange: (wrapLines) => onChange({ wrapLines }) })),
        stripedRowsPreference && import_react201.default.createElement(StripedRowsPreference, Object.assign({ value: temporaryPreferences.stripedRows }, stripedRowsPreference, { onChange: (stripedRows) => onChange({ stripedRows }) })),
        contentDensityPreference && import_react201.default.createElement(ContentDensityPreference, Object.assign({ value: temporaryPreferences.contentDensity }, contentDensityPreference, { onChange: (contentDensity) => onChange({ contentDensity }) })),
        stickyColumnsPreference && import_react201.default.createElement(StickyColumnsPreference, Object.assign({ value: temporaryPreferences.stickyColumns }, stickyColumnsPreference, { onChange: (stickyColumns) => onChange({ stickyColumns }) })),
        customPreference && import_react201.default.createElement(CustomPreference, { value: temporaryPreferences.custom, customPreference, onChange: (custom8) => onChange({ custom: custom8 }) })
      ), right: contentDisplayPreference ? import_react201.default.createElement(ContentDisplayPreference, Object.assign({}, contentDisplayPreference, { value: temporaryPreferences.contentDisplay, onChange: (contentDisplay) => onChange({ contentDisplay }) })) : visibleContentPreference && import_react201.default.createElement(VisibleContentPreference, Object.assign({ value: temporaryPreferences.visibleContent }, visibleContentPreference, { onChange: (visibleItems) => onChange({ visibleContent: visibleItems }) })) })
    )
  );
}
applyDisplayName(CollectionPreferences, componentName2);

// node_modules/@cloudscape-design/components/column-layout/index.js
var import_react202 = __toESM(require_react());
function ColumnLayout2(_a) {
  var { columns = 1, variant = "default", borders = "none", disableGutters = false } = _a, props = __rest(_a, ["columns", "variant", "borders", "disableGutters"]);
  const baseComponentProps = useBaseComponent("ColumnLayout", {
    props: { borders, columns, disableGutters, minColumnWidth: props.minColumnWidth, variant }
  });
  const externalProps = getExternalProps(props);
  return import_react202.default.createElement(ColumnLayout, Object.assign({ columns, variant, borders, disableGutters }, externalProps, baseComponentProps));
}
applyDisplayName(ColumnLayout2, "ColumnLayout");

// node_modules/@cloudscape-design/components/container/index.js
var import_react203 = __toESM(require_react());
function Container(_a) {
  var { variant = "default", disableHeaderPaddings = false, disableContentPaddings = false, fitHeight = false } = _a, props = __rest(_a, ["variant", "disableHeaderPaddings", "disableContentPaddings", "fitHeight"]);
  const analyticsMetadata = getAnalyticsMetadataProps(props);
  const baseComponentProps = useBaseComponent("Container", {
    props: { disableContentPaddings, disableHeaderPaddings, fitHeight, variant }
  }, analyticsMetadata);
  const externalProps = getExternalProps(props);
  return import_react203.default.createElement(
    AnalyticsFunnelSubStep,
    { instanceIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, errorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext },
    import_react203.default.createElement(InternalContainerAsSubstep, Object.assign({ variant, disableContentPaddings, disableHeaderPaddings, fitHeight }, props, externalProps, baseComponentProps))
  );
}
applyDisplayName(Container, "Container");

// node_modules/@cloudscape-design/components/content-layout/index.js
var import_react205 = __toESM(require_react());

// node_modules/@cloudscape-design/components/content-layout/internal.js
var import_react204 = __toESM(require_react());

// node_modules/@cloudscape-design/components/content-layout/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/content-layout/styles.scoped.css";
var styles_css_default65 = {
  "layout": "awsui_layout_5gtk3_set91_105",
  "is-visual-refresh": "awsui_is-visual-refresh_5gtk3_set91_105",
  "background": "awsui_background_5gtk3_set91_108",
  "header": "awsui_header_5gtk3_set91_111",
  "is-overlap-disabled": "awsui_is-overlap-disabled_5gtk3_set91_127",
  "content": "awsui_content_5gtk3_set91_135",
  "has-header": "awsui_has-header_5gtk3_set91_139"
};

// node_modules/@cloudscape-design/components/content-layout/internal.js
function InternalContentLayout(_a) {
  var { children, disableOverlap, header, __internalRootRef } = _a, rest = __rest(_a, ["children", "disableOverlap", "header", "__internalRootRef"]);
  const baseProps = getBaseProps(rest);
  const isVisualRefresh = useVisualRefresh();
  const overlapElement = useDynamicOverlap();
  const isOverlapDisabled = !children || disableOverlap;
  return import_react204.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default65.layout, {
      [styles_css_default65["is-overlap-disabled"]]: isOverlapDisabled,
      [styles_css_default65["is-visual-refresh"]]: isVisualRefresh,
      [styles_css_default65["has-header"]]: !!header
    }), ref: __internalRootRef }),
    import_react204.default.createElement("div", { className: clsx_m_default(styles_css_default65.background, { [styles_css_default65["is-overlap-disabled"]]: isOverlapDisabled }, getContentHeaderClassName()), ref: overlapElement }),
    header && import_react204.default.createElement("div", { className: clsx_m_default(styles_css_default65.header, getContentHeaderClassName()) }, header),
    import_react204.default.createElement("div", { className: styles_css_default65.content }, children)
  );
}

// node_modules/@cloudscape-design/components/content-layout/index.js
function ContentLayout(props) {
  const baseComponentProps = useBaseComponent("ContentLayout", {
    props: { disableOverlap: props.disableOverlap }
  });
  return import_react205.default.createElement(InternalContentLayout, Object.assign({}, props, baseComponentProps));
}
applyDisplayName(ContentLayout, "ContentLayout");

// node_modules/@cloudscape-design/components/copy-to-clipboard/index.js
var import_react207 = __toESM(require_react());

// node_modules/@cloudscape-design/components/popover/internal.js
var import_react206 = __toESM(require_react());
var internal_default15 = import_react206.default.forwardRef(InternalPopover);
function InternalPopover(_a, ref) {
  var { position = "right", size = "medium", fixedWidth = false, triggerType = "text", dismissButton: dismissButton2 = true, children, header, content, triggerAriaLabel, renderWithPortal = false, __onOpen, __internalRootRef = null } = _a, restProps = __rest(_a, ["position", "size", "fixedWidth", "triggerType", "dismissButton", "children", "header", "content", "triggerAriaLabel", "renderWithPortal", "__onOpen", "__internalRootRef"]);
  const baseProps = getBaseProps(restProps);
  const triggerRef = (0, import_react206.useRef)(null);
  const popoverRef = (0, import_react206.useRef)(null);
  const clickFrameId = (0, import_react206.useRef)(null);
  const i18n = useInternalI18n("popover");
  const dismissAriaLabel = i18n("dismissAriaLabel", restProps.dismissAriaLabel);
  const [visible, setVisible] = (0, import_react206.useState)(false);
  const focusTrigger = (0, import_react206.useCallback)(() => {
    var _a2, _b;
    if (triggerType === "text") {
      (_a2 = triggerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    } else {
      triggerRef.current && ((_b = getFirstFocusable(triggerRef.current)) === null || _b === void 0 ? void 0 : _b.focus());
    }
  }, [triggerType]);
  const onTriggerClick = (0, import_react206.useCallback)(() => {
    fireNonCancelableEvent(__onOpen);
    setVisible(true);
  }, [__onOpen]);
  const onDismiss = (0, import_react206.useCallback)(() => {
    setVisible(false);
    focusTrigger();
  }, [focusTrigger]);
  const onTriggerKeyDown = (0, import_react206.useCallback)((event) => {
    const isEscapeKey = event.keyCode === KeyCode.escape;
    const isTabKey = event.keyCode === KeyCode.tab;
    if (isEscapeKey && visible) {
      event.stopPropagation();
    }
    if (isTabKey || isEscapeKey) {
      setVisible(false);
    }
  }, [visible]);
  (0, import_react206.useImperativeHandle)(ref, () => ({
    dismissPopover: onDismiss
  }));
  (0, import_react206.useEffect)(() => {
    if (!triggerRef.current) {
      return;
    }
    const document2 = triggerRef.current.ownerDocument;
    const onDocumentClick = () => {
      if (clickFrameId.current === null) {
        setVisible(false);
      }
    };
    document2.addEventListener("mousedown", onDocumentClick, false);
    return () => {
      document2.removeEventListener("mousedown", onDocumentClick, false);
    };
  }, []);
  const popoverClasses = usePortalModeClasses(triggerRef);
  const triggerProps = {
    // https://github.com/microsoft/TypeScript/issues/36659
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ref: triggerRef,
    onClick: onTriggerClick,
    onKeyDown: onTriggerKeyDown,
    className: clsx_m_default(styles_css_default7.trigger, styles_css_default7[`trigger-type-${triggerType}`])
  };
  const { tabIndex: triggerTabIndex } = useSingleTabStopNavigation(triggerRef);
  const referrerId = useUniqueId();
  const popoverContent = import_react206.default.createElement("div", { "aria-live": dismissButton2 ? void 0 : "polite", "aria-atomic": dismissButton2 ? void 0 : true, className: clsx_m_default(popoverClasses, !renderWithPortal && styles_css_default7["popover-inline-content"]), "data-awsui-referrer-id": referrerId }, visible && import_react206.default.createElement(
    PopoverContainer,
    { size, fixedWidth, position, trackRef: triggerRef, arrow: (position2) => import_react206.default.createElement(arrow_default, { position: position2 }), renderWithPortal, zIndex: renderWithPortal ? 7e3 : void 0 },
    import_react206.default.createElement(
      LinkDefaultVariantContext.Provider,
      { value: { defaultVariant: "primary" } },
      import_react206.default.createElement(PopoverBody, { dismissButton: dismissButton2, dismissAriaLabel, header, onDismiss, overflowVisible: "both" }, content)
    )
  ));
  const mergedRef = useMergeRefs(popoverRef, __internalRootRef);
  return import_react206.default.createElement(
    "span",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default7.root, baseProps.className), ref: mergedRef, onMouseDown: () => {
      clickFrameId.current = requestAnimationFrame(() => {
        clickFrameId.current = null;
      });
    } }),
    triggerType === "text" ? import_react206.default.createElement(
      "button",
      Object.assign({}, triggerProps, { tabIndex: triggerTabIndex, type: "button", "aria-haspopup": "dialog", id: referrerId, "aria-label": triggerAriaLabel }),
      import_react206.default.createElement("span", { className: styles_css_default7["trigger-inner-text"] }, children)
    ) : import_react206.default.createElement("span", Object.assign({}, triggerProps, { id: referrerId }), children),
    import_react206.default.createElement(reset_contexts_for_modal_default, null, renderWithPortal ? import_react206.default.createElement(Portal, null, popoverContent) : popoverContent)
  );
}

// node_modules/@cloudscape-design/components/copy-to-clipboard/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/copy-to-clipboard/styles.scoped.css";
var styles_css_default66 = {
  "root": "awsui_root_5a145_jw759_9",
  "inline-container": "awsui_inline-container_5a145_jw759_13",
  "inline-container-trigger": "awsui_inline-container-trigger_5a145_jw759_16"
};

// node_modules/@cloudscape-design/components/copy-to-clipboard/test-classes/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/copy-to-clipboard/test-classes/styles.scoped.css";
var styles_css_default67 = {
  "root": "awsui_root_ljpwc_1spew_5",
  "text-to-copy": "awsui_text-to-copy_ljpwc_1spew_9"
};

// node_modules/@cloudscape-design/components/copy-to-clipboard/index.js
function CopyToClipboard(_a) {
  var { variant = "button", copyButtonAriaLabel, copyButtonText, copySuccessText, copyErrorText, textToCopy } = _a, restProps = __rest(_a, ["variant", "copyButtonAriaLabel", "copyButtonText", "copySuccessText", "copyErrorText", "textToCopy"]);
  const { __internalRootRef } = useBaseComponent("CopyToClipboard", {
    props: { variant }
  });
  const baseProps = getBaseProps(restProps);
  const copyButtonProps = variant === "button" ? { children: copyButtonText, ariaLabel: copyButtonAriaLabel } : { ariaLabel: copyButtonAriaLabel !== null && copyButtonAriaLabel !== void 0 ? copyButtonAriaLabel : copyButtonText };
  const [status, setStatus] = (0, import_react207.useState)("pending");
  const [statusText, setStatusText] = (0, import_react207.useState)("");
  const onClick = () => {
    if (navigator.clipboard) {
      setStatus("pending");
      setStatusText("");
      navigator.clipboard.writeText(textToCopy).then(() => {
        setStatus("success");
        setStatusText(copySuccessText);
      }).catch(() => {
        setStatus("error");
        setStatusText(copyErrorText);
      });
    }
  };
  const triggerVariant = {
    button: "normal",
    icon: "icon",
    inline: "inline-icon"
  }[variant];
  const trigger = import_react207.default.createElement(
    internal_default15,
    { size: "medium", position: "top", triggerType: "custom", dismissButton: false, renderWithPortal: true, content: import_react207.default.createElement(StatusIndicator, { type: status }, statusText) },
    import_react207.default.createElement(internal_default2, Object.assign({}, copyButtonProps, { iconName: "copy", onClick, variant: triggerVariant, wrapText: false, formAction: "none" }))
  );
  return import_react207.default.createElement("span", Object.assign({ ref: __internalRootRef }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default66.root, styles_css_default67.root) }), variant === "inline" ? import_react207.default.createElement(
    "span",
    { className: styles_css_default66["inline-container"] },
    import_react207.default.createElement("span", { className: styles_css_default66["inline-container-trigger"] }, trigger),
    import_react207.default.createElement("span", { className: styles_css_default67["text-to-copy"] }, textToCopy)
  ) : trigger);
}
applyDisplayName(CopyToClipboard, "CopyToClipboard");

// node_modules/@cloudscape-design/components/date-input/index.js
var import_react210 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-input/internal.js
var import_react209 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/masked-input/index.js
var import_react208 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/masked-input/utils/keys.js
var isSpecialCommand = (keyCode) => {
  return keyCode > 7 && keyCode < 47 && keyCode !== KeyCode.space;
};
var isClipboardCommand = (ctrlKey, metaKey) => ctrlKey || metaKey;
var isCommand = (keyCode, ctrlKey, metaKey) => isSpecialCommand(keyCode) || isClipboardCommand(ctrlKey, metaKey);
var isDigit = (char) => !isNaN(parseInt(char, 10));

// node_modules/@cloudscape-design/components/internal/components/masked-input/keyboard-handler.js
var backspaceHandler = (initialValue, format3, selectionStart, selectionEnd) => {
  const multiCharDelete = selectionStart !== selectionEnd;
  if (multiCharDelete) {
    const isCursorAtEnd = selectionEnd === initialValue.length;
    if (!isCursorAtEnd) {
      return format3.replaceDigitsWithZeroes(initialValue, selectionStart, selectionEnd);
    }
    return {
      value: initialValue.slice(0, selectionStart),
      position: selectionStart
    };
  }
  const isSeparator = format3.isSegmentStart(selectionStart);
  const atEnd = selectionStart === initialValue.length;
  if (!atEnd) {
    if (isSeparator) {
      return format3.deleteSeparator(initialValue, selectionStart);
    } else {
      return format3.deleteDigit(initialValue, selectionStart);
    }
  }
  if (isSeparator) {
    return {
      value: initialValue.slice(0, selectionStart - 2),
      position: selectionStart - 2
    };
  }
  return {
    value: initialValue.slice(0, selectionStart - 1),
    position: selectionStart - 1
  };
};
var keyHandler = (initialValue, key2, format3, selectionStart, selectionEnd) => {
  let value = initialValue;
  const position = selectionStart;
  if (selectionStart === value.length && value.length === format3.getMaxLength()) {
    return { value, position };
  }
  if (selectionStart !== value.length && selectionEnd === value.length) {
    const sliceEnd = format3.isCursorAtSeparator(selectionStart) ? selectionStart + 1 : selectionStart;
    value = initialValue.slice(0, sliceEnd);
  }
  if (format3.isCursorAtSeparator(position)) {
    return { value, position: position + 1 };
  }
  return format3.processKey(value, key2, position);
};
var enterHandler = (value, format3) => {
  if (!value) {
    return { value: "", position: 0 };
  }
  const autoCompletedValue = format3.autoComplete(value);
  const position = autoCompletedValue.length;
  return { value: autoCompletedValue, position };
};

// node_modules/@cloudscape-design/components/internal/components/masked-input/use-mask.js
var onAutoComplete = (value, onChange, maskFormat) => {
  if (!value) {
    return;
  }
  const autoCompletedValue = maskFormat.autoComplete(value);
  if (autoCompletedValue !== value) {
    onChange(autoCompletedValue);
  }
};
var preventDefault2 = (event, result) => result && event.preventDefault();
var useMask = ({ value = "", onBlur, onChange, onKeyDown, format: format3, inputRef, autofix = false, disableAutocompleteOnBlur = false, setPosition }) => {
  if (!format3.isValid(value)) {
    warnOnce("useMask", `Invalid string "${value}" provided`);
  }
  const onMaskChange = (updatedValue) => {
    const autofixedUpdatedValue = autofix ? format3.correctMinMaxValues(updatedValue) : updatedValue;
    if (autofixedUpdatedValue === value || !format3.isValid(autofixedUpdatedValue)) {
      return;
    }
    onChange(autofixedUpdatedValue);
  };
  const initialValue = autofix ? format3.correctMinMaxValues(value) : value;
  const maskedValue = format3.getValidValue(initialValue);
  return {
    value: maskedValue,
    onKeyDown: (event) => {
      var _a, _b;
      const selectionStart = ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.selectionStart) || 0;
      const selectionEnd = ((_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.selectionEnd) || 0;
      let result;
      const { keyCode, key: key2, ctrlKey, metaKey } = event.detail;
      if (isDigit(key2) || format3.isSeparator(key2)) {
        result = keyHandler(maskedValue, key2, format3, selectionStart, selectionEnd);
        preventDefault2(event, result);
      } else if (keyCode === KeyCode.backspace) {
        result = backspaceHandler(maskedValue, format3, selectionStart, selectionEnd);
        preventDefault2(event, result);
      } else if (keyCode === KeyCode.enter) {
        result = enterHandler(maskedValue, format3);
      } else if (!isCommand(keyCode, ctrlKey, metaKey)) {
        event.preventDefault();
      }
      if (result) {
        const { value: value2, position } = result;
        onMaskChange(value2);
        setPosition(position);
      }
      onKeyDown && onKeyDown(event);
    },
    onChange: ({ detail }) => onMaskChange(detail.value),
    onBlur: () => {
      if (!disableAutocompleteOnBlur) {
        onAutoComplete(maskedValue, onChange, format3);
      }
      onBlur && onBlur();
    },
    onPaste: (event) => {
      var _a, _b;
      const text = (event.clipboardData || window.clipboardData).getData("text");
      const selectionStart = ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.selectionStart) || 0;
      const selectionEnd = ((_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.selectionEnd) || 0;
      const formattedText = format3.formatPastedText(text, maskedValue, selectionStart, selectionEnd);
      onMaskChange(formattedText);
    }
  };
};
var use_mask_default = useMask;

// node_modules/@cloudscape-design/components/internal/components/masked-input/utils/strings.js
var insertAt = (text, toInsert, start, end = start) => text.slice(0, start) + toInsert + text.slice(end);

// node_modules/@cloudscape-design/components/internal/components/masked-input/utils/mask-format.js
var MaskFormat = class {
  constructor({ separator, inputSeparators = [], segments }) {
    this.positionFormats = /* @__PURE__ */ new Map();
    this.segments = [];
    this.separator = separator;
    this.inputSeparators = [...inputSeparators, separator];
    this.enrichSegmentDefinitions(segments);
  }
  tryAppendSeparator(value) {
    const withSeparator = `${value}${this.separator}`;
    return this.isValid(withSeparator) ? withSeparator : value;
  }
  isSeparator(key2) {
    return this.inputSeparators.indexOf(key2) !== -1;
  }
  isValid(value) {
    const inputSegments = value.split(this.separator);
    if (inputSegments.length > this.segments.length) {
      return false;
    }
    return inputSegments.every((segmentValue, i) => {
      const segment = this.segments[i];
      if (segmentValue === "") {
        if (i === inputSegments.length - 1) {
          return true;
        } else {
          return false;
        }
      }
      if (!segmentValue.match(/^\d+$/)) {
        return false;
      }
      if (segmentValue.length < segment.length && i !== inputSegments.length - 1) {
        return false;
      }
      const intValue = parseInt(segmentValue, 10);
      if (segmentValue.length > segment.length) {
        return false;
      }
      if (intValue < segment.min || intValue > segment.max(value)) {
        if (i === inputSegments.length - 1 && segmentValue.length < segment.length) {
          return true;
        }
        return false;
      }
      return true;
    });
  }
  getValidValue(value) {
    let validValue = value;
    do {
      if (this.isValid(validValue)) {
        return this.tryAppendSeparator(validValue);
      }
      validValue = validValue.substring(0, validValue.length - 1);
    } while (validValue.length > 0);
    return "";
  }
  autoComplete(value) {
    const [lastSegmentValue, ...completeSegmentValues] = value.split(this.separator).reverse();
    const lastSegment = this.segments[completeSegmentValues.length];
    const paddedLastSegmentValue = this.padWithDefaultValue(lastSegmentValue, lastSegment);
    const partial = [...completeSegmentValues.reverse(), paddedLastSegmentValue];
    while (partial.length < this.segments.length) {
      const nextSegment = this.segments[partial.length];
      const segmentValue = this.padWithDefaultValue("", nextSegment);
      partial.push(segmentValue);
    }
    value = partial.join(this.separator);
    value = this.correctMinMaxValues(value);
    return value;
  }
  getSegmentValueWithAddition(position, value, enteredDigit) {
    const segment = this.positionFormats.get(position);
    const segmentValue = value.substr(segment.start, segment.length);
    const segmentPosition = position - segment.start;
    const newValue = insertAt(segmentValue, enteredDigit, segmentPosition, segmentPosition + 1);
    return parseInt(newValue, 10);
  }
  replaceDigitsWithZeroes(value, cursorStart, cursorEnd) {
    const position = this.isCursorAtSeparator(cursorStart) ? cursorStart + 1 : cursorStart;
    if (this.isCursorAtSeparator(cursorStart)) {
      cursorStart++;
    }
    if (!this.isSegmentStart(cursorStart)) {
      const segment = this.positionFormats.get(cursorStart);
      value = insertAt(value, padLeftZeros("", segment.end - cursorStart), cursorStart, segment.end);
      cursorStart = segment.end + 1;
    }
    let currentSegment;
    while (cursorStart < cursorEnd && (currentSegment = this.positionFormats.get(cursorStart + 1))) {
      const insertionEnd = Math.min(cursorEnd, currentSegment.end);
      value = insertAt(value, padLeftZeros("", insertionEnd - currentSegment.start), currentSegment.start, insertionEnd);
      cursorStart = insertionEnd + 1;
    }
    value = this.correctMinMaxValues(value);
    return {
      value,
      position
    };
  }
  handleSeparatorInput(value, position) {
    if (position === value.length && !this.isSegmentStart(position)) {
      const segment = this.positionFormats.get(position);
      let segmentValue = value.substr(segment.start, segment.length);
      segmentValue = this.padWithDefaultValue(segmentValue, segment);
      value = insertAt(value, segmentValue, segment.start, segment.end);
      value = this.correctMinMaxValues(value);
      return {
        value,
        position: value.length
      };
    }
  }
  isCursorAtSeparator(position) {
    return 0 < position && position < this.getMaxLength() && this.positionFormats.get(position) === void 0;
  }
  isSegmentStart(position) {
    return position === 0 || this.isCursorAtSeparator(position - 1);
  }
  getSegmentMaxValue(value, position) {
    return this.positionFormats.get(position).max(value);
  }
  getSegmentMinValue(value, position) {
    return this.positionFormats.get(position).min;
  }
  getMaxLength() {
    const last = this.segments[this.segments.length - 1];
    return last.start + last.length;
  }
  deleteSeparator(value, position) {
    value = insertAt(value, "0", position - 2, position - 1);
    return {
      value: this.correctMinMaxValues(value),
      position: position - 2
    };
  }
  deleteDigit(value, position) {
    value = insertAt(value, "0", position - 1, position);
    const length = value.length;
    if (value.slice(length - 2) === "0:") {
      value = value.slice(0, length - 2);
    }
    return {
      value: this.correctMinMaxValues(value),
      position: position - 1
    };
  }
  correctMinMaxValues(value) {
    let segment = this.positionFormats.get(0);
    while (segment && value.length >= segment.end) {
      const segmentValue = parseInt(value.substr(segment.start, segment.length), 10);
      const segmentMax = segment.max(value);
      if (segmentValue < segment.min) {
        let toInsert = segment.min.toFixed();
        toInsert = padLeftZeros(toInsert, segment.length);
        value = insertAt(value, toInsert, segment.start, segment.end);
      }
      if (segmentValue > segmentMax) {
        value = insertAt(value, segmentMax.toFixed(), segment.start, segment.end);
      }
      segment = this.positionFormats.get(segment.end + 1);
    }
    return value.substr(0, this.segments[this.segments.length - 1].end);
  }
  formatPastedText(text, value, cursorStart, cursorEnd) {
    const keyArr = text.trim().split("");
    let position = cursorStart;
    let formattedValue = value;
    if (cursorEnd > cursorStart && cursorEnd === value.length) {
      formattedValue = value.slice(0, cursorStart);
    }
    for (const key2 of keyArr) {
      if (position >= this.getMaxLength()) {
        break;
      }
      const result = this.processKey(formattedValue, key2, position);
      formattedValue = result.value;
      position = result.position;
    }
    return this.tryAppendSeparator(formattedValue);
  }
  processKey(initialValue, key2, initialPosition) {
    let value = initialValue;
    let position = initialPosition;
    if (this.isSeparator(key2)) {
      const result = this.handleSeparatorInput(value, position);
      if (result) {
        value = result.value;
        position = result.position;
      }
    } else {
      const isCursorAtEnd = position === value.length;
      const segmentValue = this.getSegmentValueWithAddition(position, value, key2);
      const segmentMaxValue = this.getSegmentMaxValue(value, position);
      const segmentMinValue = this.getSegmentMinValue(value, position);
      const firstDigitGreater = parseInt(key2, 10) > parseInt(segmentMaxValue.toFixed()[0], 10);
      const isValidPosition = isCursorAtEnd || segmentValue.toFixed().length === 1;
      const exceedsMaxAtSegmentStart = this.isSegmentStart(position) && isValidPosition && firstDigitGreater;
      if (exceedsMaxAtSegmentStart) {
        value = insertAt(value, `0${key2}`, position, position + 2);
        position += 2;
      } else if (segmentValue > segmentMaxValue && this.isSegmentStart(position)) {
        value = insertAt(value, segmentMaxValue.toFixed(), position, position + segmentMaxValue.toFixed().length);
        position += segmentMaxValue.toFixed().length;
      } else if (segmentValue > segmentMaxValue) {
        value = insertAt(value, segmentMaxValue.toFixed(), position - 1, position + 1);
        position += 1;
      } else if (segmentValue < segmentMinValue && !this.isSegmentStart(position)) {
        value = insertAt(value, segmentMinValue.toFixed(), position, position + 1);
        position += 1;
      } else {
        value = insertAt(value, key2, position, position + 1);
        position += 1;
      }
    }
    value = this.tryAppendSeparator(value);
    if (this.isCursorAtSeparator(position)) {
      position++;
    }
    return { value, position };
  }
  padWithDefaultValue(segmentValue, segment) {
    let defaultValue5 = (segment.default || segment.min).toFixed();
    defaultValue5 = padLeftZeros(defaultValue5, segment.length);
    return insertAt(defaultValue5, segmentValue, segment.length - segmentValue.length, segment.length);
  }
  enrichSegmentDefinitions(segments) {
    this.positionFormats = /* @__PURE__ */ new Map();
    this.segments = [];
    let position = 0;
    for (const segment of segments) {
      const max3 = segment.max;
      const fullSegment = Object.assign(Object.assign({}, segment), { max: typeof max3 === "number" ? () => max3 : max3, start: position, end: position + segment.length });
      this.segments.push(fullSegment);
      for (let j = 0; j < fullSegment.length; j++) {
        this.positionFormats.set(position++, fullSegment);
      }
      position++;
    }
  }
};
var mask_format_default = MaskFormat;

// node_modules/@cloudscape-design/components/internal/components/masked-input/index.js
var MaskedInput = import_react208.default.forwardRef((_a, ref) => {
  var { value, onBlur, onChange, onKeyDown, mask, autofix = false, disableAutocompleteOnBlur = false } = _a, rest = __rest(_a, ["value", "onBlur", "onChange", "onKeyDown", "mask", "autofix", "disableAutocompleteOnBlur"]);
  const baseProps = getBaseProps(rest);
  const formFieldContext = useFormFieldContext(rest);
  const inputRef = import_react208.default.useRef(null);
  const [cursorPosition, setCursorPosition] = (0, import_react208.useState)(null);
  (0, import_react208.useLayoutEffect)(() => {
    var _a2;
    if (cursorPosition !== null) {
      (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.setSelectionRange(cursorPosition, cursorPosition);
    }
  }, [cursorPosition, inputRef]);
  const _b = use_mask_default({
    format: new mask_format_default(mask),
    value,
    inputRef,
    autofix,
    disableAutocompleteOnBlur,
    onChange: (value2) => !rest.readOnly && fireNonCancelableEvent(onChange, { value: value2 }),
    onKeyDown: (event) => !rest.readOnly && onKeyDown && fireCancelableEvent(onKeyDown, event.detail, event),
    onBlur: () => fireNonCancelableEvent(onBlur),
    setPosition: setCursorPosition
  }), { onPaste } = _b, maskProps = __rest(_b, ["onPaste"]);
  const inputProps = Object.assign(Object.assign(Object.assign(Object.assign({}, rest), baseProps), formFieldContext), maskProps);
  const mergedRef = useMergeRefs(ref, inputRef);
  return import_react208.default.createElement(internal_default4, Object.assign({}, inputProps, { ref: mergedRef, __nativeAttributes: {
    onPaste
  } }));
});
var masked_input_default = MaskedInput;

// node_modules/@cloudscape-design/components/date-input/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/date-input/styles.scoped.css";
var styles_css_default68 = {
  "root": "awsui_root_yodkx_im8v7_5"
};

// node_modules/@cloudscape-design/components/date-input/internal.js
function daysMax(value) {
  const baseDate = displayToIso(value).substring(0, 7);
  return getDaysInMonth(parseDate(baseDate));
}
var yearMask = { min: 0, max: 9999, default: 2e3, length: 4 };
var monthMask = { min: 1, max: 12, length: 2 };
var dayMask = { min: 1, max: daysMax, length: 2 };
var InternalDateInput = import_react209.default.forwardRef((_a, ref) => {
  var { value, onChange, granularity, __internalRootRef = null } = _a, props = __rest(_a, ["value", "onChange", "granularity", "__internalRootRef"]);
  const maskArgs = {
    separator: "/",
    inputSeparators: ["-", ".", " "],
    segments: granularity === "month" ? [yearMask, monthMask] : [yearMask, monthMask, dayMask]
  };
  return import_react209.default.createElement(masked_input_default, Object.assign({ ref }, props, { value: isoToDisplay(value || ""), onChange: (event) => fireNonCancelableEvent(onChange, { value: displayToIso(event.detail.value) }), className: clsx_m_default(styles_css_default68.root, props.className), mask: maskArgs, autofix: true, autoComplete: false, disableAutocompleteOnBlur: false, disableBrowserAutocorrect: true, __internalRootRef }));
});
var internal_default16 = InternalDateInput;

// node_modules/@cloudscape-design/components/date-input/index.js
var DateInput = import_react210.default.forwardRef((props, ref) => {
  const baseComponentProps = useBaseComponent("DateInput", {
    props: { autoFocus: props.autoFocus, readOnly: props.readOnly }
  });
  return import_react210.default.createElement(internal_default16, Object.assign({}, props, baseComponentProps, { ref }));
});
applyDisplayName(DateInput, "DateInput");
var date_input_default = DateInput;

// node_modules/@cloudscape-design/components/date-picker/index.js
var import_react212 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-picker/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/date-picker/styles.scoped.css";
var styles_css_default69 = {
  "root": "awsui_root_145pa_ot559_99",
  "focus-lock": "awsui_focus-lock_145pa_ot559_134",
  "calendar": "awsui_calendar_145pa_ot559_138",
  "date-picker-container": "awsui_date-picker-container_145pa_ot559_154",
  "date-picker-trigger": "awsui_date-picker-trigger_145pa_ot559_159",
  "date-picker-input": "awsui_date-picker-input_145pa_ot559_163",
  "open-calendar-button": "awsui_open-calendar-button_145pa_ot559_168"
};

// node_modules/@cloudscape-design/components/internal/hooks/use-focus-tracker.js
var import_react211 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/focus-tracker.js
var FocusTracker = class {
  constructor(node, { onFocusEnter, onFocusLeave }) {
    this.node = node;
    this.currentlyFocused = false;
    this.focusInListener = (event) => {
      const focusIsInside = nodeBelongs(this.node, event.target);
      if (!this.currentlyFocused && focusIsInside) {
        this.triggerFocus();
      }
    };
    this.focusOutListener = (event) => {
      const nextFocused = event.relatedTarget;
      const isNextFocusedInParent = !nodeBelongs(this.node, nextFocused);
      if (this.currentlyFocused && (nextFocused === null || isNextFocusedInParent)) {
        this.triggerBlur();
      }
    };
    this.onFocusEnter = onFocusEnter;
    this.onFocusLeave = onFocusLeave;
  }
  initialize() {
    this.currentlyFocused = nodeBelongs(this.node, document.activeElement);
    document.addEventListener("focusin", this.focusInListener);
    document.addEventListener("focusout", this.focusOutListener);
  }
  destroy() {
    document.removeEventListener("focusin", this.focusInListener);
    document.removeEventListener("focusout", this.focusOutListener);
  }
  triggerBlur() {
    this.currentlyFocused = false;
    this.onFocusLeave();
  }
  triggerFocus() {
    this.currentlyFocused = true;
    this.onFocusEnter();
  }
};

// node_modules/@cloudscape-design/components/internal/hooks/use-focus-tracker.js
var useFocusTracker = ({ rootRef, onBlur, onFocus }) => {
  const focusTracker = (0, import_react211.useRef)(null);
  (0, import_react211.useEffect)(() => {
    if (!rootRef.current) {
      return;
    }
    focusTracker.current = new FocusTracker(rootRef.current, {
      onFocusLeave: () => {
        fireNonCancelableEvent(onBlur);
      },
      onFocusEnter: () => {
        fireNonCancelableEvent(onFocus);
      }
    });
    focusTracker.current.initialize();
    return () => {
      var _a;
      (_a = focusTracker.current) === null || _a === void 0 ? void 0 : _a.destroy();
    };
  }, [rootRef, onBlur, onFocus]);
};

// node_modules/@cloudscape-design/components/date-picker/utils.js
function isValidFullDate({ date: date2, granularity }) {
  const regex = granularity === "month" ? /^\d{4}-\d{2}(-\d{2})?$/ : /^\d{4}-\d{2}-\d{2}$/;
  return !!date2.match(regex);
}
function getSelectedDateLabel({ date: date2, granularity, locale: locale2 }) {
  return granularity === "month" ? renderMonthAndYear(locale2, date2) : getDateLabel(locale2, date2);
}
function getBaseDateLabel({ date: date2, granularity, locale: locale2 }) {
  return granularity === "month" ? renderYear(locale2, date2) : renderMonthAndYear(locale2, date2);
}

// node_modules/@cloudscape-design/components/date-picker/index.js
var DatePicker = import_react212.default.forwardRef((_a, ref) => {
  var _b, _c, _d;
  var { locale: locale2 = "", startOfWeek: startOfWeek2, isDateEnabled, nextMonthAriaLabel, previousMonthAriaLabel, todayAriaLabel, i18nStrings, placeholder = "", value = "", readOnly = false, disabled = false, onBlur, autoFocus = false, onChange, onFocus, name, ariaLabel, ariaRequired, controlId, invalid, openCalendarAriaLabel, expandToViewport, granularity = "day" } = _a, restProps = __rest(_a, ["locale", "startOfWeek", "isDateEnabled", "nextMonthAriaLabel", "previousMonthAriaLabel", "todayAriaLabel", "i18nStrings", "placeholder", "value", "readOnly", "disabled", "onBlur", "autoFocus", "onChange", "onFocus", "name", "ariaLabel", "ariaRequired", "controlId", "invalid", "openCalendarAriaLabel", "expandToViewport", "granularity"]);
  const { __internalRootRef } = useBaseComponent("DatePicker", {
    props: { autoFocus, expandToViewport, granularity, readOnly }
  });
  checkControlled("DatePicker", "value", value, "onChange", onChange);
  const contextLocale = useLocale();
  const normalizedLocale = normalizeLocale("DatePicker", locale2 || contextLocale);
  const baseProps = getBaseProps(restProps);
  const [isDropDownOpen, setIsDropDownOpen] = (0, import_react212.useState)(false);
  const { ariaLabelledby, ariaDescribedby } = useFormFieldContext(restProps);
  const internalInputRef = (0, import_react212.useRef)(null);
  const buttonRef = (0, import_react212.useRef)(null);
  useForwardFocus(ref, internalInputRef);
  const rootRef = (0, import_react212.useRef)(null);
  const dropdownId = useUniqueId("calender");
  const calendarDescriptionId = useUniqueId("calendar-description-");
  const mergedRef = useMergeRefs(rootRef, __internalRootRef);
  useFocusTracker({ rootRef, onBlur, onFocus });
  const onDropdownCloseHandler = (0, import_react212.useCallback)(() => setIsDropDownOpen(false), [setIsDropDownOpen]);
  const onButtonClickHandler = () => {
    if (!isDropDownOpen) {
      setIsDropDownOpen(true);
    }
  };
  const onWrapperKeyDownHandler = (event) => {
    var _a2;
    if (event.keyCode === KeyCode.escape && isDropDownOpen) {
      event.stopPropagation();
      (_a2 = buttonRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
      setIsDropDownOpen(false);
    }
  };
  const onInputChangeHandler = (event) => {
    fireNonCancelableEvent(onChange, { value: event.detail.value });
  };
  const onInputBlurHandler = () => {
    if (!isDropDownOpen) {
      setIsDropDownOpen(false);
    }
  };
  const parsedValue = value && value.length >= 4 ? parseDate(value) : null;
  const baseDate = parsedValue || /* @__PURE__ */ new Date();
  const hasFullValue = isValidFullDate({ date: value, granularity });
  const buttonAriaLabel = openCalendarAriaLabel && openCalendarAriaLabel(hasFullValue && parsedValue ? getSelectedDateLabel({ date: parsedValue, granularity, locale: normalizedLocale }) : null);
  const trigger = import_react212.default.createElement(
    "div",
    { className: styles_css_default69["date-picker-trigger"] },
    import_react212.default.createElement(
      "div",
      { className: styles_css_default69["date-picker-input"] },
      import_react212.default.createElement(internal_default16, { name, invalid, controlId, ariaLabelledby, ariaDescribedby, ariaLabel, ariaRequired, value, disabled, readOnly, onChange: onInputChangeHandler, onBlur: onInputBlurHandler, placeholder, ref: internalInputRef, autoFocus, onFocus: onDropdownCloseHandler, granularity })
    ),
    import_react212.default.createElement(
      "div",
      null,
      import_react212.default.createElement(InternalButton, { iconName: "calendar", className: styles_css_default69["open-calendar-button"], onClick: onButtonClickHandler, ref: buttonRef, ariaLabel: buttonAriaLabel, disabled: disabled || readOnly, formAction: "none" })
    )
  );
  baseProps.className = clsx_m_default(baseProps.className, styles_css_default69.root, styles_css_default69["date-picker-container"]);
  const handleMouseDown = (event) => {
    event.preventDefault();
  };
  return import_react212.default.createElement("div", Object.assign({}, baseProps, { ref: mergedRef, onKeyDown: !disabled && !readOnly ? onWrapperKeyDownHandler : void 0 }), disabled || readOnly ? trigger : import_react212.default.createElement(dropdown_default, { stretchWidth: true, stretchHeight: true, open: isDropDownOpen, onDropdownClose: onDropdownCloseHandler, onMouseDown: handleMouseDown, trigger, expandToViewport, scrollable: false, dropdownId }, isDropDownOpen && import_react212.default.createElement(
    focus_lock_default,
    { className: styles_css_default69["focus-lock"], autoFocus: true },
    import_react212.default.createElement(
      "div",
      { tabIndex: 0, className: styles_css_default69.calendar, role: "dialog", "aria-modal": "true" },
      import_react212.default.createElement(Calendar, { value, onChange: (e) => {
        var _a2;
        fireNonCancelableEvent(onChange, e.detail);
        (_a2 = buttonRef === null || buttonRef === void 0 ? void 0 : buttonRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
        setIsDropDownOpen(false);
      }, locale: normalizedLocale, startOfWeek: startOfWeek2, ariaDescribedby: calendarDescriptionId, ariaLabel, ariaLabelledby, granularity, isDateEnabled, i18nStrings: Object.assign(Object.assign({}, i18nStrings), { todayAriaLabel: (_b = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.todayAriaLabel) !== null && _b !== void 0 ? _b : todayAriaLabel, nextMonthAriaLabel: (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.nextMonthAriaLabel) !== null && _c !== void 0 ? _c : nextMonthAriaLabel, previousMonthAriaLabel: (_d = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.previousMonthAriaLabel) !== null && _d !== void 0 ? _d : previousMonthAriaLabel }) }),
      import_react212.default.createElement(live_region_default, { id: calendarDescriptionId }, getBaseDateLabel({ date: baseDate, granularity, locale: normalizedLocale }))
    )
  )));
});
applyDisplayName(DatePicker, "DatePicker");
var date_picker_default = DatePicker;

// node_modules/@cloudscape-design/components/date-range-picker/index.js
var import_react226 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-range-picker/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/date-range-picker/styles.scoped.css";
var styles_css_default70 = {
  "calendar": "awsui_calendar_mgja0_1vaht_99",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_mgja0_1vaht_1",
  "root": "awsui_root_mgja0_1vaht_126",
  "wide": "awsui_wide_mgja0_1vaht_160",
  "focus-lock": "awsui_focus-lock_mgja0_1vaht_167",
  "trigger-wrapper": "awsui_trigger-wrapper_mgja0_1vaht_171",
  "trigger-flexbox": "awsui_trigger-flexbox_mgja0_1vaht_175",
  "calendar-container": "awsui_calendar-container_mgja0_1vaht_179",
  "one-grid": "awsui_one-grid_mgja0_1vaht_182",
  "calendar-header": "awsui_calendar-header_mgja0_1vaht_186",
  "calendar-header-months-wrapper": "awsui_calendar-header-months-wrapper_mgja0_1vaht_192",
  "calendar-header-month": "awsui_calendar-header-month_mgja0_1vaht_192",
  "calendar-next-month-btn": "awsui_calendar-next-month-btn_mgja0_1vaht_211",
  "calendar-prev-month-btn": "awsui_calendar-prev-month-btn_mgja0_1vaht_214",
  "first-grid": "awsui_first-grid_mgja0_1vaht_218",
  "second-grid": "awsui_second-grid_mgja0_1vaht_219",
  "date-and-time-container": "awsui_date-and-time-container_mgja0_1vaht_223",
  "date-and-time-wrapper": "awsui_date-and-time-wrapper_mgja0_1vaht_229",
  "footer": "awsui_footer_mgja0_1vaht_236",
  "has-clear-button": "awsui_has-clear-button_mgja0_1vaht_245",
  "footer-button-wrapper": "awsui_footer-button-wrapper_mgja0_1vaht_254",
  "icon-wrapper": "awsui_icon-wrapper_mgja0_1vaht_261",
  "label": "awsui_label_mgja0_1vaht_266",
  "label-enabled": "awsui_label-enabled_mgja0_1vaht_271",
  "label-text": "awsui_label-text_mgja0_1vaht_275",
  "label-token-nowrap": "awsui_label-token-nowrap_mgja0_1vaht_280",
  "mode-switch": "awsui_mode-switch_mgja0_1vaht_284",
  "dropdown": "awsui_dropdown_mgja0_1vaht_288",
  "dropdown-content": "awsui_dropdown-content_mgja0_1vaht_310",
  "start-date-input": "awsui_start-date-input_mgja0_1vaht_319",
  "start-time-input": "awsui_start-time-input_mgja0_1vaht_320",
  "end-date-input": "awsui_end-date-input_mgja0_1vaht_321",
  "end-time-input": "awsui_end-time-input_mgja0_1vaht_322",
  "validation-section": "awsui_validation-section_mgja0_1vaht_326",
  "validation-error": "awsui_validation-error_mgja0_1vaht_330",
  "clear-button": "awsui_clear-button_mgja0_1vaht_334",
  "apply-button": "awsui_apply-button_mgja0_1vaht_338",
  "cancel-button": "awsui_cancel-button_mgja0_1vaht_342",
  "calendar-aria-live": "awsui_calendar-aria-live_mgja0_1vaht_346"
};

// node_modules/@cloudscape-design/components/date-range-picker/dropdown.js
var import_react225 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-range-picker/calendar/index.js
var import_react219 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-range-picker/calendar/header/index.js
var import_react214 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-range-picker/calendar/header/header-button.js
var import_react213 = __toESM(require_react());
function PrevMonthButton({ ariaLabel, baseDate, onChangeMonth }) {
  return import_react213.default.createElement(InternalButton, { iconName: "angle-left", ariaLabel, variant: "icon", onClick: () => onChangeMonth(addMonths(baseDate, -1)), formAction: "none", className: styles_css_default70["calendar-prev-month-btn"] });
}
function NextMonthButton({ ariaLabel, baseDate, onChangeMonth }) {
  return import_react213.default.createElement(InternalButton, { iconName: "angle-right", ariaLabel, variant: "icon", onClick: () => onChangeMonth(addMonths(baseDate, 1)), formAction: "none", className: styles_css_default70["calendar-next-month-btn"] });
}

// node_modules/@cloudscape-design/components/date-range-picker/calendar/header/index.js
function CalendarHeader2({ baseDate, locale: locale2, onChangeMonth, previousMonthLabel, nextMonthLabel, isSingleGrid, headingIdPrefix }) {
  const i18n = useInternalI18n("calendar");
  const prevMonthLabel = renderMonthAndYear(locale2, add(baseDate, { months: -1 }));
  const currentMonthLabel = renderMonthAndYear(locale2, baseDate);
  return import_react214.default.createElement(
    import_react214.default.Fragment,
    null,
    import_react214.default.createElement(
      "div",
      { className: styles_css_default70["calendar-header"] },
      import_react214.default.createElement(PrevMonthButton, { ariaLabel: i18n("previousMonthAriaLabel", previousMonthLabel), baseDate, onChangeMonth }),
      import_react214.default.createElement(
        "h2",
        { className: styles_css_default70["calendar-header-months-wrapper"] },
        !isSingleGrid && import_react214.default.createElement("span", { className: styles_css_default70["calendar-header-month"], id: `${headingIdPrefix}-prevmonth` }, prevMonthLabel),
        import_react214.default.createElement("span", { className: styles_css_default70["calendar-header-month"], id: `${headingIdPrefix}-currentmonth` }, currentMonthLabel)
      ),
      import_react214.default.createElement(NextMonthButton, { ariaLabel: i18n("nextMonthAriaLabel", nextMonthLabel), baseDate, onChangeMonth })
    ),
    import_react214.default.createElement(live_region_default, null, isSingleGrid ? currentMonthLabel : `${prevMonthLabel}, ${currentMonthLabel}`)
  );
}

// node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/index.js
var import_react216 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/grid.js
var import_react215 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/styles.scoped.css";
var styles_css_default71 = {
  "grid": "awsui_grid_1mfbn_f3jvf_103",
  "grid-cell": "awsui_grid-cell_1mfbn_f3jvf_108",
  "day-header": "awsui_day-header_1mfbn_f3jvf_115",
  "week": "awsui_week_1mfbn_f3jvf_125",
  "day": "awsui_day_1mfbn_f3jvf_115",
  "day-inner": "awsui_day-inner_1mfbn_f3jvf_172",
  "in-first-row": "awsui_in-first-row_1mfbn_f3jvf_177",
  "in-previous-month": "awsui_in-previous-month_1mfbn_f3jvf_177",
  "last-day-of-month": "awsui_last-day-of-month_1mfbn_f3jvf_181",
  "in-next-month": "awsui_in-next-month_1mfbn_f3jvf_185",
  "in-first-column": "awsui_in-first-column_1mfbn_f3jvf_189",
  "in-current-month": "awsui_in-current-month_1mfbn_f3jvf_192",
  "enabled": "awsui_enabled_1mfbn_f3jvf_196",
  "in-range": "awsui_in-range_1mfbn_f3jvf_202",
  "end-date": "awsui_end-date_1mfbn_f3jvf_202",
  "start-date": "awsui_start-date_1mfbn_f3jvf_202",
  "no-range": "awsui_no-range_1mfbn_f3jvf_202",
  "selected": "awsui_selected_1mfbn_f3jvf_212",
  "today": "awsui_today_1mfbn_f3jvf_217",
  "range-start-date": "awsui_range-start-date_1mfbn_f3jvf_262",
  "in-range-border-bottom": "awsui_in-range-border-bottom_1mfbn_f3jvf_265",
  "range-end-date": "awsui_range-end-date_1mfbn_f3jvf_268",
  "in-range-border-top": "awsui_in-range-border-top_1mfbn_f3jvf_271",
  "in-range-border-block-start": "awsui_in-range-border-block-start_1mfbn_f3jvf_284",
  "in-range-border-inline-end": "awsui_in-range-border-inline-end_1mfbn_f3jvf_287",
  "in-range-border-block-end": "awsui_in-range-border-block-end_1mfbn_f3jvf_290",
  "in-range-border-inline-start": "awsui_in-range-border-inline-start_1mfbn_f3jvf_293"
};

// node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/grid.js
function Grid2({ baseDate, selectedStartDate, selectedEndDate, rangeStartDate, rangeEndDate, focusedDate, focusedDateRef, onSelectDate, onGridKeyDownHandler, onFocusedDateChange, isDateEnabled, locale: locale2, startOfWeek: startOfWeek2, todayAriaLabel, ariaLabelledby, className: className2 }) {
  const baseDateTime = baseDate === null || baseDate === void 0 ? void 0 : baseDate.getTime();
  const weeks = (0, import_react215.useMemo)(
    () => getCalendarMonth(baseDate, { firstDayOfWeek: startOfWeek2 }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [baseDateTime, startOfWeek2]
  );
  const weekdays = weeks[0].map((date2) => date2.getDay());
  return import_react215.default.createElement(
    "table",
    { role: "grid", "aria-labelledby": ariaLabelledby, className: clsx_m_default(styles_css_default71.grid, className2) },
    import_react215.default.createElement(
      "thead",
      null,
      import_react215.default.createElement("tr", null, weekdays.map((dayIndex) => import_react215.default.createElement(
        "th",
        { key: dayIndex, scope: "col", className: clsx_m_default(styles_css_default71["grid-cell"], styles_css_default71["day-header"]) },
        import_react215.default.createElement("span", { "aria-hidden": "true" }, renderDayName(locale2, dayIndex, "short")),
        import_react215.default.createElement(ScreenreaderOnly, null, renderDayName(locale2, dayIndex, "long"))
      )))
    ),
    import_react215.default.createElement("tbody", { onKeyDown: onGridKeyDownHandler }, weeks.map((week, weekIndex) => {
      return import_react215.default.createElement("tr", { key: weekIndex, className: styles_css_default71.week }, week.map((date2, dateIndex) => {
        const isStartDate = !!selectedStartDate && isSameDay(date2, selectedStartDate);
        const isEndDate = !!selectedEndDate && isSameDay(date2, selectedEndDate);
        const isSelected = isStartDate || isEndDate;
        const isRangeStartDate = !!rangeStartDate && isSameDay(date2, rangeStartDate);
        const isRangeEndDate = !!rangeEndDate && isSameDay(date2, rangeEndDate);
        const isFocused = !!focusedDate && isSameDay(date2, focusedDate) && isSameMonth(date2, baseDate);
        const dateIsInRange = isStartDate || isEndDate || isInRange(date2, rangeStartDate, rangeEndDate);
        const inRangeStartWeek = rangeStartDate && isInRange(date2, rangeStartDate, addDays(addWeeks(rangeStartDate, 1), -1));
        const inRangeEndWeek = rangeEndDate && isInRange(date2, rangeEndDate, addDays(addWeeks(rangeEndDate, -1), 1));
        const onlyOneSelected = !!rangeStartDate && !!rangeEndDate ? isSameDay(rangeStartDate, rangeEndDate) : !selectedStartDate || !selectedEndDate;
        const isEnabled = !isDateEnabled || isDateEnabled(date2);
        const isFocusable = isFocused && isEnabled;
        const baseClasses = {
          [styles_css_default71.day]: true,
          [styles_css_default71["grid-cell"]]: true,
          [styles_css_default71["in-first-row"]]: weekIndex === 0,
          [styles_css_default71["in-first-column"]]: dateIndex === 0
        };
        if (!isSameMonth(date2, baseDate)) {
          return import_react215.default.createElement("td", { key: `${weekIndex}:${dateIndex}`, ref: isFocused ? focusedDateRef : void 0, className: clsx_m_default(baseClasses, {
            [styles_css_default71["in-previous-month"]]: isBefore(date2, baseDate),
            [styles_css_default71["last-day-of-month"]]: isLastDayOfMonth(date2),
            [styles_css_default71["in-next-month"]]: isAfter(date2, baseDate)
          }) });
        }
        const handlers = {};
        if (isEnabled) {
          handlers.onClick = () => onSelectDate(date2);
          handlers.onFocus = () => onFocusedDateChange(date2);
        }
        let tabIndex = void 0;
        if (isFocusable && isEnabled) {
          tabIndex = 0;
        } else if (isEnabled) {
          tabIndex = -1;
        }
        let dayAnnouncement = getDateLabel(locale2, date2, "short");
        if (isToday(date2)) {
          dayAnnouncement += ". " + todayAriaLabel;
        }
        return import_react215.default.createElement(
          "td",
          Object.assign({ ref: isFocused ? focusedDateRef : void 0, key: `${weekIndex}:${dateIndex}`, className: clsx_m_default(baseClasses, {
            [styles_css_default71["in-current-month"]]: isSameMonth(date2, baseDate),
            [styles_css_default71.enabled]: isEnabled,
            [styles_css_default71.selected]: isSelected,
            [styles_css_default71["start-date"]]: isStartDate,
            [styles_css_default71["end-date"]]: isEndDate,
            [styles_css_default71["range-start-date"]]: isRangeStartDate,
            [styles_css_default71["range-end-date"]]: isRangeEndDate,
            [styles_css_default71["no-range"]]: isSelected && onlyOneSelected,
            [styles_css_default71["in-range"]]: dateIsInRange,
            [styles_css_default71["in-range-border-block-start"]]: !!inRangeStartWeek || date2.getDate() <= 7,
            [styles_css_default71["in-range-border-block-end"]]: !!inRangeEndWeek || date2.getDate() > getDaysInMonth(date2) - 7,
            [styles_css_default71["in-range-border-inline-start"]]: dateIndex === 0 || date2.getDate() === 1 || isRangeStartDate,
            [styles_css_default71["in-range-border-inline-end"]]: dateIndex === week.length - 1 || isLastDayOfMonth(date2) || isRangeEndDate,
            [styles_css_default71.today]: isToday(date2)
          }), "aria-selected": isEnabled ? isSelected || dateIsInRange : void 0, "aria-current": isToday(date2) ? "date" : void 0, "data-date": formatDate2(date2), "aria-disabled": !isEnabled, tabIndex }, handlers),
          import_react215.default.createElement("span", { className: styles_css_default71["day-inner"], "aria-hidden": "true" }, date2.getDate()),
          import_react215.default.createElement(ScreenreaderOnly, null, dayAnnouncement)
        );
      }));
    }))
  );
}
function isInRange(date2, dateOne, dateTwo) {
  if (!dateOne || !dateTwo || isSameDay(dateOne, dateTwo)) {
    return false;
  }
  const inRange = isAfter(date2, dateOne) && isBefore(date2, dateTwo) || isAfter(date2, dateTwo) && isBefore(date2, dateOne);
  return inRange || isSameDay(date2, dateOne) || isSameDay(date2, dateTwo);
}

// node_modules/@cloudscape-design/components/internal/utils/has-value.js
function hasValue(value) {
  return value !== null && value !== void 0;
}

// node_modules/@cloudscape-design/components/date-range-picker/calendar/utils.js
function findDateToFocus(selected, baseDate, isDateEnabled) {
  if (selected && isDateEnabled(selected) && isSameMonth(selected, baseDate)) {
    return selected;
  }
  const today = /* @__PURE__ */ new Date();
  if (isDateEnabled(today) && isSameMonth(today, baseDate)) {
    return today;
  }
  if (isDateEnabled(baseDate)) {
    return baseDate;
  }
  return null;
}
function findMonthToDisplay(value, isSingleGrid) {
  if (value.start.date) {
    const startDate = parseDate(value.start.date);
    if (isSingleGrid) {
      return startOfMonth(startDate);
    }
    return startOfMonth(addMonths(startDate, 1));
  }
  if (value.end.date) {
    return startOfMonth(parseDate(value.end.date));
  }
  return startOfMonth(Date.now());
}

// node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/index.js
function isVisible2(date2, baseDate, isSingleGrid) {
  if (isSingleGrid) {
    return isSameMonth(date2, baseDate);
  }
  const previousMonth = addMonths(baseDate, -1);
  return isSameMonth(date2, previousMonth) || isSameMonth(date2, baseDate);
}
var Grids = ({ baseDate, selectedStartDate, selectedEndDate, focusedDate, onFocusedDateChange, isDateEnabled, isSingleGrid, onSelectDate, onChangeMonth, locale: locale2, startOfWeek: startOfWeek2, todayAriaLabel, headingIdPrefix }) => {
  const containerRef = (0, import_react216.useRef)(null);
  const [gridHasFocus, setGridHasFocus] = (0, import_react216.useState)(false);
  const focusedDateRef = (0, import_react216.useRef)(null);
  const dateCache = useDateCache();
  baseDate = dateCache(baseDate);
  focusedDate = focusedDate ? dateCache(focusedDate) : null;
  (0, import_react216.useEffect)(() => {
    if (focusedDate && !isVisible2(focusedDate, baseDate, isSingleGrid)) {
      const direction = isAfter(focusedDate, baseDate) ? -1 : 1;
      const newMonth = !isSingleGrid && direction === -1 ? addMonths(baseDate, -1) : baseDate;
      const nearestBaseDate = getBaseDay(newMonth, isDateEnabled);
      const newFocusedDate = findDateToFocus(focusedDate, nearestBaseDate, isDateEnabled);
      onFocusedDateChange(newFocusedDate);
    }
  }, [baseDate, focusedDate, isSingleGrid, isDateEnabled, onFocusedDateChange]);
  const onGridKeyDownHandler = (event) => {
    let updatedFocusDate;
    const keys = [KeyCode.up, KeyCode.down, KeyCode.left, KeyCode.right, KeyCode.space, KeyCode.enter];
    if (focusedDate === null || keys.indexOf(event.keyCode) === -1) {
      return;
    }
    event.preventDefault();
    handleKey(event, {
      onActivate: () => focusedDate && onSelectDate(focusedDate),
      onBlockEnd: () => focusedDate && (updatedFocusDate = moveNextWeek(focusedDate, isDateEnabled)),
      onBlockStart: () => focusedDate && (updatedFocusDate = movePrevWeek(focusedDate, isDateEnabled)),
      onInlineEnd: () => focusedDate && (updatedFocusDate = moveNextDay(focusedDate, isDateEnabled)),
      onInlineStart: () => focusedDate && (updatedFocusDate = movePrevDay(focusedDate, isDateEnabled))
    });
    if (!updatedFocusDate) {
      return;
    }
    const updatedDateIsVisible = isVisible2(updatedFocusDate, baseDate, isSingleGrid);
    if (!updatedDateIsVisible) {
      const newMonthIsOnLeftSide = !isSingleGrid && isBefore(updatedFocusDate, baseDate);
      onChangeMonth(newMonthIsOnLeftSide ? addMonths(updatedFocusDate, 1) : updatedFocusDate);
    }
    onFocusedDateChange(updatedFocusDate);
  };
  (0, import_react216.useEffect)(() => {
    if (focusedDate !== null && gridHasFocus) {
      if (focusedDateRef.current && focusedDateRef.current !== document.activeElement) {
        focusedDateRef.current.focus();
      }
    }
  }, [focusedDate, gridHasFocus]);
  const onGridBlur = (event) => {
    var _a;
    const newFocusTarget = event.relatedTarget || document.activeElement;
    const newFocusTargetIsInGrid = (_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.contains(newFocusTarget);
    if (newFocusTarget && !newFocusTargetIsInGrid && gridHasFocus) {
      setGridHasFocus(false);
    }
  };
  const onGridFocus = () => {
    if (!gridHasFocus) {
      setGridHasFocus(true);
    }
  };
  const isRangeVisible = selectedStartDate && selectedEndDate || gridHasFocus;
  const rangeEnds = [selectedStartDate !== null && selectedStartDate !== void 0 ? selectedStartDate : focusedDate, selectedEndDate !== null && selectedEndDate !== void 0 ? selectedEndDate : focusedDate].filter(hasValue);
  const rangeStartDate = min2(rangeEnds);
  const rangeEndDate = max2(rangeEnds);
  return import_react216.default.createElement(
    "div",
    { ref: containerRef, onFocus: onGridFocus, onBlur: onGridBlur },
    import_react216.default.createElement(
      InternalSpaceBetween,
      { size: "xs", direction: "horizontal" },
      !isSingleGrid && import_react216.default.createElement(Grid2, { className: styles_css_default70["first-grid"], baseDate: addMonths(baseDate, -1), selectedEndDate, selectedStartDate, rangeStartDate: isRangeVisible ? rangeStartDate : null, rangeEndDate: isRangeVisible ? rangeEndDate : null, focusedDate, focusedDateRef, isDateEnabled, onSelectDate, onGridKeyDownHandler, onFocusedDateChange, locale: locale2, startOfWeek: startOfWeek2, todayAriaLabel, ariaLabelledby: `${headingIdPrefix}-prevmonth` }),
      import_react216.default.createElement(Grid2, { className: styles_css_default70["second-grid"], baseDate, selectedEndDate, selectedStartDate, rangeStartDate: isRangeVisible ? rangeStartDate : null, rangeEndDate: isRangeVisible ? rangeEndDate : null, focusedDate, focusedDateRef, isDateEnabled, onSelectDate, onGridKeyDownHandler, onFocusedDateChange, locale: locale2, startOfWeek: startOfWeek2, todayAriaLabel, ariaLabelledby: `${headingIdPrefix}-currentmonth` })
    )
  );
};

// node_modules/@cloudscape-design/components/date-range-picker/calendar/range-inputs.js
var import_react218 = __toESM(require_react());

// node_modules/@cloudscape-design/components/time-input/internal.js
var import_react217 = __toESM(require_react());

// node_modules/@cloudscape-design/components/time-input/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/time-input/styles.scoped.css";
var styles_css_default72 = {
  "root": "awsui_root_l809c_im8v7_5"
};

// node_modules/@cloudscape-design/components/time-input/internal.js
var getMaskArgs = (format3, use24Hour) => {
  const segments = [
    use24Hour ? { min: 0, max: 23, length: 2 } : { min: 1, max: 12, length: 2 },
    { min: 0, max: 59, length: 2 },
    { min: 0, max: 59, length: 2 }
  ];
  return {
    separator: ":",
    segments: segments.slice(0, format3.split(":").length)
  };
};
var InternalTimeInput = import_react217.default.forwardRef((_a, ref) => {
  var { format: format3 = "hh:mm:ss", use24Hour = true, autoComplete = true, __internalRootRef = null } = _a, props = __rest(_a, ["format", "use24Hour", "autoComplete", "__internalRootRef"]);
  const inputRef = (0, import_react217.useRef)(null);
  useForwardFocus(ref, inputRef);
  const maskArgs = getMaskArgs(format3, use24Hour);
  return import_react217.default.createElement(masked_input_default, Object.assign({}, props, { __internalRootRef, ref: inputRef, className: clsx_m_default(styles_css_default72.root, props.className), autoComplete, disableBrowserAutocorrect: true, mask: maskArgs }));
});
var internal_default17 = InternalTimeInput;

// node_modules/@cloudscape-design/components/date-range-picker/calendar/range-inputs.js
function RangeInputs({ startDate, onChangeStartDate, startTime, onChangeStartTime, endDate, onChangeEndDate, endTime, onChangeEndTime, i18nStrings, dateOnly, timeInputFormat }) {
  const i18n = useInternalI18n("date-range-picker");
  return import_react218.default.createElement(
    InternalFormField,
    { constraintText: i18n("i18nStrings.dateTimeConstraintText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.dateTimeConstraintText) },
    import_react218.default.createElement(
      "div",
      { className: styles_css_default70["date-and-time-container"] },
      import_react218.default.createElement(
        "div",
        { className: styles_css_default70["date-and-time-wrapper"] },
        import_react218.default.createElement(
          InternalFormField,
          { label: i18n("i18nStrings.startDateLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.startDateLabel), stretch: true },
          import_react218.default.createElement(internal_default16, { value: startDate, className: styles_css_default70["start-date-input"], onChange: (event) => onChangeStartDate(event.detail.value), placeholder: "YYYY/MM/DD" })
        ),
        !dateOnly && import_react218.default.createElement(
          InternalFormField,
          { label: i18n("i18nStrings.startTimeLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.startTimeLabel), stretch: true },
          import_react218.default.createElement(internal_default17, { value: startTime, onChange: (event) => onChangeStartTime(event.detail.value), format: timeInputFormat, placeholder: timeInputFormat, className: styles_css_default70["start-time-input"] })
        )
      ),
      import_react218.default.createElement(
        "div",
        { className: styles_css_default70["date-and-time-wrapper"] },
        import_react218.default.createElement(
          InternalFormField,
          { label: i18n("i18nStrings.endDateLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.endDateLabel), stretch: true },
          import_react218.default.createElement(internal_default16, { value: endDate, className: styles_css_default70["end-date-input"], onChange: (event) => onChangeEndDate(event.detail.value), placeholder: "YYYY/MM/DD" })
        ),
        !dateOnly && import_react218.default.createElement(
          InternalFormField,
          { label: i18n("i18nStrings.endTimeLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.endTimeLabel), stretch: true },
          import_react218.default.createElement(internal_default17, { value: endTime, onChange: (event) => onChangeEndTime(event.detail.value), format: timeInputFormat, placeholder: timeInputFormat, className: styles_css_default70["end-time-input"] })
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/date-range-picker/calendar/index.js
function DateRangePickerCalendar({ value, setValue, locale: locale2 = "", startOfWeek: startOfWeek2, isDateEnabled = () => true, i18nStrings, dateOnly = false, timeInputFormat = "hh:mm:ss", customAbsoluteRangeControl }) {
  const isSingleGrid = useMobile();
  const normalizedLocale = normalizeLocale("DateRangePicker", locale2);
  const normalizedStartOfWeek = normalizeStartOfWeek(startOfWeek2, normalizedLocale);
  const i18n = useInternalI18n("date-range-picker");
  const [announcement, setAnnouncement] = (0, import_react219.useState)("");
  const [currentMonth, setCurrentMonth] = (0, import_react219.useState)(() => findMonthToDisplay(value, isSingleGrid));
  const [focusedDate, setFocusedDate] = (0, import_react219.useState)(() => {
    if (value.start.date) {
      const startDate = parseDate(value.start.date);
      if (isSameMonth(startDate, currentMonth)) {
        return startDate;
      }
      if (!isSingleGrid && isSameMonth(startDate, addMonths(currentMonth, -1))) {
        return startDate;
      }
    }
    return findDateToFocus(parseDate(value.start.date), currentMonth, isDateEnabled);
  });
  const updateCurrentMonth = (startDate) => {
    if (startDate.length >= 8) {
      const newCurrentMonth = startOfMonth(parseDate(startDate));
      setCurrentMonth(isSingleGrid ? newCurrentMonth : addMonths(newCurrentMonth, 1));
    }
  };
  const announceStart = (startDate) => {
    return i18n("i18nStrings.startDateLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.startDateLabel) + ", " + getDateLabel(normalizedLocale, startDate) + ", " + i18n("i18nStrings.startTimeLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.startTimeLabel) + ", " + renderTimeLabel(normalizedLocale, startDate, timeInputFormat) + ". ";
  };
  const announceEnd = (endDate) => {
    return i18n("i18nStrings.endDateLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.endDateLabel) + ", " + getDateLabel(normalizedLocale, endDate) + ", " + i18n("i18nStrings.endTimeLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.endTimeLabel) + ", " + renderTimeLabel(normalizedLocale, endDate, timeInputFormat) + ". ";
  };
  const renderSelectedAbsoluteRangeAriaLive = i18n("i18nStrings.renderSelectedAbsoluteRangeAriaLive", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.renderSelectedAbsoluteRangeAriaLive, (format3) => (startDate, endDate) => format3({ startDate, endDate }));
  const announceRange = (startDate, endDate) => {
    if (!renderSelectedAbsoluteRangeAriaLive) {
      return `${getDateLabel(normalizedLocale, startDate)} – ${getDateLabel(normalizedLocale, endDate)}`;
    }
    return renderSelectedAbsoluteRangeAriaLive(getDateLabel(normalizedLocale, startDate), getDateLabel(normalizedLocale, endDate));
  };
  const onSelectDateHandler = (selectedDate) => {
    const { start, end } = value;
    let newStart = void 0;
    let newEnd = void 0;
    let announcement2 = "";
    if (!start.date && !end.date) {
      newStart = startOfDay(selectedDate);
      announcement2 = announceStart(newStart);
    } else if (start.date && end.date) {
      newStart = startOfDay(selectedDate);
      newEnd = null;
      announcement2 = announceStart(newStart);
    } else if (start.date && !end.date) {
      const parsedStartDate = parseDate(start.date);
      if (isBefore(selectedDate, parsedStartDate)) {
        newStart = startOfDay(selectedDate);
        newEnd = endOfDay(parsedStartDate);
        announcement2 = announceStart(newStart) + announceRange(newStart, newEnd);
      } else {
        newEnd = endOfDay(selectedDate);
        announcement2 = announceEnd(newEnd) + announceRange(parsedStartDate, newEnd);
      }
    } else if (!start.date && end.date) {
      const existingEndDate = parseDate(end.date);
      if (isAfter(selectedDate, existingEndDate)) {
        newStart = startOfDay(existingEndDate);
        newEnd = endOfDay(selectedDate);
        announcement2 = announceEnd(newEnd) + announceRange(newStart, newEnd);
      } else {
        newStart = startOfDay(selectedDate);
        announcement2 = announceStart(newStart) + announceRange(newStart, existingEndDate);
      }
    }
    const formatValue2 = (date2, previous) => {
      if (date2 === null) {
        return { date: "", time: "" };
      } else if (date2 === void 0) {
        return previous;
      }
      return splitDateTime(formatDateTime(date2));
    };
    setValue({
      start: formatValue2(newStart, value.start),
      end: formatValue2(newEnd, value.end)
    });
    setAnnouncement(announcement2);
  };
  const onHeaderChangeMonthHandler = (newCurrentMonth) => {
    setCurrentMonth(newCurrentMonth);
    const newBaseDateMonth = isSingleGrid ? newCurrentMonth : addMonths(newCurrentMonth, -1);
    const newBaseDate = getBaseDay(newBaseDateMonth, isDateEnabled);
    setFocusedDate(newBaseDate);
  };
  const onChangeStartDate = (value2) => {
    setValue((oldValue) => Object.assign(Object.assign({}, oldValue), { start: Object.assign(Object.assign({}, oldValue.start), { date: value2 }) }));
    updateCurrentMonth(value2);
  };
  const interceptedSetValue = (newValue) => {
    setValue((oldValue) => {
      const updated = typeof newValue === "function" ? newValue(oldValue) : newValue;
      updateCurrentMonth(updated.start.date);
      return updated;
    });
  };
  const headingIdPrefix = useUniqueId("date-range-picker-calendar-heading");
  return import_react219.default.createElement(
    import_react219.default.Fragment,
    null,
    import_react219.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default70["calendar-container"], {
        [styles_css_default70["one-grid"]]: isSingleGrid
      }) },
      import_react219.default.createElement(
        InternalSpaceBetween,
        { size: "s" },
        import_react219.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default70.calendar, {
            [styles_css_default70["one-grid"]]: isSingleGrid
          }) },
          import_react219.default.createElement(CalendarHeader2, { baseDate: currentMonth, locale: normalizedLocale, onChangeMonth: onHeaderChangeMonthHandler, previousMonthLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.previousMonthAriaLabel, nextMonthLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.nextMonthAriaLabel, isSingleGrid, headingIdPrefix }),
          import_react219.default.createElement(Grids, { isSingleGrid, locale: normalizedLocale, baseDate: currentMonth, focusedDate, onFocusedDateChange: setFocusedDate, isDateEnabled, onSelectDate: onSelectDateHandler, onChangeMonth: setCurrentMonth, startOfWeek: normalizedStartOfWeek, todayAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.todayAriaLabel, selectedStartDate: parseDate(value.start.date, true), selectedEndDate: parseDate(value.end.date, true), headingIdPrefix })
        ),
        import_react219.default.createElement(RangeInputs, { startDate: value.start.date, onChangeStartDate, startTime: value.start.time, onChangeStartTime: (value2) => setValue((oldValue) => Object.assign(Object.assign({}, oldValue), { start: Object.assign(Object.assign({}, oldValue.start), { time: value2 }) })), endDate: value.end.date, onChangeEndDate: (value2) => setValue((oldValue) => Object.assign(Object.assign({}, oldValue), { end: Object.assign(Object.assign({}, oldValue.end), { date: value2 }) })), endTime: value.end.time, onChangeEndTime: (value2) => setValue((oldValue) => Object.assign(Object.assign({}, oldValue), { end: Object.assign(Object.assign({}, oldValue.end), { time: value2 }) })), i18nStrings, dateOnly, timeInputFormat }),
        customAbsoluteRangeControl && import_react219.default.createElement("div", null, customAbsoluteRangeControl(value, interceptedSetValue))
      )
    ),
    import_react219.default.createElement(live_region_default, { className: styles_css_default70["calendar-aria-live"] }, announcement)
  );
}

// node_modules/@cloudscape-design/components/date-range-picker/relative-range/index.js
var import_react220 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-range-picker/relative-range/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/date-range-picker/relative-range/styles.scoped.css";
var styles_css_default73 = {
  "custom-range": "awsui_custom-range_16zmw_1bi9d_99",
  "custom-range--no-padding": "awsui_custom-range--no-padding_16zmw_1bi9d_105",
  "custom-range-form-controls": "awsui_custom-range-form-controls_16zmw_1bi9d_109",
  "custom-range-duration": "awsui_custom-range-duration_16zmw_1bi9d_113",
  "custom-range-unit": "awsui_custom-range-unit_16zmw_1bi9d_114",
  "vertical": "awsui_vertical_16zmw_1bi9d_120",
  "custom-range-duration-input": "awsui_custom-range-duration-input_16zmw_1bi9d_131",
  "custom-range-unit-select": "awsui_custom-range-unit-select_16zmw_1bi9d_132",
  "relative-range-radio-group": "awsui_relative-range-radio-group_16zmw_1bi9d_136"
};

// node_modules/@cloudscape-design/components/date-range-picker/relative-range/index.js
var dayUnits = ["day", "week", "month", "year"];
var units = ["second", "minute", "hour", ...dayUnits];
var CUSTOM_OPTION_SELECT_KEY = "awsui-internal-custom-duration-key";
function RelativeRangePicker({ dateOnly, options: clientOptions = [], initialSelection: initialRange, onChange: onChangeRangeSize, i18nStrings, isSingleGrid }) {
  var _a;
  const i18n = useInternalI18n("date-range-picker");
  const formatRelativeRange = i18n("i18nStrings.formatRelativeRange", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.formatRelativeRange, (format3) => ({ amount, unit: unit2 }) => format3({ amount, unit: unit2 }));
  const formatUnit = i18n("i18nStrings.formatUnit", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.formatUnit, (format3) => (unit2, amount) => format3({ amount, unit: unit2 }));
  const radioOptions = clientOptions.map((option) => ({
    value: option.key,
    label: formatRelativeRange === null || formatRelativeRange === void 0 ? void 0 : formatRelativeRange(option)
  }));
  radioOptions.push({
    value: CUSTOM_OPTION_SELECT_KEY,
    label: i18n("i18nStrings.customRelativeRangeOptionLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.customRelativeRangeOptionLabel),
    description: i18n("i18nStrings.customRelativeRangeOptionDescription", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.customRelativeRangeOptionDescription)
  });
  const [selectedRadio, setSelectedRadio] = (0, import_react220.useState)(() => {
    var _a2;
    if (initialRange && !initialRange.key) {
      return CUSTOM_OPTION_SELECT_KEY;
    }
    return (_a2 = initialRange === null || initialRange === void 0 ? void 0 : initialRange.key) !== null && _a2 !== void 0 ? _a2 : null;
  });
  const [customDuration, setCustomDuration] = (0, import_react220.useState)(() => {
    if (initialRange) {
      return initialRange.amount;
    }
    return NaN;
  });
  const initialCustomTimeUnit = dateOnly ? "day" : "minute";
  const [customUnitOfTime, setCustomUnitOfTime] = (0, import_react220.useState)((_a = initialRange === null || initialRange === void 0 ? void 0 : initialRange.unit) !== null && _a !== void 0 ? _a : initialCustomTimeUnit);
  const showRadioControl = clientOptions.length > 0;
  const showCustomControls = clientOptions.length === 0 || selectedRadio === CUSTOM_OPTION_SELECT_KEY;
  return import_react220.default.createElement(
    "div",
    null,
    import_react220.default.createElement(
      InternalSpaceBetween,
      { size: "xs", direction: "vertical" },
      showRadioControl && import_react220.default.createElement(
        InternalFormField,
        { label: i18n("i18nStrings.relativeRangeSelectionHeading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.relativeRangeSelectionHeading) },
        import_react220.default.createElement(internal_default13, { className: styles_css_default73["relative-range-radio-group"], onChange: ({ detail }) => {
          setSelectedRadio(detail.value);
          if (detail.value === CUSTOM_OPTION_SELECT_KEY) {
            setCustomDuration(NaN);
            setCustomUnitOfTime(initialCustomTimeUnit);
            onChangeRangeSize({
              amount: NaN,
              unit: initialCustomTimeUnit,
              type: "relative"
            });
          } else {
            const option = clientOptions.filter((o) => o.key === detail.value)[0];
            onChangeRangeSize(option);
          }
        }, value: selectedRadio, items: radioOptions })
      ),
      showCustomControls && import_react220.default.createElement(
        InternalSpaceBetween,
        { direction: "vertical", size: "xs" },
        !showRadioControl && import_react220.default.createElement(InternalBox, { fontSize: "body-m", color: "text-body-secondary" }, i18n("i18nStrings.customRelativeRangeOptionDescription", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.customRelativeRangeOptionDescription)),
        import_react220.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default73["custom-range"], {
            [styles_css_default73["custom-range--no-padding"]]: !showRadioControl
          }) },
          import_react220.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default73["custom-range-form-controls"], {
              [styles_css_default73.vertical]: isSingleGrid
            }) },
            import_react220.default.createElement(
              "div",
              { className: styles_css_default73["custom-range-duration"] },
              import_react220.default.createElement(
                InternalFormField,
                { label: i18n("i18nStrings.customRelativeRangeDurationLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.customRelativeRangeDurationLabel) },
                import_react220.default.createElement(internal_default4, { type: "number", className: styles_css_default73["custom-range-duration-input"], value: isNaN(customDuration) || customDuration === 0 ? "" : customDuration === null || customDuration === void 0 ? void 0 : customDuration.toString(), onChange: (e) => {
                  const amount = Number(e.detail.value);
                  setCustomDuration(amount);
                  onChangeRangeSize({ amount, unit: customUnitOfTime, type: "relative" });
                }, placeholder: i18n("i18nStrings.customRelativeRangeDurationPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.customRelativeRangeDurationPlaceholder), __inheritFormFieldProps: true })
              )
            ),
            import_react220.default.createElement(
              "div",
              { className: styles_css_default73["custom-range-unit"] },
              import_react220.default.createElement(
                InternalFormField,
                { label: i18n("i18nStrings.customRelativeRangeUnitLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.customRelativeRangeUnitLabel) },
                import_react220.default.createElement(internal_default5, { className: styles_css_default73["custom-range-unit-select"], selectedOption: {
                  value: customUnitOfTime,
                  label: formatUnit === null || formatUnit === void 0 ? void 0 : formatUnit(customUnitOfTime, customDuration)
                }, onChange: (e) => {
                  const { value: unit2 } = e.detail.selectedOption;
                  setCustomUnitOfTime(unit2);
                  onChangeRangeSize({ amount: customDuration, unit: unit2, type: "relative" });
                }, options: (dateOnly ? dayUnits : units).map((unit2) => ({
                  value: unit2,
                  label: formatUnit === null || formatUnit === void 0 ? void 0 : formatUnit(unit2, customDuration)
                })), renderHighlightedAriaLive: (option) => option.label || option.value || "" })
              )
            )
          )
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/date-range-picker/mode-switcher.js
var import_react224 = __toESM(require_react());

// node_modules/@cloudscape-design/components/segmented-control/internal.js
var import_react223 = __toESM(require_react());

// node_modules/@cloudscape-design/components/segmented-control/internal-segmented-control.js
var import_react222 = __toESM(require_react());

// node_modules/@cloudscape-design/components/segmented-control/segment.js
var import_react221 = __toESM(require_react());

// node_modules/@cloudscape-design/components/segmented-control/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/segmented-control/styles.scoped.css";
var styles_css_default74 = {
  "segment": "awsui_segment_8cbea_97spt_103",
  "disabled": "awsui_disabled_8cbea_97spt_183",
  "selected": "awsui_selected_8cbea_97spt_191",
  "icon": "awsui_icon_8cbea_97spt_212",
  "with-text": "awsui_with-text_8cbea_97spt_216",
  "with-no-text": "awsui_with-no-text_8cbea_97spt_222",
  "root": "awsui_root_8cbea_97spt_231",
  "segment-part": "awsui_segment-part_8cbea_97spt_266",
  "select": "awsui_select_8cbea_97spt_191",
  "segment-count-2": "awsui_segment-count-2_8cbea_97spt_285",
  "segment-count-3": "awsui_segment-count-3_8cbea_97spt_290",
  "segment-count-4": "awsui_segment-count-4_8cbea_97spt_295",
  "segment-count-5": "awsui_segment-count-5_8cbea_97spt_300",
  "segment-count-6": "awsui_segment-count-6_8cbea_97spt_305"
};

// node_modules/@cloudscape-design/components/segmented-control/segment.js
var Segment = import_react221.default.forwardRef(({ disabled, text, iconName, iconAlt, iconUrl, iconSvg, isActive, onClick, onKeyDown, tabIndex }, ref) => {
  return import_react221.default.createElement(
    "button",
    { className: clsx_m_default(styles_css_default74.segment, { [styles_css_default74.disabled]: !!disabled }, { [styles_css_default74.selected]: isActive }), ref, onClick, onKeyDown, disabled, type: "button", tabIndex, "aria-pressed": isActive ? "true" : "false", "aria-label": !text ? iconAlt : void 0 },
    (iconName || iconUrl || iconSvg) && import_react221.default.createElement(internal_default, { className: clsx_m_default(styles_css_default74.icon, text ? styles_css_default74["with-text"] : styles_css_default74["with-no-text"]), name: iconName, url: iconUrl, svg: iconSvg, alt: iconAlt, variant: disabled ? "disabled" : "normal" }),
    import_react221.default.createElement("span", null, text)
  );
});

// node_modules/@cloudscape-design/components/segmented-control/internal-segmented-control.js
function InternalSegmentedControl({ selectedId, options, label, ariaLabelledby, onChange }) {
  const segmentByIdRef = (0, import_react222.useRef)({});
  const selectedOptions = (options || []).filter((option) => {
    return option.id === selectedId;
  });
  const currentSelectedOption = selectedOptions.length ? selectedOptions[0] : null;
  const enabledSegments = (options || []).filter((option) => !option.disabled);
  const moveHighlight2 = (event, activeIndex) => {
    var _a;
    if (event.keyCode !== KeyCode.right && event.keyCode !== KeyCode.left) {
      return;
    }
    let nextIndex = activeIndex;
    handleKey(event, {
      onInlineStart: () => nextIndex = activeIndex === 0 ? enabledSegments.length - 1 : activeIndex - 1,
      onInlineEnd: () => nextIndex = activeIndex + 1 === enabledSegments.length ? 0 : activeIndex + 1
    });
    const nextSegmentId = enabledSegments[nextIndex].id;
    (_a = segmentByIdRef.current[nextSegmentId]) === null || _a === void 0 ? void 0 : _a.focus();
  };
  return import_react222.default.createElement("div", { className: clsx_m_default(styles_css_default74["segment-part"], styles_css_default74[`segment-count-${options === null || options === void 0 ? void 0 : options.length}`]), "aria-label": label, "aria-labelledby": ariaLabelledby, role: "toolbar" }, options && options.map((option, index) => {
    const isActive = selectedId === option.id;
    const enabledSegmentIndex = enabledSegments.indexOf(option);
    let tabIndex = isActive ? 0 : -1;
    if (currentSelectedOption === null && enabledSegmentIndex === 0) {
      tabIndex = 0;
    }
    return import_react222.default.createElement(Segment, { key: index, id: option.id, disabled: !!option.disabled, iconName: option.iconName, iconAlt: option.iconAlt, iconUrl: option.iconUrl, iconSvg: option.iconSvg, text: option.text, isActive, tabIndex, ref: (node) => {
      if (node) {
        segmentByIdRef.current[option.id] = node;
      } else {
        delete segmentByIdRef.current[option.id];
      }
    }, onClick: () => {
      if (selectedId !== option.id) {
        fireNonCancelableEvent(onChange, { selectedId: option.id });
      }
    }, onKeyDown: (event) => moveHighlight2(event, enabledSegmentIndex) });
  }));
}

// node_modules/@cloudscape-design/components/segmented-control/internal.js
function InternalSegmentedControl2(_a) {
  var { selectedId, options, label, ariaLabelledby, onChange, __internalRootRef = null } = _a, props = __rest(_a, ["selectedId", "options", "label", "ariaLabelledby", "onChange", "__internalRootRef"]);
  const baseProps = getBaseProps(props);
  const selectOptions = (options || []).map((option) => {
    const label2 = option.text || option.iconAlt;
    return Object.assign(Object.assign({}, option), { label: label2, value: option.id });
  });
  const selectedOptions = selectOptions.filter((option) => {
    return option.value === selectedId;
  });
  const currentSelectedOption = selectedOptions.length ? selectedOptions[0] : null;
  const selectProps = {
    options: selectOptions,
    selectedOption: currentSelectedOption,
    triggerVariant: "option",
    onChange: (event) => fireNonCancelableEvent(onChange, { selectedId: event.detail.selectedOption.value })
  };
  return import_react223.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default74.root), ref: __internalRootRef }),
    import_react223.default.createElement(InternalSegmentedControl, { selectedId, options, label, ariaLabelledby, onChange }),
    import_react223.default.createElement(
      "div",
      { className: styles_css_default74.select },
      ariaLabelledby && import_react223.default.createElement(internal_default5, Object.assign({}, selectProps, { ariaLabelledby })),
      !ariaLabelledby && label && import_react223.default.createElement(
        InternalFormField,
        { label, stretch: true },
        import_react223.default.createElement(internal_default5, Object.assign({}, selectProps))
      ),
      !ariaLabelledby && !label && import_react223.default.createElement(internal_default5, Object.assign({}, selectProps))
    )
  );
}

// node_modules/@cloudscape-design/components/date-range-picker/mode-switcher.js
function ModeSwitcher({ i18nStrings, mode, onChange }) {
  const i18n = useInternalI18n("date-range-picker");
  return import_react224.default.createElement(InternalSegmentedControl2, { className: styles_css_default70["mode-switch"], selectedId: mode, label: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modeSelectionLabel, options: [
    { id: "relative", text: i18n("i18nStrings.relativeModeTitle", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.relativeModeTitle) },
    { id: "absolute", text: i18n("i18nStrings.absoluteModeTitle", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.absoluteModeTitle) }
  ], onChange: (e) => onChange(e.detail.selectedId) });
}

// node_modules/@cloudscape-design/components/date-range-picker/time-offset.js
function setTimeOffset(value, timeOffset) {
  if (!((value === null || value === void 0 ? void 0 : value.type) === "absolute")) {
    return value;
  }
  return {
    type: "absolute",
    startDate: value.startDate + formatTimeOffsetISO(value.startDate, timeOffset.startDate),
    endDate: value.endDate + formatTimeOffsetISO(value.endDate, timeOffset.endDate)
  };
}
function shiftTimeOffset(value, timeOffset) {
  if (!value || value.type !== "absolute") {
    return value;
  }
  const dateTimeRegex = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}(:\d{2})?(\.\d{1,3})?(((\+|-)\d{2}(:\d{2})?)|Z)?$/;
  if (!dateTimeRegex.test(value.startDate) || !dateTimeRegex.test(value.endDate)) {
    warnOnce("DateRangePicker", "You have provided a misformatted start or end date. The component will fall back to an empty value. Dates have to be ISO8601-formatted with an optional time zone offset.");
    return null;
  }
  return {
    type: "absolute",
    startDate: shiftTimezoneOffset(value.startDate, timeOffset.startDate),
    endDate: shiftTimezoneOffset(value.endDate, timeOffset.endDate)
  };
}
function normalizeTimeOffset(value, getTimeOffset, timeOffset) {
  if (value && value.type === "absolute") {
    if (getTimeOffset) {
      return {
        startDate: getTimeOffset(parseDateUTC(value.startDate)),
        endDate: getTimeOffset(parseDateUTC(value.endDate))
      };
    } else if (timeOffset !== void 0) {
      return { startDate: timeOffset, endDate: timeOffset };
    }
  }
  return { startDate: void 0, endDate: void 0 };
}
function parseDateUTC(isoDateString) {
  const date2 = new Date(isoDateString);
  return addMinutes(date2, parseTimezoneOffset(isoDateString));
}

// node_modules/@cloudscape-design/components/date-range-picker/utils.js
function formatValue(value, { timeOffset, dateOnly }) {
  if (!value || value.type === "relative") {
    return value;
  }
  if (dateOnly) {
    return {
      type: "absolute",
      startDate: value.startDate.split("T")[0],
      endDate: value.endDate.split("T")[0]
    };
  }
  return setTimeOffset(value, timeOffset);
}
function getDefaultMode(value, relativeOptions, rangeSelectorMode) {
  if (value && value.type) {
    return value.type;
  }
  if (rangeSelectorMode === "relative-only") {
    return "relative";
  }
  if (rangeSelectorMode === "absolute-only") {
    return "absolute";
  }
  return relativeOptions.length > 0 ? "relative" : "absolute";
}
function splitAbsoluteValue(value) {
  if (!value) {
    return {
      start: { date: "", time: "" },
      end: { date: "", time: "" }
    };
  }
  return { start: splitDateTime(value.startDate), end: splitDateTime(value.endDate) };
}
function joinAbsoluteValue(value) {
  const startTime = normalizeTimeString(value.start.time || "00:00:00");
  const endTime = normalizeTimeString(value.end.time || "23:59:59");
  return {
    type: "absolute",
    startDate: joinDateTime(value.start.date, startTime),
    endDate: joinDateTime(value.end.date, endTime)
  };
}

// node_modules/@cloudscape-design/components/date-range-picker/dropdown.js
var VALID_RANGE = { valid: true };
function DateRangePickerDropdown({ locale: locale2 = "", startOfWeek: startOfWeek2, isDateEnabled, isValidRange, value, onClear: clearValue, onApply: applyValue, onDropdownClose, relativeOptions, showClearButton, isSingleGrid, i18nStrings, dateOnly, timeInputFormat, rangeSelectorMode, ariaLabelledby, ariaDescribedby, customAbsoluteRangeControl }) {
  const i18n = useInternalI18n("date-range-picker");
  const [rangeSelectionMode, setRangeSelectionMode] = (0, import_react225.useState)(getDefaultMode(value, relativeOptions, rangeSelectorMode));
  const [selectedAbsoluteRange, setSelectedAbsoluteRange] = (0, import_react225.useState)(() => splitAbsoluteValue((value === null || value === void 0 ? void 0 : value.type) === "absolute" ? value : null));
  const [selectedRelativeRange, setSelectedRelativeRange] = (0, import_react225.useState)((value === null || value === void 0 ? void 0 : value.type) === "relative" ? value : null);
  const scrollableContainerRef = (0, import_react225.useRef)(null);
  const applyButtonRef = (0, import_react225.useRef)(null);
  const [applyClicked, setApplyClicked] = (0, import_react225.useState)(false);
  const [validationResult, setValidationResult] = (0, import_react225.useState)(VALID_RANGE);
  const closeDropdown = () => {
    setApplyClicked(false);
    onDropdownClose();
  };
  const onClear = () => {
    closeDropdown();
    clearValue();
  };
  const onApply = () => {
    const newValue = rangeSelectionMode === "relative" ? selectedRelativeRange : joinAbsoluteValue(selectedAbsoluteRange);
    const newValidationResult = applyValue(newValue);
    if (newValidationResult.valid === false) {
      setApplyClicked(true);
      setValidationResult(newValidationResult);
    } else {
      setApplyClicked(false);
      closeDropdown();
    }
  };
  (0, import_react225.useEffect)(() => {
    if (applyClicked) {
      const visibleRange = rangeSelectionMode === "relative" ? selectedRelativeRange : joinAbsoluteValue(selectedAbsoluteRange);
      const newValidationResult = isValidRange(visibleRange);
      setValidationResult(newValidationResult || VALID_RANGE);
    }
  }, [
    applyClicked,
    isValidRange,
    rangeSelectionMode,
    selectedRelativeRange,
    selectedAbsoluteRange,
    setValidationResult
  ]);
  (0, import_react225.useEffect)(() => {
    var _a;
    return (_a = scrollableContainerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
  }, [scrollableContainerRef]);
  return import_react225.default.createElement(
    import_react225.default.Fragment,
    null,
    import_react225.default.createElement(
      focus_lock_default,
      { className: styles_css_default70["focus-lock"], autoFocus: true },
      import_react225.default.createElement(
        "div",
        { ref: scrollableContainerRef, className: styles_css_default70.dropdown, tabIndex: 0, role: "dialog", "aria-modal": "true", "aria-label": i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaLabel, "aria-labelledby": ariaLabelledby !== null && ariaLabelledby !== void 0 ? ariaLabelledby : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaLabelledby, "aria-describedby": ariaDescribedby !== null && ariaDescribedby !== void 0 ? ariaDescribedby : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaDescribedby },
        import_react225.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default70["dropdown-content"], {
            [styles_css_default70["one-grid"]]: isSingleGrid
          }) },
          import_react225.default.createElement(
            InternalSpaceBetween,
            { size: "l" },
            import_react225.default.createElement(
              InternalBox,
              { padding: { top: "m", horizontal: "l" } },
              import_react225.default.createElement(
                InternalSpaceBetween,
                { direction: "vertical", size: "s" },
                rangeSelectorMode === "default" && import_react225.default.createElement(ModeSwitcher, { mode: rangeSelectionMode, onChange: (mode) => {
                  setRangeSelectionMode(mode);
                  setApplyClicked(false);
                  setValidationResult(VALID_RANGE);
                }, i18nStrings }),
                rangeSelectionMode === "absolute" && import_react225.default.createElement(DateRangePickerCalendar, { value: selectedAbsoluteRange, setValue: setSelectedAbsoluteRange, locale: locale2, startOfWeek: startOfWeek2, isDateEnabled, i18nStrings, dateOnly, timeInputFormat, customAbsoluteRangeControl }),
                rangeSelectionMode === "relative" && import_react225.default.createElement(RelativeRangePicker, { isSingleGrid, options: relativeOptions, dateOnly, initialSelection: selectedRelativeRange, onChange: (range3) => setSelectedRelativeRange(range3), i18nStrings })
              ),
              import_react225.default.createElement(InternalBox, { className: styles_css_default70["validation-section"], margin: !validationResult.valid ? { top: "s" } : void 0 }, !validationResult.valid && import_react225.default.createElement(
                import_react225.default.Fragment,
                null,
                import_react225.default.createElement(
                  internal_default6,
                  { type: "error", statusIconAriaLabel: i18n("i18nStrings.errorIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel) },
                  import_react225.default.createElement("span", { className: styles_css_default70["validation-error"] }, validationResult.errorMessage)
                ),
                import_react225.default.createElement(live_region_default, null, validationResult.errorMessage)
              ))
            ),
            import_react225.default.createElement(
              "div",
              { className: clsx_m_default(styles_css_default70.footer, {
                [styles_css_default70["one-grid"]]: isSingleGrid,
                [styles_css_default70["has-clear-button"]]: showClearButton
              }) },
              showClearButton && import_react225.default.createElement(
                "div",
                { className: styles_css_default70["footer-button-wrapper"] },
                import_react225.default.createElement(InternalButton, { onClick: onClear, className: styles_css_default70["clear-button"], variant: "link", formAction: "none" }, i18n("i18nStrings.clearButtonLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.clearButtonLabel))
              ),
              import_react225.default.createElement(
                "div",
                { className: styles_css_default70["footer-button-wrapper"] },
                import_react225.default.createElement(
                  InternalSpaceBetween,
                  { size: "xs", direction: "horizontal" },
                  import_react225.default.createElement(InternalButton, { onClick: closeDropdown, className: styles_css_default70["cancel-button"], variant: "link", formAction: "none" }, i18n("i18nStrings.cancelButtonLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.cancelButtonLabel)),
                  import_react225.default.createElement(InternalButton, { onClick: onApply, className: styles_css_default70["apply-button"], ref: applyButtonRef, formAction: "none" }, i18n("i18nStrings.applyButtonLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.applyButtonLabel))
                )
              )
            )
          )
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/date-range-picker/index.js
function renderDateRange({ locale: locale2, range: range3, placeholder = "", formatRelativeRange, absoluteFormat, hideTimeOffset, timeOffset }) {
  var _a;
  if (!range3) {
    return import_react226.default.createElement("span", { className: styles_css_default70["label-text"], "aria-disabled": true }, placeholder);
  }
  const formatted = range3.type === "relative" ? (_a = formatRelativeRange === null || formatRelativeRange === void 0 ? void 0 : formatRelativeRange(range3)) !== null && _a !== void 0 ? _a : "" : import_react226.default.createElement(BreakSpaces, { text: formatDateRange({
    startDate: range3.startDate,
    endDate: range3.endDate,
    timeOffset,
    hideTimeOffset,
    format: absoluteFormat,
    locale: locale2
  }) });
  return import_react226.default.createElement(InternalBox, { fontWeight: "normal", display: "inline", color: "inherit", variant: "span" }, formatted);
}
function BreakSpaces({ text }) {
  const tokens = text.split(/( )/);
  return import_react226.default.createElement(import_react226.default.Fragment, null, tokens.map((token, index) => import_react226.default.createElement(
    import_react226.default.Fragment,
    { key: index },
    token.length > 1 ? import_react226.default.createElement("span", { className: styles_css_default70["label-token-nowrap"] }, token) : token,
    token === " " && import_react226.default.createElement("wbr", null)
  )));
}
function isDateOnly(value) {
  if (!value || value.type !== "absolute") {
    return false;
  }
  return isIsoDateOnly(value.startDate) && isIsoDateOnly(value.endDate);
}
var DateRangePicker = import_react226.default.forwardRef((_a, ref) => {
  var _b, _c;
  var { locale: locale2 = "", startOfWeek: startOfWeek2, isDateEnabled = () => true, value, placeholder, readOnly = false, disabled = false, onChange, onBlur, onFocus, relativeOptions = [], i18nStrings, isValidRange = () => ({ valid: true }), showClearButton = true, dateOnly = false, timeOffset, getTimeOffset, timeInputFormat = "hh:mm:ss", expandToViewport = false, rangeSelectorMode = "default", customAbsoluteRangeControl, absoluteFormat = "iso", hideTimeOffset } = _a, rest = __rest(_a, ["locale", "startOfWeek", "isDateEnabled", "value", "placeholder", "readOnly", "disabled", "onChange", "onBlur", "onFocus", "relativeOptions", "i18nStrings", "isValidRange", "showClearButton", "dateOnly", "timeOffset", "getTimeOffset", "timeInputFormat", "expandToViewport", "rangeSelectorMode", "customAbsoluteRangeControl", "absoluteFormat", "hideTimeOffset"]);
  const { __internalRootRef } = useBaseComponent("DateRangePicker", {
    props: {
      absoluteFormat,
      dateOnly,
      expandToViewport,
      rangeSelectorMode,
      readOnly,
      showClearButton,
      timeInputFormat
    }
  });
  checkControlled("DateRangePicker", "value", value, "onChange", onChange);
  const normalizedTimeOffset = normalizeTimeOffset(value, getTimeOffset, timeOffset);
  value = isDateOnly(value) ? value : shiftTimeOffset(value, normalizedTimeOffset);
  const baseProps = getBaseProps(rest);
  const { invalid, controlId, ariaDescribedby, ariaLabelledby } = useFormFieldContext(Object.assign({ ariaLabelledby: (_b = rest.ariaLabelledby) !== null && _b !== void 0 ? _b : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaLabelledby, ariaDescribedby: (_c = rest.ariaDescribedby) !== null && _c !== void 0 ? _c : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaDescribedby }, rest));
  const isSingleGrid = useMobile();
  const triggerRef = (0, import_react226.useRef)(null);
  useForwardFocus(ref, triggerRef);
  const rootRef = (0, import_react226.useRef)(null);
  const dropdownId = useUniqueId("date-range-picker-dropdown");
  const triggerContentId = useUniqueId("date-range-picker-trigger");
  useFocusTracker({ rootRef, onBlur, onFocus });
  const [isDropDownOpen, setIsDropDownOpen] = (0, import_react226.useState)(false);
  const normalizedLocale = normalizeLocale("DateRangePicker", locale2);
  const closeDropdown = (focusTrigger = false) => {
    var _a2;
    setIsDropDownOpen(false);
    if (focusTrigger) {
      (_a2 = triggerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  };
  const onWrapperKeyDownHandler = (event) => {
    if (event.keyCode === KeyCode.escape) {
      if (isDropDownOpen) {
        event.stopPropagation();
      }
      closeDropdown(true);
    }
  };
  const onClear = () => {
    fireNonCancelableEvent(onChange, { value: null });
  };
  const onApply = (newValue) => {
    const validationResult = isValidRange(newValue);
    if ((validationResult === null || validationResult === void 0 ? void 0 : validationResult.valid) === false) {
      return validationResult;
    }
    if (isDevelopment) {
      if ((newValue === null || newValue === void 0 ? void 0 : newValue.type) === "absolute") {
        const [startDateWithoutTime] = newValue.startDate.split("T");
        const [endDateWithoutTime] = newValue.endDate.split("T");
        if (!startDateWithoutTime || !endDateWithoutTime) {
          warnOnce("DateRangePicker", "You have provided an `isValidRange` prop that did not catch a missing start or end date.");
        }
      }
    }
    fireNonCancelableEvent(onChange, {
      value: formatValue(newValue, {
        dateOnly,
        timeOffset: normalizeTimeOffset(newValue, getTimeOffset, timeOffset)
      })
    });
    return validationResult || { valid: true };
  };
  const prevDateOnly = usePrevious(dateOnly);
  (0, import_react226.useEffect)(() => {
    if (prevDateOnly !== void 0 && prevDateOnly !== dateOnly) {
      warnOnce("DateRangePicker", `The provided \`dateOnly\` flag has been changed from "${prevDateOnly}" to "${dateOnly}" which can lead to unexpected value format. Consider using separate components.`);
    }
  }, [prevDateOnly, dateOnly]);
  if (value && value.type !== "absolute" && value.type !== "relative") {
    warnOnce("DateRangePicker", "You provided an invalid value. Reverting back to default.");
    value = null;
  }
  if ((value === null || value === void 0 ? void 0 : value.type) === "absolute" && rangeSelectorMode === "relative-only" || (value === null || value === void 0 ? void 0 : value.type) === "relative" && rangeSelectorMode === "absolute-only") {
    warnOnce("DateRangePicker", "The provided value does not correspond to the current range selector mode. Reverting back to default.");
    value = null;
  }
  const i18n = useInternalI18n("date-range-picker");
  const formatRelativeRange = i18n("i18nStrings.formatRelativeRange", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.formatRelativeRange, (format3) => ({ amount, unit: unit2 }) => format3({ amount, unit: unit2 }));
  if (isDevelopment) {
    if (!formatRelativeRange && rangeSelectorMode !== "absolute-only") {
      warnOnce("DateRangePicker", "A function for i18nStrings.formatRelativeRange was not provided. Relative ranges will not be correctly rendered.");
    }
  }
  const formattedDate = renderDateRange({
    locale: normalizedLocale,
    range: value,
    placeholder,
    formatRelativeRange,
    absoluteFormat,
    hideTimeOffset,
    timeOffset: normalizedTimeOffset
  });
  const trigger = import_react226.default.createElement(
    "div",
    { className: styles_css_default70["trigger-wrapper"] },
    import_react226.default.createElement(
      button_trigger_default,
      { ref: triggerRef, id: controlId, invalid, ariaLabelledby: joinStrings(ariaLabelledby, triggerContentId), ariaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaLabel, ariaDescribedby, className: clsx_m_default(styles_css_default70.label, {
        [styles_css_default70["label-enabled"]]: !readOnly && !disabled
      }), hideCaret: true, onClick: () => {
        if (!readOnly && !disabled) {
          setIsDropDownOpen(true);
        }
      }, disabled, readOnly, ariaHasPopup: "dialog" },
      import_react226.default.createElement(
        "span",
        { className: styles_css_default70["trigger-flexbox"] },
        import_react226.default.createElement(
          "span",
          { className: styles_css_default70["icon-wrapper"] },
          import_react226.default.createElement(internal_default, { name: "calendar", variant: disabled || readOnly ? "disabled" : "normal" })
        ),
        import_react226.default.createElement("span", { id: triggerContentId }, formattedDate)
      )
    )
  );
  const mergedRef = useMergeRefs(rootRef, __internalRootRef);
  return import_react226.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: mergedRef, className: clsx_m_default(baseProps.className, styles_css_default70.root, absoluteFormat === "long-localized" && !dateOnly && styles_css_default70.wide), onKeyDown: onWrapperKeyDownHandler }),
    import_react226.default.createElement(
      dropdown_default,
      { stretchWidth: true, stretchHeight: true, open: isDropDownOpen, onDropdownClose: () => closeDropdown(), trigger, stretchToTriggerWidth: false, expandToViewport, dropdownId },
      import_react226.default.createElement(reset_contexts_for_modal_default, null, isDropDownOpen && import_react226.default.createElement(DateRangePickerDropdown, { startOfWeek: startOfWeek2, locale: normalizedLocale, isSingleGrid, onDropdownClose: () => closeDropdown(true), value, showClearButton, isDateEnabled, i18nStrings, onClear, onApply, relativeOptions, isValidRange, dateOnly, timeInputFormat, rangeSelectorMode, ariaLabelledby, ariaDescribedby, customAbsoluteRangeControl }))
    )
  );
});
applyDisplayName(DateRangePicker, "DateRangePicker");
var date_range_picker_default = DateRangePicker;

// node_modules/@cloudscape-design/components/drawer/index.js
var import_react227 = __toESM(require_react());

// node_modules/@cloudscape-design/components/drawer/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/drawer/styles.scoped.css";
var styles_css_default75 = {
  "drawer": "awsui_drawer_1sxt8_1oeyq_100",
  "header": "awsui_header_1sxt8_1oeyq_140",
  "test-utils-drawer-content": "awsui_test-utils-drawer-content_1sxt8_1oeyq_169"
};

// node_modules/@cloudscape-design/components/drawer/index.js
function Drawer2(_a) {
  var { header, children, loading, i18nStrings } = _a, restProps = __rest(_a, ["header", "children", "loading", "i18nStrings"]);
  const { __internalRootRef } = useBaseComponent("Drawer");
  const baseProps = getBaseProps(restProps);
  const i18n = useInternalI18n("drawer");
  const containerProps = Object.assign(Object.assign({}, baseProps), { className: clsx_m_default(baseProps.className, styles_css_default75.drawer) });
  return loading ? import_react227.default.createElement(
    "div",
    Object.assign({}, containerProps, { ref: __internalRootRef }),
    import_react227.default.createElement(
      StatusIndicator,
      { type: "loading" },
      import_react227.default.createElement(live_region_default, { visible: true }, i18n("i18nStrings.loadingText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.loadingText))
    )
  ) : import_react227.default.createElement(
    "div",
    Object.assign({}, containerProps, { ref: __internalRootRef }),
    header && import_react227.default.createElement("div", { className: clsx_m_default(styles_css_default75.header) }, header),
    import_react227.default.createElement("div", { className: clsx_m_default(styles_css_default75["test-utils-drawer-content"]) }, children)
  );
}
applyDisplayName(Drawer2, "Drawer");

// node_modules/@cloudscape-design/components/expandable-section/index.js
var import_react228 = __toESM(require_react());
function ExpandableSection(_a) {
  var { variant = "default" } = _a, props = __rest(_a, ["variant"]);
  const baseComponentProps = useBaseComponent("ExpandableSection", {
    props: {
      disableContentPaddings: props.disableContentPaddings,
      headingTagOverride: props.headingTagOverride,
      variant
    }
  });
  return import_react228.default.createElement(InternalExpandableSection, Object.assign({ variant }, props, baseComponentProps));
}
applyDisplayName(ExpandableSection, "ExpandableSection");

// node_modules/@cloudscape-design/components/file-upload/index.js
var import_react234 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-upload/internal.js
var import_react233 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-upload/file-option/index.js
var import_react230 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-upload/file-option/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/file-upload/file-option/styles.scoped.css";
var styles_css_default76 = {
  "file-option-name": "awsui_file-option-name_ezgb4_136jz_9",
  "file-option-size": "awsui_file-option-size_ezgb4_136jz_10",
  "file-option-last-modified": "awsui_file-option-last-modified_ezgb4_136jz_11",
  "file-option-thumbnail": "awsui_file-option-thumbnail_ezgb4_136jz_12",
  "file-option": "awsui_file-option_ezgb4_136jz_9",
  "file-option-thumbnail-image": "awsui_file-option-thumbnail-image_ezgb4_136jz_28",
  "file-option-metadata": "awsui_file-option-metadata_ezgb4_136jz_33"
};

// node_modules/@cloudscape-design/components/file-upload/default-formatters.js
var KB = 1e3;
var MB = Math.pow(1e3, 2);
var GB = Math.pow(1e3, 3);
var TB = Math.pow(1e3, 4);
function formatFileSize(size) {
  if (size < MB) {
    return `${(size / KB).toFixed(2)} KB`;
  }
  if (size < GB) {
    return `${(size / MB).toFixed(2)} MB`;
  }
  if (size < TB) {
    return `${(size / GB).toFixed(2)} GB`;
  }
  return `${(size / TB).toFixed(2)} TB`;
}
function formatFileLastModified(date2) {
  return formatDateTime(date2);
}

// node_modules/@cloudscape-design/components/file-upload/file-option/thumbnail.js
var import_react229 = __toESM(require_react());
function FileOptionThumbnail({ file }) {
  const [imageSrc, setImageSrc] = (0, import_react229.useState)("");
  (0, import_react229.useEffect)(() => {
    if (URL.createObjectURL) {
      const src = URL.createObjectURL(file);
      setImageSrc(src);
      return () => {
        URL.revokeObjectURL(src);
      };
    }
  }, [file]);
  return import_react229.default.createElement(
    "div",
    { className: styles_css_default76["file-option-thumbnail"], "aria-hidden": true },
    import_react229.default.createElement("img", { className: styles_css_default76["file-option-thumbnail-image"], alt: file.name, src: imageSrc })
  );
}

// node_modules/@cloudscape-design/components/file-upload/file-option/index.js
function FileOption({ file, metadata, i18nStrings }) {
  var _a, _b;
  const isImage = file.type.startsWith("image/");
  const formatFileSize2 = (_a = i18nStrings.formatFileSize) !== null && _a !== void 0 ? _a : formatFileSize;
  const formatFileLastModified2 = (_b = i18nStrings.formatFileLastModified) !== null && _b !== void 0 ? _b : formatFileLastModified;
  return import_react230.default.createElement(
    InternalBox,
    { className: styles_css_default76["file-option"] },
    metadata.showFileThumbnail && isImage && import_react230.default.createElement(FileOptionThumbnail, { file }),
    import_react230.default.createElement(
      "div",
      { className: styles_css_default76["file-option-metadata"] },
      import_react230.default.createElement(
        InternalSpaceBetween,
        { direction: "vertical", size: "xxxs" },
        import_react230.default.createElement(InternalBox, { className: styles_css_default76["file-option-name"] }, file.name),
        metadata.showFileSize && file.size ? import_react230.default.createElement(InternalBox, { fontSize: "body-s", color: "text-body-secondary", className: styles_css_default76["file-option-size"] }, formatFileSize2(file.size)) : null,
        metadata.showFileLastModified && file.lastModified ? import_react230.default.createElement(InternalBox, { fontSize: "body-s", color: "text-body-secondary", className: styles_css_default76["file-option-last-modified"] }, formatFileLastModified2(new Date(file.lastModified))) : null
      )
    )
  );
}

// node_modules/@cloudscape-design/components/file-upload/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/file-upload/styles.scoped.css";
var styles_css_default77 = {
  "root": "awsui_root_1ubbm_1iir1_9",
  "hints": "awsui_hints_1ubbm_1iir1_10"
};

// node_modules/@cloudscape-design/components/file-upload/dropzone/index.js
var import_react231 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-upload/dropzone/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/file-upload/dropzone/styles.scoped.css";
var styles_css_default78 = {
  "dropzone": "awsui_dropzone_1fham_1gzts_99",
  "dropzone-hovered": "awsui_dropzone-hovered_1fham_1gzts_115"
};

// node_modules/@cloudscape-design/components/file-upload/dropzone/index.js
function useDropzoneVisible(multiple) {
  const [isDropzoneVisible, setDropzoneVisible] = (0, import_react231.useState)(false);
  (0, import_react231.useEffect)(() => {
    let dragTimer = null;
    const onDocumentDragOver = (event) => {
      var _a, _b;
      event.preventDefault();
      let files = 0;
      for (let item = 0; item < (((_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.items.length) || 0); item++) {
        if (((_b = event.dataTransfer) === null || _b === void 0 ? void 0 : _b.items[item].kind) === "file") {
          files++;
        }
      }
      if (files > 0 && (multiple || files === 1)) {
        setDropzoneVisible(true);
        dragTimer && clearTimeout(dragTimer);
      }
    };
    const onDocumentDragLeave = (event) => {
      event.preventDefault();
      dragTimer = setTimeout(() => setDropzoneVisible(false), 25);
    };
    const onDocumentDrop = (event) => {
      event.preventDefault();
      dragTimer = setTimeout(() => setDropzoneVisible(false), 25);
    };
    document.addEventListener("dragover", onDocumentDragOver, false);
    document.addEventListener("dragleave", onDocumentDragLeave, false);
    document.addEventListener("drop", onDocumentDrop, false);
    return () => {
      dragTimer && clearTimeout(dragTimer);
      document.removeEventListener("dragover", onDocumentDragOver);
      document.removeEventListener("dragleave", onDocumentDragLeave);
      document.removeEventListener("drop", onDocumentDrop);
    };
  }, [multiple]);
  return isDropzoneVisible;
}
function Dropzone({ onChange, children }) {
  const [isDropzoneHovered, setDropzoneHovered] = (0, import_react231.useState)(false);
  const onDragOver = (event) => {
    event.preventDefault();
    if (event.dataTransfer) {
      setDropzoneHovered(true);
      event.dataTransfer.dropEffect = "copy";
    }
  };
  const onDragLeave = (event) => {
    event.preventDefault();
    setDropzoneHovered(false);
    if (event.dataTransfer) {
      event.dataTransfer.dropEffect = "none";
    }
  };
  const onDrop = (event) => {
    event.preventDefault();
    setDropzoneHovered(false);
    onChange(Array.from(event.dataTransfer.files));
  };
  return import_react231.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default78.dropzone, isDropzoneHovered && styles_css_default78["dropzone-hovered"]), onDragOver, onDragLeave, onDrop },
    import_react231.default.createElement(internal_default, { name: "upload" }),
    import_react231.default.createElement("span", null, children)
  );
}

// node_modules/@cloudscape-design/components/file-upload/file-input/index.js
var import_react232 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-upload/file-input/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/file-upload/file-input/styles.scoped.css";
var styles_css_default79 = {
  "upload-button": "awsui_upload-button_4xu1k_lg6er_99",
  "upload-input": "awsui_upload-input_4xu1k_lg6er_100",
  "file-input-container": "awsui_file-input-container_4xu1k_lg6er_104",
  "force-focus-outline": "awsui_force-focus-outline_4xu1k_lg6er_113"
};

// node_modules/@cloudscape-design/components/file-upload/file-input/index.js
var file_input_default = import_react232.default.forwardRef(FileInput);
function FileInput(_a, ref) {
  var _b;
  var { accept, ariaRequired, multiple, value, onChange, children } = _a, restProps = __rest(_a, ["accept", "ariaRequired", "multiple", "value", "onChange", "children"]);
  const uploadInputRef = (0, import_react232.useRef)(null);
  const uploadButtonLabelId = useUniqueId("upload-button-label");
  const formFieldContext = useFormFieldContext(restProps);
  const selfControlId = useUniqueId("upload-input");
  const controlId = (_b = formFieldContext.controlId) !== null && _b !== void 0 ? _b : selfControlId;
  useForwardFocus(ref, uploadInputRef);
  const [isFocused, setIsFocused] = (0, import_react232.useState)(false);
  const onUploadButtonClick = () => {
    var _a2;
    return (_a2 = uploadInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.click();
  };
  const onUploadInputFocus = () => setIsFocused(true);
  const onUploadInputBlur = () => setIsFocused(false);
  const onUploadInputChange = ({ target }) => {
    onChange(target.files ? Array.from(target.files) : []);
  };
  const nativeAttributes = {
    "aria-labelledby": joinStrings(formFieldContext.ariaLabelledby, uploadButtonLabelId),
    "aria-describedby": formFieldContext.ariaDescribedby
  };
  if (formFieldContext.invalid) {
    nativeAttributes["aria-invalid"] = true;
  }
  if (ariaRequired) {
    nativeAttributes["aria-required"] = true;
  }
  (0, import_react232.useEffect)(() => {
    if (window.DataTransfer) {
      const dataTransfer = new DataTransfer();
      for (const file of value) {
        dataTransfer.items.add(file);
      }
      uploadInputRef.current.files = dataTransfer.files;
    }
    if (uploadInputRef.current) {
      uploadInputRef.current.value = "";
    }
  }, [value]);
  return import_react232.default.createElement(
    "div",
    { className: styles_css_default79["file-input-container"] },
    import_react232.default.createElement("input", Object.assign({ id: controlId, ref: uploadInputRef, type: "file", hidden: false, multiple, accept, onChange: onUploadInputChange, onFocus: onUploadInputFocus, onBlur: onUploadInputBlur, className: styles_css_default79["upload-input"] }, nativeAttributes)),
    import_react232.default.createElement(internal_default2, { iconName: "upload", formAction: "none", onClick: onUploadButtonClick, className: clsx_m_default(styles_css_default79["upload-button"], isFocused && styles_css_default79["force-focus-outline"]), __nativeAttributes: { tabIndex: -1, "aria-hidden": true } }, children),
    import_react232.default.createElement(ScreenreaderOnly, { id: uploadButtonLabelId }, children)
  );
}

// node_modules/@cloudscape-design/components/file-upload/internal.js
var internal_default18 = import_react233.default.forwardRef(InternalFileUpload);
function InternalFileUpload(_a, externalRef) {
  var _b;
  var { accept, ariaRequired, multiple = false, onChange, value, tokenLimit, showFileSize, showFileLastModified, showFileThumbnail, i18nStrings, __internalRootRef = null, constraintText, errorText, fileErrors } = _a, restProps = __rest(_a, ["accept", "ariaRequired", "multiple", "onChange", "value", "tokenLimit", "showFileSize", "showFileLastModified", "showFileThumbnail", "i18nStrings", "__internalRootRef", "constraintText", "errorText", "fileErrors"]);
  const baseProps = getBaseProps(restProps);
  const metadata = { showFileSize, showFileLastModified, showFileThumbnail };
  const errorId = useUniqueId("error-");
  const constraintTextId = useUniqueId("constraint-text-");
  const fileInputRef = (0, import_react233.useRef)(null);
  const ref = useMergeRefs(fileInputRef, externalRef);
  const [removedFileIndex, setRemovedFileIndex] = (0, import_react233.useState)(null);
  checkControlled("FileUpload", "value", value, "onChange", onChange);
  if (!multiple && value.length > 1) {
    warnOnce("FileUpload", "Value must be an array of size 0 or 1 when `multiple=false`.");
  }
  const handleFilesChange = (newFiles) => {
    const newValue = multiple ? [...value, ...newFiles] : newFiles[0] ? newFiles : [...value];
    fireNonCancelableEvent(onChange, { value: newValue });
  };
  const onFileRemove = (removeFileIndex) => {
    var _a2;
    const newValue = value.filter((_, fileIndex) => fileIndex !== removeFileIndex);
    fireNonCancelableEvent(onChange, { value: newValue });
    setRemovedFileIndex(removeFileIndex);
    if (value.length === 1) {
      (_a2 = fileInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  };
  const isDropzoneVisible = useDropzoneVisible(multiple);
  const formFieldContext = useFormFieldContext(restProps);
  const ariaDescribedBy = joinStrings((_b = restProps.ariaDescribedby) !== null && _b !== void 0 ? _b : formFieldContext.ariaDescribedby, errorText ? errorId : void 0, constraintText ? constraintTextId : void 0);
  const hasError = Boolean(errorText || (fileErrors === null || fileErrors === void 0 ? void 0 : fileErrors.filter(Boolean).length));
  const invalid = restProps.invalid || formFieldContext.invalid || hasError;
  return import_react233.default.createElement(
    InternalSpaceBetween,
    Object.assign({}, baseProps, { size: "xs", className: clsx_m_default(baseProps.className, styles_css_default77.root), __internalRootRef }),
    import_react233.default.createElement(
      InternalBox,
      null,
      isDropzoneVisible ? import_react233.default.createElement(Dropzone, { onChange: handleFilesChange }, i18nStrings.dropzoneText(multiple)) : import_react233.default.createElement(file_input_default, Object.assign({ ref, accept, ariaRequired, multiple, onChange: handleFilesChange, value }, restProps, { ariaDescribedby: ariaDescribedBy, invalid }), i18nStrings.uploadButtonText(multiple)),
      (constraintText || errorText) && import_react233.default.createElement(
        "div",
        { className: styles_css_default77.hints },
        errorText && import_react233.default.createElement(FormFieldError, { id: errorId, errorIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel }, errorText),
        constraintText && import_react233.default.createElement(ConstraintText, { id: constraintTextId, hasError: !!errorText }, constraintText)
      )
    ),
    !multiple && value.length > 0 ? import_react233.default.createElement(
      InternalBox,
      null,
      import_react233.default.createElement(
        Token,
        { ariaLabel: value[0].name, dismissLabel: i18nStrings.removeFileAriaLabel(0), onDismiss: () => onFileRemove(0), errorText: fileErrors === null || fileErrors === void 0 ? void 0 : fileErrors[0], errorIconAriaLabel: i18nStrings.errorIconAriaLabel, "data-index": 0 },
        import_react233.default.createElement(FileOption, { file: value[0], metadata, i18nStrings })
      )
    ) : null,
    multiple && value.length > 0 ? import_react233.default.createElement(
      InternalBox,
      null,
      import_react233.default.createElement(TokenList, { alignment: "vertical", items: value, renderItem: (file, fileIndex) => import_react233.default.createElement(
        Token,
        { ariaLabel: file.name, dismissLabel: i18nStrings.removeFileAriaLabel(fileIndex), onDismiss: () => onFileRemove(fileIndex), errorText: fileErrors === null || fileErrors === void 0 ? void 0 : fileErrors[fileIndex], errorIconAriaLabel: i18nStrings.errorIconAriaLabel, "data-index": fileIndex },
        import_react233.default.createElement(FileOption, { file, metadata, i18nStrings })
      ), limit: tokenLimit, i18nStrings: {
        limitShowFewer: i18nStrings.limitShowFewer,
        limitShowMore: i18nStrings.limitShowMore
      }, moveFocusNextToIndex: removedFileIndex })
    ) : null
  );
}

// node_modules/@cloudscape-design/components/file-upload/index.js
var FileUpload = import_react234.default.forwardRef((_a, ref) => {
  var { multiple, showFileSize, showFileLastModified, showFileThumbnail } = _a, restProps = __rest(_a, ["multiple", "showFileSize", "showFileLastModified", "showFileThumbnail"]);
  const baseComponentProps = useBaseComponent("FileUpload", {
    props: { multiple, showFileLastModified, showFileSize, showFileThumbnail, tokenLimit: restProps.tokenLimit }
  });
  const externalProps = getExternalProps(restProps);
  return import_react234.default.createElement(internal_default18, Object.assign({ ref, multiple, showFileSize, showFileLastModified, showFileThumbnail }, externalProps, baseComponentProps));
});
applyDisplayName(FileUpload, "FileUpload");
var file_upload_default = FileUpload;

// node_modules/@cloudscape-design/components/flashbar/index.js
var import_react239 = __toESM(require_react());

// node_modules/@cloudscape-design/components/flashbar/collapsible-flashbar.js
var import_react237 = __toESM(require_react());

// node_modules/@cloudscape-design/components/flashbar/flash.js
var import_react235 = __toESM(require_react());

// node_modules/@cloudscape-design/components/flashbar/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/flashbar/styles.scoped.css";
var styles_css_default80 = {
  "flash-with-motion": "awsui_flash-with-motion_1q84n_pgrle_99",
  "enter": "awsui_enter_1q84n_pgrle_99",
  "flash-body": "awsui_flash-body_1q84n_pgrle_113",
  "flash-message": "awsui_flash-message_1q84n_pgrle_113",
  "flash-header": "awsui_flash-header_1q84n_pgrle_113",
  "flash-content": "awsui_flash-content_1q84n_pgrle_114",
  "action-button-wrapper": "awsui_action-button-wrapper_1q84n_pgrle_115",
  "dismiss-button-wrapper": "awsui_dismiss-button-wrapper_1q84n_pgrle_116",
  "flash-icon": "awsui_flash-icon_1q84n_pgrle_139",
  "entering": "awsui_entering_1q84n_pgrle_152",
  "entered": "awsui_entered_1q84n_pgrle_173",
  "exiting": "awsui_exiting_1q84n_pgrle_278",
  "stack": "awsui_stack_1q84n_pgrle_300",
  "animation-running": "awsui_animation-running_1q84n_pgrle_300",
  "item": "awsui_item_1q84n_pgrle_300",
  "flash-list-item": "awsui_flash-list-item_1q84n_pgrle_301",
  "notification-bar": "awsui_notification-bar_1q84n_pgrle_302",
  "collapsed": "awsui_collapsed_1q84n_pgrle_322",
  "animation-ready": "awsui_animation-ready_1q84n_pgrle_322",
  "expanded-only": "awsui_expanded-only_1q84n_pgrle_322",
  "expanded": "awsui_expanded_1q84n_pgrle_322",
  "flash": "awsui_flash_1q84n_pgrle_99",
  "collapsible": "awsui_collapsible_1q84n_pgrle_386",
  "short-list": "awsui_short-list_1q84n_pgrle_392",
  "visual-refresh": "awsui_visual-refresh_1q84n_pgrle_392",
  "status": "awsui_status_1q84n_pgrle_605",
  "header": "awsui_header_1q84n_pgrle_605",
  "item-count": "awsui_item-count_1q84n_pgrle_606",
  "button": "awsui_button_1q84n_pgrle_607",
  "type-count": "awsui_type-count_1q84n_pgrle_640",
  "count-number": "awsui_count-number_1q84n_pgrle_640",
  "icon": "awsui_icon_1q84n_pgrle_674",
  "floating": "awsui_floating_1q84n_pgrle_715",
  "flashbar": "awsui_flashbar_1q84n_pgrle_723",
  "flash-refresh": "awsui_flash-refresh_1q84n_pgrle_798",
  "flash-list": "awsui_flash-list_1q84n_pgrle_301",
  "flash-focus-container": "awsui_flash-focus-container_1q84n_pgrle_819",
  "flash-text": "awsui_flash-text_1q84n_pgrle_849",
  "dismiss-button": "awsui_dismiss-button_1q84n_pgrle_116",
  "breakpoint-default": "awsui_breakpoint-default_1q84n_pgrle_891",
  "action-button": "awsui_action-button_1q84n_pgrle_115",
  "action-slot": "awsui_action-slot_1q84n_pgrle_901",
  "flash-type-success": "awsui_flash-type-success_1q84n_pgrle_905",
  "flash-type-error": "awsui_flash-type-error_1q84n_pgrle_909",
  "flash-type-info": "awsui_flash-type-info_1q84n_pgrle_913",
  "flash-type-in-progress": "awsui_flash-type-in-progress_1q84n_pgrle_914",
  "flash-type-warning": "awsui_flash-type-warning_1q84n_pgrle_918"
};

// node_modules/@cloudscape-design/components/flashbar/utils.js
var FOCUS_THROTTLE_DELAY = 2e3;
var typesToColors = {
  error: "red",
  info: "blue",
  "in-progress": "blue",
  success: "green",
  warning: "yellow"
};
function getColorFromType(type) {
  const defaultColor = "blue";
  return type ? typesToColors[type] || defaultColor : defaultColor;
}
function getItemType(item) {
  if (item.loading) {
    return "in-progress";
  } else {
    return item.type || "info";
  }
}
function getItemColor(item) {
  return getColorFromType(getItemType(item));
}
function getVisibleCollapsedItems(items, desiredLength) {
  const itemsOnTop = [];
  const itemsToPromote = [];
  const addedColors = /* @__PURE__ */ new Set();
  const allPossibleColors = Object.keys(typesToColors).length;
  const finalLength = Math.min(items.length, desiredLength);
  for (let i = 0; i < items.length; i++) {
    const item = items[i];
    const color2 = getItemColor(item);
    const isColorRepeated = addedColors.has(color2);
    if (i < finalLength) {
      itemsOnTop.push({ item: Object.assign(Object.assign({}, item), { expandedIndex: i }), isColorRepeated });
    } else {
      if (addedColors.size === allPossibleColors) {
        break;
      } else if (!isColorRepeated) {
        itemsToPromote.push(Object.assign(Object.assign({}, item), { expandedIndex: i }));
      }
    }
    addedColors.add(color2);
  }
  const reversedInitialSelection = [];
  let slotsReservedForPromotions = 0;
  for (let j = itemsOnTop.length - 1; j >= 0; j--) {
    const item = itemsOnTop[j];
    if (item.isColorRepeated && slotsReservedForPromotions < itemsToPromote.length) {
      slotsReservedForPromotions += 1;
    } else {
      reversedInitialSelection.push(item.item);
    }
  }
  const selectedItems = reversedInitialSelection.reverse();
  for (let k2 = 0; selectedItems.length < desiredLength; k2++) {
    selectedItems.push(itemsToPromote[k2]);
  }
  return selectedItems;
}
function getFlashTypeCount(items) {
  const count = { error: 0, info: 0, "in-progress": 0, success: 0, warning: 0 };
  for (const item of items) {
    const type = getItemType(item);
    count[type] += 1;
  }
  return count;
}
var counterTypes = [
  { type: "error", labelName: "errorIconAriaLabel", iconName: "status-negative" },
  { type: "warning", labelName: "warningIconAriaLabel", iconName: "status-warning" },
  { type: "success", labelName: "successIconAriaLabel", iconName: "status-positive" },
  { type: "info", labelName: "infoIconAriaLabel", iconName: "status-info" },
  { type: "in-progress", labelName: "inProgressIconAriaLabel", iconName: "status-in-progress" }
];

// node_modules/@cloudscape-design/components/flashbar/internal/analytics.js
var metrics = new Metrics(PACKAGE_SOURCE, PACKAGE_VERSION);
var eventContext = "csa_flashbar";
var sendRenderMetric = (items) => {
  const countByType = getFlashTypeCount(items);
  metrics.sendPanoramaMetric({
    eventContext,
    eventType: "render",
    eventValue: items.length.toString(),
    eventDetail: countByType
  });
};
var sendToggleMetric = (itemsCount, expanded) => {
  metrics.sendPanoramaMetric({
    eventContext,
    eventType: expanded ? "expand" : "collapse",
    eventValue: itemsCount.toString()
  });
};
var sendDismissMetric = (itemType) => {
  metrics.sendPanoramaMetric({
    eventContext,
    eventType: "dismiss",
    eventValue: itemType
  });
};

// node_modules/@cloudscape-design/components/flashbar/flash.js
var ICON_TYPES = {
  success: "status-positive",
  warning: "status-warning",
  info: "status-info",
  error: "status-negative",
  "in-progress": "status-in-progress"
};
var useDiscoveredAction2 = createUseDiscoveredAction(awsuiPluginsInternal.flashbar.onActionRegistered);
function dismissButton(dismissLabel, onDismiss) {
  return import_react235.default.createElement(
    "div",
    { className: styles_css_default80["dismiss-button-wrapper"] },
    import_react235.default.createElement(InternalButton, { onClick: onDismiss, className: styles_css_default80["dismiss-button"], variant: "flashbar-icon", iconName: "close", formAction: "none", ariaLabel: dismissLabel })
  );
}
var focusFlashById = throttle((element, itemId) => {
  var _a;
  const selector = `[data-itemid="${CSS.escape(itemId)}"] .${styles_css_default80["flash-focus-container"]}`;
  (_a = element === null || element === void 0 ? void 0 : element.querySelector(selector)) === null || _a === void 0 ? void 0 : _a.focus();
}, FOCUS_THROTTLE_DELAY, { trailing: false });
var Flash = import_react235.default.forwardRef((_a, ref) => {
  var { id, header, content, dismissible, dismissLabel, loading, action, buttonText, onButtonClick, onDismiss, className: className2, transitionState, ariaRole, i18nStrings, type = "info" } = _a, props = __rest(_a, ["id", "header", "content", "dismissible", "dismissLabel", "loading", "action", "buttonText", "onButtonClick", "onDismiss", "className", "transitionState", "ariaRole", "i18nStrings", "type"]);
  if (isDevelopment) {
    if (buttonText && !onButtonClick) {
      warnOnce("Flashbar", `You provided a \`buttonText\` prop without an \`onButtonClick\` handler. This will render a non-interactive action button.`);
    }
    if (dismissible && !onDismiss) {
      warnOnce("Flashbar", `You have set the \`dismissible\` prop without an \`onDismiss\` handler. This will render a non-interactive dismiss button.`);
    }
  }
  const analyticsMetadata = getAnalyticsMetadataProps(props);
  const elementRef = useComponentMetadata("Flash", PACKAGE_VERSION, Object.assign({}, analyticsMetadata));
  const mergedRef = useMergeRefs(ref, elementRef);
  const { discoveredActions, headerRef, contentRef } = useDiscoveredAction2(type);
  const iconType = ICON_TYPES[type];
  const icon = loading ? import_react235.default.createElement(InternalSpinner, null) : import_react235.default.createElement(internal_default, { name: iconType });
  const effectiveType = loading ? "info" : type;
  const handleDismiss = (event) => {
    sendDismissMetric(effectiveType);
    onDismiss && onDismiss(event);
  };
  const analyticsAttributes = {
    [DATA_ATTR_ANALYTICS_FLASHBAR]: effectiveType
  };
  const statusIconAriaLabel = props.statusIconAriaLabel || (i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings[`${loading || type === "in-progress" ? "inProgress" : type}IconAriaLabel`]);
  return (
    // We're not using "polite" or "assertive" here, just turning default behavior off.
    // eslint-disable-next-line @cloudscape-design/prefer-live-region
    import_react235.default.createElement(
      "div",
      Object.assign({ ref: mergedRef, role: ariaRole, "aria-live": ariaRole ? "off" : void 0, "data-itemid": id, className: clsx_m_default(styles_css_default80.flash, styles_css_default80[`flash-type-${effectiveType}`], className2, transitionState && {
        [styles_css_default80.enter]: transitionState === "enter",
        [styles_css_default80.entering]: transitionState === "entering",
        [styles_css_default80.entered]: transitionState === "entered",
        [styles_css_default80.exit]: transitionState === "exit",
        [styles_css_default80.exiting]: transitionState === "exiting",
        [styles_css_default80.exited]: transitionState === "exited"
      }, getVisualContextClassname(type === "warning" && !loading ? "flashbar-warning" : "flashbar")) }, analyticsAttributes),
      import_react235.default.createElement(
        "div",
        { className: styles_css_default80["flash-body"] },
        import_react235.default.createElement(
          "div",
          { className: styles_css_default80["flash-focus-container"], tabIndex: -1 },
          import_react235.default.createElement("div", { className: clsx_m_default(styles_css_default80["flash-icon"], styles_css_default80["flash-text"]), role: "img", "aria-label": statusIconAriaLabel }, icon),
          import_react235.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default80["flash-message"], styles_css_default80["flash-text"]) },
            import_react235.default.createElement("div", { className: styles_css_default80["flash-header"], ref: headerRef }, header),
            import_react235.default.createElement("div", { className: styles_css_default80["flash-content"], ref: contentRef }, content)
          )
        ),
        import_react235.default.createElement(ActionsWrapper, { className: styles_css_default80["action-button-wrapper"], testUtilClasses: {
          actionSlot: styles_css_default80["action-slot"],
          actionButton: styles_css_default80["action-button"]
        }, action, discoveredActions, buttonText, onButtonClick })
      ),
      dismissible && dismissButton(dismissLabel, handleDismiss),
      ariaRole === "status" && import_react235.default.createElement(live_region_default, { source: [statusIconAriaLabel, headerRef, contentRef] })
    )
  );
});

// node_modules/@cloudscape-design/components/internal/animate.js
function getDOMRects(elements) {
  const rects = {};
  for (const id in elements) {
    const element = elements[id];
    if (element) {
      rects[id] = element.getBoundingClientRect();
    }
  }
  return rects;
}
function animate({ oldState, elements, onTransitionsEnd, newElementInitialState }) {
  for (const id in elements) {
    const element = elements[id];
    const oldRect = oldState[id];
    if (element) {
      const newRect = element.getBoundingClientRect();
      const noOpTransform = { scale: 1, x: 0, y: 0 };
      const calculatedInverseTransform = oldRect ? {
        scale: oldRect.width / newRect.width,
        x: (oldRect.left + oldRect.right) / 2 - (newRect.left + newRect.right) / 2,
        y: (oldRect.top + oldRect.bottom) / 2 - (newRect.top + newRect.bottom) / 2
      } : newElementInitialState ? newElementInitialState(newRect) : {};
      const inverseTransform2 = Object.assign(Object.assign({}, noOpTransform), calculatedInverseTransform);
      element.style.transitionProperty = "none";
      element.style.transform = `scale(${inverseTransform2.scale}) translate(${inverseTransform2.x}px, ${inverseTransform2.y}px)`;
      if (!oldRect) {
        element.style.opacity = "0";
      }
    }
  }
  requestAnimationFrame(() => {
    const ongoingAnimations = /* @__PURE__ */ new Set();
    for (const id in elements) {
      const element = elements[id];
      if (element) {
        const oldRect = oldState[id];
        if (oldRect) {
          element.style.transitionProperty = `transform`;
          element.style.transform = "";
        } else {
          element.style.transitionProperty = `transform, opacity`;
          element.style.transform = "";
          element.style.opacity = "";
        }
        const onTransitionStart = (event) => {
          if (event.target === element) {
            ongoingAnimations.add(id);
            element.removeEventListener("transitionstart", onTransitionStart);
          }
        };
        const onTransitionEnd = (event) => {
          if (event.target === element) {
            element.style.transitionProperty = "";
            element.removeEventListener("transitionstart", onTransitionEnd);
            if (onTransitionsEnd) {
              ongoingAnimations.delete(id);
              if (ongoingAnimations.size === 0) {
                onTransitionsEnd();
              }
            }
          }
        };
        element.addEventListener("transitionstart", onTransitionStart);
        element.addEventListener("transitionend", onTransitionEnd);
      }
    }
  });
}

// node_modules/@cloudscape-design/components/flashbar/common.js
var import_react236 = __toESM(require_react());
function useFlashbar(_a) {
  var { items, onItemsAdded, onItemsChanged, onItemsRemoved } = _a, restProps = __rest(_a, ["items", "onItemsAdded", "onItemsChanged", "onItemsRemoved"]);
  const { __internalRootRef } = useBaseComponent("Flashbar", {
    props: { stackItems: restProps.stackItems }
  });
  const allItemsHaveId = (0, import_react236.useMemo)(() => items.every((item) => "id" in item), [items]);
  const baseProps = getBaseProps(restProps);
  const ref = (0, import_react236.useRef)(null);
  const [breakpoint, breakpointRef] = useContainerBreakpoints(["xs"]);
  const mergedRef = useMergeRefs(ref, breakpointRef, __internalRootRef);
  const isReducedMotion = useReducedMotion(ref);
  const isVisualRefresh = useVisualRefresh();
  const [previousItems, setPreviousItems] = (0, import_react236.useState)(items);
  const [nextFocusId, setNextFocusId] = (0, import_react236.useState)(null);
  if (isDevelopment) {
    if (items === null || items === void 0 ? void 0 : items.some((item) => item.ariaRole === "alert" && !item.id)) {
      warnOnce("Flashbar", `You provided \`ariaRole="alert"\` for a flashbar item without providing an \`id\`. Focus will not be moved to the newly added flash message.`);
    }
  }
  if (items) {
    const newItems = items.filter(({ id }) => id && !previousItems.some((item) => item.id === id));
    const removedItems = previousItems.filter(({ id }) => id && !items.some((item) => item.id === id));
    if (newItems.length > 0 || removedItems.length > 0) {
      setPreviousItems(items);
      onItemsAdded === null || onItemsAdded === void 0 ? void 0 : onItemsAdded(newItems);
      onItemsRemoved === null || onItemsRemoved === void 0 ? void 0 : onItemsRemoved(removedItems);
      onItemsChanged === null || onItemsChanged === void 0 ? void 0 : onItemsChanged({ allItemsHaveId, isReducedMotion });
      const newFocusItems = newItems.filter(({ ariaRole }) => ariaRole === "alert");
      if (newFocusItems.length > 0) {
        setNextFocusId(newFocusItems[0].id);
      }
    }
  }
  (0, import_react236.useEffect)(() => {
    if (nextFocusId) {
      focusFlashById(ref.current, nextFocusId);
    }
  }, [nextFocusId, ref]);
  return {
    allItemsHaveId,
    baseProps,
    breakpoint,
    isReducedMotion,
    isVisualRefresh,
    mergedRef,
    ref
  };
}

// node_modules/@cloudscape-design/components/flashbar/collapsible-flashbar.js
var maxNonCollapsibleItems = 1;
var resizeListenerThrottleDelay = 100;
function CollapsibleFlashbar(_a) {
  var { items } = _a, restProps = __rest(_a, ["items"]);
  const [enteringItems, setEnteringItems] = (0, import_react237.useState)([]);
  const [exitingItems, setExitingItems] = (0, import_react237.useState)([]);
  const [isFlashbarStackExpanded, setIsFlashbarStackExpanded] = (0, import_react237.useState)(false);
  const getElementsToAnimate = (0, import_react237.useCallback)(() => {
    const flashElements = isFlashbarStackExpanded ? expandedItemRefs.current : collapsedItemRefs.current;
    return Object.assign(Object.assign({}, flashElements), { notificationBar: notificationBarRef.current });
  }, [isFlashbarStackExpanded]);
  const prepareAnimations = (0, import_react237.useCallback)(() => {
    const rects = getDOMRects(getElementsToAnimate());
    setInitialAnimationState(rects);
  }, [getElementsToAnimate]);
  const { baseProps, breakpoint, isReducedMotion, isVisualRefresh, mergedRef, ref } = useFlashbar(Object.assign(Object.assign({ items }, restProps), { onItemsAdded: (newItems) => {
    setEnteringItems([...enteringItems, ...newItems]);
  }, onItemsChanged: (options) => {
    if ((options === null || options === void 0 ? void 0 : options.allItemsHaveId) && !(options === null || options === void 0 ? void 0 : options.isReducedMotion)) {
      prepareAnimations();
    }
  }, onItemsRemoved: (removedItems) => {
    setExitingItems([...exitingItems, ...removedItems]);
  } }));
  const collapsedItemRefs = (0, import_react237.useRef)({});
  const expandedItemRefs = (0, import_react237.useRef)({});
  const [initialAnimationState, setInitialAnimationState] = (0, import_react237.useState)(null);
  const listElementRef = (0, import_react237.useRef)(null);
  const notificationBarRef = (0, import_react237.useRef)(null);
  const [transitioning, setTransitioning] = (0, import_react237.useState)(false);
  const flashbarElementId = useUniqueId("flashbar");
  const itemCountElementId = useUniqueId("item-count");
  if (items.length <= maxNonCollapsibleItems && isFlashbarStackExpanded) {
    setIsFlashbarStackExpanded(false);
  }
  const animateFlash = !isReducedMotion;
  function toggleCollapseExpand() {
    sendToggleMetric(items.length, !isFlashbarStackExpanded);
    if (!isReducedMotion) {
      prepareAnimations();
    }
    setIsFlashbarStackExpanded((prev) => !prev);
  }
  (0, import_react237.useLayoutEffect)(() => {
    if (isFlashbarStackExpanded && (items === null || items === void 0 ? void 0 : items.length)) {
      const mostRecentItem = items[0];
      if (mostRecentItem.id !== void 0) {
        focusFlashById(ref.current, mostRecentItem.id);
      }
    }
  }, [isFlashbarStackExpanded]);
  useEffectOnUpdate(() => {
    if (!isFlashbarStackExpanded && notificationBarRef.current) {
      scrollElementIntoView(notificationBarRef.current);
    }
  }, [isFlashbarStackExpanded]);
  const updateBottomSpacing = (0, import_react237.useMemo)(() => throttle(() => {
    const listElement = listElementRef === null || listElementRef === void 0 ? void 0 : listElementRef.current;
    const flashbar = listElement === null || listElement === void 0 ? void 0 : listElement.parentElement;
    if (listElement && flashbar) {
      flashbar.classList.remove(styles_css_default80.floating);
      const windowHeight = window.innerHeight;
      const outerElement = findUpUntil2(flashbar, (element) => element.getAttribute("role") === "region") || flashbar;
      const applySpacing = isFlashbarStackExpanded && Math.ceil(outerElement.getBoundingClientRect().bottom) >= windowHeight;
      if (!applySpacing) {
        flashbar.classList.add(styles_css_default80.floating);
      }
    }
  }, resizeListenerThrottleDelay), [isFlashbarStackExpanded]);
  (0, import_react237.useLayoutEffect)(() => {
    window.addEventListener("resize", updateBottomSpacing);
    return () => {
      window.removeEventListener("resize", updateBottomSpacing);
      updateBottomSpacing.cancel();
    };
  }, [updateBottomSpacing]);
  const { i18nStrings } = restProps;
  const i18n = useInternalI18n("flashbar");
  const ariaLabel = i18n("i18nStrings.ariaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaLabel);
  const notificationBarText = i18n("i18nStrings.notificationBarText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.notificationBarText);
  const notificationBarAriaLabel = i18n("i18nStrings.notificationBarAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.notificationBarAriaLabel);
  const iconAriaLabels = {
    errorIconAriaLabel: i18n("i18nStrings.errorIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel),
    inProgressIconAriaLabel: i18n("i18nStrings.inProgressIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inProgressIconAriaLabel),
    infoIconAriaLabel: i18n("i18nStrings.infoIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.infoIconAriaLabel),
    successIconAriaLabel: i18n("i18nStrings.successIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.successIconAriaLabel),
    warningIconAriaLabel: i18n("i18nStrings.warningIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.warningIconAriaLabel)
  };
  (0, import_react237.useLayoutEffect)(() => {
    if (initialAnimationState) {
      updateBottomSpacing();
      animate({
        elements: getElementsToAnimate(),
        oldState: initialAnimationState,
        newElementInitialState: ({ top }) => ({ scale: 0.9, y: -0.2 * top }),
        onTransitionsEnd: () => setTransitioning(false)
      });
      setTransitioning(true);
      setInitialAnimationState(null);
    }
  }, [updateBottomSpacing, getElementsToAnimate, initialAnimationState, isFlashbarStackExpanded]);
  const isCollapsible = items.length > maxNonCollapsibleItems;
  const countByType = getFlashTypeCount(items);
  const numberOfColorsInStack = new Set(items.map(getItemColor)).size;
  const maxSlots = Math.max(numberOfColorsInStack, 3);
  const stackDepth = Math.min(maxSlots, items.length);
  const itemsToShow = isFlashbarStackExpanded ? items.map((item, index) => Object.assign(Object.assign({}, item), { expandedIndex: index })) : getVisibleCollapsedItems(items, stackDepth).map((item, index) => Object.assign(Object.assign({}, item), { collapsedIndex: index }));
  const getItemId = (item) => {
    var _a2, _b;
    return (_b = (_a2 = item.id) !== null && _a2 !== void 0 ? _a2 : item.expandedIndex) !== null && _b !== void 0 ? _b : 0;
  };
  const hasEntered = (item) => enteringItems.some((_item) => _item.id && _item.id === item.id);
  const hasLeft = (item) => !("expandedIndex" in item);
  const hasEnteredOrLeft = (item) => hasEntered(item) || hasLeft(item);
  const showInnerContent = (item) => isFlashbarStackExpanded || hasLeft(item) || "expandedIndex" in item && item.expandedIndex === 0;
  const shouldUseStandardAnimation = (item, index) => index === 0 && hasEnteredOrLeft(item);
  const getAnimationElementId = (item) => `flash-${getItemId(item)}`;
  const renderList = () => import_react237.default.createElement(
    "ul",
    { ref: listElementRef, className: clsx_m_default(styles_css_default80["flash-list"], isFlashbarStackExpanded ? styles_css_default80.expanded : styles_css_default80.collapsed, transitioning && styles_css_default80["animation-running"], initialAnimationState && styles_css_default80["animation-ready"], isVisualRefresh && styles_css_default80["visual-refresh"]), id: flashbarElementId, "aria-label": ariaLabel, "aria-describedby": isCollapsible ? itemCountElementId : void 0, style: !isFlashbarStackExpanded || transitioning ? {
      [custom_css_properties_default.flashbarStackDepth]: stackDepth
    } : void 0 },
    import_react237.default.createElement(ListWrapper, { withMotion: !isReducedMotion }, itemsToShow.map((item, index) => import_react237.default.createElement(Transition, { key: getItemId(item), in: !hasLeft(item), onStatusChange: (status) => {
      if (status === "entered") {
        setEnteringItems([]);
      } else if (status === "exited") {
        setExitingItems([]);
      }
    } }, (state, transitionRootElement) => {
      var _a2, _b, _c;
      return import_react237.default.createElement("li", { "aria-hidden": !showInnerContent(item), className: showInnerContent(item) ? clsx_m_default(styles_css_default80["flash-list-item"], !isFlashbarStackExpanded && styles_css_default80.item, !collapsedItemRefs.current[getAnimationElementId(item)] && styles_css_default80["expanded-only"]) : clsx_m_default(styles_css_default80.flash, styles_css_default80[`flash-type-${(_a2 = item.type) !== null && _a2 !== void 0 ? _a2 : "info"}`], styles_css_default80.item), ref: (element) => {
        if (isFlashbarStackExpanded) {
          expandedItemRefs.current[getAnimationElementId(item)] = element;
        } else {
          collapsedItemRefs.current[getAnimationElementId(item)] = element;
        }
      }, style: !isFlashbarStackExpanded || transitioning ? {
        [custom_css_properties_default.flashbarStackIndex]: (_c = (_b = item.collapsedIndex) !== null && _b !== void 0 ? _b : item.expandedIndex) !== null && _c !== void 0 ? _c : index
      } : void 0, key: getItemId(item) }, showInnerContent(item) && import_react237.default.createElement(
        Flash,
        Object.assign({
          // eslint-disable-next-line react/forbid-component-props
          className: clsx_m_default(animateFlash && styles_css_default80["flash-with-motion"], isVisualRefresh && styles_css_default80["flash-refresh"]),
          key: getItemId(item),
          ref: shouldUseStandardAnimation(item, index) ? transitionRootElement : void 0,
          transitionState: shouldUseStandardAnimation(item, index) ? state : void 0,
          i18nStrings: iconAriaLabels
        }, item)
      ));
    })))
  );
  return import_react237.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default80.flashbar, styles_css_default80[`breakpoint-${breakpoint}`], styles_css_default80.stack, isCollapsible && styles_css_default80.collapsible, items.length === 2 && styles_css_default80["short-list"], isFlashbarStackExpanded && styles_css_default80.expanded, isVisualRefresh && styles_css_default80["visual-refresh"]), ref: mergedRef }),
    isFlashbarStackExpanded && renderList(),
    isCollapsible && import_react237.default.createElement(
      "div",
      { className: clsx_m_default(
        styles_css_default80["notification-bar"],
        isVisualRefresh && styles_css_default80["visual-refresh"],
        isFlashbarStackExpanded ? styles_css_default80.expanded : styles_css_default80.collapsed,
        transitioning && styles_css_default80["animation-running"],
        items.length === 2 && styles_css_default80["short-list"],
        getVisualContextClassname("flashbar")
        // Visual context is needed for focus ring to be white
      ), onClick: toggleCollapseExpand, ref: notificationBarRef },
      import_react237.default.createElement(
        "span",
        { "aria-live": "polite", className: styles_css_default80.status, role: "status", id: itemCountElementId },
        notificationBarText && import_react237.default.createElement("h2", { className: styles_css_default80.header }, notificationBarText),
        import_react237.default.createElement("span", { className: styles_css_default80["item-count"] }, counterTypes.map(({ type, labelName, iconName }) => import_react237.default.createElement(NotificationTypeCount, { key: type, iconName, label: iconAriaLabels[labelName], count: countByType[type] })))
      ),
      import_react237.default.createElement(
        "button",
        { "aria-controls": flashbarElementId, "aria-describedby": itemCountElementId, "aria-expanded": isFlashbarStackExpanded, "aria-label": notificationBarAriaLabel, className: clsx_m_default(styles_css_default80.button, isFlashbarStackExpanded && styles_css_default80.expanded) },
        import_react237.default.createElement(internal_default, { className: styles_css_default80.icon, size: "normal", name: "angle-down" })
      )
    ),
    !isFlashbarStackExpanded && renderList()
  );
}
var NotificationTypeCount = ({ iconName, label, count }) => {
  return import_react237.default.createElement(
    "span",
    { className: styles_css_default80["type-count"] },
    import_react237.default.createElement(
      "span",
      { "aria-label": label, role: "img" },
      import_react237.default.createElement(
        "span",
        { title: label, "aria-hidden": "true" },
        import_react237.default.createElement(internal_default, { name: iconName })
      )
    ),
    import_react237.default.createElement("span", { className: styles_css_default80["count-number"] }, count)
  );
};
var ListWrapper = ({ children, withMotion }) => withMotion ? import_react237.default.createElement(TransitionGroup_default, { component: null }, children) : import_react237.default.createElement(import_react237.default.Fragment, null, children);

// node_modules/@cloudscape-design/components/flashbar/non-collapsible-flashbar.js
var import_react238 = __toESM(require_react());

// node_modules/@cloudscape-design/components/flashbar/constant.js
var TIMEOUT_FOR_ENTERING_ANIMATION = 115;

// node_modules/@cloudscape-design/components/flashbar/non-collapsible-flashbar.js
function NonCollapsibleFlashbar(_a) {
  var { items, i18nStrings } = _a, restProps = __rest(_a, ["items", "i18nStrings"]);
  const { allItemsHaveId, baseProps, breakpoint, isReducedMotion, isVisualRefresh, mergedRef } = useFlashbar(Object.assign({ items }, restProps));
  const i18n = useInternalI18n("flashbar");
  const ariaLabel = i18n("i18nStrings.ariaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaLabel);
  const iconAriaLabels = {
    errorIconAriaLabel: i18n("i18nStrings.errorIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel),
    inProgressIconAriaLabel: i18n("i18nStrings.inProgressIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inProgressIconAriaLabel),
    infoIconAriaLabel: i18n("i18nStrings.infoIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.infoIconAriaLabel),
    successIconAriaLabel: i18n("i18nStrings.successIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.successIconAriaLabel),
    warningIconAriaLabel: i18n("i18nStrings.warningIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.warningIconAriaLabel)
  };
  const motionDisabled = isReducedMotion || !isVisualRefresh || !allItemsHaveId;
  const animateFlash = !isReducedMotion && isVisualRefresh;
  function renderFlatItemsWithTransitions() {
    if (motionDisabled || !items) {
      return;
    }
    return (
      // This is a proxy for <ul>, so we're not applying a class to another actual component.
      // eslint-disable-next-line react/forbid-component-props
      import_react238.default.createElement(TransitionGroup_default, { component: "ul", className: styles_css_default80["flash-list"], "aria-label": ariaLabel }, items.map((item, index) => {
        var _a2;
        return import_react238.default.createElement(Transition, { transitionChangeDelay: { entering: TIMEOUT_FOR_ENTERING_ANIMATION }, key: (_a2 = item.id) !== null && _a2 !== void 0 ? _a2 : index, in: true }, (state, transitionRootElement) => {
          var _a3;
          return import_react238.default.createElement("li", { className: styles_css_default80["flash-list-item"] }, renderItem(item, (_a3 = item.id) !== null && _a3 !== void 0 ? _a3 : index, transitionRootElement, state));
        });
      }))
    );
  }
  function renderFlatItemsWithoutTransitions() {
    if (!motionDisabled || !items) {
      return;
    }
    return import_react238.default.createElement("ul", { className: styles_css_default80["flash-list"], "aria-label": ariaLabel }, items.map((item, index) => {
      var _a2, _b;
      return import_react238.default.createElement("li", { key: (_a2 = item.id) !== null && _a2 !== void 0 ? _a2 : index, className: styles_css_default80["flash-list-item"] }, renderItem(item, (_b = item.id) !== null && _b !== void 0 ? _b : index));
    }));
  }
  function renderItem(item, key2, transitionRootElement, transitionState) {
    return import_react238.default.createElement(
      Flash,
      Object.assign({
        // eslint-disable-next-line react/forbid-component-props
        className: clsx_m_default(animateFlash && styles_css_default80["flash-with-motion"], isVisualRefresh && styles_css_default80["flash-refresh"]),
        key: key2,
        ref: transitionRootElement,
        transitionState,
        i18nStrings: iconAriaLabels
      }, item)
    );
  }
  return import_react238.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default80.flashbar, styles_css_default80[`breakpoint-${breakpoint}`]), ref: mergedRef }),
    renderFlatItemsWithTransitions(),
    renderFlatItemsWithoutTransitions()
  );
}

// node_modules/@cloudscape-design/components/flashbar/index.js
function Flashbar(props) {
  (0, import_react239.useEffect)(() => {
    if (props.items.length > 0) {
      sendRenderMetric(props.items);
    }
  }, [props.items]);
  if (props.stackItems) {
    return import_react239.default.createElement(CollapsibleFlashbar, Object.assign({}, props));
  } else {
    return import_react239.default.createElement(NonCollapsibleFlashbar, Object.assign({}, props));
  }
}
applyDisplayName(Flashbar, "Flashbar");

// node_modules/@cloudscape-design/components/form/index.js
var import_react241 = __toESM(require_react());

// node_modules/@cloudscape-design/components/form/internal.js
var import_react240 = __toESM(require_react());

// node_modules/@cloudscape-design/components/form/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/form/styles.scoped.css";
var styles_css_default81 = {
  "root": "awsui_root_1i0s3_19kut_99",
  "header": "awsui_header_1i0s3_19kut_134",
  "full-page": "awsui_full-page_1i0s3_19kut_134",
  "content": "awsui_content_1i0s3_19kut_138",
  "error": "awsui_error_1i0s3_19kut_142",
  "footer": "awsui_footer_1i0s3_19kut_146",
  "actions-section": "awsui_actions-section_1i0s3_19kut_150",
  "secondary-actions": "awsui_secondary-actions_1i0s3_19kut_159",
  "actions": "awsui_actions_1i0s3_19kut_150"
};

// node_modules/@cloudscape-design/components/form/internal.js
function InternalForm(_a) {
  var { children, header, errorText, errorIconAriaLabel: errorIconAriaLabelOverride, actions, secondaryActions, variant, __internalRootRef } = _a, props = __rest(_a, ["children", "header", "errorText", "errorIconAriaLabel", "actions", "secondaryActions", "variant", "__internalRootRef"]);
  const baseProps = getBaseProps(props);
  const i18n = useInternalI18n("form");
  const errorIconAriaLabel = i18n("errorIconAriaLabel", errorIconAriaLabelOverride);
  const { funnelInteractionId, submissionAttempt, errorCount } = useFunnel();
  (0, import_react240.useEffect)(() => {
    if (funnelInteractionId && errorText) {
      errorCount.current++;
      FunnelMetrics.funnelError({ funnelInteractionId });
      return () => {
        errorCount.current--;
      };
    }
  }, [funnelInteractionId, errorText, submissionAttempt, errorCount]);
  return import_react240.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: __internalRootRef, className: clsx_m_default(styles_css_default81.root, baseProps.className) }),
    import_react240.default.createElement(
      FormLayout,
      { header: header && import_react240.default.createElement("div", { className: clsx_m_default(styles_css_default81.header, variant === "full-page" && styles_css_default81["full-page"]) }, header), variant },
      children && import_react240.default.createElement("div", { className: styles_css_default81.content }, children),
      errorText && import_react240.default.createElement(
        InternalBox,
        { margin: { top: "l" } },
        import_react240.default.createElement(
          internal_default6,
          { type: "error", statusIconAriaLabel: errorIconAriaLabel },
          import_react240.default.createElement("div", { className: styles_css_default81.error }, errorText)
        )
      ),
      (actions || secondaryActions) && import_react240.default.createElement(
        "div",
        { className: styles_css_default81.footer },
        import_react240.default.createElement(
          "div",
          { className: styles_css_default81["actions-section"] },
          actions && import_react240.default.createElement("div", { className: styles_css_default81.actions }, actions),
          secondaryActions && import_react240.default.createElement("div", { className: styles_css_default81["secondary-actions"] }, secondaryActions)
        )
      ),
      errorText && import_react240.default.createElement(
        live_region_default,
        { assertive: true },
        errorIconAriaLabel,
        ", ",
        errorText
      )
    )
  );
}
function FormLayout({ children, header, variant }) {
  return variant === "full-page" && header ? import_react240.default.createElement(InternalContentLayout, { header }, children) : import_react240.default.createElement(
    import_react240.default.Fragment,
    null,
    header,
    children
  );
}

// node_modules/@cloudscape-design/components/form/index.js
var FormWithAnalytics = (_a) => {
  var { variant = "full-page", actions } = _a, props = __rest(_a, ["variant", "actions"]);
  const { funnelProps, funnelSubmit, funnelNextOrSubmitAttempt } = useFunnel();
  const { funnelStepProps } = useFunnelStep();
  const handleActionButtonClick = ({ variant: variant2 }) => {
    if (variant2 === "primary") {
      funnelNextOrSubmitAttempt();
      funnelSubmit();
    }
  };
  return import_react241.default.createElement(
    ButtonContext.Provider,
    { value: { onClick: handleActionButtonClick } },
    import_react241.default.createElement(InternalForm, Object.assign({ variant, actions }, props, funnelProps, funnelStepProps))
  );
};
function Form(_a) {
  var { variant = "full-page" } = _a, props = __rest(_a, ["variant"]);
  const analyticsMetadata = getAnalyticsMetadataProps(props);
  const baseComponentProps = useBaseComponent("Form", { props: { variant } }, analyticsMetadata);
  const inheritedFunnelNameSelector = useFunnelNameSelector();
  const funnelNameSelector = inheritedFunnelNameSelector || `.${styles_css_default37["heading-text"]}`;
  return import_react241.default.createElement(
    AnalyticsFunnel,
    { instanceIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, flowType: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.flowType, errorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext, funnelType: "single-page", optionalStepNumbers: [], totalFunnelSteps: 1, funnelNameSelectors: [funnelNameSelector, `.${styles_css_default81.header}`] },
    import_react241.default.createElement(
      AnalyticsFunnelStep,
      { instanceIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, errorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext, stepNumber: 1 },
      import_react241.default.createElement(FormWithAnalytics, Object.assign({ variant }, props, baseComponentProps))
    )
  );
}
applyDisplayName(Form, "Form");

// node_modules/@cloudscape-design/components/form-field/index.js
var import_react242 = __toESM(require_react());
function FormField(_a) {
  var { stretch = false } = _a, props = __rest(_a, ["stretch"]);
  const baseComponentProps = useBaseComponent("FormField", { props: { stretch } }, getAnalyticsMetadataProps(props));
  return import_react242.default.createElement(InternalFormField, Object.assign({ stretch }, props, { __hideLabel: false }, baseComponentProps));
}
applyDisplayName(FormField, "FormField");

// node_modules/@cloudscape-design/components/grid/index.js
var import_react243 = __toESM(require_react());
function Grid3(_a) {
  var { gridDefinition = [], disableGutters = false, children } = _a, restProps = __rest(_a, ["gridDefinition", "disableGutters", "children"]);
  const baseComponentProps = useBaseComponent("Grid", {
    props: { disableGutters }
  });
  const baseProps = getBaseProps(restProps);
  const [breakpoint, ref] = useContainerBreakpoints(void 0);
  return import_react243.default.createElement(internal_default8, Object.assign({}, baseProps, baseComponentProps, { ref, __breakpoint: breakpoint, gridDefinition, disableGutters }), children);
}
applyDisplayName(Grid3, "Grid");

// node_modules/@cloudscape-design/components/header/index.js
var import_react244 = __toESM(require_react());
function Header2(_a) {
  var { variant = "h2" } = _a, props = __rest(_a, ["variant"]);
  const baseComponentProps = useBaseComponent("Header", {
    props: { headingTagOverride: props.headingTagOverride, variant }
  });
  return import_react244.default.createElement(InternalHeader, Object.assign({ variant }, props, baseComponentProps));
}
applyDisplayName(Header2, "Header");

// node_modules/@cloudscape-design/components/help-panel/index.js
var import_react245 = __toESM(require_react());

// node_modules/@cloudscape-design/components/help-panel/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/help-panel/styles.scoped.css";
var styles_css_default82 = {
  "help-panel": "awsui_help-panel_1d237_xb6zh_100",
  "header": "awsui_header_1d237_xb6zh_269",
  "content": "awsui_content_1d237_xb6zh_300",
  "footer": "awsui_footer_1d237_xb6zh_346"
};

// node_modules/@cloudscape-design/components/help-panel/index.js
function HelpPanel(_a) {
  var { header, footer, children, loading, loadingText } = _a, restProps = __rest(_a, ["header", "footer", "children", "loading", "loadingText"]);
  const { __internalRootRef } = useBaseComponent("HelpPanel");
  const baseProps = getBaseProps(restProps);
  const i18n = useInternalI18n("help-panel");
  const containerProps = Object.assign(Object.assign({}, baseProps), { className: clsx_m_default(baseProps.className, styles_css_default82["help-panel"]) });
  return loading ? import_react245.default.createElement(
    "div",
    Object.assign({}, containerProps, { ref: __internalRootRef }),
    import_react245.default.createElement(
      StatusIndicator,
      { type: "loading" },
      import_react245.default.createElement(live_region_default, { visible: true }, i18n("loadingText", loadingText))
    )
  ) : import_react245.default.createElement(
    "div",
    Object.assign({}, containerProps, { ref: __internalRootRef }),
    header && import_react245.default.createElement("div", { className: clsx_m_default(styles_css_default82.header) }, header),
    import_react245.default.createElement(
      LinkDefaultVariantContext.Provider,
      { value: { defaultVariant: "primary" } },
      import_react245.default.createElement("div", { className: clsx_m_default(styles_css_default82.content) }, children)
    ),
    footer && import_react245.default.createElement("div", { className: styles_css_default82.footer }, footer)
  );
}
applyDisplayName(HelpPanel, "HelpPanel");

// node_modules/@cloudscape-design/components/hotspot/index.js
var import_react246 = __toESM(require_react());

// node_modules/@cloudscape-design/components/hotspot/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/hotspot/styles.scoped.css";
var styles_css_default83 = {
  "root": "awsui_root_cqcqk_134pw_99",
  "wrapper": "awsui_wrapper_cqcqk_134pw_103",
  "elementWrapper": "awsui_elementWrapper_cqcqk_134pw_107",
  "markerWrapper": "awsui_markerWrapper_cqcqk_134pw_111",
  "placement-right": "awsui_placement-right_cqcqk_134pw_116",
  "placement-left": "awsui_placement-left_cqcqk_134pw_121",
  "inlineWrapper": "awsui_inlineWrapper_cqcqk_134pw_126"
};

// node_modules/@cloudscape-design/components/hotspot/index.js
function Hotspot(_a) {
  var { children, hotspotId, side = "right", direction = "top" } = _a, restProps = __rest(_a, ["children", "hotspotId", "side", "direction"]);
  const { __internalRootRef } = useBaseComponent("Hotspot", { props: { direction, side } });
  const baseProps = getBaseProps(restProps);
  const hotspotContext2 = (0, import_react246.useContext)(hotspotContext);
  const content = hotspotContext2.getContentForId(hotspotId, direction);
  const { unregisterHotspot, registerHotspot } = hotspotContext2;
  (0, import_react246.useEffect)(() => {
    registerHotspot(hotspotId);
    return () => unregisterHotspot(hotspotId);
  }, [hotspotId, unregisterHotspot, registerHotspot]);
  if (children) {
    return import_react246.default.createElement(
      "div",
      Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default83.root, styles_css_default83.wrapper), ref: __internalRootRef }),
      import_react246.default.createElement("div", { className: styles_css_default83.elementWrapper }, children),
      import_react246.default.createElement("div", { className: clsx_m_default(styles_css_default83.markerWrapper, styles_css_default83[`placement-${side}`]), onClick: (e) => e.stopPropagation() }, content)
    );
  }
  return import_react246.default.createElement("span", Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default83.root, styles_css_default83.inlineWrapper), ref: __internalRootRef, onClick: (e) => e.stopPropagation() }), content);
}
applyDisplayName(Hotspot, "Hotspot");

// node_modules/@cloudscape-design/components/icon/index.js
var import_react247 = __toESM(require_react());
function Icon(_a) {
  var { size = "normal", variant = "normal" } = _a, props = __rest(_a, ["size", "variant"]);
  const baseComponentProps = useBaseComponent("Icon", { props: { name: props.name, size, variant } });
  return import_react247.default.createElement(internal_default, Object.assign({ size, variant }, props, baseComponentProps));
}
applyDisplayName(Icon, "Icon");

// node_modules/@cloudscape-design/components/input/index.js
var import_react248 = __toESM(require_react());
var Input = import_react248.default.forwardRef((_a, ref) => {
  var { value, type = "text", step, inputMode, autoComplete = true, spellcheck, disabled, readOnly, disableBrowserAutocorrect, onKeyDown, onKeyUp, onChange, onBlur, onFocus, ariaRequired, name, placeholder, autoFocus, ariaLabel, ariaLabelledby, ariaDescribedby, invalid, controlId, clearAriaLabel } = _a, rest = __rest(_a, ["value", "type", "step", "inputMode", "autoComplete", "spellcheck", "disabled", "readOnly", "disableBrowserAutocorrect", "onKeyDown", "onKeyUp", "onChange", "onBlur", "onFocus", "ariaRequired", "name", "placeholder", "autoFocus", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "invalid", "controlId", "clearAriaLabel"]);
  const baseComponentProps = useBaseComponent("Input", {
    props: { autoComplete, autoFocus, disableBrowserAutocorrect, inputMode, readOnly, spellcheck, type }
  });
  const baseProps = getBaseProps(rest);
  const inputRef = (0, import_react248.useRef)(null);
  (0, import_react248.useImperativeHandle)(ref, () => ({
    focus(...args) {
      var _a2;
      (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus(...args);
    },
    select() {
      var _a2;
      (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.select();
    }
  }), [inputRef]);
  return import_react248.default.createElement(internal_default4, Object.assign({ ref: inputRef }, Object.assign(Object.assign(Object.assign({}, baseProps), baseComponentProps), {
    autoComplete,
    ariaLabel,
    ariaRequired,
    autoFocus,
    disabled,
    disableBrowserAutocorrect,
    name,
    onKeyDown,
    onKeyUp,
    onChange,
    onBlur,
    onFocus,
    placeholder,
    readOnly,
    type,
    step,
    inputMode,
    spellcheck,
    value,
    ariaDescribedby,
    ariaLabelledby,
    invalid,
    controlId,
    clearAriaLabel
  }), { className: clsx_m_default(styles_css_default.root, baseProps.className), __inheritFormFieldProps: true }));
});
applyDisplayName(Input, "Input");
var input_default = Input;

// node_modules/@cloudscape-design/components/line-chart/index.js
var import_react249 = __toESM(require_react());

// node_modules/@cloudscape-design/components/line-chart/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/line-chart/styles.scoped.css";
var styles_css_default84 = {
  "root": "awsui_root_g9v3m_im8v7_5"
};

// node_modules/@cloudscape-design/components/line-chart/index.js
function LineChart(_a) {
  var { series = [], height = 500, xScaleType = "linear", yScaleType = "linear", detailPopoverSize = "medium", statusType = "finished", emphasizeBaselineAxis = true } = _a, props = __rest(_a, ["series", "height", "xScaleType", "yScaleType", "detailPopoverSize", "statusType", "emphasizeBaselineAxis"]);
  const baseComponentProps = useBaseComponent("LineChart", {
    props: {
      detailPopoverSize,
      emphasizeBaselineAxis,
      fitHeight: props.fitHeight,
      hideFilter: props.hideFilter,
      hideLegend: props.hideLegend,
      xScaleType,
      yScaleType
    }
  });
  const baseProps = getBaseProps(props);
  const className2 = clsx_m_default(baseProps.className, styles_css_default84.root);
  return import_react249.default.createElement(InternalMixedLineBarChart, Object.assign({}, props, baseComponentProps, { className: className2, height, xScaleType, yScaleType, stackedBars: false, horizontalBars: false, series, detailPopoverSize, statusType, emphasizeBaselineAxis }));
}
applyDisplayName(LineChart, "LineChart");
var line_chart_default = LineChart;

// node_modules/@cloudscape-design/components/link/index.js
var import_react250 = __toESM(require_react());
var Link = import_react250.default.forwardRef((_a, ref) => {
  var { fontSize = "body-m", color: color2 = "normal", external = false } = _a, props = __rest(_a, ["fontSize", "color", "external"]);
  const baseComponentProps = useBaseComponent("Link", {
    props: { color: color2, external, fontSize, rel: props.rel, target: props.target, variant: props.variant }
  });
  return import_react250.default.createElement(internal_default3, Object.assign({ fontSize, color: color2, external }, props, baseComponentProps, { ref }));
});
applyDisplayName(Link, "Link");
var link_default = Link;

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/index.js
var import_react251 = __toESM(require_react());
function MixedLineBarChart(_a) {
  var { series = [], height = 500, xScaleType = "linear", yScaleType = "linear", stackedBars = false, horizontalBars = false, statusType = "finished", detailPopoverSize = "medium", emphasizeBaselineAxis = true } = _a, props = __rest(_a, ["series", "height", "xScaleType", "yScaleType", "stackedBars", "horizontalBars", "statusType", "detailPopoverSize", "emphasizeBaselineAxis"]);
  const baseComponentProps = useBaseComponent("MixedLineBarChart", {
    props: {
      detailPopoverSize,
      emphasizeBaselineAxis,
      fitHeight: props.fitHeight,
      hideFilter: props.hideFilter,
      hideLegend: props.hideLegend,
      horizontalBars,
      stackedBars,
      xScaleType,
      yScaleType
    }
  });
  return import_react251.default.createElement(InternalMixedLineBarChart, Object.assign({ series, height, xScaleType, yScaleType, stackedBars, horizontalBars, statusType, detailPopoverSize, emphasizeBaselineAxis }, props, baseComponentProps));
}
applyDisplayName(MixedLineBarChart, "MixedLineBarChart");
var mixed_line_bar_chart_default = MixedLineBarChart;

// node_modules/@cloudscape-design/components/modal/index.js
var import_react252 = __toESM(require_react());
function Modal(_a) {
  var { size = "medium" } = _a, props = __rest(_a, ["size"]);
  const baseComponentProps = useBaseComponent("Modal", {
    props: { size, disableContentPaddings: props.disableContentPaddings }
  });
  return import_react252.default.createElement(InternalModal, Object.assign({ size }, props, baseComponentProps));
}
applyDisplayName(Modal, "Modal");

// node_modules/@cloudscape-design/components/multiselect/index.js
var import_react253 = __toESM(require_react());
var Multiselect = import_react253.default.forwardRef((_a, ref) => {
  var { options = [], filteringType = "none", statusType = "finished", selectedOptions = [], keepOpen = true, hideTokens = false } = _a, restProps = __rest(_a, ["options", "filteringType", "statusType", "selectedOptions", "keepOpen", "hideTokens"]);
  const baseComponentProps = useBaseComponent("Multiselect", {
    props: {
      autoFocus: restProps.autoFocus,
      expandToViewport: restProps.expandToViewport,
      filteringType,
      hideTokens,
      keepOpen,
      tokenLimit: restProps.tokenLimit,
      virtualScroll: restProps.virtualScroll
    }
  });
  const inlineTokens = Boolean(restProps.inlineTokens);
  return import_react253.default.createElement(internal_default9, Object.assign({ options, filteringType, statusType, selectedOptions, keepOpen, hideTokens, inlineTokens }, restProps, baseComponentProps, { ref }));
});
applyDisplayName(Multiselect, "Multiselect");
var multiselect_default = Multiselect;

// node_modules/@cloudscape-design/components/pagination/index.js
var import_react255 = __toESM(require_react());

// node_modules/@cloudscape-design/components/pagination/internal.js
var import_react254 = __toESM(require_react());

// node_modules/@cloudscape-design/components/pagination/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/pagination/styles.scoped.css";
var styles_css_default85 = {
  "root": "awsui_root_fvjdu_1lqdy_99",
  "button": "awsui_button_fvjdu_1lqdy_142",
  "dots": "awsui_dots_fvjdu_1lqdy_143",
  "button-disabled": "awsui_button-disabled_fvjdu_1lqdy_171",
  "arrow": "awsui_arrow_fvjdu_1lqdy_176",
  "page-number": "awsui_page-number_fvjdu_1lqdy_186",
  "button-current": "awsui_button-current_fvjdu_1lqdy_192",
  "page-item": "awsui_page-item_fvjdu_1lqdy_209",
  "root-disabled": "awsui_root-disabled_fvjdu_1lqdy_227"
};

// node_modules/@cloudscape-design/components/pagination/utils.js
function range2(from, to) {
  const result = [];
  for (let i = from; i <= to; i++) {
    result.push(i);
  }
  return result;
}
function getPaginationState(currentPageIndex, totalPagesCount, isOpenEnd) {
  const numberOfControls = 7;
  const leftDelta = Math.floor(numberOfControls / 2);
  let rightDelta = leftDelta;
  const lowerLimit = 2;
  let upperLimit = totalPagesCount - 1;
  if (isOpenEnd) {
    rightDelta++;
    upperLimit = totalPagesCount + 1;
  }
  let leftIndex = currentPageIndex - leftDelta;
  let rightIndex = currentPageIndex + rightDelta;
  if (leftIndex < lowerLimit) {
    rightIndex += lowerLimit - leftIndex;
    leftIndex = lowerLimit;
  }
  if (rightIndex > upperLimit) {
    leftIndex -= rightIndex - upperLimit;
    rightIndex = upperLimit;
  }
  leftIndex = Math.max(leftIndex, 2);
  rightIndex = Math.min(rightIndex, upperLimit);
  const leftDots = leftIndex > 2;
  const rightDots = isOpenEnd || rightIndex < upperLimit;
  if (leftDots) {
    leftIndex++;
  }
  if (rightDots) {
    rightIndex--;
  }
  return { leftDots, rightDots, leftIndex, rightIndex };
}

// node_modules/@cloudscape-design/components/pagination/internal.js
var defaultAriaLabels = {
  nextPageLabel: "",
  paginationLabel: "",
  previousPageLabel: "",
  pageLabel: (pageNumber) => `${pageNumber}`
};
function PageButton({ className: className2, ariaLabel, disabled, pageIndex, isCurrent = false, children, onClick }) {
  function handleClick(event) {
    event.preventDefault();
    onClick(pageIndex);
  }
  return import_react254.default.createElement(
    "li",
    { className: styles_css_default85["page-item"] },
    import_react254.default.createElement("button", { className: clsx_m_default(className2, styles_css_default85.button, disabled && styles_css_default85["button-disabled"], isCurrent && styles_css_default85["button-current"]), type: "button", "aria-label": ariaLabel, disabled, onClick: handleClick, "aria-current": isCurrent }, children)
  );
}
function PageNumber(_a) {
  var { pageIndex } = _a, rest = __rest(_a, ["pageIndex"]);
  return import_react254.default.createElement(PageButton, Object.assign({ className: styles_css_default85["page-number"], pageIndex }, rest), pageIndex);
}
function InternalPagination(_a) {
  var _b, _c, _d;
  var { openEnd, currentPageIndex, ariaLabels, pagesCount, disabled, onChange, onNextPageClick, onPreviousPageClick, __internalRootRef = null } = _a, rest = __rest(_a, ["openEnd", "currentPageIndex", "ariaLabels", "pagesCount", "disabled", "onChange", "onNextPageClick", "onPreviousPageClick", "__internalRootRef"]);
  const baseProps = getBaseProps(rest);
  const { leftDots, leftIndex, rightIndex, rightDots } = getPaginationState(currentPageIndex, pagesCount, openEnd);
  const i18n = useInternalI18n("pagination");
  const paginationLabel = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.paginationLabel;
  const nextPageLabel = (_b = i18n("ariaLabels.nextPageLabel", ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.nextPageLabel)) !== null && _b !== void 0 ? _b : defaultAriaLabels.nextPageLabel;
  const previousPageLabel = (_c = i18n("ariaLabels.previousPageLabel", ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.previousPageLabel)) !== null && _c !== void 0 ? _c : defaultAriaLabels.previousPageLabel;
  const pageNumberLabelFn = (_d = i18n("ariaLabels.pageLabel", ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.pageLabel, (format3) => (pageNumber) => format3({ pageNumber }))) !== null && _d !== void 0 ? _d : defaultAriaLabels.pageLabel;
  function handlePrevPageClick(requestedPageIndex) {
    handlePageClick(requestedPageIndex);
    fireNonCancelableEvent(onPreviousPageClick, {
      requestedPageAvailable: true,
      requestedPageIndex
    });
  }
  function handleNextPageClick(requestedPageIndex) {
    handlePageClick(requestedPageIndex);
    fireNonCancelableEvent(onNextPageClick, {
      requestedPageAvailable: currentPageIndex < pagesCount,
      requestedPageIndex
    });
  }
  function handlePageClick(requestedPageIndex) {
    fireNonCancelableEvent(onChange, { currentPageIndex: requestedPageIndex });
  }
  return import_react254.default.createElement(
    "ul",
    Object.assign({ "aria-label": paginationLabel }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default85.root, disabled && styles_css_default85["root-disabled"]), ref: __internalRootRef }),
    import_react254.default.createElement(
      PageButton,
      { className: styles_css_default85.arrow, pageIndex: currentPageIndex - 1, ariaLabel: previousPageLabel !== null && previousPageLabel !== void 0 ? previousPageLabel : defaultAriaLabels.nextPageLabel, disabled: disabled || currentPageIndex === 1, onClick: handlePrevPageClick },
      import_react254.default.createElement(internal_default, { name: "angle-left", variant: disabled ? "disabled" : "normal" })
    ),
    import_react254.default.createElement(PageNumber, { pageIndex: 1, isCurrent: currentPageIndex === 1, disabled, ariaLabel: pageNumberLabelFn(1), onClick: handlePageClick }),
    leftDots && import_react254.default.createElement("li", { className: styles_css_default85.dots }, "..."),
    range2(leftIndex, rightIndex).map((pageIndex) => import_react254.default.createElement(PageNumber, { key: pageIndex, isCurrent: currentPageIndex === pageIndex, pageIndex, disabled, ariaLabel: pageNumberLabelFn(pageIndex), onClick: handlePageClick })),
    rightDots && import_react254.default.createElement("li", { className: styles_css_default85.dots }, "..."),
    !openEnd && pagesCount > 1 && import_react254.default.createElement(PageNumber, { isCurrent: currentPageIndex === pagesCount, pageIndex: pagesCount, disabled, ariaLabel: pageNumberLabelFn(pagesCount), onClick: handlePageClick }),
    import_react254.default.createElement(
      PageButton,
      { className: styles_css_default85.arrow, pageIndex: currentPageIndex + 1, ariaLabel: nextPageLabel !== null && nextPageLabel !== void 0 ? nextPageLabel : defaultAriaLabels.nextPageLabel, disabled: disabled || !openEnd && (pagesCount === 0 || currentPageIndex === pagesCount), onClick: handleNextPageClick },
      import_react254.default.createElement(internal_default, { name: "angle-right", variant: disabled ? "disabled" : "normal" })
    )
  );
}

// node_modules/@cloudscape-design/components/pagination/index.js
function Pagination(props) {
  const baseComponentProps = useBaseComponent("Pagination", { props: { openEnd: props.openEnd } });
  return import_react255.default.createElement(InternalPagination, Object.assign({}, props, baseComponentProps));
}
applyDisplayName(Pagination, "Pagination");

// node_modules/@cloudscape-design/components/pie-chart/index.js
var import_react260 = __toESM(require_react());

// node_modules/@cloudscape-design/components/pie-chart/pie-chart.js
var import_react259 = __toESM(require_react());

// node_modules/@cloudscape-design/components/pie-chart/labels.js
var import_react257 = __toESM(require_react());

// node_modules/@cloudscape-design/components/pie-chart/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/pie-chart/styles.scoped.css";
var styles_css_default86 = {
  "segment__path": "awsui_segment__path_1edmh_18vxs_103",
  "segment": "awsui_segment_1edmh_18vxs_103",
  "segment__hover": "awsui_segment__hover_1edmh_18vxs_130",
  "label": "awsui_label_1edmh_18vxs_144",
  "root": "awsui_root_1edmh_18vxs_162",
  "content": "awsui_content_1edmh_18vxs_166",
  "content--small": "awsui_content--small_1edmh_18vxs_166",
  "content--fit-height": "awsui_content--fit-height_1edmh_18vxs_169",
  "content--without-labels": "awsui_content--without-labels_1edmh_18vxs_172",
  "content--medium": "awsui_content--medium_1edmh_18vxs_178",
  "content--large": "awsui_content--large_1edmh_18vxs_190",
  "status-container": "awsui_status-container_1edmh_18vxs_207",
  "chart-container": "awsui_chart-container_1edmh_18vxs_211",
  "chart-container--fit-height": "awsui_chart-container--fit-height_1edmh_18vxs_215",
  "chart-container-chart-plot": "awsui_chart-container-chart-plot_1edmh_18vxs_220",
  "chart-container-chart-plot--fit-height": "awsui_chart-container-chart-plot--fit-height_1edmh_18vxs_223",
  "inner-content": "awsui_inner-content_1edmh_18vxs_229",
  "segment__highlight": "awsui_segment__highlight_1edmh_18vxs_240",
  "segment--dimmed": "awsui_segment--dimmed_1edmh_18vxs_255",
  "segment--highlighted": "awsui_segment--highlighted_1edmh_18vxs_258",
  "label--dimmed": "awsui_label--dimmed_1edmh_18vxs_275",
  "label--align-right": "awsui_label--align-right_1edmh_18vxs_278",
  "label-text": "awsui_label-text_1edmh_18vxs_286",
  "label__description": "awsui_label__description_1edmh_18vxs_294",
  "label-line": "awsui_label-line_1edmh_18vxs_301",
  "label--highlighted": "awsui_label--highlighted_1edmh_18vxs_305",
  "popover-header": "awsui_popover-header_1edmh_18vxs_309"
};

// node_modules/@cloudscape-design/components/pie-chart/utils.js
var minRadius = 30;
var paddingLabels = 44;
var defaultPadding = 12;
var smallPadding = 8;
var minLabelLineAngularPadding = Math.PI / 20;
var dimensionsBySize = {
  small: {
    innerRadius: 33,
    outerRadius: 50,
    innerLabelPadding: smallPadding,
    padding: smallPadding,
    paddingLabels
  },
  medium: {
    innerRadius: 66,
    outerRadius: 100,
    innerLabelPadding: defaultPadding,
    padding: defaultPadding,
    paddingLabels
  },
  large: {
    innerRadius: 93,
    outerRadius: 140,
    innerLabelPadding: defaultPadding,
    padding: defaultPadding,
    paddingLabels
  }
};
var refreshDimensionsBySize = {
  small: Object.assign(Object.assign({}, dimensionsBySize.small), { innerRadius: 38, cornerRadius: 3 }),
  medium: Object.assign(Object.assign({}, dimensionsBySize.medium), { innerRadius: 75, cornerRadius: 4 }),
  large: Object.assign(Object.assign({}, dimensionsBySize.large), { innerRadius: 105, cornerRadius: 5 })
};
function getDimensionsBySize({ size, hasLabels, visualRefresh }) {
  if (typeof size === "string") {
    const dimensions = visualRefresh ? refreshDimensionsBySize[size] : dimensionsBySize[size];
    return Object.assign(Object.assign({}, dimensions), { size });
  }
  const sizeSpec = visualRefresh ? refreshDimensionsBySize : dimensionsBySize;
  const getPixelSize = (d) => d.outerRadius * 2 + d.padding * 2 + (hasLabels ? d.paddingLabels : 0) * 2;
  let matchedSize = "small";
  if (size > getPixelSize(sizeSpec.medium)) {
    matchedSize = "medium";
  }
  if (size > getPixelSize(sizeSpec.large)) {
    matchedSize = "large";
  }
  const padding = sizeSpec[matchedSize].padding;
  const paddingLabels2 = hasLabels ? sizeSpec[matchedSize].paddingLabels : 0;
  const radiiRatio = sizeSpec[matchedSize].outerRadius / sizeSpec[matchedSize].innerRadius;
  const outerRadius = Math.max(minRadius, (size - 2 * paddingLabels2 - 2 * padding) / 2);
  const innerRadius = outerRadius / radiiRatio;
  return Object.assign(Object.assign({}, sizeSpec[matchedSize]), { outerRadius, innerRadius, size: matchedSize });
}
var defaultDetails = (i18n, i18nStrings) => (datum, dataSum) => [
  { key: i18n("i18nStrings.detailsValue", i18nStrings.detailsValue) || "", value: datum.value },
  {
    key: i18n("i18nStrings.detailsPercentage", i18nStrings.detailsPercentage) || "",
    value: `${(datum.value * 100 / dataSum).toFixed(0)}%`
  }
];
var balanceLabelNodes = (nodes, markers, leftSide, radius) => {
  var _a;
  const MARGIN = 10;
  let previousBBox = null;
  let i = leftSide ? nodes.length - 1 : 0;
  while (leftSide && i >= 0 || !leftSide && i < nodes.length) {
    const node = nodes[i];
    const x2 = parseFloat(node.getAttribute("data-x") || "0");
    const y2 = parseFloat(node.getAttribute("data-y") || "0");
    const box = {
      x: x2,
      y: y2,
      height: node.getBoundingClientRect().height
    };
    const marker = markers[i];
    if (leftSide) {
      i--;
    } else {
      i++;
    }
    if (!previousBBox) {
      previousBBox = box;
      node.setAttribute("transform", "");
      continue;
    }
    if (!leftSide && box.x < 0 || leftSide && box.x >= 0) {
      break;
    }
    node.setAttribute("transform", "");
    const yOffset = previousBBox.y + previousBBox.height + MARGIN - box.y;
    if (yOffset > 0) {
      const xOffset = computeXOffset(box, yOffset, radius) * (leftSide ? -1 : 1);
      node.setAttribute("transform", `translate(${xOffset} ${yOffset})`);
      const lineNode = (_a = node.parentNode) === null || _a === void 0 ? void 0 : _a.querySelector(`.${styles_css_default86["label-line"]}`);
      if (lineNode) {
        const { endY, endX } = marker;
        lineNode.setAttribute("y2", "" + (endY + yOffset));
        lineNode.setAttribute("x2", "" + (endX + xOffset));
      }
      box.y += yOffset;
      box.x += xOffset;
    }
    previousBBox = box;
  }
};
var squareDistance = (edge) => Math.pow(edge[0], 2) + Math.pow(edge[1], 2);
var computeXOffset = (box, yOffset, radius) => {
  const upperEdge = [box.x, box.y + yOffset];
  const lowerEdge = [box.x, box.y + box.height + yOffset];
  const closestEdge = squareDistance(upperEdge) < squareDistance(lowerEdge) ? upperEdge : lowerEdge;
  if (squareDistance(closestEdge) < Math.pow(radius, 2)) {
    return Math.sqrt(Math.pow(radius, 2) - Math.pow(closestEdge[1], 2)) - Math.abs(closestEdge[0]);
  }
  return 0;
};
var computeSmartAngle = (startAngle, endAngle, optimize = false) => {
  if (!optimize || endAngle - startAngle < 2 * minLabelLineAngularPadding) {
    return (endAngle + startAngle) / 2;
  }
  const paddedStartAngle = startAngle + minLabelLineAngularPadding;
  const paddedEndAngle = endAngle - minLabelLineAngularPadding;
  if (paddedStartAngle < 0 && paddedEndAngle > 0) {
    return 0;
  }
  if (paddedStartAngle < Math.PI && paddedEndAngle > Math.PI) {
    return Math.PI;
  }
  const endAngleMinDistance = Math.min(paddedEndAngle, Math.abs(Math.PI - paddedEndAngle), 2 * Math.PI - paddedEndAngle);
  const startAngleMinDistance = Math.min(paddedStartAngle, Math.abs(Math.PI - paddedStartAngle), 2 * Math.PI - paddedStartAngle);
  if (endAngleMinDistance < startAngleMinDistance) {
    return paddedEndAngle;
  }
  return paddedStartAngle;
};

// node_modules/@cloudscape-design/components/pie-chart/responsive-text.js
var import_react256 = __toESM(require_react());
var responsive_text_default2 = (0, import_react256.memo)(ResponsiveText2);
function ResponsiveText2({ x: x2, y: y2, rightSide, className: className2, children, containerBoundaries }) {
  const actualRef = (0, import_react256.useRef)(null);
  const virtualRef = (0, import_react256.useRef)(null);
  (0, import_react256.useEffect)(() => {
    const timeoutId = setTimeout(() => {
      const groupRect = virtualRef.current.getBoundingClientRect();
      const visibleWidth = containerBoundaries ? getVisibleWidth(groupRect, containerBoundaries) : 0;
      renderTextContent(actualRef.current, children, visibleWidth);
    }, 25);
    return () => clearTimeout(timeoutId);
  });
  return import_react256.default.createElement(
    import_react256.default.Fragment,
    null,
    import_react256.default.createElement("text", { ref: virtualRef, x: x2, y: y2, style: { textAnchor: rightSide ? "start" : "end", visibility: "hidden" }, "aria-hidden": "true", className: className2 }, children),
    import_react256.default.createElement("text", { ref: actualRef, x: x2, y: y2, style: { textAnchor: rightSide ? "start" : "end" }, className: className2 }, children)
  );
}
function getVisibleWidth(element, container) {
  if (element.left < container.left) {
    return element.right - container.left;
  } else if (element.right > container.right) {
    return container.right - element.left;
  } else {
    return container.right - container.left;
  }
}

// node_modules/@cloudscape-design/components/pie-chart/labels.js
function LabelElement({ x: x2, y: y2, hideTitles, hideDescriptions, rightSide, title, description, containerBoundaries }) {
  return (
    // Reset the transform property to prepare for `balanceLabelNodes`.
    // The dataset attributes are also needed in the function for IE11 support.
    import_react257.default.createElement(
      "g",
      { className: styles_css_default86["label-text"], transform: "", "data-x": x2, "data-y": y2 },
      !hideTitles && import_react257.default.createElement(responsive_text_default2, { x: x2, y: y2, rightSide, containerBoundaries }, title),
      !hideDescriptions && description && import_react257.default.createElement(responsive_text_default2, { x: x2, y: y2 + (hideTitles ? 0 : 18), rightSide, className: styles_css_default86.label__description, containerBoundaries }, description)
    )
  );
}
var labels_default = ({ pieData, dimensions, highlightedSegment, segmentDescription, visibleDataSum, hideTitles, hideDescriptions, containerRef }) => {
  const containerBoundaries = useElementBoundaries(containerRef);
  const shouldOptimizeLabels = containerBoundaries.right - containerBoundaries.left - (dimensions.outerRadius + dimensions.innerLabelPadding) * 2 < 300;
  const markers = (0, import_react257.useMemo)(() => {
    const { outerRadius: radius, innerLabelPadding } = dimensions;
    const arcMarkerStart = arc_default().innerRadius(radius - 1).outerRadius(radius - 1);
    const arcMarkerBreak = arc_default().innerRadius(radius + innerLabelPadding).outerRadius(radius + innerLabelPadding);
    return pieData.map((datum, i) => {
      const labelDatum = pieData[i];
      const smartAngle = computeSmartAngle(labelDatum.startAngle, labelDatum.endAngle, shouldOptimizeLabels);
      const lineExtension = 0.5 * Math.cos(2 * smartAngle) + 0.5;
      arcMarkerBreak.outerRadius(radius + 20 * lineExtension);
      arcMarkerBreak.innerRadius(radius + 20 * lineExtension);
      const [startX, startY] = arcMarkerStart.centroid(Object.assign(Object.assign({}, datum), { startAngle: smartAngle, endAngle: smartAngle }));
      const [breakX, breakY] = arcMarkerBreak.centroid(Object.assign(Object.assign({}, datum), { startAngle: smartAngle, endAngle: smartAngle }));
      const rightSide = smartAngle < Math.PI;
      const endX = shouldOptimizeLabels ? breakX + 20 * (rightSide ? 1 : -1) : (radius + 20) * (rightSide ? 1 : -1);
      const textX = endX + 5 * (rightSide ? 1 : -1);
      return {
        startX,
        startY,
        breakX,
        breakY,
        endX,
        endY: breakY,
        textX,
        textY: breakY,
        rightSide,
        datum
      };
    });
  }, [pieData, dimensions, shouldOptimizeLabels]);
  const rootRef = (0, import_react257.useRef)(null);
  (0, import_react257.useLayoutEffect)(() => {
    if (!rootRef.current) {
      return;
    }
    const labelNodes = rootRef.current.querySelectorAll(`.${styles_css_default86["label-text"]}`);
    balanceLabelNodes(labelNodes, markers, false, dimensions.outerRadius + dimensions.innerLabelPadding);
    balanceLabelNodes(labelNodes, markers, true, dimensions.outerRadius + dimensions.innerLabelPadding);
  }, [markers, pieData, dimensions]);
  return import_react257.default.createElement("g", { className: styles_css_default86.markers, "aria-hidden": "true", ref: rootRef }, markers.map(({ startX, startY, breakX, breakY, endX, endY, textX, textY, rightSide, datum }) => {
    const segment = datum.data.datum;
    const description = segmentDescription === null || segmentDescription === void 0 ? void 0 : segmentDescription(segment, visibleDataSum);
    if (hideTitles && !description || hideDescriptions && !segment.title) {
      return null;
    }
    return import_react257.default.createElement(
      "g",
      { key: datum.data.index, className: clsx_m_default(styles_css_default86.label, {
        [styles_css_default86["label--highlighted"]]: highlightedSegment === segment,
        [styles_css_default86["label--dimmed"]]: highlightedSegment !== null && highlightedSegment !== segment,
        [styles_css_default86["label--align-right"]]: !rightSide
      }) },
      import_react257.default.createElement("line", { x1: startX, y1: startY, x2: breakX, y2: breakY }),
      import_react257.default.createElement("line", { x1: breakX, y1: breakY, x2: endX, y2: endY, className: styles_css_default86["label-line"] }),
      import_react257.default.createElement(LabelElement, { x: textX, y: textY, rightSide, title: segment.title, description, hideTitles, hideDescriptions, containerBoundaries })
    );
  }));
};
function useElementBoundaries(ref) {
  const [state, setState] = (0, import_react257.useState)({ left: 0, right: 0 });
  useResizeObserver(ref, (entry) => {
    const elementRect = entry.target.getBoundingClientRect();
    setState({ left: elementRect.left, right: elementRect.right });
  });
  return state;
}

// node_modules/@cloudscape-design/components/pie-chart/segments.js
var import_react258 = __toESM(require_react());
function Segments({ pieData, highlightedSegment, dimensions, variant, focusedSegmentRef, popoverTrackRef, segmentAriaRoleDescription, onMouseDown, onMouseOver }) {
  const i18n = useInternalI18n("pie-chart");
  const { arcFactory, highlightedArcFactory } = (0, import_react258.useMemo)(() => {
    const radius = dimensions.outerRadius;
    const innerRadius = variant === "pie" ? 0 : dimensions.innerRadius;
    const cornerRadius = dimensions.cornerRadius || 0;
    const arcFactory2 = arc_default().innerRadius(innerRadius).outerRadius(radius).cornerRadius(cornerRadius);
    const highlightedArcFactory2 = arc_default().innerRadius(radius + 4).outerRadius(radius + 6);
    return {
      arcFactory: arcFactory2,
      highlightedArcFactory: highlightedArcFactory2
    };
  }, [dimensions, variant]);
  const centroid = (0, import_react258.useMemo)(() => {
    for (const datum of pieData) {
      if (datum.data.datum === highlightedSegment) {
        const [centroidLeft, centroidTop] = arcFactory.centroid(datum);
        return { cx: centroidLeft, cy: centroidTop };
      }
    }
    return null;
  }, [highlightedSegment, pieData, arcFactory]);
  return import_react258.default.createElement(
    "g",
    null,
    pieData.map((datum) => {
      const isHighlighted = highlightedSegment === datum.data.datum;
      const isDimmed = highlightedSegment !== null && !isHighlighted;
      const arcPath = arcFactory(datum) || void 0;
      const highlightedPath = highlightedArcFactory(datum) || void 0;
      return import_react258.default.createElement(
        "g",
        { key: datum.data.index, onMouseDown: (e) => {
          onMouseDown(datum.data);
          e.preventDefault();
        }, onMouseOver: () => onMouseOver(datum.data), className: clsx_m_default(styles_css_default86.segment, {
          [styles_css_default86["segment--highlighted"]]: isHighlighted,
          [styles_css_default86["segment--dimmed"]]: isDimmed
        }), ref: isHighlighted ? focusedSegmentRef : void 0, "aria-label": `${datum.data.datum.title} (${datum.data.datum.value})`, role: "button", "aria-roledescription": i18n("i18nStrings.segmentAriaRoleDescription", segmentAriaRoleDescription) },
        import_react258.default.createElement("path", { d: arcPath, fill: datum.data.color, className: styles_css_default86.segment__path, "aria-hidden": "true" }),
        import_react258.default.createElement("path", { d: highlightedPath, fill: datum.data.color, className: clsx_m_default(styles_css_default86.segment__path, styles_css_default86.segment__highlight), "aria-hidden": "true" })
      );
    }),
    import_react258.default.createElement("circle", Object.assign({}, centroid, { ref: popoverTrackRef, r: "1", opacity: "0", "aria-hidden": "true" }))
  );
}

// node_modules/@cloudscape-design/components/pie-chart/pie-chart.js
var pie_chart_default = ({ fitHeight, height: explicitHeight, variant, size, width, i18nStrings, ariaLabel, ariaLabelledby, ariaDescription, innerMetricValue, innerMetricDescription, hideTitles, hideDescriptions, detailPopoverContent, detailPopoverSize, detailPopoverFooter, segmentDescription, highlightedSegment, onHighlightChange, legendSegment, pieData, dataSum }) => {
  var _a, _b;
  const [pinnedSegment, setPinnedSegment] = (0, import_react259.useState)(null);
  const plotRef = (0, import_react259.useRef)(null);
  const containerRef = (0, import_react259.useRef)(null);
  const focusedSegmentRef = (0, import_react259.useRef)(null);
  const popoverTrackRef = (0, import_react259.useRef)(null);
  const popoverRef = (0, import_react259.useRef)(null);
  const hasLabels = !(hideTitles && hideDescriptions);
  const isRefresh = useVisualRefresh();
  const height = (_a = useHeightMeasure(() => {
    var _a2, _b2;
    return (_b2 = (_a2 = plotRef.current) === null || _a2 === void 0 ? void 0 : _a2.svg) !== null && _b2 !== void 0 ? _b2 : null;
  }, !fitHeight)) !== null && _a !== void 0 ? _a : explicitHeight;
  const dimensions = (0, import_react259.useMemo)(() => getDimensionsBySize({ size: fitHeight ? Math.min(height, width) : size, hasLabels, visualRefresh: isRefresh }), [fitHeight, height, width, size, hasLabels, isRefresh]);
  const hasInnerContent = variant === "donut" && (innerMetricValue || innerMetricDescription && dimensions.size !== "small");
  const innerMetricId = useUniqueId("awsui-pie-chart__inner");
  const [isPopoverOpen, setPopoverOpen] = (0, import_react259.useState)(false);
  const [popoverData, setPopoverData] = (0, import_react259.useState)();
  const highlightedSegmentIndex = (0, import_react259.useMemo)(() => {
    for (let index = 0; index < pieData.length; index++) {
      if (pieData[index].data.datum === highlightedSegment) {
        return index;
      }
    }
    return null;
  }, [pieData, highlightedSegment]);
  const detailPopoverFooterContent = (0, import_react259.useMemo)(() => detailPopoverFooter && highlightedSegment ? detailPopoverFooter(highlightedSegment) : null, [detailPopoverFooter, highlightedSegment]);
  const i18n = useInternalI18n("pie-chart");
  const detailFunction = detailPopoverContent || defaultDetails(i18n, i18nStrings);
  const details = popoverData ? detailFunction(popoverData.datum, dataSum) : [];
  const popoverContentRef = (0, import_react259.useRef)(null);
  const popoverContent = popoverData && import_react259.default.createElement(chart_series_details_default, { details, compactList: true, ref: popoverContentRef });
  const popoverDismissedRecently = (0, import_react259.useRef)(false);
  const escapePressed = (0, import_react259.useRef)(false);
  const highlightSegment = (0, import_react259.useCallback)((internalDatum) => {
    const segment = internalDatum.datum;
    if (segment !== highlightedSegment) {
      onHighlightChange(segment);
    }
    if (popoverTrackRef.current) {
      setPopoverData({
        datum: internalDatum.datum,
        series: {
          color: internalDatum.color,
          index: internalDatum.index,
          label: internalDatum.datum.title,
          markerType: "rectangle"
        },
        trackRef: popoverTrackRef
      });
      setPopoverOpen(true);
    }
  }, [highlightedSegment, setPopoverOpen, onHighlightChange]);
  const clearHighlightedSegment = (0, import_react259.useCallback)(() => {
    setPopoverOpen(false);
    onHighlightChange(null);
  }, [onHighlightChange, setPopoverOpen]);
  const checkMouseLeave = (event) => {
    if (pinnedSegment !== null) {
      return;
    }
    if (nodeContains(popoverRef.current, event.relatedTarget) || nodeContains(focusedSegmentRef.current, event.relatedTarget)) {
      return;
    }
    clearHighlightedSegment();
  };
  (0, import_react259.useEffect)(() => {
    const onKeyDown2 = (event) => {
      if (event.key === "Escape") {
        clearHighlightedSegment();
        escapePressed.current = true;
      }
    };
    document.addEventListener("keydown", onKeyDown2);
    return () => document.removeEventListener("keydown", onKeyDown2);
  }, [clearHighlightedSegment]);
  const onMouseDown = (0, import_react259.useCallback)((internalDatum) => {
    if (pinnedSegment === internalDatum.datum) {
      setPinnedSegment(null);
      clearHighlightedSegment();
    } else {
      setPinnedSegment(internalDatum.datum);
      highlightSegment(internalDatum);
    }
  }, [pinnedSegment, clearHighlightedSegment, setPinnedSegment, highlightSegment]);
  const onMouseOver = (0, import_react259.useCallback)((internalDatum) => {
    if (escapePressed.current) {
      escapePressed.current = false;
      return;
    }
    if (pinnedSegment !== null) {
      return;
    }
    highlightSegment(internalDatum);
  }, [pinnedSegment, highlightSegment]);
  const onKeyDown = (0, import_react259.useCallback)((event) => {
    const keyCode = event.keyCode;
    if (keyCode !== KeyCode.right && keyCode !== KeyCode.left && keyCode !== KeyCode.enter && keyCode !== KeyCode.space) {
      return;
    }
    event.preventDefault();
    let nextIndex = highlightedSegmentIndex || 0;
    const MAX = pieData.length - 1;
    if (keyCode === KeyCode.right) {
      nextIndex++;
      if (nextIndex > MAX) {
        nextIndex = 0;
      }
    } else if (keyCode === KeyCode.left) {
      nextIndex--;
      if (nextIndex < 0) {
        nextIndex = MAX;
      }
    }
    if (keyCode === KeyCode.enter || keyCode === KeyCode.space) {
      setPinnedSegment(pieData[nextIndex].data.datum);
    }
    highlightSegment(pieData[nextIndex].data);
  }, [setPinnedSegment, highlightSegment, pieData, highlightedSegmentIndex]);
  const onApplicationFocus = (0, import_react259.useCallback)((_event, target) => {
    if (pinnedSegment !== null || popoverDismissedRecently.current || target === "mouse") {
      return;
    }
    const segment = highlightedSegment || legendSegment || pieData[0].data.datum;
    const matched = pieData.filter((d) => d.data.datum === segment);
    highlightSegment(matched[0].data);
  }, [pinnedSegment, pieData, highlightSegment, highlightedSegment, legendSegment]);
  const onApplicationBlur = (0, import_react259.useCallback)((event) => {
    const blurTarget = event.relatedTarget || event.target;
    if (blurTarget === null || !(blurTarget instanceof Element) || !nodeBelongs(containerRef.current, blurTarget)) {
      setPopoverOpen(false);
      setPinnedSegment(null);
    }
  }, [setPinnedSegment]);
  const onPopoverDismiss = (outsideClick) => {
    setPopoverOpen(false);
    setPinnedSegment(null);
    if (!outsideClick) {
      setTimeout(() => {
        popoverDismissedRecently.current = true;
        plotRef.current.focusApplication();
        popoverDismissedRecently.current = false;
      }, 0);
    } else {
      onHighlightChange(null);
    }
  };
  return import_react259.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default86["chart-container"], fitHeight && styles_css_default86["chart-container--fit-height"]), ref: containerRef },
    import_react259.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default86["chart-container-chart-plot"], fitHeight && styles_css_default86["chart-container-chart-plot--fit-height"]) },
      import_react259.default.createElement(
        chart_plot_default,
        { ref: plotRef, width: "100%", height: fitHeight ? "100%" : height, transform: `translate(${width / 2} ${height / 2})`, isPrecise: true, isClickable: !isPopoverOpen, ariaLabel, ariaLabelledby, ariaDescription, ariaDescribedby: hasInnerContent ? innerMetricId : void 0, ariaRoleDescription: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.chartAriaRoleDescription, activeElementRef: focusedSegmentRef, activeElementKey: highlightedSegmentIndex === null || highlightedSegmentIndex === void 0 ? void 0 : highlightedSegmentIndex.toString(), onApplicationFocus, onApplicationBlur, onKeyDown, onMouseOut: checkMouseLeave },
        import_react259.default.createElement(Segments, { pieData, dimensions, variant, focusedSegmentRef, popoverTrackRef, highlightedSegment, segmentAriaRoleDescription: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.segmentAriaRoleDescription, onMouseDown, onMouseOver }),
        hasLabels && import_react259.default.createElement(labels_default, { pieData, dimensions, segmentDescription, visibleDataSum: dataSum, hideTitles, hideDescriptions, highlightedSegment, containerRef })
      )
    ),
    hasInnerContent && import_react259.default.createElement(
      "div",
      { className: styles_css_default86["inner-content"], id: innerMetricId },
      innerMetricValue && import_react259.default.createElement(InternalBox, { variant: dimensions.size === "small" ? "h3" : "h1", tagOverride: "div", color: "inherit", padding: "n" }, innerMetricValue),
      innerMetricDescription && dimensions.size !== "small" && import_react259.default.createElement(InternalBox, { variant: "h3", color: "text-body-secondary", tagOverride: "div", padding: "n" }, innerMetricDescription)
    ),
    isPopoverOpen && popoverData && import_react259.default.createElement(
      chart_popover_default,
      { ref: popoverRef, title: popoverData.series && import_react259.default.createElement(
        InternalBox,
        { className: styles_css_default86["popover-header"], variant: "strong" },
        import_react259.default.createElement(chart_series_marker_default, { color: popoverData.series.color, type: popoverData.series.markerType }),
        " ",
        popoverData.series.label
      ), trackRef: popoverData.trackRef, trackKey: popoverData.series.index, dismissButton: pinnedSegment !== null, dismissAriaLabel: i18nStrings.detailPopoverDismissAriaLabel, onDismiss: onPopoverDismiss, container: ((_b = plotRef.current) === null || _b === void 0 ? void 0 : _b.svg) || null, size: detailPopoverSize, onMouseLeave: checkMouseLeave, onBlur: onApplicationBlur },
      popoverContent,
      detailPopoverFooterContent && import_react259.default.createElement(ChartPopoverFooter, null, detailPopoverFooterContent)
    ),
    import_react259.default.createElement(live_region_default, { source: [popoverContentRef] })
  );
};

// node_modules/@cloudscape-design/components/pie-chart/index.js
var PieChart = function PieChart2(_a) {
  var { fitHeight, variant = "pie", size = "medium", hideTitles = false, hideDescriptions = false, hideLegend = false, hideFilter = false, statusType = "finished", data: externalData = [], i18nStrings = {}, highlightedSegment: controlledHighlightedSegment, visibleSegments: controlledVisibleSegments, onHighlightChange: controlledOnHighlightChange, onFilterChange, additionalFilters, legendTitle, detailPopoverSize = "medium" } = _a, props = __rest(_a, ["fitHeight", "variant", "size", "hideTitles", "hideDescriptions", "hideLegend", "hideFilter", "statusType", "data", "i18nStrings", "highlightedSegment", "visibleSegments", "onHighlightChange", "onFilterChange", "additionalFilters", "legendTitle", "detailPopoverSize"]);
  const { __internalRootRef = null } = useBaseComponent("PieChart", {
    props: {
      fitHeight,
      variant,
      size,
      hideTitles,
      hideDescriptions,
      hideLegend,
      hideFilter,
      detailPopoverSize
    }
  });
  const baseProps = getBaseProps(props);
  const containerRef = (0, import_react260.useRef)(null);
  const [containerWidth, measureRef] = useContainerWidth();
  const data = (0, import_react260.useMemo)(() => {
    const colors = createCategoryColorScale(externalData, void 0, (it) => it.color || null);
    return externalData.map((datum, i) => ({
      index: i,
      color: colors[i],
      datum
    }));
  }, [externalData]);
  const [highlightedSegment = null, setHighlightedSegment] = useControllable(controlledHighlightedSegment, controlledOnHighlightChange, null, {
    componentName: "PieChart",
    controlledProp: "highlightedSegment",
    changeHandler: "onHighlightChange"
  });
  const [legendSegment, setLegendSegment] = (0, import_react260.useState)(highlightedSegment);
  (0, import_react260.useEffect)(() => {
    setLegendSegment(controlledHighlightedSegment || null);
  }, [controlledHighlightedSegment]);
  const [visibleSegments, setVisibleSegments] = useControllable(controlledVisibleSegments, onFilterChange, externalData, {
    componentName: "PieChart",
    controlledProp: "visibleSegments",
    changeHandler: "onFilterChange"
  });
  const visibleData = (0, import_react260.useMemo)(() => data.filter((d) => (visibleSegments === null || visibleSegments === void 0 ? void 0 : visibleSegments.indexOf(d.datum)) !== -1), [data, visibleSegments]);
  const filterItems = data === null || data === void 0 ? void 0 : data.map((data2) => ({
    label: data2.datum.title,
    color: data2.color,
    type: "rectangle",
    datum: data2.datum
  }));
  const legendItems = filterItems.filter((d) => (visibleSegments === null || visibleSegments === void 0 ? void 0 : visibleSegments.indexOf(d.datum)) !== -1);
  const filterChange = (0, import_react260.useCallback)((selectedSeries) => {
    setVisibleSegments(selectedSeries);
    fireNonCancelableEvent(onFilterChange, {
      visibleSegments: selectedSeries
    });
  }, [setVisibleSegments, onFilterChange]);
  const onHighlightChange = (0, import_react260.useCallback)((segment) => {
    setLegendSegment(segment);
    setHighlightedSegment(segment);
    fireNonCancelableEvent(controlledOnHighlightChange, { highlightedSegment: segment });
  }, [controlledOnHighlightChange, setHighlightedSegment]);
  const onBlur = (event) => {
    if (event.relatedTarget && !nodeBelongs(containerRef.current, event.relatedTarget)) {
      highlightedSegment && onHighlightChange(null);
      setLegendSegment(null);
    }
  };
  const mergedRef = useMergeRefs(containerRef, measureRef, __internalRootRef);
  const { pieData, dataSum } = (0, import_react260.useMemo)(() => {
    const dataSum2 = visibleData.reduce((sum2, d) => sum2 + d.datum.value, 0);
    const pieFactory = pie_default().value((d) => d.datum.value < dataSum2 / 100 ? dataSum2 / 100 : d.datum.value).sort(null);
    const pieData2 = pieFactory(visibleData.filter((d) => d.datum.value > 0));
    return { pieData: pieData2, dataSum: dataSum2 };
  }, [visibleData]);
  const hasNoData = !externalData || externalData.length === 0;
  const { isEmpty, showChart } = getChartStatus({ externalData: data, visibleData: pieData, statusType });
  const isNoMatch = isEmpty && visibleData.length !== data.length;
  const showFilters = statusType === "finished" && !hasNoData && (additionalFilters || !hideFilter);
  const reserveLegendSpace = !showChart && !hideLegend;
  const reserveFilterSpace = statusType !== "finished" && !isNoMatch && (!hideFilter || additionalFilters);
  const hasLabels = !(hideTitles && hideDescriptions);
  const isRefresh = useVisualRefresh();
  const defaultDimensions = getDimensionsBySize({ size, hasLabels, visualRefresh: isRefresh });
  const radius = defaultDimensions.outerRadius;
  const height = 2 * (radius + defaultDimensions.padding + (hasLabels ? defaultDimensions.paddingLabels : 0));
  return import_react260.default.createElement(ChartWrapper, Object.assign({ ref: mergedRef, fitHeight: !!fitHeight }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default86.root), contentClassName: clsx_m_default(styles_css_default86.content, styles_css_default86[`content--${defaultDimensions.size}`], {
    [styles_css_default86["content--without-labels"]]: !hasLabels,
    [styles_css_default86["content--fit-height"]]: fitHeight
  }), defaultFilter: showFilters && !hideFilter ? import_react260.default.createElement(chart_filter_default, { series: filterItems, onChange: filterChange, selectedSeries: visibleSegments, i18nStrings }) : null, additionalFilters: showFilters ? additionalFilters : null, reserveFilterSpace: !!reserveFilterSpace, reserveLegendSpace: !!reserveLegendSpace, chartStatus: import_react260.default.createElement(ChartStatusContainer, { isEmpty, isNoMatch, showChart, statusType, empty: props.empty, noMatch: props.noMatch, loadingText: props.loadingText, errorText: props.errorText, recoveryText: props.recoveryText, onRecoveryClick: props.onRecoveryClick }), chart: showChart ? import_react260.default.createElement(pie_chart_default, Object.assign({}, props, { variant, size, height, fitHeight, data: externalData, width: containerWidth, hideTitles, hideDescriptions, i18nStrings, onHighlightChange, highlightedSegment, legendSegment, detailPopoverSize, pieData, dataSum })) : null, legend: !hideLegend && !hasNoData && statusType === "finished" && import_react260.default.createElement(chart_legend_default, { series: legendItems, highlightedSeries: legendSegment, legendTitle, ariaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.legendAriaLabel, onHighlightChange, plotContainerRef: containerRef }), onBlur }));
};
applyDisplayName(PieChart, "PieChart");
var pie_chart_default2 = PieChart;

// node_modules/@cloudscape-design/components/popover/index.js
var import_react261 = __toESM(require_react());
function Popover(_a) {
  var { position = "right", size = "medium", fixedWidth = false, triggerType = "text", dismissButton: dismissButton2 = true, renderWithPortal = false, header } = _a, rest = __rest(_a, ["position", "size", "fixedWidth", "triggerType", "dismissButton", "renderWithPortal", "header"]);
  if (isDevelopment) {
    if (dismissButton2 && !header) {
      warnOnce("Popover", `You should provide a \`header\` when \`dismissButton\` is true.`);
    }
  }
  const baseComponentProps = useBaseComponent("Popover", {
    props: { dismissButton: dismissButton2, fixedWidth, position, renderWithPortal, size, triggerType }
  });
  const externalProps = getExternalProps(rest);
  return import_react261.default.createElement(internal_default15, Object.assign({ header, position, size, fixedWidth, triggerType, dismissButton: dismissButton2, renderWithPortal }, externalProps, baseComponentProps));
}
applyDisplayName(Popover, "Popover");

// node_modules/@cloudscape-design/components/progress-bar/index.js
var import_react263 = __toESM(require_react());

// node_modules/@cloudscape-design/components/progress-bar/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/progress-bar/styles.scoped.css";
var styles_css_default87 = {
  "progress": "awsui_progress_11huc_1ah81_197",
  "result-state": "awsui_result-state_11huc_1ah81_211",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_11huc_1ah81_1",
  "root": "awsui_root_11huc_1ah81_233",
  "with-result-button": "awsui_with-result-button_11huc_1ah81_268",
  "result-text": "awsui_result-text_11huc_1ah81_272",
  "result-container-error": "awsui_result-container-error_11huc_1ah81_276",
  "result-container-success": "awsui_result-container-success_11huc_1ah81_276",
  "result-button": "awsui_result-button_11huc_1ah81_280",
  "word-wrap": "awsui_word-wrap_11huc_1ah81_286",
  "label-flash": "awsui_label-flash_11huc_1ah81_291",
  "label-key-value": "awsui_label-key-value_11huc_1ah81_295",
  "flash": "awsui_flash_11huc_1ah81_303",
  "progress-container": "awsui_progress-container_11huc_1ah81_307",
  "percentage-container": "awsui_percentage-container_11huc_1ah81_314",
  "percentage": "awsui_percentage_11huc_1ah81_314",
  "complete": "awsui_complete_11huc_1ah81_360",
  "progress-in-flash": "awsui_progress-in-flash_11huc_1ah81_388"
};

// node_modules/@cloudscape-design/components/progress-bar/internal.js
var import_react262 = __toESM(require_react());
var MAX_VALUE = 100;
var clamp2 = (value, lowerLimit, upperLimit) => {
  return Math.max(Math.min(value, upperLimit), lowerLimit);
};
var Progress = ({ value, isInFlash, ariaLabel, ariaLabelledby }) => {
  const roundedValue = Math.round(value);
  const progressValue = clamp2(roundedValue, 0, MAX_VALUE);
  return import_react262.default.createElement(
    "div",
    { className: styles_css_default87["progress-container"] },
    import_react262.default.createElement("progress", { className: clsx_m_default(styles_css_default87.progress, progressValue >= MAX_VALUE && styles_css_default87.complete, isInFlash && styles_css_default87["progress-in-flash"]), max: MAX_VALUE, value: progressValue, "aria-label": ariaLabel, "aria-labelledby": !ariaLabel ? ariaLabelledby : void 0 }),
    import_react262.default.createElement(
      "span",
      { "aria-hidden": "true", className: styles_css_default87["percentage-container"] },
      import_react262.default.createElement(InternalBox, { className: styles_css_default87.percentage, variant: "small", color: isInFlash ? "inherit" : void 0 }, `${progressValue}%`)
    )
  );
};
var SmallText = ({ color: color2, children }) => {
  return import_react262.default.createElement(InternalBox, { className: styles_css_default87["word-wrap"], variant: "small", display: "block", color: color2 }, children);
};
var ResultButton = ({ onClick, children }) => {
  return import_react262.default.createElement(
    "div",
    { className: styles_css_default87["result-button"] },
    import_react262.default.createElement(InternalButton, { formAction: "none", onClick }, children)
  );
};
var ResultState = ({ isInFlash, resultText, resultButtonText, status, onClick }) => {
  const hasResultButton = !!resultButtonText;
  if (isInFlash) {
    return import_react262.default.createElement(
      "div",
      { className: styles_css_default87[`result-container-${status}`], "aria-live": "polite", "aria-atomic": "true" },
      import_react262.default.createElement("span", { className: styles_css_default87["result-text"] }, resultText)
    );
  }
  return import_react262.default.createElement(
    "div",
    { className: styles_css_default87[`result-container-${status}`], "aria-live": "polite", "aria-atomic": "true" },
    import_react262.default.createElement(
      "span",
      { className: clsx_m_default(hasResultButton && styles_css_default87["with-result-button"]) },
      import_react262.default.createElement(
        StatusIndicator,
        { type: status === "success" ? "success" : "error" },
        import_react262.default.createElement("span", { className: styles_css_default87["result-text"] }, resultText)
      )
    ),
    hasResultButton && import_react262.default.createElement(ResultButton, { onClick }, resultButtonText)
  );
};

// node_modules/@cloudscape-design/components/progress-bar/index.js
var ASSERTION_FREQUENCY = 5e3;
function ProgressBar(_a) {
  var { value = 0, status = "in-progress", variant = "standalone", resultButtonText, label, ariaLabel, ariaLabelledby, description, additionalInfo, resultText, onResultButtonClick } = _a, rest = __rest(_a, ["value", "status", "variant", "resultButtonText", "label", "ariaLabel", "ariaLabelledby", "description", "additionalInfo", "resultText", "onResultButtonClick"]);
  const { __internalRootRef } = useBaseComponent("ProgressBar", {
    props: { variant }
  });
  const baseProps = getBaseProps(rest);
  const generatedName = useUniqueId("awsui-progress-bar-");
  const labelId = `${generatedName}-label`;
  const isInFlash = variant === "flash";
  const isInProgressState = status === "in-progress";
  const [announcedValue, setAnnouncedValue] = (0, import_react263.useState)("");
  const throttledAssertion = (0, import_react263.useMemo)(() => {
    return throttle((value2) => {
      setAnnouncedValue(`${value2}%`);
    }, ASSERTION_FREQUENCY);
  }, []);
  (0, import_react263.useEffect)(() => {
    throttledAssertion(value);
  }, [throttledAssertion, value]);
  if (isInFlash && resultButtonText) {
    warnOnce("ProgressBar", 'The `resultButtonText` is ignored if you set `variant="flash"`, and the result button is not displayed. Use the `buttonText` property and the `onButtonClick` event listener of the flashbar item in which the progress bar component is embedded.');
  }
  return import_react263.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default87.root, variant && styles_css_default87[variant]), ref: __internalRootRef }),
    import_react263.default.createElement(
      "div",
      { className: isInFlash ? styles_css_default87["flash-container"] : void 0 },
      import_react263.default.createElement("div", { className: clsx_m_default(styles_css_default87["word-wrap"], styles_css_default87[`label-${variant}`]), id: labelId }, label),
      description && import_react263.default.createElement(SmallText, { color: isInFlash ? "inherit" : void 0 }, description),
      import_react263.default.createElement("div", null, isInProgressState ? import_react263.default.createElement(
        import_react263.default.Fragment,
        null,
        import_react263.default.createElement(Progress, { value, ariaLabel, ariaLabelledby: joinStrings(labelId, ariaLabelledby), isInFlash }),
        import_react263.default.createElement(
          live_region_default,
          { delay: 0 },
          label,
          label ? ": " : null,
          announcedValue
        )
      ) : import_react263.default.createElement(ResultState, { resultText, isInFlash, resultButtonText, status, onClick: () => {
        fireNonCancelableEvent(onResultButtonClick);
      } }))
    ),
    additionalInfo && import_react263.default.createElement(SmallText, { color: isInFlash ? "inherit" : void 0 }, additionalInfo)
  );
}
applyDisplayName(ProgressBar, "ProgressBar");

// node_modules/@cloudscape-design/components/property-filter/index.js
var import_react271 = __toESM(require_react());

// node_modules/@cloudscape-design/components/property-filter/token.js
var import_react267 = __toESM(require_react());

// node_modules/@cloudscape-design/components/property-filter/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/property-filter/styles.scoped.css";
var styles_css_default88 = {
  "root": "awsui_root_1wzqe_d6xov_99",
  "search-field": "awsui_search-field_1wzqe_d6xov_134",
  "input-wrapper": "awsui_input-wrapper_1wzqe_d6xov_140",
  "add-token": "awsui_add-token_1wzqe_d6xov_144",
  "tokens": "awsui_tokens_1wzqe_d6xov_151",
  "token-operator": "awsui_token-operator_1wzqe_d6xov_156",
  "property-editor": "awsui_property-editor_1wzqe_d6xov_160",
  "token-editor": "awsui_token-editor_1wzqe_d6xov_161",
  "property-editor-form": "awsui_property-editor-form_1wzqe_d6xov_166",
  "token-editor-form": "awsui_token-editor-form_1wzqe_d6xov_167",
  "property-editor-field-property": "awsui_property-editor-field-property_1wzqe_d6xov_170",
  "token-editor-field-property": "awsui_token-editor-field-property_1wzqe_d6xov_171",
  "property-editor-field-operator": "awsui_property-editor-field-operator_1wzqe_d6xov_174",
  "token-editor-field-operator": "awsui_token-editor-field-operator_1wzqe_d6xov_175",
  "property-editor-field-value": "awsui_property-editor-field-value_1wzqe_d6xov_178",
  "token-editor-field-value": "awsui_token-editor-field-value_1wzqe_d6xov_179",
  "property-editor-cancel": "awsui_property-editor-cancel_1wzqe_d6xov_182",
  "token-editor-cancel": "awsui_token-editor-cancel_1wzqe_d6xov_183",
  "property-editor-submit": "awsui_property-editor-submit_1wzqe_d6xov_186",
  "token-editor-submit": "awsui_token-editor-submit_1wzqe_d6xov_187",
  "property-editor-actions": "awsui_property-editor-actions_1wzqe_d6xov_190",
  "token-editor-actions": "awsui_token-editor-actions_1wzqe_d6xov_191",
  "custom-content-wrapper": "awsui_custom-content-wrapper_1wzqe_d6xov_209",
  "custom-control": "awsui_custom-control_1wzqe_d6xov_213",
  "input": "awsui_input_1wzqe_d6xov_140",
  "results": "awsui_results_1wzqe_d6xov_221",
  "token-trigger": "awsui_token-trigger_1wzqe_d6xov_226",
  "remove-all": "awsui_remove-all_1wzqe_d6xov_231",
  "token-label": "awsui_token-label_1wzqe_d6xov_232",
  "join-operation": "awsui_join-operation_1wzqe_d6xov_233",
  "custom-filter-actions": "awsui_custom-filter-actions_1wzqe_d6xov_234"
};

// node_modules/@cloudscape-design/components/property-filter/token-editor.js
var import_react265 = __toESM(require_react());

// node_modules/@cloudscape-design/components/property-filter/use-load-items.js
var import_react264 = __toESM(require_react());
var useLoadItems2 = (onLoadItems, focusFilteringText, currentFilteringProperty, currentFilteringText, currentFilteringOperator) => {
  const focusIn = (0, import_react264.useRef)(false);
  const handleBlur = () => {
    focusIn.current = true;
  };
  const fireLoadItems = (detail) => {
    var _a;
    fireNonCancelableEvent(onLoadItems, Object.assign(Object.assign({}, detail), { filteringText: (_a = currentFilteringText !== null && currentFilteringText !== void 0 ? currentFilteringText : detail.filteringText) !== null && _a !== void 0 ? _a : "", filteringProperty: currentFilteringProperty, filteringOperator: currentFilteringOperator }));
    focusIn.current = false;
  };
  const handleFocus = () => {
    if (focusIn.current) {
      fireLoadItems({ firstPage: true, samePage: false, filteringText: focusFilteringText });
    }
  };
  const handleLoadItems = ({ detail }) => fireLoadItems(detail);
  return {
    onBlur: handleBlur,
    onFocus: handleFocus,
    onLoadItems: handleLoadItems
  };
};

// node_modules/@cloudscape-design/components/property-filter/utils.js
function matchFilteringProperty(filteringProperties, filteringText) {
  let maxLength = 0;
  let matchedProperty = null;
  for (const property of filteringProperties) {
    if (property.propertyLabel.length >= maxLength && startsWith(filteringText, property.propertyLabel) || property.propertyLabel.length > maxLength && startsWith(filteringText.toLowerCase(), property.propertyLabel.toLowerCase())) {
      maxLength = property.propertyLabel.length;
      matchedProperty = property;
    }
  }
  return matchedProperty;
}
function matchOperator(allowedOperators, filteringText) {
  filteringText = filteringText.toLowerCase();
  let maxLength = 0;
  let matchedOperator = null;
  for (const operator of allowedOperators) {
    if (operator.length > maxLength && startsWith(filteringText, operator.toLowerCase())) {
      maxLength = operator.length;
      matchedOperator = operator;
    }
  }
  return matchedOperator;
}
function matchOperatorPrefix(allowedOperators, filteringText) {
  if (filteringText.trim().length === 0) {
    return "";
  }
  for (const operator of allowedOperators) {
    if (startsWith(operator.toLowerCase(), filteringText.toLowerCase())) {
      return filteringText;
    }
  }
  return null;
}
function matchTokenValue({ property, operator, value }, filteringOptions) {
  var _a, _b;
  const propertyOptions = filteringOptions.filter((option) => option.property === property);
  const bestMatch = { propertyKey: property === null || property === void 0 ? void 0 : property.propertyKey, operator, value };
  for (const option of propertyOptions) {
    if (option.label && option.label === value || !option.label && option.value === value) {
      return { propertyKey: property === null || property === void 0 ? void 0 : property.propertyKey, operator, value: option.value };
    }
    if (typeof value === "string" && value.toLowerCase() === ((_b = (_a = option.label) !== null && _a !== void 0 ? _a : option.value) !== null && _b !== void 0 ? _b : "").toLowerCase()) {
      bestMatch.value = option.value;
    }
  }
  return bestMatch;
}
function getFormattedToken(token) {
  var _a;
  const valueFormatter = (_a = token.property) === null || _a === void 0 ? void 0 : _a.getValueFormatter(token.operator);
  const propertyLabel = token.property && token.property.propertyLabel;
  const tokenValue = valueFormatter ? valueFormatter(token.value) : token.value;
  const label = `${propertyLabel !== null && propertyLabel !== void 0 ? propertyLabel : ""} ${token.operator} ${tokenValue}`;
  return { property: propertyLabel !== null && propertyLabel !== void 0 ? propertyLabel : "", operator: token.operator, value: tokenValue, label };
}
function trimStart(source) {
  let spacesLength = 0;
  for (let i = 0; i < source.length; i++) {
    if (source[i] === " ") {
      spacesLength++;
    } else {
      break;
    }
  }
  return source.slice(spacesLength);
}
function trimFirstSpace(source) {
  return source[0] === " " ? source.slice(1) : source;
}
function removeOperator(source, operator) {
  const operatorLastIndex = source.indexOf(operator) + operator.length;
  const textWithoutOperator = source.slice(operatorLastIndex);
  return trimFirstSpace(textWithoutOperator);
}
function startsWith(source, target) {
  return source.indexOf(target) === 0;
}

// node_modules/@cloudscape-design/components/property-filter/controller.js
var getQueryActions = (query, onChange, inputRef) => {
  const { tokens, operation } = query;
  const fireOnChange = (tokens2, operation2) => fireNonCancelableEvent(onChange, { tokens: tokens2, operation: operation2 });
  const setToken = (index, newToken) => {
    const newTokens = [...tokens];
    if (newTokens && index < newTokens.length) {
      newTokens[index] = newToken;
    }
    fireOnChange(newTokens, operation);
  };
  const removeToken = (index) => {
    var _a;
    const newTokens = tokens.filter((_, i) => i !== index);
    fireOnChange(newTokens, operation);
    (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus({ preventDropdown: true });
  };
  const removeAllTokens = () => {
    var _a;
    fireOnChange([], operation);
    (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus({ preventDropdown: true });
  };
  const addToken = (newToken) => {
    const newTokens = [...tokens];
    newTokens.push(newToken);
    fireOnChange(newTokens, operation);
  };
  const setOperation = (newOperation) => {
    fireOnChange(tokens, newOperation);
  };
  return {
    setToken,
    removeToken,
    removeAllTokens,
    addToken,
    setOperation
  };
};
var getAllowedOperators = (property) => {
  const { operators = [], defaultOperator } = property;
  const operatorOrder = ["=", "!=", ":", "!:", "^", "!^", ">=", "<=", "<", ">"];
  const operatorSet = /* @__PURE__ */ new Set([defaultOperator, ...operators]);
  return operatorOrder.filter((op) => operatorSet.has(op));
};
var parseText = (filteringText, filteringProperties, freeTextFiltering) => {
  const property = matchFilteringProperty(filteringProperties, filteringText);
  if (!property) {
    if (!freeTextFiltering.disabled) {
      const freeTextOperators = freeTextFiltering.operators.indexOf("!:") >= 0 ? ["!", ...freeTextFiltering.operators] : freeTextFiltering.operators;
      const operator2 = matchOperator(freeTextOperators, filteringText);
      if (operator2) {
        return {
          step: "free-text",
          operator: operator2 === "!" ? "!:" : operator2,
          value: removeOperator(filteringText, operator2)
        };
      }
    }
    return {
      step: "free-text",
      value: filteringText
    };
  }
  const allowedOps = getAllowedOperators(property);
  const textWithoutProperty = filteringText.substring(property.propertyLabel.length);
  const operator = matchOperator(allowedOps, trimStart(textWithoutProperty));
  if (operator) {
    return {
      step: "property",
      property,
      operator,
      value: removeOperator(textWithoutProperty, operator)
    };
  }
  const operatorPrefix = matchOperatorPrefix(allowedOps, trimStart(textWithoutProperty));
  if (operatorPrefix !== null) {
    return { step: "operator", property, operatorPrefix };
  }
  return {
    step: "free-text",
    value: filteringText
  };
};
var getAllValueSuggestions = (filteringOptions, operator = "=", i18nStrings, customGroupsText) => {
  var _a;
  const defaultGroup = {
    label: (_a = i18nStrings.groupValuesText) !== null && _a !== void 0 ? _a : "",
    options: []
  };
  const customGroups = {};
  filteringOptions.forEach((filteringOption) => {
    const property = filteringOption.property;
    if (!property) {
      return;
    }
    if (getAllowedOperators(property).indexOf(operator) === -1) {
      return;
    }
    if (property.propertyGroup && !customGroups[property.propertyGroup]) {
      const label = customGroupsText.reduce((acc, customGroup) => customGroup.group === property.propertyGroup ? customGroup.values : acc, "");
      customGroups[property.propertyGroup] = {
        label,
        options: []
      };
    }
    const propertyGroup = property.propertyGroup ? customGroups[property.propertyGroup] : defaultGroup;
    propertyGroup.options.push({
      value: property.propertyLabel + " " + (operator || "=") + " " + filteringOption.value,
      label: filteringOption.label,
      __labelPrefix: property.propertyLabel + " " + (operator || "=")
    });
  });
  return [defaultGroup, ...Object.keys(customGroups).map((group) => customGroups[group])];
};
function createPropertiesCompatibilityMap(filteringProperties) {
  const lookup = {};
  for (const property of filteringProperties) {
    lookup[property.propertyKey] = (property.operators || []).map((operator) => ({ operator, form: property.getValueFormRenderer(operator) })).sort((a2, b) => a2.operator.localeCompare(b.operator));
  }
  return (propertyA, propertyB) => {
    if (lookup[propertyA].length !== lookup[propertyB].length) {
      return false;
    }
    for (let i = 0; i < lookup[propertyA].length; i++) {
      if (lookup[propertyA][i].operator !== lookup[propertyB][i].operator) {
        return false;
      }
      if (lookup[propertyA][i].form !== lookup[propertyB][i].form) {
        return false;
      }
    }
    return true;
  };
}
var filteringPropertyToAutosuggestOption = (filteringProperty) => ({
  value: filteringProperty.propertyLabel,
  label: filteringProperty.propertyLabel,
  keepOpenOnSelect: true
});
function getPropertySuggestions(filteringProperties, customGroupsText, i18nStrings, filteringPropertyToOption) {
  var _a;
  const defaultGroup = {
    label: (_a = i18nStrings.groupPropertiesText) !== null && _a !== void 0 ? _a : "",
    options: []
  };
  const customGroups = {};
  filteringProperties.forEach((filteringProperty) => {
    const { propertyGroup } = filteringProperty;
    let optionsGroup = defaultGroup;
    if (propertyGroup) {
      if (!customGroups[propertyGroup]) {
        const label = customGroupsText.reduce((acc, customGroup) => customGroup.group === propertyGroup ? customGroup.properties : acc, "");
        customGroups[propertyGroup] = { options: [], label };
      }
      optionsGroup = customGroups[propertyGroup];
    }
    optionsGroup.options.push(filteringPropertyToOption(filteringProperty));
  });
  const defaultGroupArray = defaultGroup.options.length ? [defaultGroup] : [];
  const customGroupsArray = Object.keys(customGroups).map((groupKey) => customGroups[groupKey]);
  return [...defaultGroupArray, ...customGroupsArray];
}
var getAutosuggestOptions = (parsedText, filteringProperties, filteringOptions, customGroupsText, i18nStrings) => {
  switch (parsedText.step) {
    case "property": {
      const { propertyLabel, groupValuesLabel } = parsedText.property;
      const options = filteringOptions.filter((o) => o.property === parsedText.property);
      return {
        filterText: parsedText.value,
        options: [
          {
            options: options.map(({ label, value }) => ({
              value: propertyLabel + " " + parsedText.operator + " " + value,
              label,
              __labelPrefix: propertyLabel + " " + parsedText.operator
            })),
            label: groupValuesLabel
          }
        ]
      };
    }
    case "operator": {
      return {
        filterText: parsedText.property.propertyLabel + " " + parsedText.operatorPrefix,
        options: [
          ...getPropertySuggestions(filteringProperties, customGroupsText, i18nStrings, filteringPropertyToAutosuggestOption),
          {
            options: getAllowedOperators(parsedText.property).map((value) => ({
              value: parsedText.property.propertyLabel + " " + value + " ",
              label: parsedText.property.propertyLabel + " " + value,
              description: operatorToDescription(value, i18nStrings),
              keepOpenOnSelect: true
            })),
            label: i18nStrings.operatorsText
          }
        ]
      };
    }
    case "free-text": {
      const needsValueSuggestions = !!parsedText.value;
      const needsPropertySuggestions = !(parsedText.step === "free-text" && parsedText.operator === "!:");
      return {
        filterText: parsedText.value,
        options: [
          ...needsPropertySuggestions ? getPropertySuggestions(filteringProperties, customGroupsText, i18nStrings, filteringPropertyToAutosuggestOption) : [],
          ...needsValueSuggestions ? getAllValueSuggestions(filteringOptions, parsedText.operator, i18nStrings, customGroupsText) : []
        ]
      };
    }
  }
};
var operatorToDescription = (operator, i18nStrings) => {
  switch (operator) {
    case "<":
      return i18nStrings.operatorLessText;
    case "<=":
      return i18nStrings.operatorLessOrEqualText;
    case ">":
      return i18nStrings.operatorGreaterText;
    case ">=":
      return i18nStrings.operatorGreaterOrEqualText;
    case ":":
      return i18nStrings.operatorContainsText;
    case "!:":
      return i18nStrings.operatorDoesNotContainText;
    case "=":
      return i18nStrings.operatorEqualsText;
    case "!=":
      return i18nStrings.operatorDoesNotEqualText;
    case "^":
      return i18nStrings.operatorStartsWithText;
    case "!^":
      return i18nStrings.operatorDoesNotStartWithText;
    default:
      return "";
  }
};

// node_modules/@cloudscape-design/components/property-filter/token-editor.js
function PropertyInput({ property, onChangePropertyKey, asyncProps, filteringProperties, onLoadItems, customGroupsText, i18nStrings, freeTextFiltering }) {
  var _a;
  const propertySelectHandlers = useLoadItems2(onLoadItems);
  const asyncPropertySelectProps = asyncProps ? Object.assign(Object.assign({}, asyncProps), propertySelectHandlers) : {};
  const propertyOptions = getPropertySuggestions(filteringProperties, customGroupsText, i18nStrings, ({ propertyKey, propertyLabel }) => ({
    value: propertyKey,
    label: propertyLabel,
    dontCloseOnSelect: true
  }));
  const checkPropertiesCompatible = createPropertiesCompatibilityMap(filteringProperties);
  propertyOptions.forEach((optionGroup) => {
    if ("options" in optionGroup) {
      optionGroup.options.forEach((option) => {
        if ((property === null || property === void 0 ? void 0 : property.propertyKey) && option.value) {
          option.disabled = !checkPropertiesCompatible(option.value, property.propertyKey);
        }
      });
    }
  });
  const allPropertiesOption = {
    label: i18nStrings.allPropertiesLabel,
    value: void 0
  };
  if (!freeTextFiltering.disabled) {
    propertyOptions.unshift(allPropertiesOption);
  }
  return import_react265.default.createElement(internal_default5, Object.assign({ options: propertyOptions, selectedOption: property ? {
    value: (_a = property.propertyKey) !== null && _a !== void 0 ? _a : void 0,
    label: property.propertyLabel
  } : allPropertiesOption, onChange: (e) => onChangePropertyKey(e.detail.selectedOption.value) }, asyncPropertySelectProps));
}
function OperatorInput({ property, operator, onChangeOperator, i18nStrings, freeTextFiltering }) {
  const operatorOptions = (property ? getAllowedOperators(property) : freeTextFiltering.operators).map((operator2) => ({
    value: operator2,
    label: operator2,
    description: operatorToDescription(operator2, i18nStrings)
  }));
  return import_react265.default.createElement(internal_default5, { options: operatorOptions, triggerVariant: "option", selectedOption: operator ? {
    value: operator,
    label: operator,
    description: operatorToDescription(operator, i18nStrings)
  } : null, onChange: (e) => onChangeOperator(e.detail.selectedOption.value) });
}
function ValueInput({ property, operator, value, onChangeValue, asyncProps, filteringOptions, onLoadItems, i18nStrings }) {
  var _a, _b, _c;
  const valueOptions = property ? filteringOptions.filter((option) => {
    var _a2;
    return ((_a2 = option.property) === null || _a2 === void 0 ? void 0 : _a2.propertyKey) === property.propertyKey;
  }).map(({ label, value: value2 }) => ({ label, value: value2 })) : [];
  const valueAutosuggestHandlers = useLoadItems2(onLoadItems, "", property === null || property === void 0 ? void 0 : property.externalProperty);
  const asyncValueAutosuggestProps = (property === null || property === void 0 ? void 0 : property.propertyKey) ? Object.assign(Object.assign({}, valueAutosuggestHandlers), asyncProps) : { empty: asyncProps.empty };
  const [matchedOption] = valueOptions.filter((option) => option.value === value);
  const OperatorForm = (property === null || property === void 0 ? void 0 : property.propertyKey) && operator && (property === null || property === void 0 ? void 0 : property.getValueFormRenderer(operator));
  return OperatorForm ? import_react265.default.createElement(OperatorForm, { value, onChange: onChangeValue, operator }) : import_react265.default.createElement(internal_default11, Object.assign({ enteredTextLabel: (_a = i18nStrings.enteredTextLabel) !== null && _a !== void 0 ? _a : (value2) => value2, value: (_c = (_b = matchedOption === null || matchedOption === void 0 ? void 0 : matchedOption.label) !== null && _b !== void 0 ? _b : value) !== null && _c !== void 0 ? _c : "", clearAriaLabel: i18nStrings.clearAriaLabel, onChange: (e) => onChangeValue(e.detail.value), disabled: !operator, options: valueOptions }, asyncValueAutosuggestProps, { virtualScroll: true }));
}
function TokenEditor({ asyncProperties, asyncProps, customGroupsText, freeTextFiltering, expandToViewport, filteringProperties, filteringOptions, i18nStrings, onLoadItems, setToken, token, triggerComponent }) {
  const [temporaryToken, setTemporaryToken] = (0, import_react265.useState)(token);
  const popoverRef = (0, import_react265.useRef)(null);
  const closePopover = () => {
    popoverRef.current && popoverRef.current.dismissPopover();
  };
  const property = temporaryToken.property;
  const onChangePropertyKey = (newPropertyKey) => {
    var _a;
    const filteringProperty = filteringProperties.reduce((acc, property2) => property2.propertyKey === newPropertyKey ? property2 : acc, void 0);
    const allowedOperators = filteringProperty ? getAllowedOperators(filteringProperty) : freeTextFiltering.operators;
    const operator2 = temporaryToken.operator && allowedOperators.indexOf(temporaryToken.operator) !== -1 ? temporaryToken.operator : allowedOperators[0];
    const matchedProperty = (_a = filteringProperties.find((property2) => property2.propertyKey === newPropertyKey)) !== null && _a !== void 0 ? _a : null;
    setTemporaryToken(Object.assign(Object.assign({}, temporaryToken), { property: matchedProperty, operator: operator2 }));
  };
  const operator = temporaryToken.operator;
  const onChangeOperator = (newOperator) => {
    setTemporaryToken(Object.assign(Object.assign({}, temporaryToken), { operator: newOperator }));
  };
  const value = temporaryToken.value;
  const onChangeValue = (newValue) => {
    setTemporaryToken(Object.assign(Object.assign({}, temporaryToken), { value: newValue }));
  };
  return import_react265.default.createElement(internal_default15, { ref: popoverRef, className: styles_css_default88["token-label"], triggerType: "text", header: i18nStrings.editTokenHeader, size: "large", position: "right", dismissAriaLabel: i18nStrings.dismissAriaLabel, __onOpen: () => setTemporaryToken(token), renderWithPortal: expandToViewport, content: import_react265.default.createElement(
    "div",
    { className: styles_css_default88["token-editor"] },
    import_react265.default.createElement(
      "div",
      { className: styles_css_default88["token-editor-form"] },
      import_react265.default.createElement(
        InternalFormField,
        { label: i18nStrings.propertyText, className: styles_css_default88["token-editor-field-property"] },
        import_react265.default.createElement(PropertyInput, { property, onChangePropertyKey, asyncProps: asyncProperties ? asyncProps : null, filteringProperties, onLoadItems, customGroupsText, i18nStrings, freeTextFiltering })
      ),
      import_react265.default.createElement(
        InternalFormField,
        { label: i18nStrings.operatorText, className: styles_css_default88["token-editor-field-operator"] },
        import_react265.default.createElement(OperatorInput, { property, operator, onChangeOperator, i18nStrings, freeTextFiltering })
      ),
      import_react265.default.createElement(
        InternalFormField,
        { label: i18nStrings.valueText, className: styles_css_default88["token-editor-field-value"] },
        import_react265.default.createElement(ValueInput, { property, operator, value, onChangeValue, asyncProps, filteringOptions, onLoadItems, i18nStrings })
      )
    ),
    import_react265.default.createElement(
      "div",
      { className: styles_css_default88["token-editor-actions"] },
      import_react265.default.createElement(internal_default2, { formAction: "none", variant: "link", className: styles_css_default88["token-editor-cancel"], onClick: closePopover }, i18nStrings.cancelActionText),
      import_react265.default.createElement(internal_default2, { className: styles_css_default88["token-editor-submit"], formAction: "none", onClick: () => {
        setToken(matchTokenValue(temporaryToken, filteringOptions));
        closePopover();
      } }, i18nStrings.applyActionText)
    )
  ) }, triggerComponent);
}

// node_modules/@cloudscape-design/components/internal/components/filtering-token/index.js
var import_react266 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/filtering-token/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/filtering-token/styles.scoped.css";
var styles_css_default89 = {
  "root": "awsui_root_10m3l_ilcbp_103",
  "token": "awsui_token_10m3l_ilcbp_108",
  "show-operation": "awsui_show-operation_10m3l_ilcbp_123",
  "select": "awsui_select_10m3l_ilcbp_129",
  "token-content": "awsui_token-content_10m3l_ilcbp_133",
  "dismiss-button": "awsui_dismiss-button_10m3l_ilcbp_138",
  "token-disabled": "awsui_token-disabled_10m3l_ilcbp_180"
};

// node_modules/@cloudscape-design/components/internal/components/filtering-token/index.js
function FilteringToken({ ariaLabel, showOperation, operation, andText, orText, dismissAriaLabel, operatorAriaLabel, disabled, children, onChange, onDismiss }) {
  return import_react266.default.createElement(
    "div",
    { className: styles_css_default89.root, role: "group", "aria-label": ariaLabel },
    showOperation && import_react266.default.createElement(internal_default5, { __inFilteringToken: true, className: styles_css_default89.select, options: [
      { value: "and", label: andText },
      { value: "or", label: orText }
    ], selectedOption: { value: operation, label: operation === "and" ? andText : orText }, onChange: (e) => onChange(e.detail.selectedOption.value), disabled, ariaLabel: operatorAriaLabel }),
    import_react266.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default89.token, showOperation && styles_css_default89["show-operation"], disabled && styles_css_default89["token-disabled"]), "aria-disabled": disabled },
      import_react266.default.createElement("div", { className: styles_css_default89["token-content"] }, children),
      import_react266.default.createElement(
        "button",
        { type: "button", className: styles_css_default89["dismiss-button"], "aria-label": dismissAriaLabel, onClick: onDismiss, disabled },
        import_react266.default.createElement(internal_default, { name: "close" })
      )
    )
  );
}

// node_modules/@cloudscape-design/components/property-filter/token.js
var TokenButton = ({ token, operation = "and", first, removeToken, setToken, setOperation, filteringProperties, filteringOptions, asyncProps, onLoadItems, i18nStrings, asyncProperties, hideOperations, customGroupsText, disabled, freeTextFiltering, expandToViewport }) => {
  var _a, _b, _c, _d;
  const externalToken = Object.assign(Object.assign({}, token), { propertyKey: (_a = token.property) === null || _a === void 0 ? void 0 : _a.propertyKey });
  const formattedToken = getFormattedToken(token);
  return import_react267.default.createElement(
    FilteringToken,
    { ariaLabel: formattedToken.label, showOperation: !first && !hideOperations, operation, andText: (_b = i18nStrings.operationAndText) !== null && _b !== void 0 ? _b : "", orText: (_c = i18nStrings.operationOrText) !== null && _c !== void 0 ? _c : "", dismissAriaLabel: (_d = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.removeTokenButtonAriaLabel) === null || _d === void 0 ? void 0 : _d.call(i18nStrings, externalToken), operatorAriaLabel: i18nStrings.tokenOperatorAriaLabel, onChange: setOperation, onDismiss: removeToken, disabled },
    import_react267.default.createElement(TokenEditor, { setToken, triggerComponent: import_react267.default.createElement(
      "span",
      { className: styles_css_default88["token-trigger"] },
      import_react267.default.createElement(TokenTrigger, { property: formattedToken.property, operator: token.operator, value: formattedToken.value })
    ), filteringProperties, filteringOptions, token, asyncProps, onLoadItems, i18nStrings, asyncProperties, customGroupsText, freeTextFiltering, expandToViewport })
  );
};
var TokenTrigger = ({ property, operator, value }) => {
  if (property) {
    property += " ";
  }
  const freeTextContainsToken = operator === ":" && !property;
  const operatorText = freeTextContainsToken ? "" : operator + " ";
  return import_react267.default.createElement(
    import_react267.default.Fragment,
    null,
    property,
    import_react267.default.createElement("span", { className: styles_css_default88["token-operator"] }, operatorText),
    value
  );
};

// node_modules/@cloudscape-design/components/property-filter/property-filter-autosuggest.js
var import_react268 = __toESM(require_react());

// node_modules/@cloudscape-design/components/property-filter/filter-options.js
function filterOptions2(options, searchText = "") {
  if (!searchText) {
    return options;
  }
  const filtered = [];
  for (const option of options) {
    if (isGroup4(option)) {
      const childOptions = filterOptions2(option.options, searchText);
      if (childOptions.length > 0) {
        filtered.push(Object.assign(Object.assign({}, option), { options: childOptions }));
      }
    } else if (matchSingleOption2(option, searchText)) {
      filtered.push(option);
    }
  }
  return filtered;
}
function isGroup4(optionOrGroup) {
  return "options" in optionOrGroup;
}
function matchSingleOption2(option, searchText) {
  var _a, _b;
  searchText = searchText.toLowerCase();
  const label = ((_a = option.label) !== null && _a !== void 0 ? _a : "").toLowerCase();
  const labelPrefix = (_b = option.__labelPrefix) !== null && _b !== void 0 ? _b : "";
  const value = (option.value ? option.value.slice(labelPrefix.length) : "").toLowerCase();
  return label.indexOf(searchText) !== -1 || value.indexOf(searchText) !== -1;
}

// node_modules/@cloudscape-design/components/property-filter/property-filter-autosuggest.js
var DROPDOWN_WIDTH_OPTIONS_LIST = 300;
var DROPDOWN_WIDTH_CUSTOM_FORM = 200;
var PropertyFilterAutosuggest = import_react268.default.forwardRef((props, ref) => {
  var _a;
  const { value, onChange, onFocus, onBlur, onLoadItems, options, statusType = "finished", placeholder, disabled, ariaLabel, enteredTextLabel, onKeyDown, virtualScroll, expandToViewport, customForm, filterText, onOptionClick, hideEnteredTextOption, searchResultsId } = props, rest = __rest(props, ["value", "onChange", "onFocus", "onBlur", "onLoadItems", "options", "statusType", "placeholder", "disabled", "ariaLabel", "enteredTextLabel", "onKeyDown", "virtualScroll", "expandToViewport", "customForm", "filterText", "onOptionClick", "hideEnteredTextOption", "searchResultsId"]);
  const highlightText = filterText === void 0 ? value : filterText;
  const customFormRef = (0, import_react268.useRef)(null);
  const autosuggestInputRef = (0, import_react268.useRef)(null);
  const mergedRef = useMergeRefs(autosuggestInputRef, ref);
  const filteredOptions = (0, import_react268.useMemo)(() => filterOptions2(options || [], highlightText), [options, highlightText]);
  const [autosuggestItemsState, autosuggestItemsHandlers] = useAutosuggestItems({
    options: filteredOptions,
    filterValue: value,
    filterText: highlightText,
    filteringType: "manual",
    enteredTextLabel,
    hideEnteredTextLabel: hideEnteredTextOption,
    onSelectItem: (option) => {
      var _a2;
      const value2 = option.value || "";
      fireNonCancelableEvent(onChange, { value: value2 });
      const selectedCancelled = fireCancelableEvent(onOptionClick, option);
      if (!selectedCancelled) {
        (_a2 = autosuggestInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.close();
      } else {
        autosuggestItemsHandlers.resetHighlightWithKeyboard();
      }
    }
  });
  const autosuggestLoadMoreHandlers = useAutosuggestLoadMore({
    options,
    statusType,
    onLoadItems: (detail) => fireNonCancelableEvent(onLoadItems, detail)
  });
  const handleChange = (event) => {
    autosuggestItemsHandlers.resetHighlightWithKeyboard();
    fireNonCancelableEvent(onChange, event.detail);
  };
  const handleDelayedInput = (event) => {
    autosuggestLoadMoreHandlers.fireLoadMoreOnInputChange(event.detail.value);
  };
  const handleFocus = () => {
    autosuggestLoadMoreHandlers.fireLoadMoreOnInputFocus();
    fireCancelableEvent(onFocus, null);
  };
  const handleBlur = () => {
    fireCancelableEvent(onBlur, null);
  };
  const handleKeyDown = (e) => {
    fireCancelableEvent(onKeyDown, e.detail);
  };
  const handlePressArrowDown = () => {
    var _a2;
    autosuggestItemsHandlers.moveHighlightWithKeyboard(1);
    if (customFormRef.current) {
      (_a2 = getFirstFocusable(customFormRef.current)) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  };
  const handlePressArrowUp = () => {
    autosuggestItemsHandlers.moveHighlightWithKeyboard(-1);
  };
  const handlePressEnter = () => {
    return autosuggestItemsHandlers.selectHighlightedOptionWithKeyboard();
  };
  const handleCloseDropdown = () => {
    autosuggestItemsHandlers.resetHighlightWithKeyboard();
  };
  const handleRecoveryClick = () => {
    var _a2;
    autosuggestLoadMoreHandlers.fireLoadMoreOnRecoveryClick();
    (_a2 = autosuggestInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
  };
  const selfControlId = useUniqueId("input");
  const controlId = (_a = rest.controlId) !== null && _a !== void 0 ? _a : selfControlId;
  const listId = useUniqueId("list");
  const footerId = useUniqueId("footer");
  const highlightedOptionIdSource = useUniqueId();
  const highlightedOptionId = autosuggestItemsState.highlightedOption ? highlightedOptionIdSource : void 0;
  const isEmpty = !value && !autosuggestItemsState.items.length;
  const dropdownStatus = useDropdownStatus(Object.assign(Object.assign({}, props), { isEmpty, onRecoveryClick: handleRecoveryClick, hasRecoveryCallback: !!onLoadItems }));
  let content = null;
  if (customForm) {
    content = import_react268.default.createElement("div", { ref: customFormRef, className: styles_css_default88["custom-content-wrapper"] }, customForm);
  } else if (autosuggestItemsState.items.length > 0) {
    content = import_react268.default.createElement(AutosuggestOptionsList, { statusType, autosuggestItemsState, autosuggestItemsHandlers, highlightedOptionId, highlightText, listId, controlId, handleLoadMore: autosuggestLoadMoreHandlers.fireLoadMoreOnScroll, hasDropdownStatus: dropdownStatus.content !== null, virtualScroll, listBottom: !dropdownStatus.isSticky ? import_react268.default.createElement(dropdown_footer_default, { content: dropdownStatus.content, id: footerId }) : null, ariaDescribedby: dropdownStatus.content ? footerId : void 0 });
  }
  return import_react268.default.createElement(autosuggest_input_default, Object.assign({ ref: mergedRef }, rest, { className: clsx_m_default(styles_css_default43.root, styles_css_default88.input), value, onChange: handleChange, onFocus: handleFocus, onBlur: handleBlur, onKeyDown: handleKeyDown, controlId, placeholder, disabled, ariaLabel, expandToViewport, ariaControls: listId, ariaActivedescendant: highlightedOptionId, ariaDescribedby: joinStrings(searchResultsId, rest.ariaDescribedby), dropdownExpanded: autosuggestItemsState.items.length > 1 || dropdownStatus.content !== null || !!customForm, dropdownContentKey: customForm ? "custom" : "options", dropdownContent: content, dropdownFooter: dropdownStatus.isSticky && dropdownStatus.content ? import_react268.default.createElement(dropdown_footer_default, { content: dropdownStatus.content, hasItems: autosuggestItemsState.items.length >= 1, id: footerId }) : null, dropdownWidth: customForm ? DROPDOWN_WIDTH_CUSTOM_FORM : DROPDOWN_WIDTH_OPTIONS_LIST, dropdownContentFocusable: !!customForm, onCloseDropdown: handleCloseDropdown, onDelayedInput: handleDelayedInput, onPressArrowDown: handlePressArrowDown, onPressArrowUp: handlePressArrowUp, onPressEnter: handlePressEnter }));
});
var property_filter_autosuggest_default = PropertyFilterAutosuggest;

// node_modules/@cloudscape-design/components/property-filter/property-editor.js
var import_react269 = __toESM(require_react());
function PropertyEditor({ property, operator, filter, operatorForm, onCancel, onSubmit, i18nStrings }) {
  const [value, onChange] = (0, import_react269.useState)(null);
  const submitToken = () => onSubmit({ propertyKey: property.propertyKey, operator, value });
  return import_react269.default.createElement(
    "div",
    { className: styles_css_default88["property-editor"] },
    import_react269.default.createElement(
      "div",
      { className: styles_css_default88["property-editor-form"] },
      import_react269.default.createElement(InternalFormField, { label: property.groupValuesLabel }, operatorForm({ value, onChange, operator, filter }))
    ),
    import_react269.default.createElement(
      "div",
      { className: styles_css_default88["property-editor-actions"] },
      import_react269.default.createElement(internal_default2, { variant: "link", className: styles_css_default88["property-editor-cancel"], onClick: onCancel }, i18nStrings.cancelActionText),
      import_react269.default.createElement(internal_default2, { className: styles_css_default88["property-editor-submit"], onClick: submitToken }, i18nStrings.applyActionText)
    )
  );
}

// node_modules/@cloudscape-design/components/text-filter/search-results.js
var import_react270 = __toESM(require_react());

// node_modules/@cloudscape-design/components/text-filter/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/text-filter/styles.scoped.css";
var styles_css_default90 = {
  "root": "awsui_root_1sdq3_ms42k_99",
  "input": "awsui_input_1sdq3_ms42k_137",
  "results": "awsui_results_1sdq3_ms42k_141"
};

// node_modules/@cloudscape-design/components/text-filter/search-results.js
var LIVE_REGION_DELAY = 2e3;
function SearchResults({ id, children }) {
  return import_react270.default.createElement(
    "span",
    { className: styles_css_default90.results },
    import_react270.default.createElement(
      live_region_default,
      { delay: LIVE_REGION_DELAY, visible: true },
      import_react270.default.createElement("span", { id }, children)
    )
  );
}

// node_modules/@cloudscape-design/components/property-filter/index.js
function getOperatorI18nString(operator) {
  switch (operator) {
    case "=":
      return "equals";
    case "!=":
      return "not_equals";
    case ">":
      return "greater_than";
    case ">=":
      return "greater_than_equal";
    case "<":
      return "less_than";
    case "<=":
      return "less_than_equal";
    case ":":
      return "contains";
    case "!:":
      return "not_contains";
    case "^":
      return "starts_with";
    case "!^":
      return "not_starts_with";
    default:
      return operator;
  }
}
var PropertyFilter = import_react271.default.forwardRef((_a, ref) => {
  var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3;
  var { disabled, countText, query, hideOperations, onChange, filteringProperties, filteringOptions = [], customGroupsText = [], disableFreeTextFiltering = false, freeTextFiltering, onLoadItems, virtualScroll, customControl, customFilterActions, filteringPlaceholder, filteringAriaLabel, filteringEmpty, filteringLoadingText, filteringFinishedText, filteringErrorText, filteringRecoveryText, filteringStatusType, asyncProperties, tokenLimit, expandToViewport, tokenLimitShowFewerAriaLabel, tokenLimitShowMoreAriaLabel } = _a, rest = __rest(_a, ["disabled", "countText", "query", "hideOperations", "onChange", "filteringProperties", "filteringOptions", "customGroupsText", "disableFreeTextFiltering", "freeTextFiltering", "onLoadItems", "virtualScroll", "customControl", "customFilterActions", "filteringPlaceholder", "filteringAriaLabel", "filteringEmpty", "filteringLoadingText", "filteringFinishedText", "filteringErrorText", "filteringRecoveryText", "filteringStatusType", "asyncProperties", "tokenLimit", "expandToViewport", "tokenLimitShowFewerAriaLabel", "tokenLimitShowMoreAriaLabel"]);
  const { __internalRootRef } = useBaseComponent("PropertyFilter", {
    props: { asyncProperties, disableFreeTextFiltering, expandToViewport, hideOperations, tokenLimit, virtualScroll }
  });
  const [removedTokenIndex, setRemovedTokenIndex] = (0, import_react271.useState)(null);
  const inputRef = (0, import_react271.useRef)(null);
  const baseProps = getBaseProps(rest);
  const i18n = useInternalI18n("property-filter");
  const i18nStrings = Object.assign(Object.assign({}, rest.i18nStrings), { allPropertiesLabel: i18n("i18nStrings.allPropertiesLabel", (_b = rest.i18nStrings) === null || _b === void 0 ? void 0 : _b.allPropertiesLabel), applyActionText: i18n("i18nStrings.applyActionText", (_c = rest.i18nStrings) === null || _c === void 0 ? void 0 : _c.applyActionText), cancelActionText: i18n("i18nStrings.cancelActionText", (_d = rest.i18nStrings) === null || _d === void 0 ? void 0 : _d.cancelActionText), clearFiltersText: i18n("i18nStrings.clearFiltersText", (_e = rest.i18nStrings) === null || _e === void 0 ? void 0 : _e.clearFiltersText), editTokenHeader: i18n("i18nStrings.editTokenHeader", (_f = rest.i18nStrings) === null || _f === void 0 ? void 0 : _f.editTokenHeader), groupPropertiesText: i18n("i18nStrings.groupPropertiesText", (_g = rest.i18nStrings) === null || _g === void 0 ? void 0 : _g.groupPropertiesText), groupValuesText: i18n("i18nStrings.groupValuesText", (_h = rest.i18nStrings) === null || _h === void 0 ? void 0 : _h.groupValuesText), operationAndText: i18n("i18nStrings.operationAndText", (_j = rest.i18nStrings) === null || _j === void 0 ? void 0 : _j.operationAndText), operationOrText: i18n("i18nStrings.operationOrText", (_k = rest.i18nStrings) === null || _k === void 0 ? void 0 : _k.operationOrText), operatorContainsText: i18n("i18nStrings.operatorContainsText", (_l = rest.i18nStrings) === null || _l === void 0 ? void 0 : _l.operatorContainsText), operatorDoesNotContainText: i18n("i18nStrings.operatorDoesNotContainText", (_m = rest.i18nStrings) === null || _m === void 0 ? void 0 : _m.operatorDoesNotContainText), operatorDoesNotEqualText: i18n("i18nStrings.operatorDoesNotEqualText", (_o = rest.i18nStrings) === null || _o === void 0 ? void 0 : _o.operatorDoesNotEqualText), operatorEqualsText: i18n("i18nStrings.operatorEqualsText", (_p = rest.i18nStrings) === null || _p === void 0 ? void 0 : _p.operatorEqualsText), operatorGreaterOrEqualText: i18n("i18nStrings.operatorGreaterOrEqualText", (_q = rest.i18nStrings) === null || _q === void 0 ? void 0 : _q.operatorGreaterOrEqualText), operatorGreaterText: i18n("i18nStrings.operatorGreaterText", (_r = rest.i18nStrings) === null || _r === void 0 ? void 0 : _r.operatorGreaterText), operatorLessOrEqualText: i18n("i18nStrings.operatorLessOrEqualText", (_s = rest.i18nStrings) === null || _s === void 0 ? void 0 : _s.operatorLessOrEqualText), operatorLessText: i18n("i18nStrings.operatorLessText", (_t = rest.i18nStrings) === null || _t === void 0 ? void 0 : _t.operatorLessText), operatorStartsWithText: i18n("i18nStrings.operatorStartsWithText", (_u = rest.i18nStrings) === null || _u === void 0 ? void 0 : _u.operatorStartsWithText), operatorDoesNotStartWithText: i18n("i18nStrings.operatorDoesNotStartWithText", (_v = rest.i18nStrings) === null || _v === void 0 ? void 0 : _v.operatorDoesNotStartWithText), operatorText: i18n("i18nStrings.operatorText", (_w = rest.i18nStrings) === null || _w === void 0 ? void 0 : _w.operatorText), operatorsText: i18n("i18nStrings.operatorsText", (_x = rest.i18nStrings) === null || _x === void 0 ? void 0 : _x.operatorsText), propertyText: i18n("i18nStrings.propertyText", (_y = rest.i18nStrings) === null || _y === void 0 ? void 0 : _y.propertyText), tokenLimitShowFewer: i18n("i18nStrings.tokenLimitShowFewer", (_z = rest.i18nStrings) === null || _z === void 0 ? void 0 : _z.tokenLimitShowFewer), tokenLimitShowMore: i18n("i18nStrings.tokenLimitShowMore", (_0 = rest.i18nStrings) === null || _0 === void 0 ? void 0 : _0.tokenLimitShowMore), valueText: i18n("i18nStrings.valueText", (_1 = rest.i18nStrings) === null || _1 === void 0 ? void 0 : _1.valueText), removeTokenButtonAriaLabel: i18n("i18nStrings.removeTokenButtonAriaLabel", (_2 = rest.i18nStrings) === null || _2 === void 0 ? void 0 : _2.removeTokenButtonAriaLabel, (format3) => (token) => {
    var _a2;
    return format3({
      token__operator: getOperatorI18nString(token.operator),
      token__propertyKey: (_a2 = token.propertyKey) !== null && _a2 !== void 0 ? _a2 : "",
      token__value: token.value
    });
  }) });
  (0, import_react271.useImperativeHandle)(ref, () => ({ focus: () => {
    var _a2;
    return (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
  } }), []);
  const showResults = !!((_3 = query.tokens) === null || _3 === void 0 ? void 0 : _3.length) && !disabled && !!countText;
  const { addToken, removeToken, setToken, setOperation, removeAllTokens } = getQueryActions(query, onChange, inputRef);
  const [filteringText, setFilteringText] = (0, import_react271.useState)("");
  const { internalProperties, internalOptions, internalQuery, internalFreeText } = (() => {
    var _a2, _b2;
    const propertyByKey = filteringProperties.reduce((acc, property) => {
      var _a3, _b3, _c2, _d2, _e2;
      const extendedOperators = ((_a3 = property === null || property === void 0 ? void 0 : property.operators) !== null && _a3 !== void 0 ? _a3 : []).reduce((acc2, operator) => typeof operator === "object" ? acc2.set(operator.operator, operator) : acc2, /* @__PURE__ */ new Map());
      acc.set(property.key, {
        propertyKey: property.key,
        propertyLabel: (_b3 = property === null || property === void 0 ? void 0 : property.propertyLabel) !== null && _b3 !== void 0 ? _b3 : "",
        groupValuesLabel: (_c2 = property === null || property === void 0 ? void 0 : property.groupValuesLabel) !== null && _c2 !== void 0 ? _c2 : "",
        propertyGroup: property === null || property === void 0 ? void 0 : property.group,
        operators: ((_d2 = property === null || property === void 0 ? void 0 : property.operators) !== null && _d2 !== void 0 ? _d2 : []).map((op) => typeof op === "string" ? op : op.operator),
        defaultOperator: (_e2 = property === null || property === void 0 ? void 0 : property.defaultOperator) !== null && _e2 !== void 0 ? _e2 : "=",
        getValueFormatter: (operator) => {
          var _a4, _b4;
          return operator ? (_b4 = (_a4 = extendedOperators.get(operator)) === null || _a4 === void 0 ? void 0 : _a4.format) !== null && _b4 !== void 0 ? _b4 : null : null;
        },
        getValueFormRenderer: (operator) => {
          var _a4, _b4;
          return operator ? (_b4 = (_a4 = extendedOperators.get(operator)) === null || _a4 === void 0 ? void 0 : _a4.form) !== null && _b4 !== void 0 ? _b4 : null : null;
        },
        externalProperty: property
      });
      return acc;
    }, /* @__PURE__ */ new Map());
    const getProperty = (propertyKey) => {
      var _a3;
      return (_a3 = propertyByKey.get(propertyKey)) !== null && _a3 !== void 0 ? _a3 : null;
    };
    const internalOptions2 = filteringOptions.map((option) => {
      var _a3, _b3;
      return {
        property: getProperty(option.propertyKey),
        value: option.value,
        label: (_b3 = (_a3 = option.label) !== null && _a3 !== void 0 ? _a3 : option.value) !== null && _b3 !== void 0 ? _b3 : ""
      };
    });
    const internalQuery2 = {
      operation: query.operation,
      tokens: query.tokens.map((token) => ({
        property: token.propertyKey ? getProperty(token.propertyKey) : null,
        operator: token.operator,
        value: token.value
      }))
    };
    const internalFreeText2 = {
      disabled: disableFreeTextFiltering,
      operators: (_a2 = freeTextFiltering === null || freeTextFiltering === void 0 ? void 0 : freeTextFiltering.operators) !== null && _a2 !== void 0 ? _a2 : [":", "!:"],
      defaultOperator: (_b2 = freeTextFiltering === null || freeTextFiltering === void 0 ? void 0 : freeTextFiltering.defaultOperator) !== null && _b2 !== void 0 ? _b2 : ":"
    };
    return { internalProperties: [...propertyByKey.values()], internalOptions: internalOptions2, internalQuery: internalQuery2, internalFreeText: internalFreeText2 };
  })();
  const parsedText = parseText(filteringText, internalProperties, internalFreeText);
  const autosuggestOptions = getAutosuggestOptions(parsedText, internalProperties, internalOptions, customGroupsText, i18nStrings);
  const createToken = (currentText) => {
    const parsedText2 = parseText(currentText, internalProperties, internalFreeText);
    let newToken;
    switch (parsedText2.step) {
      case "property": {
        newToken = matchTokenValue({
          property: parsedText2.property,
          operator: parsedText2.operator,
          value: parsedText2.value
        }, internalOptions);
        break;
      }
      case "free-text": {
        newToken = {
          operator: parsedText2.operator || internalFreeText.defaultOperator,
          value: parsedText2.value
        };
        break;
      }
      case "operator": {
        newToken = {
          operator: internalFreeText.defaultOperator,
          value: currentText
        };
        break;
      }
    }
    if (internalFreeText.disabled && !("propertyKey" in newToken)) {
      return;
    }
    addToken(newToken);
    setFilteringText("");
  };
  const ignoreKeyDown = (0, import_react271.useRef)(false);
  const handleKeyDown = (event) => {
    if (filteringText && !ignoreKeyDown.current && event.detail.keyCode === KeyCode.enter) {
      createToken(filteringText);
    }
  };
  const getLoadMoreDetail = (parsedText2, filteringText2) => {
    const loadMoreDetail2 = {
      filteringProperty: void 0,
      filteringText: filteringText2,
      filteringOperator: void 0
    };
    if (parsedText2.step === "property") {
      loadMoreDetail2.filteringProperty = parsedText2.property.externalProperty;
      loadMoreDetail2.filteringText = parsedText2.value;
      loadMoreDetail2.filteringOperator = parsedText2.operator;
    }
    return loadMoreDetail2;
  };
  const loadMoreDetail = getLoadMoreDetail(parsedText, filteringText);
  const inputLoadItemsHandlers = useLoadItems2(onLoadItems, loadMoreDetail.filteringText, loadMoreDetail.filteringProperty, loadMoreDetail.filteringText, loadMoreDetail.filteringOperator);
  const asyncProps = {
    empty: filteringEmpty,
    loadingText: filteringLoadingText,
    finishedText: filteringFinishedText,
    errorText: filteringErrorText,
    recoveryText: filteringRecoveryText,
    statusType: filteringStatusType
  };
  const asyncAutosuggestProps = !!filteringText.length || asyncProperties ? Object.assign(Object.assign({}, inputLoadItemsHandlers), asyncProps) : {};
  const handleSelected = (event) => {
    var _a2;
    ignoreKeyDown.current = true;
    setTimeout(() => {
      ignoreKeyDown.current = false;
    }, 0);
    const { detail: option } = event;
    const value = option.value || "";
    if (!("keepOpenOnSelect" in option)) {
      createToken(value);
      return;
    }
    event.preventDefault();
    const parsedText2 = parseText(value, internalProperties, internalFreeText);
    const loadMoreDetail2 = getLoadMoreDetail(parsedText2, value);
    if (parsedText2.step === "operator") {
      const operators = getAllowedOperators(parsedText2.property);
      if (value.trim() === parsedText2.property.propertyLabel && operators.length === 1) {
        loadMoreDetail2.filteringProperty = (_a2 = parsedText2.property.externalProperty) !== null && _a2 !== void 0 ? _a2 : void 0;
        loadMoreDetail2.filteringOperator = operators[0];
        loadMoreDetail2.filteringText = "";
        setFilteringText(parsedText2.property.propertyLabel + " " + operators[0] + " ");
      }
    }
    fireNonCancelableEvent(onLoadItems, Object.assign(Object.assign({}, loadMoreDetail2), { firstPage: true, samePage: false }));
  };
  const operatorForm = parsedText.step === "property" && parsedText.property.getValueFormRenderer(parsedText.operator);
  const searchResultsId = useUniqueId("property-filter-search-results");
  return import_react271.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default88.root), ref: __internalRootRef }),
    import_react271.default.createElement(
      "div",
      { className: styles_css_default88["search-field"] },
      customControl && import_react271.default.createElement("div", { className: styles_css_default88["custom-control"] }, customControl),
      import_react271.default.createElement(property_filter_autosuggest_default, Object.assign({ ref: inputRef, virtualScroll, enteredTextLabel: i18nStrings.enteredTextLabel, ariaLabel: filteringAriaLabel !== null && filteringAriaLabel !== void 0 ? filteringAriaLabel : i18nStrings.filteringAriaLabel, placeholder: filteringPlaceholder !== null && filteringPlaceholder !== void 0 ? filteringPlaceholder : i18nStrings.filteringPlaceholder, ariaLabelledby: rest.ariaLabelledby, ariaDescribedby: rest.ariaDescribedby, controlId: rest.controlId, value: filteringText, disabled, onKeyDown: handleKeyDown }, autosuggestOptions, { onChange: (event) => setFilteringText(event.detail.value), empty: filteringEmpty }, asyncAutosuggestProps, { expandToViewport, onOptionClick: handleSelected, customForm: operatorForm && import_react271.default.createElement(PropertyEditor, { property: parsedText.property, operator: parsedText.operator, filter: parsedText.value, operatorForm, i18nStrings, onCancel: () => {
        var _a2, _b2;
        setFilteringText("");
        (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.close();
        (_b2 = inputRef.current) === null || _b2 === void 0 ? void 0 : _b2.focus({ preventDropdown: true });
      }, onSubmit: (token) => {
        var _a2, _b2;
        addToken(token);
        setFilteringText("");
        (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus({ preventDropdown: true });
        (_b2 = inputRef.current) === null || _b2 === void 0 ? void 0 : _b2.close();
      } }), hideEnteredTextOption: internalFreeText.disabled && parsedText.step !== "property", clearAriaLabel: i18nStrings.clearAriaLabel, searchResultsId: showResults ? searchResultsId : void 0 })),
      showResults ? import_react271.default.createElement(
        "div",
        { className: styles_css_default88.results },
        import_react271.default.createElement(SearchResults, { id: searchResultsId }, countText)
      ) : null
    ),
    internalQuery.tokens && internalQuery.tokens.length > 0 && import_react271.default.createElement(
      "div",
      { className: styles_css_default88.tokens },
      import_react271.default.createElement(
        InternalSpaceBetween,
        { size: "xs", direction: "horizontal" },
        import_react271.default.createElement(TokenList, { alignment: "inline", limit: tokenLimit, items: internalQuery.tokens, limitShowFewerAriaLabel: tokenLimitShowFewerAriaLabel, limitShowMoreAriaLabel: tokenLimitShowMoreAriaLabel, renderItem: (token, tokenIndex) => import_react271.default.createElement(TokenButton, { token, first: tokenIndex === 0, operation: internalQuery.operation, removeToken: () => {
          removeToken(tokenIndex);
          setRemovedTokenIndex(tokenIndex);
        }, setToken: (newToken) => setToken(tokenIndex, newToken), setOperation, filteringProperties: internalProperties, filteringOptions: internalOptions, asyncProps, onLoadItems, i18nStrings, asyncProperties, hideOperations, customGroupsText, freeTextFiltering: internalFreeText, disabled, expandToViewport }), i18nStrings: {
          limitShowFewer: i18nStrings.tokenLimitShowFewer,
          limitShowMore: i18nStrings.tokenLimitShowMore
        }, after: customFilterActions ? import_react271.default.createElement("div", { className: styles_css_default88["custom-filter-actions"] }, customFilterActions) : import_react271.default.createElement(InternalButton, { formAction: "none", onClick: removeAllTokens, className: styles_css_default88["remove-all"], disabled }, i18nStrings.clearFiltersText), moveFocusNextToIndex: removedTokenIndex })
      )
    )
  );
});
applyDisplayName(PropertyFilter, "PropertyFilter");
var property_filter_default = PropertyFilter;

// node_modules/@cloudscape-design/components/radio-group/index.js
var import_react272 = __toESM(require_react());
var RadioGroup = import_react272.default.forwardRef((props, ref) => {
  const baseComponentProps = useBaseComponent("RadioGroup");
  return import_react272.default.createElement(internal_default13, Object.assign({ ref }, props, baseComponentProps));
});
applyDisplayName(RadioGroup, "RadioGroup");
var radio_group_default = RadioGroup;

// node_modules/@cloudscape-design/components/s3-resource-selector/index.js
var import_react308 = __toESM(require_react());

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/index.js
var import_react275 = __toESM(require_react());

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/use-versions-fetch.js
var import_react273 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/utils/promises.js
var PromiseCancelledSignal = class {
};
function makeCancellable(promise) {
  let cancelled = false;
  const wrapped = promise.then((value) => {
    if (cancelled) {
      throw new PromiseCancelledSignal();
    }
    return value;
  }, (err) => {
    if (cancelled) {
      throw new PromiseCancelledSignal();
    }
    throw err;
  });
  return {
    promise: wrapped,
    cancel: () => {
      cancelled = true;
    },
    isCancelled: () => cancelled
  };
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/validation.js
var SCHEME = "s3://";
var BUCKET_FIRST_CHAR = /^[a-z0-9]{1}/;
var CAPITAL_LETTER = /[A-Z]/;
var DNS_NAME = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/;
function checkBucketNameLength(bucketName) {
  return 3 <= bucketName.length && bucketName.length <= 63;
}
function extractBucketName(uri) {
  const [bucketName, ...rest] = uri.replace(SCHEME, "").split("/");
  return [bucketName, rest.join("/")];
}
function validate(uri) {
  if (uri === "") {
    return void 0;
  }
  if (uri.slice(0, SCHEME.length) !== SCHEME) {
    return "validationPathMustBegin";
  }
  const [bucketName] = extractBucketName(uri);
  if (!BUCKET_FIRST_CHAR.test(bucketName)) {
    return "validationBucketLowerCase";
  }
  if (CAPITAL_LETTER.test(bucketName)) {
    return "validationBucketMustNotContain";
  }
  if (!checkBucketNameLength(bucketName)) {
    return "validationBucketLength";
  }
  if (!DNS_NAME.test(bucketName)) {
    return "validationBucketMustComplyDns";
  }
  return void 0;
}
function getErrorText(i18n, i18nStrings, errorCode) {
  return errorCode ? i18n(`i18nStrings.${errorCode}`, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings[errorCode]) : void 0;
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/use-versions-fetch.js
function useVersionsFetch(fetchVersions) {
  const [loading, setLoading] = (0, import_react273.useState)(false);
  const [lastFetchedValue, setLastFetched] = (0, import_react273.useState)("");
  const [versions, setVersions] = (0, import_react273.useState)([]);
  const loadVersions = (uri) => {
    if (uri === lastFetchedValue) {
      return;
    }
    setLastFetched(uri);
    const errorCode = validate(uri);
    const [bucketName, prefix] = extractBucketName(uri);
    if (errorCode || !bucketName || !prefix || prefix.slice(-1) === "/") {
      return;
    }
    setLoading(true);
    const result = makeCancellable(fetchVersions(bucketName, prefix));
    result.promise.then((versions2) => {
      setLoading(false);
      setVersions(versions2.map((version) => ({
        value: version.VersionId,
        label: version.LastModified
      })));
    }, (err) => {
      if (!(err instanceof PromiseCancelledSignal)) {
        setLoading(false);
      }
    });
    return result;
  };
  return {
    loading,
    versions,
    resetVersions: () => setVersions([]),
    // this function is a dependency of useEffect
    loadVersions: useStableCallback(loadVersions)
  };
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/styles.scoped.css";
var styles_css_default91 = {
  "root": "awsui_root_1vtzr_19vlz_9",
  "view-button": "awsui_view-button_1vtzr_19vlz_13",
  "browse-button": "awsui_browse-button_1vtzr_19vlz_17",
  "layout": "awsui_layout_1vtzr_19vlz_21",
  "layout-uri": "awsui_layout-uri_1vtzr_19vlz_33",
  "layout-version": "awsui_layout-version_1vtzr_19vlz_37",
  "layout-divider": "awsui_layout-divider_1vtzr_19vlz_42"
};

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/search-input.js
var import_react274 = __toESM(require_react());
var SearchInput = import_react274.default.forwardRef((props, ref) => {
  const formFieldContext = useFormFieldContext(props);
  return import_react274.default.createElement(internal_default4, Object.assign({ type: "search" }, props, formFieldContext, { ref }));
});

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/index.js
var S3InContext = import_react275.default.forwardRef(({ i18nStrings, inputPlaceholder, resource, viewHref, invalid, inputAriaDescribedby, selectableItemsTypes, fetchVersions, onChange, onBrowse }, ref) => {
  const i18n = useInternalI18n("s3-resource-selector");
  const isInputBlurredRef = (0, import_react275.useRef)(true);
  const [isInputTouched, setInputTouched] = (0, import_react275.useState)(false);
  const { versions, loading, loadVersions, resetVersions } = useVersionsFetch(fetchVersions);
  const inputRef = (0, import_react275.useRef)(null);
  useForwardFocus(ref, inputRef);
  const uri = resource.uri;
  const supportsVersions = selectableItemsTypes && selectableItemsTypes.indexOf("versions") > -1;
  const selectedVersion = versions.filter((version) => version.value === resource.versionId)[0] || null;
  function handleUriChange(event) {
    const uri2 = event.detail.value;
    const errorCode = isInputTouched ? validate(uri2) : void 0;
    resetVersions();
    onChange({ uri: uri2 }, getErrorText(i18n, i18nStrings, errorCode));
  }
  function handleUriBlur() {
    isInputBlurredRef.current = true;
    setInputTouched(true);
    const errorCode = validate(resource.uri);
    onChange(resource, getErrorText(i18n, i18nStrings, errorCode));
    if (supportsVersions) {
      loadVersions(resource.uri);
    }
  }
  (0, import_react275.useEffect)(() => {
    var _a;
    if (!isInputBlurredRef.current || !supportsVersions) {
      return;
    }
    const { cancel } = (_a = loadVersions(uri)) !== null && _a !== void 0 ? _a : {};
    return cancel;
  }, [uri, supportsVersions, loadVersions]);
  return import_react275.default.createElement(
    "div",
    { className: styles_css_default91.root },
    import_react275.default.createElement(
      "div",
      { className: styles_css_default91.layout },
      import_react275.default.createElement(
        InternalFormField,
        { className: styles_css_default91["layout-uri"], label: i18n("i18nStrings.inContextUriLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextUriLabel), stretch: true },
        import_react275.default.createElement(SearchInput, { ref: inputRef, value: uri, ariaDescribedby: inputAriaDescribedby, clearAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextInputClearAriaLabel, placeholder: inputPlaceholder !== null && inputPlaceholder !== void 0 ? inputPlaceholder : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextInputPlaceholder, onChange: handleUriChange, invalid, onFocus: () => isInputBlurredRef.current = false, onBlur: handleUriBlur })
      ),
      supportsVersions && import_react275.default.createElement(
        InternalFormField,
        { className: styles_css_default91["layout-version"], label: i18n("i18nStrings.inContextVersionSelectLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextVersionSelectLabel), stretch: true },
        import_react275.default.createElement(internal_default5, { selectedOption: selectedVersion, placeholder: i18n("i18nStrings.inContextSelectPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextSelectPlaceholder), disabled: versions.length === 0, options: versions, onChange: (event) => onChange(Object.assign(Object.assign({}, resource), { versionId: event.detail.selectedOption.value }), void 0), invalid: false })
      ),
      import_react275.default.createElement(
        "div",
        null,
        import_react275.default.createElement(InternalButton, { className: styles_css_default91["view-button"], disabled: !viewHref, href: viewHref, target: "_blank", iconName: "external", iconAlign: "right", formAction: "none", ariaLabel: i18n("i18nStrings.inContextViewButtonAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextViewButtonAriaLabel) }, i18n("i18nStrings.inContextViewButton", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextViewButton))
      ),
      import_react275.default.createElement("div", { className: styles_css_default91["layout-divider"] }),
      import_react275.default.createElement(
        "div",
        null,
        import_react275.default.createElement(InternalButton, { className: styles_css_default91["browse-button"], disabled: loading, formAction: "none", onClick: onBrowse }, i18n("i18nStrings.inContextBrowseButton", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextBrowseButton))
      )
    ),
    import_react275.default.createElement("div", { role: "alert", "aria-live": "assertive", "aria-atomic": "true" }, loading && import_react275.default.createElement(
      InternalBox,
      { margin: { top: "s" } },
      import_react275.default.createElement(
        StatusIndicator,
        { type: "loading" },
        import_react275.default.createElement(live_region_default, { visible: true }, i18n("i18nStrings.inContextLoadingText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextLoadingText))
      )
    ))
  );
});

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/index.js
var import_react307 = __toESM(require_react());

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/buckets-table.js
var import_react304 = __toESM(require_react());

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/table-utils.js
function includes(array, item) {
  return !!array && array.indexOf(item) > -1;
}
var compareDates = (itemA, itemB) => {
  const timeA = itemA ? new Date(itemA).getTime() : 0;
  const timeB = itemB ? new Date(itemB).getTime() : 0;
  return timeA - timeB;
};
function getColumnAriaLabel(i18n, i18nStrings, columnName = "") {
  return ({ sorted, descending: descending2 }) => {
    var _a, _b, _c, _d, _e, _f;
    if (!sorted) {
      return (_b = i18n("i18nStrings.labelNotSorted", (_a = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelNotSorted) === null || _a === void 0 ? void 0 : _a.call(i18nStrings, columnName), (format3) => format3({ columnName }))) !== null && _b !== void 0 ? _b : "";
    }
    if (descending2) {
      return (_d = i18n("i18nStrings.labelSortedDescending", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelSortedDescending) === null || _c === void 0 ? void 0 : _c.call(i18nStrings, columnName), (format3) => format3({ columnName }))) !== null && _d !== void 0 ? _d : "";
    }
    return (_f = i18n("i18nStrings.labelSortedAscending", (_e = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelSortedAscending) === null || _e === void 0 ? void 0 : _e.call(i18nStrings, columnName), (format3) => format3({ columnName }))) !== null && _f !== void 0 ? _f : "";
  };
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/column-formats.js
var BYTES_BASE = 1024;
var BYTES_DECIMALS = 2;
var BYTES_SIZES = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
function formatDefault(value) {
  return value ? value : "-";
}
function formatSize(bytes) {
  if (bytes === void 0) {
    return "-";
  }
  if (bytes === 0) {
    return `0 ${BYTES_SIZES[0]}`;
  }
  const i = Math.floor(Math.log(bytes) / Math.log(BYTES_BASE));
  return parseFloat((bytes / Math.pow(BYTES_BASE, i)).toFixed(BYTES_DECIMALS)) + " " + BYTES_SIZES[i];
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/basic-table.js
var import_react303 = __toESM(require_react());

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/use-collection.js
var import_react277 = __toESM(require_react(), 1);

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/operations/filter.js
function defaultFilteringFunction(item, filteringText, filteringFields) {
  if (filteringText.length === 0) {
    return true;
  }
  filteringFields = filteringFields || Object.keys(item);
  var lowFilteringText = filteringText.toLowerCase();
  return filteringFields.some(function(key2) {
    return String(item[key2]).toLowerCase().indexOf(lowFilteringText) > -1;
  });
}
function createFilterPredicate(filtering, filteringText) {
  var _a;
  if (filteringText === void 0) {
    filteringText = "";
  }
  if (!filtering) {
    return null;
  }
  var filteringFunction = (_a = filtering.filteringFunction) !== null && _a !== void 0 ? _a : defaultFilteringFunction;
  return function(item) {
    return filteringFunction(item, filteringText, filtering.fields);
  };
}

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/date-utils/parse-iso-date.js
function parseIsoDate(isoDate) {
  if (typeof isoDate === "string") {
    if (isoDate.includes("T")) {
      return new Date(isoDate);
    } else {
      return /* @__PURE__ */ new Date(isoDate + "T00:00:00");
    }
  }
  return /* @__PURE__ */ new Date(NaN);
}

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/date-utils/compare-dates.js
function compareDates2(date2, dateToCompare) {
  if (date2 instanceof Date && typeof dateToCompare === "string") {
    return startOfDay2(date2).getTime() - startOfDay2(parseIsoDate(dateToCompare)).getTime();
  }
  return NaN;
}
function compareTimestamps(date2, dateToCompare) {
  if (date2 instanceof Date && typeof dateToCompare === "string") {
    return date2.getTime() - parseIsoDate(dateToCompare).getTime();
  }
  return NaN;
}
function startOfDay2(date2) {
  var copy2 = new Date(date2.getTime());
  copy2.setHours(0, 0, 0, 0);
  return copy2;
}

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/operations/property-filter.js
var filterUsingOperator = function(itemValue, tokenValue, _a) {
  var operator = _a.operator, match2 = _a.match;
  if (match2 === "date" || match2 === "datetime") {
    var comparator = match2 === "date" ? compareDates2 : compareTimestamps;
    var comparisonResult = comparator(itemValue, tokenValue);
    switch (operator) {
      case "<":
        return comparisonResult < 0;
      case "<=":
        return comparisonResult <= 0;
      case ">":
        return comparisonResult > 0;
      case ">=":
        return comparisonResult >= 0;
      case "=":
        return comparisonResult === 0;
      case "!=":
        return comparisonResult !== 0;
      default:
        return false;
    }
  } else if (typeof match2 === "function") {
    return match2(itemValue, tokenValue);
  } else if (match2) {
    throw new Error("Unsupported `operator.match` type given.");
  }
  switch (operator) {
    case "<":
      return itemValue < tokenValue;
    case "<=":
      return itemValue <= tokenValue;
    case ">":
      return itemValue > tokenValue;
    case ">=":
      return itemValue >= tokenValue;
    case "=":
      return itemValue == tokenValue;
    case "!=":
      return itemValue != tokenValue;
    case ":":
      return (itemValue + "").toLowerCase().indexOf((tokenValue + "").toLowerCase()) > -1;
    case "!:":
      return (itemValue + "").toLowerCase().indexOf((tokenValue + "").toLowerCase()) === -1;
    case "^":
      return (itemValue + "").toLowerCase().startsWith((tokenValue + "").toLowerCase());
    default:
      throw new Error("Unsupported operator given.");
  }
};
function freeTextFilter(value, item, operator, filteringPropertiesMap) {
  var matches = Object.keys(filteringPropertiesMap).some(function(propertyKey) {
    var operators = filteringPropertiesMap[propertyKey].operators;
    return !!operators[operator] && filterUsingOperator(item[propertyKey], value, { operator: ":" });
  });
  return operator === ":" ? matches : !matches;
}
function filterByToken(token, item, filteringPropertiesMap) {
  if (token.propertyKey) {
    if (!(token.propertyKey in filteringPropertiesMap) || !(token.operator in filteringPropertiesMap[token.propertyKey].operators)) {
      return false;
    }
    var operator = filteringPropertiesMap[token.propertyKey].operators[token.operator];
    var itemValue = (operator === null || operator === void 0 ? void 0 : operator.match) ? item[token.propertyKey] : fixupFalsyValues(item[token.propertyKey]);
    return filterUsingOperator(itemValue, token.value, operator !== null && operator !== void 0 ? operator : { operator: token.operator });
  }
  return freeTextFilter(token.value, item, token.operator, filteringPropertiesMap);
}
function defaultFilteringFunction2(filteringPropertiesMap) {
  return function(item, _a) {
    var tokens = _a.tokens, operation = _a.operation;
    var result = operation === "and" ? true : !tokens.length;
    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
      var token = tokens_1[_i];
      result = operation === "and" ? result && filterByToken(token, item, filteringPropertiesMap) : result || filterByToken(token, item, filteringPropertiesMap);
    }
    return result;
  };
}
function createPropertyFilterPredicate(propertyFiltering, query) {
  if (query === void 0) {
    query = { tokens: [], operation: "and" };
  }
  if (!propertyFiltering) {
    return null;
  }
  var filteringPropertiesMap = propertyFiltering.filteringProperties.reduce(function(acc, _a) {
    var _b;
    var key2 = _a.key, operators = _a.operators, defaultOperator = _a.defaultOperator;
    var operatorMap = (_b = {}, _b[defaultOperator !== null && defaultOperator !== void 0 ? defaultOperator : "="] = { operator: defaultOperator !== null && defaultOperator !== void 0 ? defaultOperator : "=" }, _b);
    operators === null || operators === void 0 ? void 0 : operators.forEach(function(op) {
      if (typeof op === "string") {
        operatorMap[op] = { operator: op };
      } else {
        operatorMap[op.operator] = { operator: op.operator, match: op.match };
      }
    });
    acc[key2] = {
      operators: operatorMap
    };
    return acc;
  }, {});
  var filteringFunction = propertyFiltering.filteringFunction || defaultFilteringFunction2(filteringPropertiesMap);
  return function(item) {
    return filteringFunction(item, query);
  };
}
var fixupFalsyValues = function(value) {
  if (typeof value === "boolean") {
    return value + "";
  }
  if (value || value === 0) {
    return value;
  }
  return "";
};

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/operations/sort.js
function getSorter(sortingField) {
  if (!sortingField) {
    return null;
  }
  return function(row1, row2) {
    var _a, _b;
    var value1 = (_a = row1[sortingField]) !== null && _a !== void 0 ? _a : "";
    var value2 = (_b = row2[sortingField]) !== null && _b !== void 0 ? _b : "";
    if (typeof value1 === "string" && typeof value2 === "string") {
      return value1.localeCompare(value2);
    }
    return value1 < value2 ? -1 : value1 == value2 ? 0 : 1;
  };
}
function createComparator(sorting, state) {
  var _a;
  if (!sorting || !state) {
    return null;
  }
  var direction = state.isDescending ? -1 : 1;
  var comparator = (_a = state.sortingColumn.sortingComparator) !== null && _a !== void 0 ? _a : getSorter(state.sortingColumn.sortingField);
  return comparator ? function(a2, b) {
    return comparator(a2, b) * direction;
  } : null;
}

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/operations/pagination.js
var DEFAULT_PAGE_SIZE = 10;
function createPageProps(pagination, currentPageIndex, items) {
  var _a;
  if (!pagination) {
    return null;
  }
  var pageSize = (_a = pagination.pageSize) !== null && _a !== void 0 ? _a : DEFAULT_PAGE_SIZE;
  var pagesCount = Math.ceil(items.length / pageSize);
  var pageIndex = currentPageIndex !== null && currentPageIndex !== void 0 ? currentPageIndex : 1;
  if (pageIndex < 1 || pageIndex > pagesCount || Number.isNaN(pageIndex)) {
    pageIndex = 1;
  }
  return { pageSize, pagesCount, pageIndex };
}

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/operations/compose-filters.js
function composeFilters() {
  var predicates = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    predicates[_i] = arguments[_i];
  }
  return predicates.some(Boolean) ? function(item) {
    for (var _i2 = 0, predicates_1 = predicates; _i2 < predicates_1.length; _i2++) {
      var predicate = predicates_1[_i2];
      if (predicate && !predicate(item)) {
        return false;
      }
    }
    return true;
  } : null;
}

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/operations/index.js
function processItems(items, _a, _b) {
  var filteringText = _a.filteringText, sortingState = _a.sortingState, currentPageIndex = _a.currentPageIndex, propertyFilteringQuery = _a.propertyFilteringQuery;
  var filtering = _b.filtering, sorting = _b.sorting, pagination = _b.pagination, propertyFiltering = _b.propertyFiltering;
  var filterPredicate = composeFilters(createPropertyFilterPredicate(propertyFiltering, propertyFilteringQuery), createFilterPredicate(filtering, filteringText));
  if (filterPredicate) {
    items = items.filter(filterPredicate);
  }
  var filteredItemsCount = filterPredicate ? items.length : void 0;
  var comparator = createComparator(sorting, sortingState);
  if (comparator) {
    items = items.slice().sort(comparator);
  }
  var allPageItems = items;
  var pageProps = createPageProps(pagination, currentPageIndex, items);
  if (pageProps) {
    items = items.slice((pageProps.pageIndex - 1) * pageProps.pageSize, pageProps.pageIndex * pageProps.pageSize);
  }
  return {
    items,
    allPageItems,
    filteredItemsCount,
    pagesCount: pageProps === null || pageProps === void 0 ? void 0 : pageProps.pagesCount,
    actualPageIndex: pageProps === null || pageProps === void 0 ? void 0 : pageProps.pageIndex
  };
}
var getTrackableValue2 = function(trackBy, item) {
  if (!trackBy) {
    return item;
  }
  if (typeof trackBy === "function") {
    return trackBy(item);
  }
  return item[trackBy];
};
var processSelectedItems = function(items, selectedItems, trackBy) {
  var selectedSet = /* @__PURE__ */ new Set();
  selectedItems.forEach(function(item) {
    return selectedSet.add(getTrackableValue2(trackBy, item));
  });
  return items.filter(function(item) {
    return selectedSet.has(getTrackableValue2(trackBy, item));
  });
};
var itemsAreEqual = function(items1, items2, trackBy) {
  if (items1.length !== items2.length) {
    return false;
  }
  var set1 = /* @__PURE__ */ new Set();
  items1.forEach(function(item) {
    return set1.add(getTrackableValue2(trackBy, item));
  });
  return items2.every(function(item) {
    return set1.has(getTrackableValue2(trackBy, item));
  });
};

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/utils.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s2, i = 1, n = arguments.length; i < n; i++) {
      s2 = arguments[i];
      for (var p in s2) if (Object.prototype.hasOwnProperty.call(s2, p))
        t[p] = s2[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function collectionReducer(state, action) {
  var newState = __assign({}, state);
  switch (action.type) {
    case "selection":
      newState.selectedItems = action.selectedItems;
      break;
    case "filtering":
      newState.currentPageIndex = 1;
      newState.filteringText = action.filteringText;
      break;
    case "sorting":
      newState.currentPageIndex = 1;
      newState.sortingState = action.sortingState;
      break;
    case "pagination":
      newState.currentPageIndex = action.pageIndex;
      break;
    case "property-filtering":
      newState.currentPageIndex = 1;
      newState.propertyFilteringQuery = action.query;
      break;
  }
  return newState;
}
function createActions(_a) {
  var dispatch = _a.dispatch, collectionRef = _a.collectionRef;
  return {
    setFiltering: function(filteringText) {
      dispatch({ type: "filtering", filteringText });
      collectionRef.current && collectionRef.current.scrollToTop();
    },
    setSorting: function(state) {
      dispatch({ type: "sorting", sortingState: state });
      collectionRef.current && collectionRef.current.scrollToTop();
    },
    setCurrentPage: function(pageIndex) {
      dispatch({ type: "pagination", pageIndex });
      collectionRef.current && collectionRef.current.scrollToTop();
    },
    setSelectedItems: function(selectedItems) {
      dispatch({ type: "selection", selectedItems });
    },
    setPropertyFiltering: function(query) {
      dispatch({ type: "property-filtering", query });
      collectionRef.current && collectionRef.current.scrollToTop();
    }
  };
}
function createSyncProps(options, _a, actions, collectionRef, _b) {
  var _c, _d;
  var filteringText = _a.filteringText, sortingState = _a.sortingState, selectedItems = _a.selectedItems, currentPageIndex = _a.currentPageIndex, propertyFilteringQuery = _a.propertyFilteringQuery;
  var pagesCount = _b.pagesCount, actualPageIndex = _b.actualPageIndex, allItems = _b.allItems, allPageItems = _b.allPageItems;
  var empty = options.filtering ? allItems.length ? options.filtering.noMatch : options.filtering.empty : null;
  empty = options.propertyFiltering ? allItems.length ? options.propertyFiltering.noMatch : options.propertyFiltering.empty : empty;
  var filteringOptions = options.propertyFiltering ? options.propertyFiltering.filteringProperties.reduce(function(acc, property) {
    Object.keys(allItems.reduce(function(acc2, item) {
      acc2["" + fixupFalsyValues(item[property.key])] = true;
      return acc2;
    }, {})).forEach(function(value) {
      if (value !== "") {
        acc.push({
          propertyKey: property.key,
          value
        });
      }
    });
    return acc;
  }, []) : [];
  return {
    collectionProps: __assign(__assign(__assign(__assign({ empty }, options.sorting ? {
      onSortingChange: function(_a2) {
        var detail = _a2.detail;
        actions.setSorting(detail);
      },
      sortingColumn: sortingState === null || sortingState === void 0 ? void 0 : sortingState.sortingColumn,
      sortingDescending: sortingState === null || sortingState === void 0 ? void 0 : sortingState.isDescending
    } : {}), options.selection ? {
      onSelectionChange: function(_a2) {
        var selectedItems2 = _a2.detail.selectedItems;
        actions.setSelectedItems(selectedItems2);
      },
      selectedItems,
      trackBy: options.selection.trackBy
    } : {}), { ref: collectionRef }), ((_c = options.pagination) === null || _c === void 0 ? void 0 : _c.pageSize) ? {
      totalItemsCount: allPageItems.length,
      firstIndex: ((actualPageIndex !== null && actualPageIndex !== void 0 ? actualPageIndex : currentPageIndex) - 1) * options.pagination.pageSize + 1
    } : {}),
    filterProps: {
      filteringText,
      onChange: function(_a2) {
        var filteringText2 = _a2.detail.filteringText;
        actions.setFiltering(filteringText2);
      }
    },
    propertyFilterProps: {
      query: propertyFilteringQuery,
      onChange: function(_a2) {
        var query = _a2.detail;
        actions.setPropertyFiltering(query);
      },
      filteringProperties: ((_d = options.propertyFiltering) === null || _d === void 0 ? void 0 : _d.filteringProperties) || [],
      filteringOptions
    },
    paginationProps: {
      currentPageIndex: actualPageIndex !== null && actualPageIndex !== void 0 ? actualPageIndex : currentPageIndex,
      // pagesCount is always calculated when options.pagination is present
      pagesCount,
      onChange: function(_a2) {
        var currentPageIndex2 = _a2.detail.currentPageIndex;
        actions.setCurrentPage(currentPageIndex2);
      }
    }
  };
}

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/use-collection-state.js
var import_react276 = __toESM(require_react(), 1);
function useCollectionState(options, collectionRef) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j;
  var _k = (0, import_react276.useReducer)(collectionReducer, {
    selectedItems: (_b = (_a = options.selection) === null || _a === void 0 ? void 0 : _a.defaultSelectedItems) !== null && _b !== void 0 ? _b : [],
    sortingState: (_c = options.sorting) === null || _c === void 0 ? void 0 : _c.defaultState,
    currentPageIndex: (_e = (_d = options.pagination) === null || _d === void 0 ? void 0 : _d.defaultPage) !== null && _e !== void 0 ? _e : 1,
    filteringText: (_g = (_f = options.filtering) === null || _f === void 0 ? void 0 : _f.defaultFilteringText) !== null && _g !== void 0 ? _g : "",
    propertyFilteringQuery: (_j = (_h = options.propertyFiltering) === null || _h === void 0 ? void 0 : _h.defaultQuery) !== null && _j !== void 0 ? _j : { tokens: [], operation: "and" }
  }), state = _k[0], dispatch = _k[1];
  return [
    state,
    createActions({
      dispatch,
      collectionRef
    })
  ];
}

// node_modules/@cloudscape-design/collection-hooks/dist/mjs/use-collection.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s2, i = 1, n = arguments.length; i < n; i++) {
      s2 = arguments[i];
      for (var p in s2) if (Object.prototype.hasOwnProperty.call(s2, p))
        t[p] = s2[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
function useCollection(allItems, options) {
  var collectionRef = (0, import_react277.useRef)(null);
  var _a = useCollectionState(options, collectionRef), state = _a[0], actions = _a[1];
  var _b = processItems(allItems, state, options), items = _b.items, allPageItems = _b.allPageItems, pagesCount = _b.pagesCount, filteredItemsCount = _b.filteredItemsCount, actualPageIndex = _b.actualPageIndex;
  if (options.selection && !options.selection.keepSelection) {
    var newSelectedItems = processSelectedItems(items, state.selectedItems, options.selection.trackBy);
    if (!itemsAreEqual(newSelectedItems, state.selectedItems, options.selection.trackBy)) {
      actions.setSelectedItems(newSelectedItems);
    }
  }
  return __assign2({ items, allPageItems, filteredItemsCount, actions }, createSyncProps(options, state, actions, collectionRef, {
    actualPageIndex,
    pagesCount,
    allItems,
    allPageItems
  }));
}

// node_modules/@cloudscape-design/components/table/internal.js
var import_react300 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/thead.js
var import_react285 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/header-cell/index.js
var import_react284 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/header-cell/utils.js
var stateToIcon = {
  sortable: "caret-down",
  ascending: "caret-up-filled",
  descending: "caret-down-filled"
};
var getSortingStatus = (sortable, sorted, descending2, disabled) => {
  if (sorted) {
    if (descending2) {
      return "descending";
    }
    return "ascending";
  }
  if (sortable && !disabled) {
    return "sortable";
  }
  return void 0;
};
var getSortingIconName = (sortingState) => stateToIcon[sortingState];
var isSorted = (column, sortingColumn) => column === sortingColumn || column.sortingField !== void 0 && column.sortingField === sortingColumn.sortingField || column.sortingComparator !== void 0 && column.sortingComparator === sortingColumn.sortingComparator;

// node_modules/@cloudscape-design/components/table/header-cell/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/table/header-cell/styles.scoped.css";
var styles_css_default92 = {
  "header-cell": "awsui_header-cell_1spae_1sbf1_99",
  "header-cell-fake-focus": "awsui_header-cell-fake-focus_1spae_1sbf1_133",
  "header-cell-sticky": "awsui_header-cell-sticky_1spae_1sbf1_154",
  "header-cell-stuck": "awsui_header-cell-stuck_1spae_1sbf1_157",
  "header-cell-variant-full-page": "awsui_header-cell-variant-full-page_1spae_1sbf1_157",
  "header-cell-hidden": "awsui_header-cell-hidden_1spae_1sbf1_160",
  "header-cell-sortable": "awsui_header-cell-sortable_1spae_1sbf1_163",
  "sticky-cell": "awsui_sticky-cell_1spae_1sbf1_166",
  "sticky-cell-pad-left": "awsui_sticky-cell-pad-left_1spae_1sbf1_174",
  "has-selection": "awsui_has-selection_1spae_1sbf1_174",
  "sticky-cell-last-left": "awsui_sticky-cell-last-left_1spae_1sbf1_177",
  "resize-divider": "awsui_resize-divider_1spae_1sbf1_181",
  "sticky-cell-last-right": "awsui_sticky-cell-last-right_1spae_1sbf1_184",
  "sorting-icon": "awsui_sorting-icon_1spae_1sbf1_199",
  "edit-icon": "awsui_edit-icon_1spae_1sbf1_207",
  "header-cell-content": "awsui_header-cell-content_1spae_1sbf1_213",
  "header-cell-content-expandable": "awsui_header-cell-content-expandable_1spae_1sbf1_219",
  "header-cell-disabled": "awsui_header-cell-disabled_1spae_1sbf1_271",
  "header-cell-sorted": "awsui_header-cell-sorted_1spae_1sbf1_271",
  "header-cell-text": "awsui_header-cell-text_1spae_1sbf1_285",
  "header-cell-text-wrap": "awsui_header-cell-text-wrap_1spae_1sbf1_289",
  "header-cell-ascending": "awsui_header-cell-ascending_1spae_1sbf1_295",
  "header-cell-descending": "awsui_header-cell-descending_1spae_1sbf1_296",
  "is-visual-refresh": "awsui_is-visual-refresh_1spae_1sbf1_306",
  "has-striped-rows": "awsui_has-striped-rows_1spae_1sbf1_320"
};

// node_modules/@cloudscape-design/components/table/resizer/index.js
var import_react279 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/resizer/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/table/resizer/styles.scoped.css";
var styles_css_default93 = {
  "resize-active": "awsui_resize-active_x7peu_sqn6e_99",
  "resize-active-with-focus": "awsui_resize-active-with-focus_x7peu_sqn6e_99",
  "divider": "awsui_divider_x7peu_sqn6e_104",
  "divider-disabled": "awsui_divider-disabled_x7peu_sqn6e_118",
  "divider-active": "awsui_divider-active_x7peu_sqn6e_121",
  "resizer": "awsui_resizer_x7peu_sqn6e_125",
  "has-focus": "awsui_has-focus_x7peu_sqn6e_182",
  "tracker": "awsui_tracker_x7peu_sqn6e_205"
};

// node_modules/@cloudscape-design/components/table/use-column-widths.js
var import_react278 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/column-widths-utils.js
function checkColumnWidths(columnDefinitions) {
  for (const column of columnDefinitions) {
    checkProperty(column, "minWidth");
    checkProperty(column, "width");
  }
}
function setElementWidths(element, styles) {
  function setProperty(property) {
    const value = styles[property];
    let widthCssValue = "";
    if (typeof value === "number") {
      widthCssValue = value + "px";
    }
    if (typeof value === "string") {
      widthCssValue = value;
    }
    if (element.style[property] !== widthCssValue) {
      element.style[property] = widthCssValue;
    }
  }
  setProperty("width");
  setProperty("minWidth");
  setProperty("maxWidth");
}
function checkProperty(column, name) {
  const value = column[name];
  if (typeof value !== "number" && typeof value !== "undefined") {
    warnOnce("Table", `resizableColumns feature requires ${name} property to be a number, got ${value}. The component may work incorrectly.`);
  }
}

// node_modules/@cloudscape-design/components/table/use-column-widths.js
var DEFAULT_COLUMN_WIDTH = 120;
function readWidths(getCell, visibleColumns) {
  var _a;
  const result = /* @__PURE__ */ new Map();
  for (let index = 0; index < visibleColumns.length; index++) {
    const column = visibleColumns[index];
    let width = column.width || 0;
    const minWidth = column.minWidth || width || DEFAULT_COLUMN_WIDTH;
    if (!width && // read width from the DOM if it is missing in the config
    index !== visibleColumns.length - 1) {
      const colEl = getCell(column.id);
      width = (_a = colEl === null || colEl === void 0 ? void 0 : colEl.getBoundingClientRect().width) !== null && _a !== void 0 ? _a : DEFAULT_COLUMN_WIDTH;
    }
    result.set(column.id, Math.max(width, minWidth));
  }
  return result;
}
function updateWidths(visibleColumns, oldWidths, newWidth, columnId) {
  const column = visibleColumns.find((column2) => column2.id === columnId);
  const minWidth = typeof (column === null || column === void 0 ? void 0 : column.minWidth) === "number" ? column.minWidth : DEFAULT_COLUMN_WIDTH;
  newWidth = Math.max(newWidth, minWidth);
  if (oldWidths.get(columnId) === newWidth) {
    return oldWidths;
  }
  const newWidths = new Map(oldWidths);
  newWidths.set(columnId, newWidth);
  return newWidths;
}
var WidthsContext = (0, import_react278.createContext)({
  getColumnStyles: () => ({}),
  columnWidths: /* @__PURE__ */ new Map(),
  updateColumn: () => {
  },
  setCell: () => {
  }
});
function ColumnWidthsProvider({ visibleColumns, resizableColumns, containerRef, children }) {
  const visibleColumnsRef = (0, import_react278.useRef)(null);
  const containerWidthRef = (0, import_react278.useRef)(0);
  const [columnWidths, setColumnWidths] = (0, import_react278.useState)(null);
  const cellsRef = (0, import_react278.useRef)(/* @__PURE__ */ new Map());
  const stickyCellsRef = (0, import_react278.useRef)(/* @__PURE__ */ new Map());
  const getCell = (columnId) => {
    var _a;
    return (_a = cellsRef.current.get(columnId)) !== null && _a !== void 0 ? _a : null;
  };
  const setCell = (sticky, columnId, node) => {
    const ref = sticky ? stickyCellsRef : cellsRef;
    if (node) {
      ref.current.set(columnId, node);
    } else {
      ref.current.delete(columnId);
    }
  };
  const getColumnStyles = (sticky, columnId) => {
    var _a, _b, _c;
    const column = visibleColumns.find((column2) => column2.id === columnId);
    if (!column) {
      return {};
    }
    if (sticky) {
      return { width: ((_a = cellsRef.current.get(column.id)) === null || _a === void 0 ? void 0 : _a.offsetWidth) || ((_b = columnWidths === null || columnWidths === void 0 ? void 0 : columnWidths.get(column.id)) !== null && _b !== void 0 ? _b : column.width) };
    }
    if (resizableColumns && columnWidths) {
      const isLastColumn = column.id === ((_c = visibleColumns[visibleColumns.length - 1]) === null || _c === void 0 ? void 0 : _c.id);
      const totalWidth = visibleColumns.reduce((sum2, { id }) => sum2 + (columnWidths.get(id) || DEFAULT_COLUMN_WIDTH), 0);
      if (isLastColumn && containerWidthRef.current > totalWidth) {
        return { width: "auto", minWidth: column === null || column === void 0 ? void 0 : column.minWidth };
      } else {
        return { width: columnWidths.get(column.id), minWidth: column === null || column === void 0 ? void 0 : column.minWidth };
      }
    }
    return {
      width: column.width,
      minWidth: column.minWidth,
      maxWidth: !resizableColumns ? column.maxWidth : void 0
    };
  };
  const updateColumnWidths = useStableCallback(() => {
    for (const { id } of visibleColumns) {
      const element = cellsRef.current.get(id);
      if (element) {
        setElementWidths(element, getColumnStyles(false, id));
      }
    }
    for (const { id } of visibleColumns) {
      const element = stickyCellsRef.current.get(id);
      if (element) {
        setElementWidths(element, getColumnStyles(true, id));
      }
    }
  });
  useResizeObserver(containerRef, ({ contentBoxWidth: containerWidth }) => {
    containerWidthRef.current = containerWidth;
    updateColumnWidths();
  });
  (0, import_react278.useEffect)(() => {
    updateColumnWidths();
    if (!resizableColumns) {
      return;
    }
    let updated = false;
    const newColumnWidths = new Map(columnWidths);
    const lastVisible = visibleColumnsRef.current;
    if (lastVisible) {
      for (let index = 0; index < visibleColumns.length; index++) {
        const column = visibleColumns[index];
        if (!(columnWidths === null || columnWidths === void 0 ? void 0 : columnWidths.get(column.id)) && lastVisible.indexOf(column.id) === -1) {
          updated = true;
          newColumnWidths.set(column.id, column.width || DEFAULT_COLUMN_WIDTH);
        }
      }
      if (updated) {
        setColumnWidths(newColumnWidths);
      }
    }
    visibleColumnsRef.current = visibleColumns.map((column) => column.id);
  }, [columnWidths, resizableColumns, visibleColumns, updateColumnWidths]);
  (0, import_react278.useEffect)(() => {
    if (!resizableColumns) {
      return;
    }
    setColumnWidths(() => readWidths(getCell, visibleColumns));
  }, []);
  function updateColumn(columnId, newWidth) {
    setColumnWidths((columnWidths2) => updateWidths(visibleColumns, columnWidths2 !== null && columnWidths2 !== void 0 ? columnWidths2 : /* @__PURE__ */ new Map(), newWidth, columnId));
  }
  return import_react278.default.createElement(WidthsContext.Provider, { value: { getColumnStyles, columnWidths: columnWidths !== null && columnWidths !== void 0 ? columnWidths : /* @__PURE__ */ new Map(), updateColumn, setCell } }, children);
}
function useColumnWidths() {
  return (0, import_react278.useContext)(WidthsContext);
}

// node_modules/@cloudscape-design/components/table/resizer/resizer-lookup.js
function getResizerElements(resizerElement) {
  if (!resizerElement) {
    return null;
  }
  const header = findUpUntil(resizerElement, (element) => element.tagName.toLowerCase() === "th");
  if (!header) {
    return null;
  }
  const tableRoot = findUpUntil(header, (element) => element.className.indexOf(styles_css_default53.root) > -1);
  if (!tableRoot) {
    return null;
  }
  const table = tableRoot.querySelector(`table`);
  if (!table) {
    return null;
  }
  const tracker = tableRoot.querySelector(`.${styles_css_default93.tracker}`);
  if (!tracker) {
    return null;
  }
  const scrollParent = getOverflowParents(header)[0];
  if (!scrollParent) {
    return null;
  }
  return { header, table, tracker, scrollParent };
}
function getHeaderWidth(resizerElement) {
  var _a;
  const header = resizerElement && findUpUntil(resizerElement, (element) => element.tagName.toLowerCase() === "th");
  return (_a = header === null || header === void 0 ? void 0 : header.getBoundingClientRect().width) !== null && _a !== void 0 ? _a : 0;
}

// node_modules/@cloudscape-design/components/table/resizer/index.js
var AUTO_GROW_START_TIME = 10;
var AUTO_GROW_INTERVAL = 10;
var AUTO_GROW_INCREMENT = 5;
function Divider2({ className: className2 }) {
  return import_react279.default.createElement("span", { className: clsx_m_default(styles_css_default93.divider, styles_css_default93["divider-disabled"], className2) });
}
function Resizer({ onWidthUpdate, onWidthUpdateCommit, ariaLabelledby, minWidth = DEFAULT_COLUMN_WIDTH, tabIndex, showFocusRing, focusId, roleDescription }) {
  onWidthUpdate = useStableCallback(onWidthUpdate);
  onWidthUpdateCommit = useStableCallback(onWidthUpdateCommit);
  const separatorId = useUniqueId();
  const resizerToggleRef = (0, import_react279.useRef)(null);
  const resizerSeparatorRef = (0, import_react279.useRef)(null);
  const [isDragging, setIsDragging] = (0, import_react279.useState)(false);
  const [isKeyboardDragging, setIsKeyboardDragging] = (0, import_react279.useState)(false);
  const autoGrowTimeout = (0, import_react279.useRef)();
  const [resizerHasFocus, setResizerHasFocus] = (0, import_react279.useState)(false);
  const [headerCellWidth, setHeaderCellWidth] = (0, import_react279.useState)(0);
  (0, import_react279.useEffect)(() => {
    setHeaderCellWidth(getHeaderWidth(resizerToggleRef.current));
  }, []);
  (0, import_react279.useEffect)(() => {
    const elements = getResizerElements(resizerToggleRef.current);
    if (!isDragging && !resizerHasFocus || !elements) {
      return;
    }
    const { left: leftEdge, right: rightEdge } = elements.scrollParent.getBoundingClientRect();
    const updateTrackerPosition = (newOffset) => {
      const { left: scrollParentLeft } = elements.table.getBoundingClientRect();
      elements.tracker.style.top = elements.header.getBoundingClientRect().height + "px";
      elements.tracker.style.left = newOffset - scrollParentLeft - 1 + "px";
    };
    const updateColumnWidth = (newWidth) => {
      const { right, width } = elements.header.getBoundingClientRect();
      const updatedWidth = newWidth < minWidth ? minWidth : newWidth;
      updateTrackerPosition(right + updatedWidth - width);
      if (newWidth >= minWidth) {
        setHeaderCellWidth(newWidth);
      }
      onWidthUpdate(newWidth);
    };
    const resizeColumn = (offset) => {
      if (offset > leftEdge) {
        const cellLeft = elements.header.getBoundingClientRect().left;
        const newWidth = offset - cellLeft;
        updateColumnWidth(newWidth);
      }
    };
    const onAutoGrow = () => {
      const width = elements.header.getBoundingClientRect().width;
      autoGrowTimeout.current = setTimeout(onAutoGrow, AUTO_GROW_INTERVAL);
      updateColumnWidth(width + AUTO_GROW_INCREMENT);
      elements.scrollParent.scrollLeft += AUTO_GROW_INCREMENT;
    };
    const onMouseMove = (event) => {
      clearTimeout(autoGrowTimeout.current);
      const offset = event.pageX;
      if (offset > rightEdge) {
        autoGrowTimeout.current = setTimeout(onAutoGrow, AUTO_GROW_START_TIME);
      } else {
        resizeColumn(offset);
      }
    };
    const onMouseUp = (event) => {
      resizeColumn(event.pageX);
      setIsDragging(false);
      onWidthUpdateCommit();
      clearTimeout(autoGrowTimeout.current);
    };
    const onKeyDown = (event) => {
      var _a, _b;
      if (isKeyboardDragging) {
        if (event.keyCode === KeyCode.left) {
          event.preventDefault();
          updateColumnWidth(elements.header.getBoundingClientRect().width - 10);
        }
        if (event.keyCode === KeyCode.right) {
          event.preventDefault();
          updateColumnWidth(elements.header.getBoundingClientRect().width + 10);
        }
        if (event.keyCode === KeyCode.enter || event.keyCode === KeyCode.space || event.keyCode === KeyCode.escape) {
          event.preventDefault();
          setIsKeyboardDragging(false);
          (_a = resizerToggleRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        }
      } else if (event.keyCode === KeyCode.enter || event.keyCode === KeyCode.space) {
        event.preventDefault();
        setIsKeyboardDragging(true);
        (_b = resizerSeparatorRef.current) === null || _b === void 0 ? void 0 : _b.focus();
      }
    };
    updateTrackerPosition(elements.header.getBoundingClientRect().right);
    if (isDragging) {
      document.body.classList.add(styles_css_default93["resize-active"]);
      document.addEventListener("mousemove", onMouseMove);
      document.addEventListener("mouseup", onMouseUp);
    }
    if (resizerHasFocus) {
      document.body.classList.add(styles_css_default93["resize-active-with-focus"]);
      elements.header.addEventListener("keydown", onKeyDown);
    }
    if (isKeyboardDragging) {
      document.body.classList.add(styles_css_default93["resize-active"]);
    }
    return () => {
      clearTimeout(autoGrowTimeout.current);
      document.body.classList.remove(styles_css_default93["resize-active"]);
      document.body.classList.remove(styles_css_default93["resize-active-with-focus"]);
      document.removeEventListener("mousemove", onMouseMove);
      document.removeEventListener("mouseup", onMouseUp);
      elements.header.removeEventListener("keydown", onKeyDown);
    };
  }, [minWidth, isDragging, isKeyboardDragging, resizerHasFocus, onWidthUpdate, onWidthUpdateCommit]);
  const { tabIndex: resizerTabIndex } = useSingleTabStopNavigation(resizerToggleRef, { tabIndex });
  return import_react279.default.createElement(
    import_react279.default.Fragment,
    null,
    import_react279.default.createElement("button", { ref: resizerToggleRef, className: clsx_m_default(styles_css_default93.resizer, (resizerHasFocus || showFocusRing || isKeyboardDragging) && styles_css_default93["has-focus"]), onMouseDown: (event) => {
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      setIsDragging(true);
    }, onClick: () => {
      var _a;
      setIsDragging(false);
      setResizerHasFocus(true);
      setIsKeyboardDragging(true);
      (_a = resizerSeparatorRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }, onFocus: () => {
      setHeaderCellWidth(getHeaderWidth(resizerToggleRef.current));
      setResizerHasFocus(true);
    }, onBlur: (event) => {
      if (event.relatedTarget !== resizerSeparatorRef.current) {
        setResizerHasFocus(false);
      }
    }, "aria-roledescription": roleDescription, "aria-labelledby": ariaLabelledby, tabIndex: resizerTabIndex, "data-focus-id": focusId }),
    import_react279.default.createElement("span", { className: clsx_m_default(styles_css_default93.divider, isDragging && styles_css_default93["divider-active"]), "data-awsui-table-suppress-navigation": true, ref: resizerSeparatorRef, id: separatorId, role: "separator", tabIndex: -1, "aria-hidden": !isKeyboardDragging, "aria-orientation": "vertical", "aria-valuenow": headerCellWidth, "aria-valuetext": headerCellWidth.toFixed(0), "aria-valuemin": minWidth, "data-focus-id": focusId, onBlur: () => {
      setResizerHasFocus(false);
      if (isKeyboardDragging) {
        setIsKeyboardDragging(false);
      }
      onWidthUpdateCommit();
    } })
  );
}
function ResizeTracker() {
  return import_react279.default.createElement("span", { className: styles_css_default93.tracker });
}

// node_modules/@cloudscape-design/components/table/header-cell/th-element.js
var import_react283 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/sticky-columns/use-sticky-columns.js
var import_react280 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/sticky-columns/utils.js
function isCellStatesEqual(s1, s2) {
  if (s1 && s2) {
    return s1.padLeft === s2.padLeft && s1.lastLeft === s2.lastLeft && s1.lastRight === s2.lastRight && s1.offset.left === s2.offset.left && s1.offset.right === s2.offset.right;
  }
  return s1 === s2;
}
function isWrapperStatesEqual(s1, s2) {
  return s1.scrollPaddingLeft === s2.scrollPaddingLeft && s1.scrollPaddingRight === s2.scrollPaddingRight;
}
function updateCellOffsets(cells, props) {
  var _a, _b, _c, _d, _e, _f;
  const totalColumns = props.visibleColumns.length;
  const firstColumnsWidths = [];
  for (let i = 0; i < Math.min(totalColumns, props.stickyColumnsFirst); i++) {
    const element = cells.get(props.visibleColumns[i]);
    const cellWidth = (_a = element === null || element === void 0 ? void 0 : element.getBoundingClientRect().width) !== null && _a !== void 0 ? _a : 0;
    firstColumnsWidths[i] = ((_b = firstColumnsWidths[i - 1]) !== null && _b !== void 0 ? _b : 0) + cellWidth;
  }
  const lastColumnsWidths = [];
  for (let i = 0; i < Math.min(totalColumns, props.stickyColumnsLast); i++) {
    const element = cells.get(props.visibleColumns[totalColumns - 1 - i]);
    const cellWidth = (_c = element === null || element === void 0 ? void 0 : element.getBoundingClientRect().width) !== null && _c !== void 0 ? _c : 0;
    lastColumnsWidths[i] = ((_d = lastColumnsWidths[i - 1]) !== null && _d !== void 0 ? _d : 0) + cellWidth;
  }
  const stickyWidthLeft = (_e = firstColumnsWidths[props.stickyColumnsFirst - 1]) !== null && _e !== void 0 ? _e : 0;
  const stickyWidthRight = (_f = lastColumnsWidths[props.stickyColumnsLast - 1]) !== null && _f !== void 0 ? _f : 0;
  const offsets = props.visibleColumns.reduce((map2, columnId, columnIndex) => {
    var _a2, _b2;
    return map2.set(columnId, {
      first: (_a2 = firstColumnsWidths[columnIndex - 1]) !== null && _a2 !== void 0 ? _a2 : 0,
      last: (_b2 = lastColumnsWidths[totalColumns - 1 - columnIndex - 1]) !== null && _b2 !== void 0 ? _b2 : 0
    });
  }, /* @__PURE__ */ new Map());
  return { offsets, stickyWidthLeft, stickyWidthRight };
}

// node_modules/@cloudscape-design/components/table/sticky-columns/use-sticky-columns.js
var MINIMUM_SCROLLABLE_SPACE = 148;
function useStickyColumns({ visibleColumns, stickyColumnsFirst, stickyColumnsLast }) {
  const store = (0, import_react280.useMemo)(() => new StickyColumnsStore(), []);
  const wrapperRef = (0, import_react280.useRef)(null);
  const tableRef = (0, import_react280.useRef)(null);
  const cellsRef = (0, import_react280.useRef)(/* @__PURE__ */ new Map());
  const hasStickyColumns = stickyColumnsFirst + stickyColumnsLast > 0;
  const updateStickyStyles = useStableCallback(() => {
    if (wrapperRef.current && tableRef.current) {
      store.updateCellStyles({
        wrapper: wrapperRef.current,
        table: tableRef.current,
        cells: cellsRef.current,
        visibleColumns,
        stickyColumnsFirst,
        stickyColumnsLast
      });
    }
  });
  useResizeObserver(wrapperRef, updateStickyStyles);
  useResizeObserver(tableRef, updateStickyStyles);
  (0, import_react280.useEffect)(() => {
    if (wrapperRef.current && tableRef.current) {
      store.updateCellStyles({
        wrapper: wrapperRef.current,
        table: tableRef.current,
        cells: cellsRef.current,
        visibleColumns,
        stickyColumnsFirst,
        stickyColumnsLast
      });
    }
  }, [store, stickyColumnsFirst, stickyColumnsLast, visibleColumns]);
  (0, import_react280.useEffect)(() => {
    if (!hasStickyColumns) {
      return;
    }
    const selector = (state) => state.wrapperState;
    const updateWrapperStyles = (state, prev) => {
      if (isWrapperStatesEqual(state, prev)) {
        return;
      }
      if (wrapperRef.current) {
        wrapperRef.current.style.scrollPaddingLeft = state.scrollPaddingLeft + "px";
        wrapperRef.current.style.scrollPaddingRight = state.scrollPaddingRight + "px";
      }
    };
    const unsubscribe = store.subscribe(selector, (newState, prevState) => updateWrapperStyles(selector(newState), selector(prevState)));
    return unsubscribe;
  }, [store, hasStickyColumns]);
  const setWrapper = (0, import_react280.useCallback)((node) => {
    if (wrapperRef.current) {
      wrapperRef.current.removeEventListener("scroll", updateStickyStyles);
    }
    if (node && hasStickyColumns) {
      node.addEventListener("scroll", updateStickyStyles);
    }
    wrapperRef.current = node;
  }, [hasStickyColumns, updateStickyStyles]);
  const setTable = (0, import_react280.useCallback)((node) => {
    tableRef.current = node;
  }, []);
  const setCell = (0, import_react280.useCallback)((columnId, node) => {
    if (node) {
      cellsRef.current.set(columnId, node);
    } else {
      cellsRef.current.delete(columnId);
    }
  }, []);
  return {
    store,
    style: {
      // Provide wrapper styles as props so that a re-render won't cause invalidation.
      wrapper: hasStickyColumns ? Object.assign({}, store.get().wrapperState) : void 0
    },
    refs: { wrapper: setWrapper, table: setTable, cell: setCell }
  };
}
function useStickyCellStyles({ stickyColumns, columnId, getClassName: getClassName4 }) {
  var _a;
  const setCell = stickyColumns.refs.cell;
  const unsubscribeRef = (0, import_react280.useRef)(null);
  const refCallback = (0, import_react280.useCallback)(
    (cellElement) => {
      if (unsubscribeRef.current) {
        unsubscribeRef.current();
      }
      setCell(columnId, cellElement);
      const selector = (state) => {
        var _a2;
        return (_a2 = state.cellState.get(columnId)) !== null && _a2 !== void 0 ? _a2 : null;
      };
      const updateCellStyles = (state, prev) => {
        if (isCellStatesEqual(state, prev)) {
          return;
        }
        const className2 = getClassName4(state);
        if (cellElement) {
          Object.keys(className2).forEach((key2) => {
            if (className2[key2]) {
              cellElement.classList.add(key2);
            } else {
              cellElement.classList.remove(key2);
            }
          });
          cellElement.style.left = (state === null || state === void 0 ? void 0 : state.offset.left) !== void 0 ? `${state.offset.left}px` : "";
          cellElement.style.right = (state === null || state === void 0 ? void 0 : state.offset.right) !== void 0 ? `${state.offset.right}px` : "";
        }
      };
      if (cellElement) {
        unsubscribeRef.current = stickyColumns.store.subscribe(selector, (newState, prevState) => {
          updateCellStyles(selector(newState), selector(prevState));
        });
      }
    },
    // getClassName is expected to be pure
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [columnId, setCell, stickyColumns.store]
  );
  const cellStyles = stickyColumns.store.get().cellState.get(columnId);
  return {
    ref: refCallback,
    className: cellStyles ? clsx_m_default(getClassName4(cellStyles)) : void 0,
    style: (_a = cellStyles === null || cellStyles === void 0 ? void 0 : cellStyles.offset) !== null && _a !== void 0 ? _a : void 0
  };
}
var StickyColumnsStore = class extends AsyncStore {
  constructor() {
    super({ cellState: /* @__PURE__ */ new Map(), wrapperState: { scrollPaddingLeft: 0, scrollPaddingRight: 0 } });
    this.cellOffsets = {
      offsets: /* @__PURE__ */ new Map(),
      stickyWidthLeft: 0,
      stickyWidthRight: 0
    };
    this.isStuckToTheLeft = false;
    this.isStuckToTheRight = false;
    this.padLeft = false;
    this.generateCellStyles = (props) => {
      const isEnabled = this.isEnabled(props);
      const lastLeftStickyColumnIndex = props.stickyColumnsFirst - 1;
      const lastRightStickyColumnIndex = props.visibleColumns.length - props.stickyColumnsLast;
      return props.visibleColumns.reduce((acc, columnId, index) => {
        var _a, _b, _c, _d;
        let stickySide = "non-sticky";
        if (index < props.stickyColumnsFirst) {
          stickySide = "left";
        } else if (index >= props.visibleColumns.length - props.stickyColumnsLast) {
          stickySide = "right";
        }
        if (!isEnabled || stickySide === "non-sticky") {
          return acc;
        }
        const isFirstColumn = index === 0;
        const stickyColumnOffsetLeft = (_b = (_a = this.cellOffsets.offsets.get(columnId)) === null || _a === void 0 ? void 0 : _a.first) !== null && _b !== void 0 ? _b : 0;
        const stickyColumnOffsetRight = (_d = (_c = this.cellOffsets.offsets.get(columnId)) === null || _c === void 0 ? void 0 : _c.last) !== null && _d !== void 0 ? _d : 0;
        acc.set(columnId, {
          padLeft: isFirstColumn && this.padLeft,
          lastLeft: this.isStuckToTheLeft && lastLeftStickyColumnIndex === index,
          lastRight: this.isStuckToTheRight && lastRightStickyColumnIndex === index,
          offset: {
            left: stickySide === "left" ? stickyColumnOffsetLeft : void 0,
            right: stickySide === "right" ? stickyColumnOffsetRight : void 0
          }
        });
        return acc;
      }, /* @__PURE__ */ new Map());
    };
    this.updateCellOffsets = (props) => {
      this.cellOffsets = updateCellOffsets(props.cells, props);
    };
    this.isEnabled = (props) => {
      const noStickyColumns = props.stickyColumnsFirst + props.stickyColumnsLast === 0;
      if (noStickyColumns) {
        return false;
      }
      const wrapperWidth = props.wrapper.getBoundingClientRect().width;
      const tableWidth = props.table.getBoundingClientRect().width;
      const isWrapperScrollable = tableWidth > wrapperWidth;
      if (!isWrapperScrollable) {
        return false;
      }
      const totalStickySpace = this.cellOffsets.stickyWidthLeft + this.cellOffsets.stickyWidthRight;
      const tablePaddingLeft = parseFloat(getComputedStyle(props.table).paddingLeft) || 0;
      const tablePaddingRight = parseFloat(getComputedStyle(props.table).paddingRight) || 0;
      const hasEnoughScrollableSpace = totalStickySpace + MINIMUM_SCROLLABLE_SPACE + tablePaddingLeft + tablePaddingRight < wrapperWidth;
      if (!hasEnoughScrollableSpace) {
        return false;
      }
      return true;
    };
  }
  updateCellStyles(props) {
    const hasStickyColumns = props.stickyColumnsFirst + props.stickyColumnsLast > 0;
    const hadStickyColumns = this.cellOffsets.offsets.size > 0;
    if (hasStickyColumns || hadStickyColumns) {
      this.updateScroll(props);
      this.updateCellOffsets(props);
      this.set(() => ({
        cellState: this.generateCellStyles(props),
        wrapperState: {
          scrollPaddingLeft: this.cellOffsets.stickyWidthLeft,
          scrollPaddingRight: this.cellOffsets.stickyWidthRight
        }
      }));
    }
  }
  updateScroll(props) {
    const wrapperScrollLeft = props.wrapper.scrollLeft;
    const wrapperScrollWidth = props.wrapper.scrollWidth;
    const wrapperClientWidth = props.wrapper.clientWidth;
    const tablePaddingLeft = parseFloat(getComputedStyle(props.table).paddingLeft) || 0;
    const tablePaddingRight = parseFloat(getComputedStyle(props.table).paddingRight) || 0;
    this.isStuckToTheLeft = wrapperScrollLeft > tablePaddingLeft;
    this.isStuckToTheRight = Math.ceil(wrapperScrollLeft) < wrapperScrollWidth - wrapperClientWidth - tablePaddingRight;
    this.padLeft = tablePaddingLeft !== 0 && this.isStuckToTheLeft;
  }
};

// node_modules/@cloudscape-design/components/table/table-role/table-role-helper.js
var stateToAriaSort = {
  sortable: "none",
  ascending: "ascending",
  descending: "descending"
};
var getAriaSort = (sortingState) => stateToAriaSort[sortingState];
function getTableRoleProps(options) {
  const nativeProps = {};
  nativeProps.role = options.tableRole === "grid-default" ? "grid" : options.tableRole;
  nativeProps["aria-label"] = options.ariaLabel;
  nativeProps["aria-labelledby"] = options.ariaLabelledBy;
  nativeProps["aria-rowcount"] = options.totalItemsCount ? options.totalItemsCount + 1 : -1;
  if (options.tableRole === "grid" || options.tableRole === "treegrid") {
    nativeProps["aria-colcount"] = options.totalColumnsCount;
  }
  if (options.tableRole === "grid" || options.tableRole === "treegrid") {
    nativeProps.tabIndex = -1;
  }
  return nativeProps;
}
function getTableWrapperRoleProps(options) {
  const nativeProps = {};
  if (options.isScrollable) {
    nativeProps.role = "region";
    nativeProps.tabIndex = 0;
    nativeProps["aria-label"] = options.ariaLabel;
  }
  return nativeProps;
}
function getTableHeaderRowRoleProps(options) {
  const nativeProps = {};
  if (options.tableRole === "grid" || options.tableRole === "grid-default" || options.tableRole === "treegrid") {
    nativeProps["aria-rowindex"] = 1;
  }
  return nativeProps;
}
function getTableRowRoleProps(options) {
  const nativeProps = {};
  if (options.tableRole === "grid" || options.tableRole === "treegrid") {
    nativeProps["aria-rowindex"] = (options.firstIndex || 1) + options.rowIndex + 1;
  } else if (options.firstIndex !== void 0) {
    nativeProps["aria-rowindex"] = options.firstIndex + options.rowIndex + 1;
  }
  if (options.tableRole === "treegrid" && options.level && options.level !== 0) {
    nativeProps["aria-level"] = options.level;
  }
  if (options.tableRole === "treegrid" && options.setSize) {
    nativeProps["aria-setsize"] = options.setSize;
  }
  if (options.tableRole === "treegrid" && options.posInSet) {
    nativeProps["aria-posinset"] = options.posInSet;
  }
  return nativeProps;
}
function getTableColHeaderRoleProps(options) {
  const nativeProps = {};
  nativeProps.scope = "col";
  if (options.tableRole === "grid" || options.tableRole === "treegrid") {
    nativeProps["aria-colindex"] = options.colIndex + 1;
  }
  if (options.sortingStatus) {
    nativeProps["aria-sort"] = getAriaSort(options.sortingStatus);
  }
  return nativeProps;
}
function getTableCellRoleProps(options) {
  const nativeProps = {};
  if (options.tableRole === "grid" || options.tableRole === "treegrid") {
    nativeProps["aria-colindex"] = options.colIndex + 1;
  }
  if (options.isRowHeader) {
    nativeProps.scope = "row";
  }
  return nativeProps;
}

// node_modules/@cloudscape-design/components/table/table-role/grid-navigation.js
var import_react281 = __toESM(require_react());
var import_react282 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/table-role/utils.js
function getClosestCell(element) {
  return element.closest("td,th");
}
function isElementDisabled(element) {
  if (element instanceof HTMLInputElement || element instanceof HTMLButtonElement) {
    return element.disabled;
  }
  return false;
}
function defaultIsSuppressed(target) {
  let current = target;
  while (current) {
    if (isTableCell(current)) {
      return false;
    }
    if (current.getAttribute("role") === "dialog" || current.getAttribute("data-awsui-table-suppress-navigation") === "true") {
      return true;
    }
    current = current.parentElement;
  }
  return false;
}
function findTableRowByAriaRowIndex(table, targetAriaRowIndex, delta) {
  var _a;
  let targetRow = null;
  const rowElements = Array.from(table.querySelectorAll("tr[aria-rowindex]"));
  if (delta < 0) {
    rowElements.reverse();
  }
  for (const element of rowElements) {
    const rowIndex = parseInt((_a = element.getAttribute("aria-rowindex")) !== null && _a !== void 0 ? _a : "");
    targetRow = element;
    if (rowIndex === targetAriaRowIndex) {
      break;
    }
    if (delta >= 0 && rowIndex > targetAriaRowIndex) {
      break;
    }
    if (delta < 0 && rowIndex < targetAriaRowIndex) {
      break;
    }
  }
  return targetRow;
}
function findTableRowCellByAriaColIndex(tableRow, targetAriaColIndex, delta) {
  var _a;
  let targetCell = null;
  const cellElements = Array.from(tableRow.querySelectorAll("td[aria-colindex],th[aria-colindex]"));
  if (delta < 0) {
    cellElements.reverse();
  }
  for (const element of cellElements) {
    const columnIndex = parseInt((_a = element.getAttribute("aria-colindex")) !== null && _a !== void 0 ? _a : "");
    targetCell = element;
    if (columnIndex === targetAriaColIndex) {
      break;
    }
    if (delta >= 0 && columnIndex > targetAriaColIndex) {
      break;
    }
    if (delta < 0 && columnIndex < targetAriaColIndex) {
      break;
    }
  }
  return targetCell;
}
function isTableCell(element) {
  return element.tagName === "TD" || element.tagName === "TH";
}

// node_modules/@cloudscape-design/components/table/table-role/grid-navigation.js
function GridNavigationProvider({ keyboardNavigation, pageSize, getTable, children }) {
  const gridNavigation = (0, import_react282.useMemo)(() => new GridNavigationProcessor(), []);
  const getTableStable = useStableCallback(getTable);
  (0, import_react282.useEffect)(() => {
    if (keyboardNavigation) {
      const table = getTableStable();
      table && gridNavigation.init(table);
    }
    return () => gridNavigation.cleanup();
  }, [keyboardNavigation, gridNavigation, getTableStable]);
  (0, import_react282.useEffect)(() => {
    gridNavigation.update({ pageSize });
  }, [gridNavigation, pageSize]);
  (0, import_react282.useEffect)(() => {
    if (keyboardNavigation) {
      gridNavigation.refresh();
    }
  });
  return import_react281.default.createElement(SingleTabStopNavigationContext.Provider, { value: {
    navigationActive: keyboardNavigation,
    registerFocusable: gridNavigation.registerFocusable
  } }, children);
}
var GridNavigationProcessor = class {
  constructor() {
    this._pageSize = 0;
    this._table = null;
    this.focusedCell = null;
    this.keepUserIndex = false;
    this.focusables = /* @__PURE__ */ new Set();
    this.focusHandlers = /* @__PURE__ */ new Map();
    this.focusablesState = /* @__PURE__ */ new WeakMap();
    this.focusTarget = null;
    this.registerFocusable = (focusableElement, changeHandler) => {
      var _a, _b;
      this.focusables.add(focusableElement);
      this.focusHandlers.set(focusableElement, changeHandler);
      const isFocusable = (_a = this.focusablesState.get(focusableElement)) !== null && _a !== void 0 ? _a : false;
      const newIsFocusable = this.focusTarget === focusableElement || this.isSuppressed(focusableElement);
      if (newIsFocusable !== isFocusable) {
        this.focusablesState.set(focusableElement, newIsFocusable);
        changeHandler(newIsFocusable);
      }
      const focusedElement = (_b = this.focusedCell) === null || _b === void 0 ? void 0 : _b.element;
      if (focusedElement && isTableCell(focusedElement) && focusedElement.contains(focusableElement)) {
        focusableElement.focus({ preventScroll: true });
      }
      return () => this.unregisterFocusable(focusableElement);
    };
    this.unregisterFocusable = (focusable) => {
      this.focusables.delete(focusable);
      this.focusHandlers.delete(focusable);
    };
    this.onFocusin = (event) => {
      if (!(event.target instanceof HTMLElement)) {
        return;
      }
      this.updateFocusedCell(event.target);
      if (!this.focusedCell) {
        return;
      }
      this.updateFocusTarget();
      const focusedElement = this.focusedCell.element;
      const nextTarget = isTableCell(focusedElement) ? this.getFocusablesFrom(focusedElement)[0] : null;
      if (nextTarget) {
        nextTarget.focus({ preventScroll: true });
      } else {
        this.keepUserIndex = false;
      }
    };
    this.onFocusout = () => {
      setTimeout(() => {
        if (this.focusedCell && !nodeBelongs(this.table, this.focusedCell.element)) {
          this.moveFocusBy(this.focusedCell, { x: 0, y: 0 });
        }
      }, 0);
    };
    this.onKeydown = (event) => {
      if (!this.focusedCell) {
        return;
      }
      const ctrlKey = event.ctrlKey ? 1 : 0;
      const altKey = event.altKey ? 1 : 0;
      const shiftKey = event.shiftKey ? 1 : 0;
      const metaKey = event.metaKey ? 1 : 0;
      const numModifiersPressed = ctrlKey + altKey + shiftKey + metaKey;
      let key2 = event.keyCode;
      if (numModifiersPressed === 1 && event.ctrlKey) {
        key2 = -key2;
      } else if (numModifiersPressed) {
        return;
      }
      const from = this.focusedCell;
      if (this.isSuppressed(document.activeElement) || !this.isRegistered(document.activeElement)) {
        return;
      }
      switch (key2) {
        case KeyCode.up:
          event.preventDefault();
          return this.moveFocusBy(from, { y: -1, x: 0 });
        case KeyCode.down:
          event.preventDefault();
          return this.moveFocusBy(from, { y: 1, x: 0 });
        case KeyCode.left:
          event.preventDefault();
          return this.moveFocusBy(from, { y: 0, x: -1 });
        case KeyCode.right:
          event.preventDefault();
          return this.moveFocusBy(from, { y: 0, x: 1 });
        case KeyCode.pageUp:
          event.preventDefault();
          return this.moveFocusBy(from, { y: -this.pageSize, x: 0 });
        case KeyCode.pageDown:
          event.preventDefault();
          return this.moveFocusBy(from, { y: this.pageSize, x: 0 });
        case KeyCode.home:
          event.preventDefault();
          return this.moveFocusBy(from, { y: 0, x: -Infinity });
        case KeyCode.end:
          event.preventDefault();
          return this.moveFocusBy(from, { y: 0, x: Infinity });
        case -KeyCode.home:
          event.preventDefault();
          return this.moveFocusBy(from, { y: -Infinity, x: -Infinity });
        case -KeyCode.end:
          event.preventDefault();
          return this.moveFocusBy(from, { y: Infinity, x: Infinity });
        default:
          return;
      }
    };
  }
  init(table) {
    this._table = table;
    this.table.addEventListener("focusin", this.onFocusin);
    this.table.addEventListener("focusout", this.onFocusout);
    this.table.addEventListener("keydown", this.onKeydown);
    this.updateFocusTarget();
    this.cleanup = () => {
      this.table.removeEventListener("focusin", this.onFocusin);
      this.table.removeEventListener("focusout", this.onFocusout);
      this.table.removeEventListener("keydown", this.onKeydown);
      this.focusables.forEach(this.unregisterFocusable);
    };
  }
  cleanup() {
  }
  update({ pageSize }) {
    this._pageSize = pageSize;
  }
  refresh() {
    setTimeout(() => {
      var _a;
      if (this._table) {
        this.updateFocusedCell((_a = this.focusedCell) === null || _a === void 0 ? void 0 : _a.element);
        this.updateFocusTarget();
      }
    }, 0);
  }
  get pageSize() {
    return this._pageSize;
  }
  get table() {
    if (!this._table) {
      throw new Error("Invariant violation: GridNavigationProcessor is used before initialization.");
    }
    return this._table;
  }
  moveFocusBy(cell, delta) {
    var _a;
    if (delta.y !== 0 && delta.x === 0) {
      this.keepUserIndex = true;
    }
    (_a = this.getNextFocusable(cell, delta)) === null || _a === void 0 ? void 0 : _a.focus();
  }
  updateFocusTarget() {
    var _a;
    this.focusTarget = this.getSingleFocusable();
    for (const focusableElement of this.focusables) {
      const isFocusable = (_a = this.focusablesState.get(focusableElement)) !== null && _a !== void 0 ? _a : false;
      const newIsFocusable = this.focusTarget === focusableElement || this.isSuppressed(focusableElement);
      if (newIsFocusable !== isFocusable) {
        this.focusablesState.set(focusableElement, newIsFocusable);
        this.focusHandlers.get(focusableElement)(newIsFocusable);
      }
    }
  }
  isSuppressed(element) {
    if (!this.focusedCell) {
      return false;
    }
    return !element || defaultIsSuppressed(element);
  }
  isRegistered(element) {
    return !element || this.focusables.has(element);
  }
  updateFocusedCell(focusedElement) {
    var _a, _b, _c, _d, _e, _f;
    if (!focusedElement) {
      return;
    }
    const cellElement = getClosestCell(focusedElement);
    const rowElement = cellElement === null || cellElement === void 0 ? void 0 : cellElement.closest("tr");
    if (!cellElement || !rowElement) {
      return;
    }
    const colIndex = parseInt((_a = cellElement.getAttribute("aria-colindex")) !== null && _a !== void 0 ? _a : "");
    const rowIndex = parseInt((_b = rowElement.getAttribute("aria-rowindex")) !== null && _b !== void 0 ? _b : "");
    if (isNaN(colIndex) || isNaN(rowIndex)) {
      return;
    }
    const cellFocusables = this.getFocusablesFrom(cellElement);
    const elementIndex = cellFocusables.indexOf(focusedElement);
    const prevColIndex = (_d = (_c = this.focusedCell) === null || _c === void 0 ? void 0 : _c.colIndex) !== null && _d !== void 0 ? _d : -1;
    const prevElementIndex = (_f = (_e = this.focusedCell) === null || _e === void 0 ? void 0 : _e.elementIndex) !== null && _f !== void 0 ? _f : -1;
    this.focusedCell = {
      rowIndex,
      colIndex: this.keepUserIndex && prevColIndex !== -1 ? prevColIndex : colIndex,
      elementIndex: this.keepUserIndex && prevElementIndex !== -1 ? prevElementIndex : elementIndex,
      element: focusedElement
    };
  }
  getNextFocusable(from, delta) {
    var _a;
    const targetAriaRowIndex = from.rowIndex + delta.y;
    const targetRow = findTableRowByAriaRowIndex(this.table, targetAriaRowIndex, delta.y);
    if (!targetRow) {
      return null;
    }
    const cellElement = getClosestCell(from.element);
    const cellFocusables = cellElement ? this.getFocusablesFrom(cellElement) : [];
    const nextElementIndex = from.elementIndex + delta.x;
    const isValidDirection = !!delta.x;
    const isValidIndex2 = from.elementIndex !== -1 && 0 <= nextElementIndex && nextElementIndex < cellFocusables.length;
    const isTargetDifferent = from.element !== cellFocusables[nextElementIndex];
    if (isValidDirection && isValidIndex2 && isTargetDifferent) {
      return cellFocusables[nextElementIndex];
    }
    const targetAriaColIndex = from.colIndex + delta.x;
    const targetCell = findTableRowCellByAriaColIndex(targetRow, targetAriaColIndex, delta.x);
    if (!targetCell) {
      return null;
    }
    if (targetCell === cellElement && delta.x !== 0) {
      return null;
    }
    const targetCellFocusables = this.getFocusablesFrom(targetCell);
    let focusIndex = from.elementIndex;
    if (isFinite(delta.x) && delta.x > 0 || delta.x === -Infinity) {
      focusIndex = 0;
    }
    if (isFinite(delta.x) && delta.x < 0 || delta.x === Infinity) {
      focusIndex = targetCellFocusables.length - 1;
    }
    return (_a = targetCellFocusables[focusIndex]) !== null && _a !== void 0 ? _a : targetCell;
  }
  getSingleFocusable() {
    var _a;
    const cell = this.focusedCell;
    const firstTableCell = this.table.querySelector("td,th");
    let focusTarget = (_a = firstTableCell && this.getFocusablesFrom(firstTableCell)[0]) !== null && _a !== void 0 ? _a : firstTableCell;
    if (cell) {
      focusTarget = this.getNextFocusable(cell, { x: 0, y: 0 });
    }
    return focusTarget;
  }
  getFocusablesFrom(target) {
    return getAllFocusables(target).filter((el) => this.focusables.has(el) && !isElementDisabled(el));
  }
};

// node_modules/@cloudscape-design/components/table/header-cell/th-element.js
function TableThElement({ className: className2, style, sortingStatus, sortingDisabled, focusedComponent, hidden, colIndex, columnId, stickyState, cellRef, tableRole, children }) {
  const stickyStyles = useStickyCellStyles({
    stickyColumns: stickyState,
    columnId,
    getClassName: (props) => getStickyClassNames(styles_css_default92, props)
  });
  const cellRefObject = (0, import_react283.useRef)(null);
  const mergedRef = useMergeRefs(stickyStyles.ref, cellRef, cellRefObject);
  const { tabIndex: cellTabIndex } = useSingleTabStopNavigation(cellRefObject);
  return import_react283.default.createElement("th", Object.assign({ "data-focus-id": `header-${String(columnId)}`, className: clsx_m_default(className2, {
    [styles_css_default92["header-cell-fake-focus"]]: focusedComponent === `header-${String(columnId)}`,
    [styles_css_default92["header-cell-sortable"]]: sortingStatus,
    [styles_css_default92["header-cell-sorted"]]: sortingStatus === "ascending" || sortingStatus === "descending",
    [styles_css_default92["header-cell-disabled"]]: sortingDisabled,
    [styles_css_default92["header-cell-ascending"]]: sortingStatus === "ascending",
    [styles_css_default92["header-cell-descending"]]: sortingStatus === "descending",
    [styles_css_default92["header-cell-hidden"]]: hidden
  }, stickyStyles.className), style: Object.assign(Object.assign({}, style), stickyStyles.style), ref: mergedRef }, getTableColHeaderRoleProps({ tableRole, sortingStatus, colIndex }), { tabIndex: cellTabIndex }), children);
}

// node_modules/@cloudscape-design/components/table/header-cell/index.js
function TableHeaderCell({ className: className2, style, tabIndex, column, activeSortingColumn, sortingDescending, sortingDisabled, wrapLines, focusedComponent, hidden, onClick, colIndex, updateColumn, resizableColumns, onResizeFinish, isEditable, columnId, stickyState, cellRef, tableRole, resizerRoleDescription, isExpandable }) {
  var _a;
  const i18n = useInternalI18n("table");
  const sortable = !!column.sortingComparator || !!column.sortingField;
  const sorted = !!activeSortingColumn && isSorted(column, activeSortingColumn);
  const sortingStatus = getSortingStatus(sortable, sorted, !!sortingDescending, !!sortingDisabled);
  const handleClick = () => onClick({
    sortingColumn: column,
    isDescending: sorted ? !sortingDescending : false
  });
  const handleKeyPress = ({ nativeEvent: e }) => {
    if (e.keyCode === KeyCode.enter || e.keyCode === KeyCode.space) {
      e.preventDefault();
      handleClick();
    }
  };
  const headerId = useUniqueId("table-header-");
  const clickableHeaderRef = (0, import_react284.useRef)(null);
  const { tabIndex: clickableHeaderTabIndex } = useSingleTabStopNavigation(clickableHeaderRef, { tabIndex });
  return import_react284.default.createElement(
    TableThElement,
    { className: className2, style, cellRef, sortingStatus, sortingDisabled, focusedComponent, hidden, colIndex, columnId, stickyState, tableRole },
    import_react284.default.createElement(
      "div",
      Object.assign({ ref: clickableHeaderRef, "data-focus-id": `sorting-control-${String(columnId)}`, className: clsx_m_default(styles_css_default92["header-cell-content"], {
        [styles_css_default92["header-cell-fake-focus"]]: focusedComponent === `sorting-control-${String(columnId)}`,
        [styles_css_default92["header-cell-content-expandable"]]: isExpandable
      }), "aria-label": column.ariaLabel ? column.ariaLabel({
        sorted,
        descending: sorted && !!sortingDescending,
        disabled: !!sortingDisabled
      }) : void 0 }, sortingStatus && !sortingDisabled ? {
        onKeyPress: handleKeyPress,
        tabIndex: clickableHeaderTabIndex,
        role: "button",
        onClick: handleClick
      } : {}),
      import_react284.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default92["header-cell-text"], wrapLines && styles_css_default92["header-cell-text-wrap"]), id: headerId },
        column.header,
        isEditable && !isExpandable ? import_react284.default.createElement(
          "span",
          { className: styles_css_default92["edit-icon"], role: "img", "aria-label": i18n("columnDefinitions.editConfig.editIconAriaLabel", (_a = column.editConfig) === null || _a === void 0 ? void 0 : _a.editIconAriaLabel) },
          import_react284.default.createElement(internal_default, { name: "edit" })
        ) : null
      ),
      sortingStatus && import_react284.default.createElement(
        "span",
        { className: styles_css_default92["sorting-icon"] },
        import_react284.default.createElement(internal_default, { name: getSortingIconName(sortingStatus) })
      )
    ),
    resizableColumns ? import_react284.default.createElement(Resizer, { tabIndex, focusId: `resize-control-${String(columnId)}`, showFocusRing: focusedComponent === `resize-control-${String(columnId)}`, onWidthUpdate: (newWidth) => updateColumn(columnId, newWidth), onWidthUpdateCommit: onResizeFinish, ariaLabelledby: headerId, minWidth: typeof column.minWidth === "string" ? parseInt(column.minWidth) : column.minWidth, roleDescription: i18n("ariaLabels.resizerRoleDescription", resizerRoleDescription) }) : import_react284.default.createElement(Divider2, { className: styles_css_default92["resize-divider"] })
  );
}

// node_modules/@cloudscape-design/components/table/thead.js
var Thead = import_react285.default.forwardRef(({ selectionType, getSelectAllProps, columnDefinitions, sortingColumn, sortingDisabled, sortingDescending, resizableColumns, variant, wrapLines, onFocusMove, onSortingChange, onResizeFinish, singleSelectionHeaderAriaLabel, stripedRows, sticky = false, hidden = false, stuck = false, stickyState, selectionColumnId: selectionColumnId2, focusedComponent, onFocusedComponentChange, tableRole, resizerRoleDescription, isExpandable }, outerRef) => {
  const isVisualRefresh = useVisualRefresh();
  const headerCellClass = clsx_m_default(styles_css_default92["header-cell"], styles_css_default92[`header-cell-variant-${variant}`], sticky && styles_css_default92["header-cell-sticky"], stuck && styles_css_default92["header-cell-stuck"], stripedRows && styles_css_default92["has-striped-rows"], isVisualRefresh && styles_css_default92["is-visual-refresh"]);
  const selectionCellClass = clsx_m_default(styles_css_default53["selection-control"], styles_css_default53["selection-control-header"], isVisualRefresh && styles_css_default53["is-visual-refresh"]);
  const { getColumnStyles, columnWidths, updateColumn, setCell } = useColumnWidths();
  return import_react285.default.createElement(
    "thead",
    { className: clsx_m_default(!hidden && styles_css_default53["thead-active"]) },
    import_react285.default.createElement(
      "tr",
      Object.assign({}, focusMarkers.all, { ref: outerRef, "aria-rowindex": 1 }, getTableHeaderRowRoleProps({ tableRole }), { onFocus: (event) => {
        var _a;
        const focusControlElement = findUpUntil(event.target, (element) => !!element.getAttribute("data-focus-id"));
        const focusId = (_a = focusControlElement === null || focusControlElement === void 0 ? void 0 : focusControlElement.getAttribute("data-focus-id")) !== null && _a !== void 0 ? _a : null;
        onFocusedComponentChange === null || onFocusedComponentChange === void 0 ? void 0 : onFocusedComponentChange(focusId);
      }, onBlur: () => onFocusedComponentChange === null || onFocusedComponentChange === void 0 ? void 0 : onFocusedComponentChange(null) }),
      selectionType ? import_react285.default.createElement(
        TableThElement,
        { className: clsx_m_default(headerCellClass, selectionCellClass, hidden && styles_css_default92["header-cell-hidden"]), hidden, tableRole, colIndex: 0, focusedComponent, columnId: selectionColumnId2, stickyState },
        selectionType === "multi" ? import_react285.default.createElement(SelectionControl, Object.assign({ onFocusDown: (event) => {
          onFocusMove(event.target, -1, 1);
        }, focusedComponent }, getSelectAllProps(), sticky ? { tabIndex: -1 } : {})) : import_react285.default.createElement(ScreenreaderOnly, null, singleSelectionHeaderAriaLabel),
        import_react285.default.createElement(Divider2, { className: styles_css_default53["resize-divider"] })
      ) : null,
      columnDefinitions.map((column, colIndex) => {
        const columnId = getColumnKey(column, colIndex);
        return import_react285.default.createElement(TableHeaderCell, {
          key: columnId,
          style: getColumnStyles(sticky, columnId),
          className: headerCellClass,
          tabIndex: sticky ? -1 : 0,
          focusedComponent,
          column,
          activeSortingColumn: sortingColumn,
          sortingDescending,
          sortingDisabled,
          wrapLines,
          hidden,
          colIndex: selectionType ? colIndex + 1 : colIndex,
          columnId,
          updateColumn,
          onResizeFinish: () => onResizeFinish(columnWidths),
          resizableColumns,
          onClick: (detail) => fireNonCancelableEvent(onSortingChange, detail),
          isEditable: !!column.editConfig,
          stickyState,
          cellRef: (node) => setCell(sticky, columnId, node),
          tableRole,
          resizerRoleDescription,
          // Expandable option is only applicable to the first data column of the table.
          // When present, the header content receives extra padding to match the first offset in the data cells.
          isExpandable: colIndex === 0 && isExpandable
        });
      })
    )
  );
});
var thead_default = Thead;

// node_modules/@cloudscape-design/components/table/body-cell/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/table/body-cell/styles.scoped.css";
var styles_css_default94 = {
  "expandable-toggle-wrapper": "awsui_expandable-toggle-wrapper_c6tup_1ls9v_99",
  "body-cell": "awsui_body-cell_c6tup_1ls9v_107",
  "body-cell-content": "awsui_body-cell-content_c6tup_1ls9v_121",
  "body-cell-wrap": "awsui_body-cell-wrap_c6tup_1ls9v_124",
  "is-visual-refresh": "awsui_is-visual-refresh_c6tup_1ls9v_136",
  "has-striped-rows": "awsui_has-striped-rows_c6tup_1ls9v_148",
  "body-cell-expandable-level-1": "awsui_body-cell-expandable-level-1_c6tup_1ls9v_151",
  "body-cell-expandable-level-2": "awsui_body-cell-expandable-level-2_c6tup_1ls9v_154",
  "body-cell-expandable-level-3": "awsui_body-cell-expandable-level-3_c6tup_1ls9v_157",
  "body-cell-expandable-level-4": "awsui_body-cell-expandable-level-4_c6tup_1ls9v_160",
  "body-cell-expandable-level-5": "awsui_body-cell-expandable-level-5_c6tup_1ls9v_163",
  "body-cell-expandable-level-6": "awsui_body-cell-expandable-level-6_c6tup_1ls9v_166",
  "body-cell-expandable-level-7": "awsui_body-cell-expandable-level-7_c6tup_1ls9v_169",
  "body-cell-expandable-level-8": "awsui_body-cell-expandable-level-8_c6tup_1ls9v_172",
  "body-cell-expandable-level-9": "awsui_body-cell-expandable-level-9_c6tup_1ls9v_175",
  "body-cell-expandable-level-next": "awsui_body-cell-expandable-level-next_c6tup_1ls9v_178",
  "body-cell-edit-active": "awsui_body-cell-edit-active_c6tup_1ls9v_181",
  "body-cell-interactive": "awsui_body-cell-interactive_c6tup_1ls9v_181",
  "body-cell-editable": "awsui_body-cell-editable_c6tup_1ls9v_181",
  "has-striped-rows-sticky-cell-pad-left": "awsui_has-striped-rows-sticky-cell-pad-left_c6tup_1ls9v_247",
  "has-selection": "awsui_has-selection_c6tup_1ls9v_280",
  "body-cell-first-row": "awsui_body-cell-first-row_c6tup_1ls9v_316",
  "body-cell-last-row": "awsui_body-cell-last-row_c6tup_1ls9v_319",
  "body-cell-selected": "awsui_body-cell-selected_c6tup_1ls9v_319",
  "has-footer": "awsui_has-footer_c6tup_1ls9v_319",
  "body-cell-shaded": "awsui_body-cell-shaded_c6tup_1ls9v_329",
  "sticky-cell": "awsui_sticky-cell_c6tup_1ls9v_355",
  "sticky-cell-pad-left": "awsui_sticky-cell-pad-left_c6tup_1ls9v_363",
  "sticky-cell-last-right": "awsui_sticky-cell-last-right_c6tup_1ls9v_410",
  "sticky-cell-last-left": "awsui_sticky-cell-last-left_c6tup_1ls9v_414",
  "body-cell-next-selected": "awsui_body-cell-next-selected_c6tup_1ls9v_437",
  "body-cell-prev-selected": "awsui_body-cell-prev-selected_c6tup_1ls9v_441",
  "body-cell-editor-wrapper": "awsui_body-cell-editor-wrapper_c6tup_1ls9v_465",
  "body-cell-success": "awsui_body-cell-success_c6tup_1ls9v_472",
  "body-cell-editor": "awsui_body-cell-editor_c6tup_1ls9v_465",
  "body-cell-editor-disabled": "awsui_body-cell-editor-disabled_c6tup_1ls9v_499",
  "body-cell-editor-form": "awsui_body-cell-editor-form_c6tup_1ls9v_508",
  "body-cell-editor-row": "awsui_body-cell-editor-row_c6tup_1ls9v_518",
  "body-cell-editor-controls": "awsui_body-cell-editor-controls_c6tup_1ls9v_528",
  "body-cell-expandable": "awsui_body-cell-expandable_c6tup_1ls9v_151",
  "expandable-cell-content": "awsui_expandable-cell-content_c6tup_1ls9v_552",
  "body-cell-edit-disabled-popover": "awsui_body-cell-edit-disabled-popover_c6tup_1ls9v_600",
  "body-cell-has-success": "awsui_body-cell-has-success_c6tup_1ls9v_604"
};

// node_modules/@cloudscape-design/components/table/body-cell/index.js
var import_react291 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/body-cell/td-element.js
var import_react287 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/expandable-rows/expand-toggle-button.js
var import_react286 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/expandable-rows/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/table/expandable-rows/styles.scoped.css";
var styles_css_default95 = {
  "expand-toggle-icon": "awsui_expand-toggle-icon_1ss49_1izvf_99",
  "expand-toggle-icon-expanded": "awsui_expand-toggle-icon-expanded_1ss49_1izvf_120",
  "expand-toggle": "awsui_expand-toggle_1ss49_1izvf_99"
};

// node_modules/@cloudscape-design/components/table/expandable-rows/expand-toggle-button.js
function ExpandToggleButton({ isExpanded, onExpandableItemToggle, expandButtonLabel, collapseButtonLabel }) {
  const buttonRef = (0, import_react286.useRef)(null);
  const { tabIndex } = useSingleTabStopNavigation(buttonRef);
  return import_react286.default.createElement(
    "button",
    { ref: buttonRef, tabIndex, "aria-label": isExpanded ? collapseButtonLabel : expandButtonLabel, "aria-expanded": isExpanded, className: styles_css_default95["expand-toggle"], onClick: onExpandableItemToggle },
    import_react286.default.createElement(internal_default, { size: "small", name: "caret-down-filled", className: clsx_m_default(styles_css_default95["expand-toggle-icon"], isExpanded && styles_css_default95["expand-toggle-icon-expanded"]) })
  );
}

// node_modules/@cloudscape-design/components/table/body-cell/td-element.js
var TableTdElement = import_react287.default.forwardRef(({ className: className2, style, children, wrapLines, isRowHeader, isFirstRow, isLastRow, isSelected, isNextSelected, isPrevSelected, nativeAttributes, onClick, onMouseEnter, onMouseLeave, isEvenRow, stripedRows, isVisualRefresh, hasSelection, hasFooter, columnId, colIndex, stickyState, tableRole, level, isExpandable, isExpanded, onExpandableItemToggle, expandButtonLabel, collapseButtonLabel }, ref) => {
  const Element2 = isRowHeader ? "th" : "td";
  nativeAttributes = Object.assign(Object.assign({}, nativeAttributes), getTableCellRoleProps({ tableRole, isRowHeader, colIndex }));
  const stickyStyles = useStickyCellStyles({
    stickyColumns: stickyState,
    columnId,
    getClassName: (props) => getStickyClassNames(styles_css_default94, props)
  });
  const cellRefObject = (0, import_react287.useRef)(null);
  const mergedRef = useMergeRefs(stickyStyles.ref, ref, cellRefObject);
  const { tabIndex: cellTabIndex } = useSingleTabStopNavigation(cellRefObject);
  return import_react287.default.createElement(
    Element2,
    Object.assign({ style: Object.assign(Object.assign({}, style), stickyStyles.style), className: clsx_m_default(className2, styles_css_default94["body-cell"], wrapLines && styles_css_default94["body-cell-wrap"], isFirstRow && styles_css_default94["body-cell-first-row"], isLastRow && styles_css_default94["body-cell-last-row"], isSelected && styles_css_default94["body-cell-selected"], isNextSelected && styles_css_default94["body-cell-next-selected"], isPrevSelected && styles_css_default94["body-cell-prev-selected"], !isEvenRow && stripedRows && styles_css_default94["body-cell-shaded"], stripedRows && styles_css_default94["has-striped-rows"], isVisualRefresh && styles_css_default94["is-visual-refresh"], hasSelection && styles_css_default94["has-selection"], hasFooter && styles_css_default94["has-footer"], level !== void 0 && styles_css_default94["body-cell-expandable"], level !== void 0 && styles_css_default94[`body-cell-expandable-level-${getLevelClassSuffix(level)}`], stickyStyles.className), onClick, onMouseEnter, onMouseLeave, ref: mergedRef }, nativeAttributes, { tabIndex: cellTabIndex }),
    level !== void 0 && isExpandable && import_react287.default.createElement(
      "div",
      { className: styles_css_default94["expandable-toggle-wrapper"] },
      import_react287.default.createElement(ExpandToggleButton, { isExpanded, onExpandableItemToggle, expandButtonLabel, collapseButtonLabel })
    ),
    import_react287.default.createElement("span", { className: styles_css_default94["body-cell-content"] }, children)
  );
});
function getLevelClassSuffix(level) {
  return 1 <= level && level <= 9 ? level : "next";
}

// node_modules/@cloudscape-design/components/table/body-cell/inline-editor.js
var import_react289 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/body-cell/click-away.js
var import_react288 = __toESM(require_react());
function useClickAway(onClick) {
  const awayRef = (0, import_react288.useRef)(null);
  const onClickStable = useStableCallback(onClick);
  (0, import_react288.useEffect)(() => {
    function handleClick(event) {
      if (!nodeBelongs(awayRef.current, event.target)) {
        onClickStable();
      }
    }
    document.addEventListener("click", handleClick, { capture: true });
    return () => document.removeEventListener("click", handleClick, { capture: true });
  }, [onClickStable]);
  return awayRef;
}

// node_modules/@cloudscape-design/components/table/body-cell/inline-editor.js
var noop2 = () => void 0;
function InlineEditor({ ariaLabels, item, column, onEditEnd, submitEdit, __onRender }) {
  var _a, _b, _c, _d;
  const [currentEditLoading, setCurrentEditLoading] = (0, import_react289.useState)(false);
  const [currentEditValue, setCurrentEditValue] = (0, import_react289.useState)();
  const i18n = useInternalI18n("table");
  const focusLockRef = (0, import_react289.useRef)(null);
  const cellContext = {
    currentValue: currentEditValue,
    setValue: setCurrentEditValue
  };
  function finishEdit({ cancelled = false, refocusCell = true } = {}) {
    if (!cancelled) {
      setCurrentEditValue(void 0);
    }
    onEditEnd({ cancelled, refocusCell });
  }
  function onSubmitClick(evt) {
    var _a2;
    return __awaiter(this, void 0, void 0, function* () {
      evt.preventDefault();
      if (currentEditValue === void 0) {
        finishEdit();
        return;
      }
      setCurrentEditLoading(true);
      try {
        yield submitEdit(item, column, currentEditValue);
        setCurrentEditLoading(false);
        finishEdit();
      } catch (e) {
        setCurrentEditLoading(false);
        (_a2 = focusLockRef.current) === null || _a2 === void 0 ? void 0 : _a2.focusFirst();
      }
    });
  }
  function onCancel({ reFocusEditedCell = true } = {}) {
    if (currentEditLoading) {
      return;
    }
    finishEdit({ cancelled: true, refocusCell: reFocusEditedCell });
  }
  function handleEscape(event) {
    if (event.key === "Escape") {
      onCancel();
    }
  }
  const clickAwayRef = useClickAway(() => onCancel({ reFocusEditedCell: false }));
  (0, import_react289.useEffect)(() => {
    if (__onRender) {
      const timer = setTimeout(__onRender, 1);
      return () => clearTimeout(timer);
    }
  }, [__onRender]);
  const { ariaLabel = void 0, validation = noop2, errorIconAriaLabel, constraintText, editingCell } = column.editConfig;
  return import_react289.default.createElement(
    focus_lock_default,
    { restoreFocus: true, ref: focusLockRef },
    import_react289.default.createElement(
      "div",
      { role: "dialog", ref: clickAwayRef, "aria-label": (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.activateEditLabel) === null || _a === void 0 ? void 0 : _a.call(ariaLabels, column, item), onKeyDown: handleEscape },
      import_react289.default.createElement(
        "form",
        { onSubmit: onSubmitClick, className: styles_css_default94["body-cell-editor-form"] },
        import_react289.default.createElement(
          InternalFormField,
          { stretch: true, label: ariaLabel, constraintText, __hideLabel: true, __disableGutters: true, i18nStrings: { errorIconAriaLabel }, errorText: validation(item, currentEditValue) },
          import_react289.default.createElement(
            "div",
            { className: styles_css_default94["body-cell-editor-row"] },
            editingCell(item, cellContext),
            import_react289.default.createElement(
              "span",
              { className: styles_css_default94["body-cell-editor-controls"] },
              import_react289.default.createElement(
                InternalSpaceBetween,
                { direction: "horizontal", size: "xxs" },
                !currentEditLoading ? import_react289.default.createElement(internal_default2, { ariaLabel: (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.cancelEditLabel) === null || _b === void 0 ? void 0 : _b.call(ariaLabels, column), formAction: "none", iconName: "close", variant: "inline-icon", onClick: () => onCancel() }) : null,
                import_react289.default.createElement(internal_default2, { ariaLabel: (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.submitEditLabel) === null || _c === void 0 ? void 0 : _c.call(ariaLabels, column), formAction: "submit", iconName: "check", variant: "inline-icon", loading: currentEditLoading })
              ),
              import_react289.default.createElement(live_region_default, null, currentEditLoading ? i18n("ariaLabels.submittingEditText", (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.submittingEditText) === null || _d === void 0 ? void 0 : _d.call(ariaLabels, column)) : "")
            )
          )
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/table/body-cell/disabled-inline-editor.js
var import_react290 = __toESM(require_react());
function DisabledInlineEditor(_a) {
  var _b;
  var { className: className2, item, column, ariaLabels, isEditing, onEditStart, onEditEnd, editDisabledReason, isVisualRefresh, interactiveCell = true } = _a, rest = __rest(_a, ["className", "item", "column", "ariaLabels", "isEditing", "onEditStart", "onEditEnd", "editDisabledReason", "isVisualRefresh", "interactiveCell"]);
  const clickAwayRef = useClickAway(() => {
    if (isEditing) {
      onEditEnd(true);
    }
  });
  const [hasHover, setHasHover] = (0, import_react290.useState)(false);
  const [hasFocus, setHasFocus] = (0, import_react290.useState)(false);
  const showIcon = hasHover || hasFocus || isEditing || !interactiveCell;
  const iconRef = (0, import_react290.useRef)(null);
  const buttonRef = (0, import_react290.useRef)(null);
  const portalRef = (0, import_react290.useRef)(null);
  function handleEscape(event) {
    if (event.key === "Escape") {
      onEditEnd(true);
    }
  }
  const onClick = () => {
    var _a2;
    onEditStart();
    (_a2 = buttonRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
  };
  const { targetProps, descriptionEl } = useHiddenDescription(editDisabledReason);
  const portalClasses = usePortalModeClasses(portalRef);
  const { tabIndex } = useSingleTabStopNavigation(buttonRef);
  return import_react290.default.createElement(
    TableTdElement,
    Object.assign({}, rest, { nativeAttributes: { "data-inline-editing-active": isEditing.toString() }, className: clsx_m_default(className2, styles_css_default94["body-cell-editable"], interactiveCell && styles_css_default94["body-cell-interactive"], isEditing && styles_css_default94["body-cell-edit-disabled-popover"], isVisualRefresh && styles_css_default94["is-visual-refresh"]), onClick: interactiveCell && !isEditing ? onClick : void 0, onMouseEnter: () => setHasHover(true), onMouseLeave: () => setHasHover(false), ref: clickAwayRef }),
    column.cell(item),
    import_react290.default.createElement(
      "div",
      { className: styles_css_default94["body-cell-editor-wrapper"] },
      import_react290.default.createElement(
        "button",
        Object.assign({ ref: buttonRef, tabIndex, className: clsx_m_default(styles_css_default94["body-cell-editor"], styles_css_default94["body-cell-editor-disabled"]), "aria-label": (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.activateEditLabel) === null || _b === void 0 ? void 0 : _b.call(ariaLabels, column, item), "aria-haspopup": "dialog", "aria-disabled": "true", onClick: !interactiveCell && !isEditing ? onClick : void 0, onFocus: () => setHasFocus(true), onBlur: () => setHasFocus(false), onKeyDown: handleEscape }, targetProps),
        showIcon && import_react290.default.createElement(internal_default, { name: "lock-private", variant: "normal", __internalRootRef: iconRef }),
        descriptionEl
      )
    ),
    isEditing && import_react290.default.createElement(
      "span",
      { ref: portalRef },
      import_react290.default.createElement(
        Portal,
        null,
        import_react290.default.createElement(
          "span",
          { className: portalClasses },
          import_react290.default.createElement(
            PopoverContainer,
            { size: "medium", fixedWidth: false, position: "top", trackRef: iconRef, arrow: (position) => import_react290.default.createElement(arrow_default, { position }), renderWithPortal: true, zIndex: 2e3 },
            import_react290.default.createElement(
              PopoverBody,
              { dismissButton: false, dismissAriaLabel: void 0, header: null, onDismiss: () => {
              }, overflowVisible: "both" },
              import_react290.default.createElement("span", { "aria-live": "polite" }, editDisabledReason)
            )
          )
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/table/body-cell/index.js
var submitHandlerFallback = () => {
  throw new Error("The function `handleSubmit` is required for editable columns");
};
function TableCellEditable(_a) {
  var _b, _c, _d;
  var { className: className2, item, column, isEditing, onEditStart, onEditEnd, submitEdit, ariaLabels, isVisualRefresh, successfulEdit = false, interactiveCell = true } = _a, rest = __rest(_a, ["className", "item", "column", "isEditing", "onEditStart", "onEditEnd", "submitEdit", "ariaLabels", "isVisualRefresh", "successfulEdit", "interactiveCell"]);
  const i18n = useInternalI18n("table");
  const editActivateRef = (0, import_react291.useRef)(null);
  const tdNativeAttributes = {
    "data-inline-editing-active": isEditing.toString()
  };
  const isFocusMoveNeededRef = (0, import_react291.useRef)(false);
  (0, import_react291.useEffect)(() => {
    if (!isEditing && editActivateRef.current && isFocusMoveNeededRef.current) {
      isFocusMoveNeededRef.current = false;
      editActivateRef.current.focus();
    }
  }, [isEditing]);
  const [hasHover, setHasHover] = (0, import_react291.useState)(false);
  const [hasFocus, setHasFocus] = (0, import_react291.useState)(false);
  const showIcon = hasHover || hasFocus || !interactiveCell;
  const prevSuccessfulEdit = usePrevious(successfulEdit);
  const prevHasFocus = usePrevious(hasFocus);
  const [showSuccessIcon, setShowSuccessIcon] = (0, import_react291.useState)(false);
  (0, import_react291.useEffect)(() => {
    if (successfulEdit && prevSuccessfulEdit && !hasFocus && prevHasFocus) {
      setShowSuccessIcon(false);
    }
    if (successfulEdit && !prevSuccessfulEdit) {
      setShowSuccessIcon(true);
    }
  }, [hasFocus, successfulEdit, prevHasFocus, prevSuccessfulEdit]);
  const { tabIndex: editActivateTabIndex } = useSingleTabStopNavigation(editActivateRef);
  return import_react291.default.createElement(TableTdElement, Object.assign({}, rest, { nativeAttributes: tdNativeAttributes, className: clsx_m_default(className2, styles_css_default94["body-cell-editable"], interactiveCell && styles_css_default94["body-cell-interactive"], isEditing && styles_css_default94["body-cell-edit-active"], showSuccessIcon && showIcon && styles_css_default94["body-cell-has-success"], isVisualRefresh && styles_css_default94["is-visual-refresh"]), onClick: interactiveCell && !isEditing ? onEditStart : void 0, onMouseEnter: () => setHasHover(true), onMouseLeave: () => setHasHover(false) }), isEditing ? import_react291.default.createElement(InlineEditor, { ariaLabels, column, item, onEditEnd: (options) => {
    setShowSuccessIcon(false);
    isFocusMoveNeededRef.current = options.refocusCell;
    onEditEnd(options.cancelled);
  }, submitEdit: submitEdit !== null && submitEdit !== void 0 ? submitEdit : submitHandlerFallback }) : import_react291.default.createElement(
    import_react291.default.Fragment,
    null,
    column.cell(item),
    showSuccessIcon && showIcon && import_react291.default.createElement(
      import_react291.default.Fragment,
      null,
      import_react291.default.createElement(
        "span",
        { className: styles_css_default94["body-cell-success"], "aria-label": (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.successfulEditLabel) === null || _b === void 0 ? void 0 : _b.call(ariaLabels, column), role: "img", onMouseDown: (e) => {
          e.preventDefault();
        } },
        import_react291.default.createElement(internal_default, { name: "status-positive", variant: "success" })
      ),
      import_react291.default.createElement(live_region_default, null, i18n("ariaLabels.successfulEditLabel", (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.successfulEditLabel) === null || _c === void 0 ? void 0 : _c.call(ariaLabels, column)))
    ),
    import_react291.default.createElement(
      "div",
      { className: styles_css_default94["body-cell-editor-wrapper"] },
      import_react291.default.createElement("button", { className: styles_css_default94["body-cell-editor"], "aria-label": (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.activateEditLabel) === null || _d === void 0 ? void 0 : _d.call(ariaLabels, column, item), ref: editActivateRef, onClick: !interactiveCell && !isEditing ? onEditStart : void 0, onFocus: () => setHasFocus(true), onBlur: () => setHasFocus(false), tabIndex: editActivateTabIndex }, showIcon && import_react291.default.createElement(internal_default, { name: "edit" }))
    )
  ));
}
function TableBodyCell(_a) {
  var _b, _c;
  var { isEditable } = _a, rest = __rest(_a, ["isEditable"]);
  const isExpandableColumnCell = rest.level !== void 0;
  const editDisabledReason = (_c = (_b = rest.column.editConfig) === null || _b === void 0 ? void 0 : _b.disabledReason) === null || _c === void 0 ? void 0 : _c.call(_b, rest.item);
  if (editDisabledReason && !isExpandableColumnCell) {
    return import_react291.default.createElement(DisabledInlineEditor, Object.assign({ editDisabledReason }, rest));
  }
  if ((isEditable || rest.isEditing) && !isExpandableColumnCell) {
    return import_react291.default.createElement(TableCellEditable, Object.assign({}, rest));
  }
  const { column, item } = rest;
  return import_react291.default.createElement(TableTdElement, Object.assign({}, rest), column.cell(item));
}

// node_modules/@cloudscape-design/components/table/use-row-events.js
function useRowEvents({ onRowClick, onRowContextMenu }) {
  const onRowClickHandler = (rowIndex, item, event) => {
    const tableCell = findUpUntil2(event.target, (element) => element.tagName.toLowerCase() === "td");
    if (!tableCell || !tableCell.classList.contains(styles_css_default53["selection-control"])) {
      const details = { rowIndex, item };
      fireNonCancelableEvent(onRowClick, details);
    }
  };
  const onRowContextMenuHandler = (rowIndex, item, event) => {
    const details = {
      rowIndex,
      item,
      clientX: event.clientX,
      clientY: event.clientY
    };
    fireCancelableEvent(onRowContextMenu, details, event);
  };
  return {
    onRowClickHandler: onRowClick && onRowClickHandler,
    onRowContextMenuHandler: onRowContextMenu && onRowContextMenuHandler
  };
}

// node_modules/@cloudscape-design/components/internal/hooks/use-scroll-sync/index.js
var import_react292 = __toESM(require_react());
function useScrollSync(refs, disabled = !supportsStickyPosition()) {
  const activeElement = (0, import_react292.useRef)(null);
  const onScroll = (event) => {
    const targetElement = event.currentTarget;
    if (targetElement && (activeElement.current === null || activeElement.current === targetElement)) {
      requestAnimationFrame(() => {
        activeElement.current = targetElement;
        refs.forEach((ref) => {
          const element = ref.current;
          if (element && element !== targetElement) {
            element.scrollLeft = targetElement.scrollLeft;
          }
        });
        requestAnimationFrame(() => {
          activeElement.current = null;
        });
      });
    }
  };
  return !disabled ? onScroll : void 0;
}

// node_modules/@cloudscape-design/components/table/sticky-header.js
var import_react294 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/use-sticky-header.js
var import_react293 = __toESM(require_react());
var useStickyHeader = (tableRef, theadRef, secondaryTheadRef, secondaryTableRef, tableWrapperRef) => {
  const isMobile = useMobile();
  const syncColumnHeaderWidths = (0, import_react293.useCallback)(() => {
    if (tableRef.current && theadRef.current && secondaryTheadRef.current && secondaryTableRef.current && tableWrapperRef.current) {
      secondaryTableRef.current.style.width = `${tableRef.current.offsetWidth}px`;
      tableWrapperRef.current.style.marginTop = `-${theadRef.current.offsetHeight}px`;
    }
  }, [theadRef, secondaryTheadRef, secondaryTableRef, tableWrapperRef, tableRef]);
  (0, import_react293.useLayoutEffect)(() => {
    syncColumnHeaderWidths();
  });
  useResizeObserver(theadRef, syncColumnHeaderWidths);
  const scrollToTop = () => {
    if (!isMobile && theadRef.current && secondaryTheadRef.current && tableWrapperRef.current) {
      const scrollDist = calculateScrollingOffset(theadRef.current, secondaryTheadRef.current);
      if (scrollDist > 0) {
        scrollUpBy(scrollDist, tableWrapperRef.current);
      }
    }
  };
  const { scrollToItem } = stickyScrolling(tableWrapperRef, secondaryTheadRef);
  const scrollToRow = (itemNode) => {
    if (!isMobile) {
      scrollToItem(itemNode);
    }
  };
  return { scrollToRow, scrollToTop };
};

// node_modules/@cloudscape-design/components/table/sticky-header.js
var sticky_header_default = (0, import_react294.forwardRef)(StickyHeader);
function StickyHeader({ variant, theadProps, wrapperRef, theadRef, secondaryWrapperRef, onScroll, tableRef, tableHasHeader, contentDensity, tableRole }, ref) {
  const secondaryTheadRef = (0, import_react294.useRef)(null);
  const secondaryTableRef = (0, import_react294.useRef)(null);
  const { isStuck } = (0, import_react294.useContext)(StickyHeaderContext);
  const [focusedComponent, setFocusedComponent] = (0, import_react294.useState)(null);
  const { scrollToRow, scrollToTop } = useStickyHeader(tableRef, theadRef, secondaryTheadRef, secondaryTableRef, wrapperRef);
  (0, import_react294.useImperativeHandle)(ref, () => ({
    scrollToTop,
    scrollToRow,
    setFocus: setFocusedComponent
  }));
  return import_react294.default.createElement(
    "div",
    {
      className: clsx_m_default(styles_css_default53["header-secondary"], styles_css_default53[`variant-${variant}`], {
        [styles_css_default53.stuck]: isStuck,
        [styles_css_default53["table-has-header"]]: tableHasHeader
      }),
      "aria-hidden": true,
      // Prevents receiving focus in Firefox. Focus on the overflowing table is sufficient
      // to scroll the table horizontally
      tabIndex: -1,
      ref: secondaryWrapperRef,
      onScroll
    },
    import_react294.default.createElement(
      "table",
      Object.assign({ className: clsx_m_default(styles_css_default53.table, styles_css_default53["table-layout-fixed"], contentDensity === "compact" && getVisualContextClassname("compact-table")), ref: secondaryTableRef }, getTableRoleProps({ tableRole })),
      import_react294.default.createElement(thead_default, Object.assign({ ref: secondaryTheadRef, sticky: true, stuck: isStuck, focusedComponent }, theadProps))
    )
  );
}

// node_modules/@cloudscape-design/components/table/use-table-focus-navigation.js
var import_react295 = __toESM(require_react());
function iterateTableCells(table, func) {
  table.querySelectorAll("tr").forEach((row, rowIndex) => {
    row.querySelectorAll("td").forEach((cell, cellIndex) => {
      func(cell, rowIndex, cellIndex);
    });
  });
}
function useTableFocusNavigation({ enableKeyboardNavigation, selectionType, tableRoot, columnDefinitions, numRows }) {
  const focusableColumns = (0, import_react295.useMemo)(() => {
    const cols = columnDefinitions.map((column) => !!column.editConfig);
    if (selectionType) {
      cols.unshift(false);
    }
    return cols;
  }, [columnDefinitions, selectionType]);
  const maxColumnIndex = focusableColumns.length - 1;
  const minColumnIndex = selectionType ? 1 : 0;
  const focusCell = (0, import_react295.useCallback)((rowIndex, columnIndex) => {
    if (tableRoot === null || tableRoot === void 0 ? void 0 : tableRoot.current) {
      iterateTableCells(tableRoot.current, (cell, rIndex, cIndex) => {
        var _a;
        if (rIndex === rowIndex && cIndex === columnIndex) {
          const editButton = cell.querySelector("button:last-child");
          if (editButton) {
            (_a = editButton.focus) === null || _a === void 0 ? void 0 : _a.call(editButton);
            scrollElementIntoView(editButton);
          }
        }
      });
    }
  }, [tableRoot]);
  const shiftFocus = (0, import_react295.useCallback)((vertical, horizontal) => {
    var _a;
    const focusedCell = (_a = tableRoot.current) === null || _a === void 0 ? void 0 : _a.querySelector("td:focus-within");
    if (!focusedCell) {
      return;
    }
    const columnIndex = focusedCell.cellIndex;
    const rowIndex = focusedCell.parentElement.rowIndex;
    let newRowIndex = rowIndex;
    let newColumnIndex = columnIndex;
    if (vertical !== 0) {
      newRowIndex = Math.min(numRows, Math.max(rowIndex + vertical, 0));
    }
    if (horizontal !== 0) {
      while (newColumnIndex <= maxColumnIndex && newColumnIndex >= minColumnIndex) {
        newColumnIndex += horizontal;
        if (focusableColumns[newColumnIndex]) {
          break;
        }
      }
    }
    if ((rowIndex !== newRowIndex || columnIndex !== newColumnIndex) && tableRoot.current) {
      focusCell(newRowIndex, newColumnIndex);
    }
  }, [focusCell, focusableColumns, maxColumnIndex, minColumnIndex, numRows, tableRoot]);
  const handleArrowKeyEvents = (0, import_react295.useCallback)((event) => {
    var _a, _b;
    const abort = !!((_a = tableRoot.current) === null || _a === void 0 ? void 0 : _a.querySelector('[data-inline-editing-active = "true"]')) || !((_b = document.activeElement) === null || _b === void 0 ? void 0 : _b.closest("[data-inline-editing-active]"));
    if (abort) {
      return;
    }
    switch (event.key) {
      case "ArrowUp":
        event.preventDefault();
        shiftFocus(-1, 0);
        break;
      case "ArrowDown":
        event.preventDefault();
        shiftFocus(1, 0);
        break;
      case "ArrowLeft":
        event.preventDefault();
        shiftFocus(0, -1);
        break;
      case "ArrowRight":
        event.preventDefault();
        shiftFocus(0, 1);
        break;
      default:
        return;
    }
  }, [shiftFocus, tableRoot]);
  (0, import_react295.useEffect)(() => {
    if (!tableRoot.current || enableKeyboardNavigation) {
      return;
    }
    const tableElement = tableRoot.current;
    tableRoot.current.addEventListener("keydown", handleArrowKeyEvents);
    return () => tableElement && tableElement.removeEventListener("keydown", handleArrowKeyEvents);
  }, [enableKeyboardNavigation, focusableColumns, handleArrowKeyEvents, tableRoot]);
}
var use_table_focus_navigation_default = useTableFocusNavigation;

// node_modules/@cloudscape-design/components/table/sticky-scrollbar/sticky-scrollbar.js
var import_react297 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/sticky-scrollbar/use-sticky-scrollbar.js
var import_react296 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/sticky-scrollbar/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/table/sticky-scrollbar/styles.scoped.css";
var styles_css_default96 = {
  "sticky-scrollbar": "awsui_sticky-scrollbar_faqt8_xxk3x_99",
  "sticky-scrollbar-content": "awsui_sticky-scrollbar-content_faqt8_xxk3x_108",
  "sticky-scrollbar-visible": "awsui_sticky-scrollbar-visible_faqt8_xxk3x_111",
  "sticky-scrollbar-native-invisible": "awsui_sticky-scrollbar-native-invisible_faqt8_xxk3x_114",
  "sticky-scrollbar-offset": "awsui_sticky-scrollbar-offset_faqt8_xxk3x_117",
  "is-visual-refresh": "awsui_is-visual-refresh_faqt8_xxk3x_120"
};

// node_modules/@cloudscape-design/components/table/sticky-scrollbar/use-sticky-scrollbar.js
var updatePosition = (tableEl, wrapperEl, scrollbarEl, scrollbarContentEl, hasContainingBlock, consideredFooterHeight) => {
  if (!tableEl || !scrollbarEl || !wrapperEl) {
    return;
  }
  const { width: tableWidth } = tableEl.getBoundingClientRect();
  const { width: wrapperWidth } = wrapperEl.getBoundingClientRect();
  const scrollbarHeight = browserScrollbarSize().height;
  const areaIsScrollable = tableWidth > wrapperWidth;
  if (!areaIsScrollable) {
    scrollbarEl.classList.remove(styles_css_default96["sticky-scrollbar-visible"]);
  } else {
    if (!scrollbarEl.classList.contains(styles_css_default96["sticky-scrollbar-visible"])) {
      requestAnimationFrame(() => {
        scrollbarEl.scrollLeft = wrapperEl.scrollLeft;
      });
    }
    scrollbarEl.classList.add(styles_css_default96["sticky-scrollbar-visible"]);
    if (!scrollbarHeight) {
      scrollbarEl.classList.add(styles_css_default96["sticky-scrollbar-native-invisible"]);
    }
  }
  if (scrollbarHeight && scrollbarEl && scrollbarContentEl) {
    scrollbarEl.style.height = `${scrollbarHeight}px`;
    scrollbarContentEl.style.height = `${scrollbarHeight}px`;
  }
  if (tableEl && wrapperEl && scrollbarContentEl && scrollbarEl) {
    const wrapperElRect = wrapperEl.getBoundingClientRect();
    const tableElRect = tableEl.getBoundingClientRect();
    scrollbarEl.style.width = `${wrapperElRect.width}px`;
    scrollbarContentEl.style.width = `${tableElRect.width}px`;
    scrollbarEl.style.bottom = hasContainingBlock ? "0px" : `${consideredFooterHeight}px`;
  }
};
function useStickyScrollbar(scrollbarRef, scrollbarContentRef, tableRef, wrapperRef, footerHeight, offsetScrollbar) {
  const [hasContainingBlock, setHasContainingBlock] = (0, import_react296.useState)(false);
  const [hasOverflowParent, setHasOverflowParent] = (0, import_react296.useState)(false);
  const consideredFooterHeight = hasContainingBlock || hasOverflowParent ? 0 : footerHeight;
  const wrapperEl = wrapperRef.current;
  (0, import_react296.useEffect)(() => {
    if (wrapperEl && supportsStickyPosition()) {
      setHasContainingBlock(!!getContainingBlock(wrapperEl));
      setHasOverflowParent(!!getOverflowParents(wrapperEl)[0]);
    }
  }, [wrapperEl]);
  (0, import_react296.useEffect)(() => {
    if (supportsStickyPosition() && wrapperRef.current && tableRef.current) {
      const observer = new ResizeObserver(() => {
        if (scrollbarContentRef.current) {
          updatePosition(tableRef.current, wrapperRef.current, scrollbarRef.current, scrollbarContentRef.current, hasContainingBlock, consideredFooterHeight);
        }
      });
      observer.observe(wrapperRef.current);
      observer.observe(tableRef.current);
      return () => {
        observer.disconnect();
      };
    }
  }, [
    scrollbarContentRef,
    scrollbarRef,
    tableRef,
    wrapperRef,
    consideredFooterHeight,
    hasContainingBlock,
    offsetScrollbar
  ]);
  (0, import_react296.useEffect)(() => {
    if (supportsStickyPosition()) {
      const resizeHandler = () => {
        updatePosition(tableRef.current, wrapperRef.current, scrollbarRef.current, scrollbarContentRef.current, hasContainingBlock, consideredFooterHeight);
      };
      resizeHandler();
      window.addEventListener("resize", resizeHandler);
      return () => {
        window.removeEventListener("resize", resizeHandler);
      };
    }
  }, [tableRef, wrapperRef, scrollbarRef, scrollbarContentRef, hasContainingBlock, consideredFooterHeight]);
}

// node_modules/@cloudscape-design/components/table/sticky-scrollbar/sticky-scrollbar.js
var sticky_scrollbar_default = (0, import_react297.forwardRef)(StickyScrollbar);
function StickyScrollbar({ wrapperRef, tableRef, onScroll, hasStickyColumns }, ref) {
  const isVisualRefresh = useVisualRefresh();
  const scrollbarRef = import_react297.default.useRef(null);
  const scrollbarContentRef = import_react297.default.useRef(null);
  const mergedRef = useMergeRefs(ref, scrollbarRef);
  const offsetScrollbar = hasStickyColumns || browserScrollbarSize().height === 0;
  const { stickyOffsetBottom } = useAppLayoutContext();
  useStickyScrollbar(scrollbarRef, scrollbarContentRef, tableRef, wrapperRef, stickyOffsetBottom, offsetScrollbar);
  return import_react297.default.createElement(
    "div",
    { ref: mergedRef, className: clsx_m_default(styles_css_default96["sticky-scrollbar"], offsetScrollbar && styles_css_default96["sticky-scrollbar-offset"], isVisualRefresh && styles_css_default96["is-visual-refresh"]), onScroll },
    import_react297.default.createElement("div", { ref: scrollbarContentRef, className: styles_css_default96["sticky-scrollbar-content"] })
  );
}

// node_modules/@cloudscape-design/components/table/use-cell-editing.js
var import_react298 = __toESM(require_react());
function useCellEditing({ onCancel, onSubmit }) {
  const [currentEditCell, setCurrentEditCell] = (0, import_react298.useState)(null);
  const [lastSuccessfulEditCell, setLastSuccessfulEditCell] = (0, import_react298.useState)(null);
  const [currentEditLoading, setCurrentEditLoading] = (0, import_react298.useState)(false);
  const startEdit = (cellId) => {
    setLastSuccessfulEditCell(null);
    setCurrentEditCell(cellId);
  };
  const cancelEdit = (0, import_react298.useCallback)(() => setCurrentEditCell(null), []);
  const completeEdit = (cellId, editCancelled) => {
    const eventCancelled = fireCancelableEvent(onCancel, {});
    if (!eventCancelled) {
      setCurrentEditCell(null);
      if (!editCancelled) {
        setLastSuccessfulEditCell(cellId);
      }
    }
  };
  const checkEditing = ({ rowIndex, colIndex }) => rowIndex === (currentEditCell === null || currentEditCell === void 0 ? void 0 : currentEditCell.rowIndex) && colIndex === currentEditCell.colIndex;
  const checkLastSuccessfulEdit = ({ rowIndex, colIndex }) => rowIndex === (lastSuccessfulEditCell === null || lastSuccessfulEditCell === void 0 ? void 0 : lastSuccessfulEditCell.rowIndex) && colIndex === lastSuccessfulEditCell.colIndex;
  const submitEdit = onSubmit ? (...args) => __awaiter(this, void 0, void 0, function* () {
    setCurrentEditLoading(true);
    try {
      yield onSubmit(...args);
    } finally {
      setCurrentEditLoading(false);
    }
  }) : void 0;
  return {
    isLoading: currentEditLoading,
    startEdit,
    cancelEdit,
    checkEditing,
    checkLastSuccessfulEdit,
    completeEdit,
    submitEdit
  };
}

// node_modules/@cloudscape-design/components/table/no-data-cell.js
var import_react299 = __toESM(require_react());
function NoDataCell({ totalColumnsCount, hasFooter, loading, loadingText, empty, tableRef, containerRef }) {
  const cellContentRef = (0, import_react299.useRef)(null);
  useResizeObserver(containerRef, ({ contentBoxWidth: containerWidth }) => {
    if (tableRef.current && cellContentRef.current && supportsStickyPosition()) {
      const tablePaddingLeft = parseFloat(getComputedStyle(tableRef.current).paddingLeft) || 0;
      const tablePaddingRight = parseFloat(getComputedStyle(tableRef.current).paddingRight) || 0;
      const contentWidth = containerWidth + tablePaddingLeft + tablePaddingRight;
      cellContentRef.current.style.width = Math.floor(contentWidth) + "px";
    }
  });
  return import_react299.default.createElement(
    "td",
    { colSpan: totalColumnsCount, className: clsx_m_default(styles_css_default53["cell-merged"], hasFooter && styles_css_default53["has-footer"]) },
    import_react299.default.createElement("div", { ref: cellContentRef, className: styles_css_default53["cell-merged-content"], "data-awsui-table-suppress-navigation": true }, loading ? import_react299.default.createElement(
      StatusIndicator,
      { type: "loading", className: styles_css_default53.loading, wrapText: true },
      import_react299.default.createElement(live_region_default, { visible: true }, loadingText)
    ) : import_react299.default.createElement("div", { className: styles_css_default53.empty }, empty))
  );
}

// node_modules/@cloudscape-design/components/table/expandable-rows/expandable-rows-utils.js
function useExpandableTableProps({ items, expandableRows, trackBy, ariaLabels }) {
  var _a;
  const i18n = useInternalI18n("table");
  const isExpandable = !!expandableRows;
  const expandedSet = new ItemSet(trackBy, (_a = expandableRows === null || expandableRows === void 0 ? void 0 : expandableRows.expandedItems) !== null && _a !== void 0 ? _a : []);
  let allItems = items;
  const itemToPlacement = /* @__PURE__ */ new Map();
  const getItemLevel = (item) => {
    var _a2, _b;
    return (_b = (_a2 = itemToPlacement.get(item)) === null || _a2 === void 0 ? void 0 : _a2.level) !== null && _b !== void 0 ? _b : 0;
  };
  if (isExpandable) {
    const visibleItems = new Array();
    const traverse = (item, placement) => {
      itemToPlacement.set(item, placement);
      visibleItems.push(item);
      if (expandedSet.has(item)) {
        const children = expandableRows.getItemChildren(item);
        expandableRows.getItemChildren(item).forEach((child, index) => traverse(child, { level: placement.level + 1, setSize: children.length, posInSet: index + 1 }));
      }
    };
    items.forEach((item, index) => traverse(item, { level: 1, setSize: items.length, posInSet: index + 1 }));
    for (let index = 0; index < visibleItems.length; index++) {
      const item = visibleItems[index];
      if (expandedSet.has(item)) {
        let insertionIndex = index + 1;
        for (insertionIndex; insertionIndex < visibleItems.length; insertionIndex++) {
          const insertionItem = visibleItems[insertionIndex];
          if (getItemLevel(item) >= getItemLevel(insertionItem)) {
            break;
          }
        }
        insertionIndex--;
      }
    }
    allItems = visibleItems;
  }
  const getExpandableItemProps = (item) => {
    var _a2, _b, _c, _d;
    const { level, setSize, posInSet } = (_a2 = itemToPlacement.get(item)) !== null && _a2 !== void 0 ? _a2 : { level: 1, setSize: 1, posInSet: 1 };
    return {
      level,
      setSize,
      posInSet,
      isExpandable: (_b = expandableRows === null || expandableRows === void 0 ? void 0 : expandableRows.isItemExpandable(item)) !== null && _b !== void 0 ? _b : true,
      isExpanded: expandedSet.has(item),
      onExpandableItemToggle: () => fireNonCancelableEvent(expandableRows === null || expandableRows === void 0 ? void 0 : expandableRows.onExpandableItemToggle, { item, expanded: !expandedSet.has(item) }),
      expandButtonLabel: i18n("ariaLabels.expandButtonLabel", (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.expandButtonLabel) === null || _c === void 0 ? void 0 : _c.call(ariaLabels, item)),
      collapseButtonLabel: i18n("ariaLabels.collapseButtonLabel", (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.collapseButtonLabel) === null || _d === void 0 ? void 0 : _d.call(ariaLabels, item))
    };
  };
  return { isExpandable, allItems, getExpandableItemProps };
}

// node_modules/@cloudscape-design/components/table/internal.js
var GRID_NAVIGATION_PAGE_SIZE = 10;
var SELECTION_COLUMN_WIDTH = 54;
var selectionColumnId = Symbol("selection-column-id");
var InternalTableAsSubstep = import_react300.default.forwardRef((props, ref) => {
  const { funnelSubStepProps } = useFunnelSubStep();
  const tableProps = Object.assign(Object.assign({}, props), { __funnelSubStepProps: funnelSubStepProps });
  return import_react300.default.createElement(InternalTable, Object.assign({}, tableProps, { ref }));
});
var InternalTable = import_react300.default.forwardRef((_a, ref) => {
  var _b, _c, _d, _e, _f;
  var { header, footer, empty, filter, pagination, preferences, items, columnDefinitions, trackBy, loading, loadingText, selectionType, selectedItems, isItemDisabled, ariaLabels, onSelectionChange, onSortingChange, sortingColumn, sortingDescending, sortingDisabled, visibleColumns, stickyHeader, stickyHeaderVerticalOffset, onRowClick, onRowContextMenu, wrapLines, stripedRows, contentDensity, submitEdit, onEditCancel, resizableColumns, onColumnWidthsChange, variant, __internalRootRef, totalItemsCount, firstIndex, renderAriaLive, stickyColumns, columnDisplay, enableKeyboardNavigation, expandableRows, __funnelSubStepProps } = _a, rest = __rest(_a, ["header", "footer", "empty", "filter", "pagination", "preferences", "items", "columnDefinitions", "trackBy", "loading", "loadingText", "selectionType", "selectedItems", "isItemDisabled", "ariaLabels", "onSelectionChange", "onSortingChange", "sortingColumn", "sortingDescending", "sortingDisabled", "visibleColumns", "stickyHeader", "stickyHeaderVerticalOffset", "onRowClick", "onRowContextMenu", "wrapLines", "stripedRows", "contentDensity", "submitEdit", "onEditCancel", "resizableColumns", "onColumnWidthsChange", "variant", "__internalRootRef", "totalItemsCount", "firstIndex", "renderAriaLive", "stickyColumns", "columnDisplay", "enableKeyboardNavigation", "expandableRows", "__funnelSubStepProps"]);
  if (expandableRows && enableKeyboardNavigation === void 0) {
    enableKeyboardNavigation = true;
  }
  const baseProps = getBaseProps(rest);
  stickyHeader = stickyHeader && supportsStickyPosition();
  const isMobile = useMobile();
  const { isExpandable, allItems, getExpandableItemProps } = useExpandableTableProps({
    items,
    expandableRows,
    trackBy,
    ariaLabels
  });
  const [containerWidth, wrapperMeasureRef] = useContainerQuery((rect) => rect.contentBoxWidth);
  const wrapperMeasureRefObject = (0, import_react300.useRef)(null);
  const wrapperMeasureMergedRef = useMergeRefs(wrapperMeasureRef, wrapperMeasureRefObject);
  const [tableWidth, tableMeasureRef] = useContainerQuery((rect) => rect.contentBoxWidth);
  const tableRefObject = (0, import_react300.useRef)(null);
  const secondaryWrapperRef = import_react300.default.useRef(null);
  const theadRef = (0, import_react300.useRef)(null);
  const stickyHeaderRef = import_react300.default.useRef(null);
  const scrollbarRef = import_react300.default.useRef(null);
  const _g = useCellEditing({ onCancel: onEditCancel, onSubmit: submitEdit }), { cancelEdit } = _g, cellEditing = __rest(_g, ["cancelEdit"]);
  usePerformanceMarks("table", true, tableRefObject, () => {
    var _a2, _b2, _c2, _d2;
    const headerText = (_c2 = (_b2 = (_a2 = toolsHeaderWrapper.current) === null || _a2 === void 0 ? void 0 : _a2.querySelector(`.${styles_css_default37["heading-text"]}`)) === null || _b2 === void 0 ? void 0 : _b2.innerText) !== null && _c2 !== void 0 ? _c2 : (_d2 = toolsHeaderWrapper.current) === null || _d2 === void 0 ? void 0 : _d2.innerText;
    return {
      loading: loading !== null && loading !== void 0 ? loading : false,
      header: headerText
    };
  }, [loading]);
  (0, import_react300.useImperativeHandle)(ref, () => {
    var _a2;
    return {
      scrollToTop: ((_a2 = stickyHeaderRef.current) === null || _a2 === void 0 ? void 0 : _a2.scrollToTop) || (() => void 0),
      cancelEdit
    };
  }, [cancelEdit]);
  const wrapperRefObject = (0, import_react300.useRef)(null);
  const handleScroll = useScrollSync([wrapperRefObject, scrollbarRef, secondaryWrapperRef]);
  const { moveFocusDown, moveFocusUp, moveFocus } = useSelectionFocusMove(selectionType, allItems.length);
  const { onRowClickHandler, onRowContextMenuHandler } = useRowEvents({ onRowClick, onRowContextMenu });
  const visibleColumnDefinitions = getVisibleColumnDefinitions({
    columnDefinitions,
    columnDisplay,
    visibleColumns
  });
  const { isItemSelected, getSelectAllProps, getItemSelectionProps, updateShiftToggle } = useSelection({
    items: allItems,
    trackBy,
    selectedItems,
    selectionType,
    isItemDisabled,
    onSelectionChange,
    ariaLabels,
    loading
  });
  if (isDevelopment) {
    if (resizableColumns) {
      checkColumnWidths(columnDefinitions);
    }
    if (sortingColumn === null || sortingColumn === void 0 ? void 0 : sortingColumn.sortingComparator) {
      checkSortingState(columnDefinitions, sortingColumn.sortingComparator);
    }
  }
  const isVisualRefresh = useVisualRefresh();
  const computedVariant = isVisualRefresh ? variant : ["embedded", "full-page"].indexOf(variant) > -1 ? "container" : variant;
  const hasHeader = !!(header || filter || pagination || preferences);
  const hasSelection = !!selectionType;
  const hasFooterPagination = isMobile && variant === "full-page" && !!pagination;
  const hasFooter = !!footer || hasFooterPagination;
  const headerIdRef = (0, import_react300.useRef)(void 0);
  const isLabelledByHeader = !(ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tableLabel) && !!header;
  const setHeaderRef = (0, import_react300.useCallback)((id) => {
    headerIdRef.current = id;
  }, []);
  const visibleColumnWidthsWithSelection = [];
  const visibleColumnIdsWithSelection = [];
  if (hasSelection) {
    visibleColumnWidthsWithSelection.push({ id: selectionColumnId, width: SELECTION_COLUMN_WIDTH });
    visibleColumnIdsWithSelection.push(selectionColumnId);
  }
  for (let columnIndex = 0; columnIndex < visibleColumnDefinitions.length; columnIndex++) {
    const columnId = getColumnKey(visibleColumnDefinitions[columnIndex], columnIndex);
    visibleColumnWidthsWithSelection.push(Object.assign(Object.assign({}, visibleColumnDefinitions[columnIndex]), { id: columnId }));
    visibleColumnIdsWithSelection.push(columnId);
  }
  const stickyState = useStickyColumns({
    visibleColumns: visibleColumnIdsWithSelection,
    stickyColumnsFirst: ((_b = stickyColumns === null || stickyColumns === void 0 ? void 0 : stickyColumns.first) !== null && _b !== void 0 ? _b : 0) + ((stickyColumns === null || stickyColumns === void 0 ? void 0 : stickyColumns.first) && hasSelection ? 1 : 0),
    stickyColumnsLast: (stickyColumns === null || stickyColumns === void 0 ? void 0 : stickyColumns.last) || 0
  });
  const hasStickyColumns = !!(((_c = stickyColumns === null || stickyColumns === void 0 ? void 0 : stickyColumns.first) !== null && _c !== void 0 ? _c : 0) + ((_d = stickyColumns === null || stickyColumns === void 0 ? void 0 : stickyColumns.last) !== null && _d !== void 0 ? _d : 0) > 0);
  const hasEditableCells = !!columnDefinitions.find((col) => col.editConfig);
  let tableRole = "table";
  if (isExpandable) {
    tableRole = "treegrid";
  } else if (enableKeyboardNavigation) {
    tableRole = "grid";
  } else if (hasEditableCells) {
    tableRole = "grid-default";
  }
  const theadProps = {
    selectionType,
    getSelectAllProps,
    columnDefinitions: visibleColumnDefinitions,
    variant: computedVariant,
    wrapLines,
    resizableColumns,
    sortingColumn,
    sortingDisabled,
    sortingDescending,
    onSortingChange,
    onFocusMove: moveFocus,
    onResizeFinish(newWidth) {
      const widthsDetail = columnDefinitions.map((column, index) => newWidth.get(getColumnKey(column, index)) || column.width || DEFAULT_COLUMN_WIDTH);
      const widthsChanged = widthsDetail.some((width, index) => columnDefinitions[index].width !== width);
      if (widthsChanged) {
        fireNonCancelableEvent(onColumnWidthsChange, { widths: widthsDetail });
      }
    },
    singleSelectionHeaderAriaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel,
    resizerRoleDescription: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.resizerRoleDescription,
    stripedRows,
    stickyState,
    selectionColumnId,
    tableRole,
    isExpandable
  };
  const wrapperRef = useMergeRefs(wrapperRefObject, stickyState.refs.wrapper);
  const tableRef = useMergeRefs(tableMeasureRef, tableRefObject, stickyState.refs.table);
  const wrapperProps = getTableWrapperRoleProps({
    tableRole,
    isScrollable: !!(tableWidth && containerWidth && tableWidth > containerWidth),
    ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tableLabel
  });
  const getMouseDownTarget = useMouseDownTarget();
  const hasDynamicHeight = computedVariant === "full-page";
  const overlapElement = useDynamicOverlap({ disabled: !hasDynamicHeight });
  use_table_focus_navigation_default({
    enableKeyboardNavigation,
    selectionType,
    tableRoot: tableRefObject,
    columnDefinitions: visibleColumnDefinitions,
    numRows: allItems === null || allItems === void 0 ? void 0 : allItems.length
  });
  const toolsHeaderWrapper = (0, import_react300.useRef)(null);
  const toolsHeaderHeight = (_f = (_e = toolsHeaderWrapper === null || toolsHeaderWrapper === void 0 ? void 0 : toolsHeaderWrapper.current) === null || _e === void 0 ? void 0 : _e.getBoundingClientRect().height) !== null && _f !== void 0 ? _f : 0;
  const colIndexOffset = selectionType ? 1 : 0;
  const totalColumnsCount = visibleColumnDefinitions.length + colIndexOffset;
  return import_react300.default.createElement(
    LinkDefaultVariantContext.Provider,
    { value: { defaultVariant: "primary" } },
    import_react300.default.createElement(
      ColumnWidthsProvider,
      { visibleColumns: visibleColumnWidthsWithSelection, resizableColumns, containerRef: wrapperMeasureRefObject },
      import_react300.default.createElement(
        InternalContainer,
        Object.assign({}, baseProps, { __internalRootRef, className: clsx_m_default(baseProps.className, styles_css_default53.root), __funnelSubStepProps, header: import_react300.default.createElement(
          import_react300.default.Fragment,
          null,
          hasHeader && import_react300.default.createElement(
            "div",
            { ref: overlapElement, className: clsx_m_default(hasDynamicHeight && [styles_css_default53["dark-header"], getContentHeaderClassName()]) },
            import_react300.default.createElement(
              "div",
              { ref: toolsHeaderWrapper, className: clsx_m_default(styles_css_default53["header-controls"], styles_css_default53[`variant-${computedVariant}`]) },
              import_react300.default.createElement(
                CollectionLabelContext.Provider,
                { value: { assignId: setHeaderRef } },
                import_react300.default.createElement(ToolsHeader, { header, filter, pagination, preferences })
              )
            )
          ),
          stickyHeader && import_react300.default.createElement(sticky_header_default, { ref: stickyHeaderRef, variant: computedVariant, theadProps, wrapperRef: wrapperRefObject, theadRef, secondaryWrapperRef, tableRef: tableRefObject, onScroll: handleScroll, tableHasHeader: hasHeader, contentDensity, tableRole })
        ), disableHeaderPaddings: true, disableContentPaddings: true, variant: toContainerVariant(computedVariant), __disableFooterPaddings: true, __disableFooterDivider: true, __disableStickyMobile: false, footer: hasFooter ? import_react300.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default53["footer-wrapper"], styles_css_default53[`variant-${computedVariant}`]) },
          import_react300.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default53.footer, hasFooterPagination && styles_css_default53["footer-with-pagination"]) },
            footer && import_react300.default.createElement("span", null, footer),
            hasFooterPagination && import_react300.default.createElement("div", { className: styles_css_default53["footer-pagination"] }, pagination)
          )
        ) : null, __stickyHeader: stickyHeader, __mobileStickyOffset: toolsHeaderHeight, __stickyOffset: stickyHeaderVerticalOffset }, focusMarkers.root),
        import_react300.default.createElement(
          "div",
          Object.assign({ ref: wrapperRef, className: clsx_m_default(styles_css_default53.wrapper, styles_css_default53[`variant-${computedVariant}`], {
            [styles_css_default53["has-footer"]]: hasFooter,
            [styles_css_default53["has-header"]]: hasHeader
          }), style: stickyState.style.wrapper, onScroll: handleScroll }, wrapperProps),
          import_react300.default.createElement("div", { className: styles_css_default53["wrapper-content-measure"], ref: wrapperMeasureMergedRef }),
          !!renderAriaLive && !!firstIndex && import_react300.default.createElement(
            live_region_default,
            null,
            import_react300.default.createElement("span", null, renderAriaLive({ totalItemsCount, firstIndex, lastIndex: firstIndex + items.length - 1 }))
          ),
          import_react300.default.createElement(
            GridNavigationProvider,
            { keyboardNavigation: !!enableKeyboardNavigation, pageSize: GRID_NAVIGATION_PAGE_SIZE, getTable: () => tableRefObject.current },
            import_react300.default.createElement(
              "table",
              Object.assign({ ref: tableRef, className: clsx_m_default(styles_css_default53.table, resizableColumns && styles_css_default53["table-layout-fixed"], contentDensity === "compact" && getVisualContextClassname("compact-table")) }, getTableRoleProps({
                tableRole,
                totalItemsCount,
                totalColumnsCount,
                ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tableLabel,
                ariaLabelledBy: isLabelledByHeader && headerIdRef.current ? headerIdRef.current : void 0
              })),
              import_react300.default.createElement(thead_default, Object.assign({ ref: theadRef, hidden: stickyHeader, onFocusedComponentChange: (focusId) => {
                var _a2;
                return (_a2 = stickyHeaderRef.current) === null || _a2 === void 0 ? void 0 : _a2.setFocus(focusId);
              } }, theadProps)),
              import_react300.default.createElement("tbody", null, loading || allItems.length === 0 ? import_react300.default.createElement(
                "tr",
                null,
                import_react300.default.createElement(NoDataCell, { totalColumnsCount, hasFooter, loading, loadingText, empty, tableRef: tableRefObject, containerRef: wrapperMeasureRefObject })
              ) : allItems.map((item, rowIndex) => {
                const isFirstRow = rowIndex === 0;
                const isLastRow = rowIndex === allItems.length - 1;
                const sharedCellProps = {
                  isFirstRow,
                  isLastRow,
                  isVisualRefresh,
                  isSelected: hasSelection && isItemSelected(item),
                  isPrevSelected: hasSelection && !isFirstRow && isItemSelected(allItems[rowIndex - 1]),
                  isNextSelected: hasSelection && !isLastRow && isItemSelected(allItems[rowIndex + 1]),
                  isEvenRow: rowIndex % 2 === 0,
                  hasFooter,
                  stripedRows,
                  stickyState,
                  tableRole
                };
                const expandableItemProps = getExpandableItemProps(item);
                return import_react300.default.createElement(
                  "tr",
                  Object.assign({ key: getItemKey(trackBy, item, rowIndex), className: clsx_m_default(styles_css_default53.row, sharedCellProps.isSelected && styles_css_default53["row-selected"]), onFocus: ({ currentTarget }) => {
                    var _a2;
                    if (!currentTarget.contains(getMouseDownTarget())) {
                      (_a2 = stickyHeaderRef.current) === null || _a2 === void 0 ? void 0 : _a2.scrollToRow(currentTarget);
                    }
                  } }, focusMarkers.item, { onClick: onRowClickHandler && onRowClickHandler.bind(null, rowIndex, item), onContextMenu: onRowContextMenuHandler && onRowContextMenuHandler.bind(null, rowIndex, item) }, getTableRowRoleProps(Object.assign({ tableRole, firstIndex, rowIndex }, expandableItemProps))),
                  hasSelection && import_react300.default.createElement(
                    TableTdElement,
                    Object.assign({}, sharedCellProps, { className: clsx_m_default(styles_css_default53["selection-control"]), wrapLines: false, hasSelection: true, columnId: selectionColumnId, colIndex: 0 }),
                    import_react300.default.createElement(SelectionControl, Object.assign({ onFocusDown: moveFocusDown, onFocusUp: moveFocusUp, onShiftToggle: updateShiftToggle }, getItemSelectionProps(item)))
                  ),
                  visibleColumnDefinitions.map((column, colIndex) => {
                    var _a2;
                    const isEditing = cellEditing.checkEditing({ rowIndex, colIndex });
                    const successfulEdit = cellEditing.checkLastSuccessfulEdit({ rowIndex, colIndex });
                    const isEditable = !!column.editConfig && !cellEditing.isLoading;
                    const expandableCellProps = isExpandable && colIndex === 0 ? expandableItemProps : void 0;
                    return import_react300.default.createElement(TableBodyCell, Object.assign({ key: getColumnKey(column, colIndex) }, sharedCellProps, { style: resizableColumns ? {} : {
                      width: column.width,
                      minWidth: column.minWidth,
                      maxWidth: column.maxWidth
                    }, ariaLabels, column, item, wrapLines, isEditable, isEditing, isRowHeader: column.isRowHeader, successfulEdit, onEditStart: () => cellEditing.startEdit({ rowIndex, colIndex }), onEditEnd: (editCancelled) => cellEditing.completeEdit({ rowIndex, colIndex }, editCancelled), submitEdit: cellEditing.submitEdit, columnId: (_a2 = column.id) !== null && _a2 !== void 0 ? _a2 : colIndex, colIndex: colIndex + colIndexOffset }, expandableCellProps));
                  })
                );
              }))
            )
          ),
          resizableColumns && import_react300.default.createElement(ResizeTracker, null)
        ),
        import_react300.default.createElement(sticky_scrollbar_default, { ref: scrollbarRef, wrapperRef: wrapperRefObject, tableRef: tableRefObject, onScroll: handleScroll, hasStickyColumns })
      )
    )
  );
});
var internal_default19 = InternalTable;

// node_modules/@cloudscape-design/components/text-filter/internal.js
var import_react301 = __toESM(require_react());
var InternalTextFilter = import_react301.default.forwardRef((_a, ref) => {
  var { filteringText, filteringAriaLabel, filteringPlaceholder, filteringClearAriaLabel, controlId, ariaLabelledby, ariaDescribedby, disabled, countText, onChange, onDelayedChange, __internalRootRef } = _a, rest = __rest(_a, ["filteringText", "filteringAriaLabel", "filteringPlaceholder", "filteringClearAriaLabel", "controlId", "ariaLabelledby", "ariaDescribedby", "disabled", "countText", "onChange", "onDelayedChange", "__internalRootRef"]);
  const baseProps = getBaseProps(rest);
  const inputRef = (0, import_react301.useRef)(null);
  useForwardFocus(ref, inputRef);
  const searchResultsId = useUniqueId("text-filter-search-results");
  const showResults = filteringText && countText && !disabled;
  return import_react301.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default90.root), ref: __internalRootRef }),
    import_react301.default.createElement(internal_default4, { __inheritFormFieldProps: true, ref: inputRef, className: styles_css_default90.input, type: "search", ariaLabel: filteringAriaLabel, placeholder: filteringPlaceholder, value: filteringText, disabled, controlId, ariaLabelledby, ariaDescribedby: joinStrings(showResults ? searchResultsId : void 0, ariaDescribedby), autoComplete: false, clearAriaLabel: filteringClearAriaLabel, onChange: (event) => fireNonCancelableEvent(onChange, { filteringText: event.detail.value }), __onDelayedInput: (event) => fireNonCancelableEvent(onDelayedChange, { filteringText: event.detail.value }) }),
    showResults ? import_react301.default.createElement(SearchResults, { id: searchResultsId }, countText) : null
  );
});
var internal_default20 = InternalTextFilter;

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/empty-state.js
var import_react302 = __toESM(require_react());
function EmptyState({ title, subtitle, action }) {
  return import_react302.default.createElement(
    InternalBox,
    { textAlign: "center", color: "inherit" },
    import_react302.default.createElement(InternalBox, { variant: "strong", textAlign: "center", color: "inherit" }, title),
    import_react302.default.createElement(InternalBox, { variant: "p", padding: { bottom: "s" }, color: "inherit" }, subtitle),
    action
  );
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/basic-table.js
function getSharedI18Strings(i18n, i18nStrings) {
  return {
    filteringCounterText: i18n("i18nStrings.filteringCounterText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filteringCounterText, (format3) => (count) => format3({ count })),
    labelRefresh: i18n("i18nStrings.labelRefresh", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelRefresh),
    labelsPagination: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsPagination,
    noMatchTitle: i18n("i18nStrings.filteringNoMatches", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filteringNoMatches),
    noMatchSubtitle: i18n("i18nStrings.filteringCantFindMatch", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filteringCantFindMatch),
    clearFilterButtonText: i18n("i18nStrings.clearFilterButtonText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.clearFilterButtonText),
    filteringClearAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelClearFilter
  };
}
function BasicS3Table({ forwardFocusRef, columnDefinitions, fetchData, trackBy, i18nStrings = {}, isVisualRefresh, visibleColumns, isItemDisabled, onSelect }) {
  var _a;
  const [loading, setLoading] = (0, import_react303.useState)(false);
  const [allItems, setAllItems] = (0, import_react303.useState)([]);
  const textFilterRef = (0, import_react303.useRef)(null);
  const onSelectLatest = useStableCallback(onSelect);
  function loadData() {
    setLoading(true);
    fetchData().then((items2) => {
      setAllItems(items2);
      setLoading(false);
    }).catch(() => {
      setLoading(false);
    });
  }
  (0, import_react303.useEffect)(() => {
    loadData();
  }, []);
  useForwardFocus(forwardFocusRef, textFilterRef);
  const { items, filteredItemsCount, collectionProps, filterProps, paginationProps, actions } = useCollection(allItems, {
    selection: { trackBy },
    filtering: {
      empty: i18nStrings.emptyText,
      noMatch: import_react303.default.createElement(EmptyState, { title: i18nStrings.noMatchTitle, subtitle: i18nStrings.noMatchSubtitle, action: import_react303.default.createElement(InternalButton, { onClick: () => actions.setFiltering("") }, i18nStrings.clearFilterButtonText) })
    },
    pagination: {},
    sorting: {}
  });
  const selectedItem = (_a = collectionProps.selectedItems) === null || _a === void 0 ? void 0 : _a[0];
  (0, import_react303.useEffect)(() => {
    onSelectLatest(selectedItem);
  }, [selectedItem, onSelectLatest]);
  return import_react303.default.createElement(internal_default19, Object.assign({ variant: isVisualRefresh ? "borderless" : "container" }, collectionProps, { header: import_react303.default.createElement(InternalHeader, { variant: isVisualRefresh ? "h3" : "h2", headingTagOverride: "h3", actions: import_react303.default.createElement(InternalButton, { iconName: "refresh", ariaLabel: i18nStrings.labelRefresh, onClick: loadData }), counter: selectedItem ? `(1/${allItems.length})` : `(${allItems.length})` }, i18nStrings.header), trackBy, filter: import_react303.default.createElement(internal_default20, Object.assign({}, filterProps, { ref: textFilterRef, filteringAriaLabel: i18nStrings.filteringAriaLabel, filteringClearAriaLabel: i18nStrings.filteringClearAriaLabel, filteringPlaceholder: i18nStrings.filteringPlaceholder, countText: i18nStrings.filteringCounterText ? i18nStrings.filteringCounterText(filteredItemsCount) : "" })), pagination: import_react303.default.createElement(InternalPagination, Object.assign({}, paginationProps, { ariaLabels: i18nStrings.labelsPagination })), selectionType: "single", ariaLabels: i18nStrings.selectionLabels, loading, loadingText: i18nStrings.loadingText, items, visibleColumns, isItemDisabled, columnDefinitions, enableKeyboardNavigation: true }));
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/buckets-table.js
function BucketsTable({ forwardFocusRef, i18nStrings, isVisualRefresh, isItemDisabled, selectableItemsTypes, fetchData, visibleColumns, onDrilldown, onSelect }) {
  var _a, _b, _c, _d;
  const i18n = useInternalI18n("s3-resource-selector");
  return import_react304.default.createElement(BasicS3Table, { forwardFocusRef, trackBy: "Name", fetchData, visibleColumns, isItemDisabled: isItemDisabled || (() => !includes(selectableItemsTypes, "buckets")), i18nStrings: Object.assign(Object.assign({}, getSharedI18Strings(i18n, i18nStrings)), { header: i18n("i18nStrings.selectionBuckets", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBuckets), loadingText: i18n("i18nStrings.selectionBucketsLoading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBucketsLoading), filteringAriaLabel: (_a = i18n("i18nStrings.labelFiltering", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelFiltering, (format3) => (itemsType) => format3({ itemsType }))) === null || _a === void 0 ? void 0 : _a((_b = i18n("i18nStrings.selectionBuckets", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBuckets)) !== null && _b !== void 0 ? _b : ""), filteringPlaceholder: i18n("i18nStrings.selectionBucketsSearchPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBucketsSearchPlaceholder), emptyText: i18n("i18nStrings.selectionBucketsNoItems", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBucketsNoItems), selectionLabels: Object.assign(Object.assign({}, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsBucketsSelection), { selectionGroupLabel: i18n("i18nStrings.labelsBucketsSelection.selectionGroupLabel", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsBucketsSelection) === null || _c === void 0 ? void 0 : _c.selectionGroupLabel), itemSelectionLabel: i18n("i18nStrings.labelsBucketsSelection.itemSelectionLabel", (_d = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsBucketsSelection) === null || _d === void 0 ? void 0 : _d.itemSelectionLabel, (format3) => (data, item) => {
    var _a2;
    return format3({ item__Name: (_a2 = item.Name) !== null && _a2 !== void 0 ? _a2 : "" });
  }) }) }), isVisualRefresh, columnDefinitions: [
    {
      id: "Name",
      header: i18n("i18nStrings.columnBucketName", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketName),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnBucketName", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketName)),
      sortingField: "Name",
      cell: (item) => {
        const isClickable = includes(selectableItemsTypes, "objects") || includes(selectableItemsTypes, "versions");
        return isClickable ? import_react304.default.createElement(internal_default3, { onFollow: () => item.Name && onDrilldown(item.Name), variant: "link" }, item.Name) : item.Name;
      },
      minWidth: "250px"
    },
    {
      id: "CreationDate",
      header: i18n("i18nStrings.columnBucketCreationDate", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketCreationDate),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnBucketCreationDate", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketCreationDate)),
      sortingComparator: (a2, b) => compareDates(a2.CreationDate, b.CreationDate),
      cell: (item) => formatDefault(item.CreationDate)
    },
    {
      id: "Region",
      header: i18n("i18nStrings.columnBucketRegion", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketRegion),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnBucketRegion", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketRegion)),
      sortingField: "Region",
      cell: (item) => formatDefault(item.Region),
      minWidth: "150px"
    }
  ], onSelect: (item) => {
    var _a2;
    return onSelect((_a2 = item === null || item === void 0 ? void 0 : item.Name) !== null && _a2 !== void 0 ? _a2 : "");
  } });
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/objects-table.js
var import_react305 = __toESM(require_react());

// node_modules/@cloudscape-design/components/s3-resource-selector/utils.js
function joinObjectPath(segments) {
  return segments.reduce((prev, next) => {
    if (prev && prev[prev.length - 1] !== "/") {
      prev = prev + "/";
    }
    return prev + next;
  }, "");
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/objects-table.js
function ObjectsTable({ forwardFocusRef, pathSegments, i18nStrings, isVisualRefresh, isItemDisabled, selectableItemsTypes, fetchData, visibleColumns, onDrilldown, onSelect }) {
  var _a, _b, _c, _d;
  const i18n = useInternalI18n("s3-resource-selector");
  return import_react305.default.createElement(BasicS3Table, {
    // remount fresh component every we change the path to reset the inner state (e.g. selection/filtering)
    key: pathSegments.join("/"),
    forwardFocusRef,
    trackBy: "Key",
    fetchData: () => {
      const [bucketName, ...rest] = pathSegments;
      return fetchData(bucketName, joinObjectPath(rest));
    },
    i18nStrings: Object.assign(Object.assign({}, getSharedI18Strings(i18n, i18nStrings)), { header: i18n("i18nStrings.selectionObjects", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionObjects), loadingText: i18n("i18nStrings.selectionObjectsLoading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionObjectsLoading), filteringAriaLabel: (_a = i18n("i18nStrings.labelFiltering", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelFiltering, (format3) => (itemsType) => format3({ itemsType }))) === null || _a === void 0 ? void 0 : _a((_b = i18n("i18nStrings.selectionObjects", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionObjects)) !== null && _b !== void 0 ? _b : ""), filteringPlaceholder: i18n("i18nStrings.selectionObjectsSearchPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionObjectsSearchPlaceholder), emptyText: i18n("i18nStrings.selectionObjectsNoItems", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionObjectsNoItems), selectionLabels: Object.assign(Object.assign({}, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsObjectsSelection), { selectionGroupLabel: i18n("i18nStrings.labelsObjectsSelection.selectionGroupLabel", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsObjectsSelection) === null || _c === void 0 ? void 0 : _c.selectionGroupLabel), itemSelectionLabel: i18n("i18nStrings.labelsObjectsSelection.itemSelectionLabel", (_d = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsObjectsSelection) === null || _d === void 0 ? void 0 : _d.itemSelectionLabel, (format3) => (data, item) => {
      var _a2;
      return format3({ item__Key: (_a2 = item.Key) !== null && _a2 !== void 0 ? _a2 : "" });
    }) }) }),
    isVisualRefresh,
    visibleColumns,
    isItemDisabled: isItemDisabled || (() => !includes(selectableItemsTypes, "objects")),
    columnDefinitions: [
      {
        id: "Key",
        header: i18n("i18nStrings.columnObjectKey", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectKey),
        ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnObjectKey", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectKey)),
        sortingField: "Key",
        cell: (item) => {
          const isClickable = item.IsFolder || includes(selectableItemsTypes, "versions");
          return import_react305.default.createElement(
            import_react305.default.Fragment,
            null,
            import_react305.default.createElement(internal_default, { name: item.IsFolder ? "folder" : "file" }),
            " ",
            isClickable ? import_react305.default.createElement(internal_default3, { onFollow: () => item.Key && onDrilldown(item), variant: "link" }, item.Key) : item.Key
          );
        },
        minWidth: "250px"
      },
      {
        id: "LastModified",
        header: i18n("i18nStrings.columnObjectLastModified", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectLastModified),
        ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnObjectLastModified", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectLastModified)),
        sortingComparator: (a2, b) => compareDates(a2.LastModified, b.LastModified),
        cell: (item) => formatDefault(item.LastModified)
      },
      {
        id: "Size",
        header: i18n("i18nStrings.columnObjectSize", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectSize),
        ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnObjectSize", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectSize)),
        sortingField: "Size",
        cell: (item) => formatSize(item.Size)
      }
    ],
    onSelect: (item) => {
      var _a2;
      return onSelect((_a2 = item === null || item === void 0 ? void 0 : item.Key) !== null && _a2 !== void 0 ? _a2 : "");
    }
  });
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/versions-table.js
var import_react306 = __toESM(require_react());
function VersionsTable({ forwardFocusRef, pathSegments, i18nStrings, isVisualRefresh, isItemDisabled, fetchData, visibleColumns, onSelect }) {
  var _a, _b, _c, _d;
  const i18n = useInternalI18n("s3-resource-selector");
  return import_react306.default.createElement(BasicS3Table, { forwardFocusRef, trackBy: "VersionId", fetchData: () => {
    const [bucketName, ...rest] = pathSegments;
    return fetchData(bucketName, joinObjectPath(rest));
  }, i18nStrings: Object.assign(Object.assign({}, getSharedI18Strings(i18n, i18nStrings)), { header: i18n("i18nStrings.selectionVersions", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersions), loadingText: i18n("i18nStrings.selectionVersionsLoading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersionsLoading), filteringAriaLabel: (_a = i18n("i18nStrings.labelFiltering", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelFiltering, (format3) => (itemsType) => format3({ itemsType }))) === null || _a === void 0 ? void 0 : _a((_b = i18n("i18nStrings.selectionVersions", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersions)) !== null && _b !== void 0 ? _b : ""), filteringPlaceholder: i18n("i18nStrings.selectionVersionsSearchPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersionsSearchPlaceholder), emptyText: i18n("i18nStrings.selectionVersionsNoItems", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersionsNoItems), selectionLabels: Object.assign(Object.assign({}, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsVersionsSelection), { selectionGroupLabel: i18n("i18nStrings.labelsVersionsSelection.selectionGroupLabel", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsVersionsSelection) === null || _c === void 0 ? void 0 : _c.selectionGroupLabel), itemSelectionLabel: i18n("i18nStrings.labelsVersionsSelection.itemSelectionLabel", (_d = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsVersionsSelection) === null || _d === void 0 ? void 0 : _d.itemSelectionLabel, (format3) => (data, item) => {
    var _a2;
    return format3({ item__VersionId: (_a2 = item.VersionId) !== null && _a2 !== void 0 ? _a2 : "" });
  }) }) }), isVisualRefresh, visibleColumns, isItemDisabled, columnDefinitions: [
    {
      id: "ID",
      header: i18n("i18nStrings.columnVersionID", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionID),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnVersionID", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionID)),
      sortingField: "VersionId",
      cell: (item) => item.VersionId,
      minWidth: "250px"
    },
    {
      id: "LastModified",
      header: i18n("i18nStrings.columnVersionLastModified", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionLastModified),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnVersionLastModified", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionLastModified)),
      sortingComparator: (a2, b) => compareDates(a2.LastModified, b.LastModified),
      cell: (item) => formatDefault(item.LastModified)
    },
    {
      id: "Size",
      header: i18n("i18nStrings.columnVersionSize", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionSize),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnVersionSize", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionSize)),
      sortingField: "Size",
      cell: (item) => formatSize(item.Size)
    }
  ], onSelect: (item) => {
    var _a2;
    return onSelect((_a2 = item === null || item === void 0 ? void 0 : item.VersionId) !== null && _a2 !== void 0 ? _a2 : "");
  } });
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/styles.scoped.css";
var styles_css_default97 = {
  "modal-actions": "awsui_modal-actions_12hyz_1p88p_5",
  "submit-button": "awsui_submit-button_12hyz_1p88p_9"
};

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/index.js
function assertNever(_value) {
  return null;
}
var initialBrowseState = {
  selectedItem: null,
  currentView: "buckets",
  breadcrumbs: []
};
function s3BrowseReducer(state, action) {
  switch (action.type) {
    case "browse-buckets":
      return initialBrowseState;
    case "browse-objects":
      return {
        selectedItem: null,
        currentView: "objects",
        breadcrumbs: action.breadcrumbs
      };
    case "browse-versions":
      return {
        selectedItem: null,
        currentView: "versions",
        breadcrumbs: action.breadcrumbs
      };
    case "select-item":
      return Object.assign(Object.assign({}, state), { selectedItem: action.item });
    default:
      assertNever(action);
  }
  return state;
}
function createResourceInfo({ currentView, breadcrumbs, selectedItem }) {
  const prefix = "s3://";
  if (currentView === "versions") {
    return { uri: prefix + joinObjectPath(breadcrumbs), versionId: selectedItem !== null && selectedItem !== void 0 ? selectedItem : void 0 };
  }
  return { uri: prefix + joinObjectPath([...breadcrumbs, selectedItem]) };
}
function S3Modal({ i18nStrings, alert, selectableItemsTypes, fetchBuckets, bucketsVisibleColumns, bucketsIsItemDisabled, fetchObjects, objectsVisibleColumns, objectsIsItemDisabled, fetchVersions, versionsVisibleColumns, versionsIsItemDisabled, getModalRoot, removeModalRoot, onSubmit, onDismiss }) {
  var _a;
  const [{ currentView, breadcrumbs, selectedItem }, dispatch] = (0, import_react307.useReducer)(s3BrowseReducer, initialBrowseState);
  const forwardFocusRef = (0, import_react307.useRef)(null);
  const i18n = useInternalI18n("s3-resource-selector");
  const isVisualRefresh = useVisualRefresh();
  useEffectOnUpdate(() => {
    var _a2;
    (_a2 = forwardFocusRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
  }, [breadcrumbs]);
  return import_react307.default.createElement(
    "div",
    null,
    import_react307.default.createElement(
      InternalModal,
      { visible: true, size: "max", getModalRoot, removeModalRoot, closeAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelModalDismiss, onDismiss, header: i18n("i18nStrings.modalTitle", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalTitle), footer: import_react307.default.createElement(
        InternalSpaceBetween,
        { className: styles_css_default97["modal-actions"], size: "xs", direction: "horizontal" },
        import_react307.default.createElement(InternalButton, { variant: "link", formAction: "none", onClick: onDismiss }, i18n("i18nStrings.modalCancelButton", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalCancelButton)),
        import_react307.default.createElement(InternalButton, { variant: "primary", className: styles_css_default97["submit-button"], disabled: !selectedItem, formAction: "none", onClick: () => onSubmit(createResourceInfo({ currentView, breadcrumbs, selectedItem })) }, i18n("i18nStrings.modalSubmitButton", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalSubmitButton))
      ) },
      import_react307.default.createElement(
        InternalSpaceBetween,
        { size: isVisualRefresh ? "xxs" : "xs" },
        import_react307.default.createElement(InternalBreadcrumbGroup, { ariaLabel: i18n("i18nStrings.labelBreadcrumbs", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelBreadcrumbs), expandAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelExpandBreadcrumbs, onFollow: (event) => {
          event.preventDefault();
          event.detail.item.meta.onClick();
        }, items: [
          {
            text: (_a = i18n("i18nStrings.modalBreadcrumbRootItem", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalBreadcrumbRootItem)) !== null && _a !== void 0 ? _a : "",
            href: "",
            meta: { onClick: () => dispatch({ type: "browse-buckets" }) }
          },
          ...breadcrumbs.map((segment, index) => ({
            text: segment,
            href: "",
            meta: {
              onClick: () => dispatch({
                type: "browse-objects",
                breadcrumbs: breadcrumbs.slice(0, index + 1)
              })
            }
          }))
        ] }),
        alert,
        currentView === "buckets" ? import_react307.default.createElement(BucketsTable, { forwardFocusRef, fetchData: fetchBuckets, visibleColumns: bucketsVisibleColumns, isItemDisabled: bucketsIsItemDisabled, selectableItemsTypes, i18nStrings, isVisualRefresh, onDrilldown: (path2) => dispatch({
          type: "browse-objects",
          breadcrumbs: [path2]
        }), onSelect: (item) => dispatch({ type: "select-item", item }) }) : currentView === "objects" ? import_react307.default.createElement(ObjectsTable, { forwardFocusRef, pathSegments: breadcrumbs, fetchData: fetchObjects, visibleColumns: objectsVisibleColumns, isItemDisabled: objectsIsItemDisabled, selectableItemsTypes, i18nStrings, isVisualRefresh, onDrilldown: (item) => {
          dispatch({
            type: item.IsFolder ? "browse-objects" : "browse-versions",
            breadcrumbs: [...breadcrumbs, item.Key]
          });
        }, onSelect: (item) => dispatch({ type: "select-item", item }) }) : currentView === "versions" ? import_react307.default.createElement(VersionsTable, { forwardFocusRef, pathSegments: breadcrumbs, fetchData: fetchVersions, visibleColumns: versionsVisibleColumns, isItemDisabled: versionsIsItemDisabled, i18nStrings, isVisualRefresh, onSelect: (item) => dispatch({ type: "select-item", item }) }) : assertNever(currentView)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/s3-resource-selector/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/s3-resource-selector/styles.scoped.css";
var styles_css_default98 = {
  "root": "awsui_root_1u0yw_rfo7y_5",
  "alert": "awsui_alert_1u0yw_rfo7y_9"
};

// node_modules/@cloudscape-design/components/s3-resource-selector/index.js
var S3ResourceSelector = import_react308.default.forwardRef((_a, ref) => {
  var { i18nStrings, inputPlaceholder, alert, resource, viewHref, invalid, selectableItemsTypes = [], inputAriaDescribedby, bucketsVisibleColumns = ["Name", "CreationDate"], bucketsIsItemDisabled, fetchBuckets, fetchObjects, objectsVisibleColumns = ["Key", "LastModified", "Size"], objectsIsItemDisabled, fetchVersions, versionsVisibleColumns = ["ID", "LastModified", "Size"], versionsIsItemDisabled, onChange, ariaLabel, getModalRoot, removeModalRoot } = _a, rest = __rest(_a, ["i18nStrings", "inputPlaceholder", "alert", "resource", "viewHref", "invalid", "selectableItemsTypes", "inputAriaDescribedby", "bucketsVisibleColumns", "bucketsIsItemDisabled", "fetchBuckets", "fetchObjects", "objectsVisibleColumns", "objectsIsItemDisabled", "fetchVersions", "versionsVisibleColumns", "versionsIsItemDisabled", "onChange", "ariaLabel", "getModalRoot", "removeModalRoot"]);
  checkSafeUrl("S3ResourceSelector", viewHref);
  const { __internalRootRef } = useBaseComponent("S3ResourceSelector");
  const [modalOpen, setModalOpen] = (0, import_react308.useState)(false);
  const inContextRef = (0, import_react308.useRef)(null);
  const modalWasSubmitted = (0, import_react308.useRef)(false);
  useForwardFocus(ref, inContextRef);
  const { ariaLabelledby, ariaDescribedby } = useFormFieldContext(rest);
  (0, import_react308.useEffect)(() => {
    var _a2;
    if (!modalOpen && modalWasSubmitted.current) {
      modalWasSubmitted.current = false;
      (_a2 = inContextRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  }, [modalOpen]);
  const baseProps = getBaseProps(rest);
  const modalProps = {
    alert,
    i18nStrings,
    fetchBuckets,
    selectableItemsTypes,
    bucketsVisibleColumns,
    bucketsIsItemDisabled,
    fetchObjects,
    objectsVisibleColumns,
    objectsIsItemDisabled,
    fetchVersions,
    versionsVisibleColumns,
    versionsIsItemDisabled,
    getModalRoot,
    removeModalRoot,
    onSubmit: (resource2) => {
      fireNonCancelableEvent(onChange, { resource: resource2 });
      setModalOpen(false);
      modalWasSubmitted.current = true;
    },
    onDismiss: () => setModalOpen(false)
  };
  return import_react308.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default98.root, baseProps.className), ref: __internalRootRef, role: "group", "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby, "aria-label": ariaLabel }),
    import_react308.default.createElement(S3InContext, { ref: inContextRef, selectableItemsTypes, i18nStrings, inputPlaceholder, resource, viewHref, invalid, inputAriaDescribedby, fetchVersions, onBrowse: () => setModalOpen(true), onChange: (resource2, errorText) => fireNonCancelableEvent(onChange, { resource: resource2, errorText }) }),
    !modalOpen && alert && import_react308.default.createElement(InternalBox, { className: styles_css_default98.alert, margin: { top: "s" } }, alert),
    modalOpen && import_react308.default.createElement(S3Modal, Object.assign({}, modalProps))
  );
});
applyDisplayName(S3ResourceSelector, "S3ResourceSelector");
var s3_resource_selector_default = S3ResourceSelector;

// node_modules/@cloudscape-design/components/segmented-control/index.js
var import_react309 = __toESM(require_react());
function SegmentedControl(props) {
  const baseComponentProps = useBaseComponent("SegmentedControl");
  return import_react309.default.createElement(InternalSegmentedControl2, Object.assign({}, props, baseComponentProps));
}
applyDisplayName(SegmentedControl, "SegmentedControl");

// node_modules/@cloudscape-design/components/side-navigation/index.js
var import_react311 = __toESM(require_react());

// node_modules/@cloudscape-design/components/side-navigation/internal.js
var import_react310 = __toESM(require_react());

// node_modules/@cloudscape-design/components/side-navigation/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/side-navigation/styles.scoped.css";
var styles_css_default99 = {
  "root": "awsui_root_l0dv0_s3klw_99",
  "header": "awsui_header_l0dv0_s3klw_136",
  "header-link": "awsui_header-link_l0dv0_s3klw_149",
  "header-link--has-logo": "awsui_header-link--has-logo_l0dv0_s3klw_159",
  "header-link-text": "awsui_header-link-text_l0dv0_s3klw_159",
  "header-logo": "awsui_header-logo_l0dv0_s3klw_164",
  "header-logo--stretched": "awsui_header-logo--stretched_l0dv0_s3klw_170",
  "list-container": "awsui_list-container_l0dv0_s3klw_175",
  "list": "awsui_list_l0dv0_s3klw_175",
  "list-variant-root": "awsui_list-variant-root_l0dv0_s3klw_187",
  "list-variant-root--last": "awsui_list-variant-root--last_l0dv0_s3klw_194",
  "list-variant-expandable-link-group": "awsui_list-variant-expandable-link-group_l0dv0_s3klw_198",
  "list-item": "awsui_list-item_l0dv0_s3klw_202",
  "section": "awsui_section_l0dv0_s3klw_210",
  "expandable-link-group": "awsui_expandable-link-group_l0dv0_s3klw_211",
  "section--no-ident": "awsui_section--no-ident_l0dv0_s3klw_214",
  "expandable-link-group--no-ident": "awsui_expandable-link-group--no-ident_l0dv0_s3klw_215",
  "refresh": "awsui_refresh_l0dv0_s3klw_223",
  "list-variant-section-group": "awsui_list-variant-section-group_l0dv0_s3klw_231",
  "section-group": "awsui_section-group_l0dv0_s3klw_238",
  "section-group-title": "awsui_section-group-title_l0dv0_s3klw_249",
  "link": "awsui_link_l0dv0_s3klw_253",
  "link-active": "awsui_link-active_l0dv0_s3klw_262",
  "info": "awsui_info_l0dv0_s3klw_299",
  "external-icon": "awsui_external-icon_l0dv0_s3klw_303",
  "divider": "awsui_divider_l0dv0_s3klw_307",
  "divider-default": "awsui_divider-default_l0dv0_s3klw_313",
  "divider-header": "awsui_divider-header_l0dv0_s3klw_318"
};

// node_modules/@cloudscape-design/components/side-navigation/util.js
function hasActiveLink(items, activeHref) {
  for (const item of items) {
    if ((item.type === "link" || item.type === "link-group" || item.type === "expandable-link-group") && item.href === activeHref) {
      return true;
    }
    if ((item.type === "section" || item.type === "link-group" || item.type === "expandable-link-group") && hasActiveLink(item.items, activeHref)) {
      return true;
    }
  }
  return false;
}
function generateExpandableItemsMapping(items, mapping = /* @__PURE__ */ new WeakMap(), expandableParents = []) {
  items.forEach((item) => {
    const nextLevelParents = expandableParents.slice();
    if (item.type === "section" || item.type === "expandable-link-group") {
      mapping.set(item, expandableParents);
      nextLevelParents.unshift(item);
    }
    if (item.type === "section" || item.type === "link-group" || item.type === "expandable-link-group") {
      generateExpandableItemsMapping(item.items, mapping, nextLevelParents);
    }
  });
  return mapping;
}
function checkDuplicateHrefs(items) {
  const hrefs = /* @__PURE__ */ new Set();
  const queue = items.slice();
  while (queue.length > 0) {
    const item = queue.shift();
    if ("href" in item) {
      if (hrefs.has(item.href)) {
        warnOnce("SideNavigation", `duplicate href in "${item.text}": ${item.href}`);
      }
      hrefs.add(item.href);
    }
    if ("items" in item) {
      queue.push(...item.items);
    }
  }
}

// node_modules/@cloudscape-design/components/side-navigation/internal.js
function Header3({ definition, activeHref, fireFollow }) {
  checkSafeUrl("SideNavigation", definition.href);
  const onClick = (0, import_react310.useCallback)((event) => {
    if (isPlainLeftClick(event)) {
      fireFollow(definition, event);
    }
  }, [fireFollow, definition]);
  return import_react310.default.createElement(
    import_react310.default.Fragment,
    null,
    import_react310.default.createElement(
      "h2",
      { className: styles_css_default99.header },
      import_react310.default.createElement(
        "a",
        { href: definition.href, className: clsx_m_default(styles_css_default99["header-link"], { [styles_css_default99["header-link--has-logo"]]: !!definition.logo }), "aria-current": definition.href === activeHref ? "page" : void 0, onClick },
        definition.logo && import_react310.default.createElement("img", Object.assign({ className: clsx_m_default(styles_css_default99["header-logo"], {
          [styles_css_default99["header-logo--stretched"]]: !definition.text
        }) }, definition.logo)),
        import_react310.default.createElement("span", { className: styles_css_default99["header-link-text"] }, definition.text)
      )
    ),
    import_react310.default.createElement(Divider3, { isPresentational: true, variant: "header" })
  );
}
function NavigationItemsList({ items, variant, activeHref, fireChange, fireFollow }) {
  const lists = [];
  let currentListIndex = 0;
  lists[currentListIndex] = {
    listVariant: variant,
    items: []
  };
  items.forEach((item, index) => {
    var _a, _b, _c, _d, _e;
    const itemid = index + 1;
    switch (item.type) {
      case "divider": {
        const dividerIndex = lists.length;
        lists[dividerIndex] = {
          element: import_react310.default.createElement(
            "div",
            { "data-itemid": `item-${itemid}` },
            import_react310.default.createElement(Divider3, { variant: "default" })
          )
        };
        currentListIndex = lists.length;
        lists[currentListIndex] = {
          listVariant: variant,
          items: []
        };
        return;
      }
      case "link": {
        (_a = lists[currentListIndex].items) === null || _a === void 0 ? void 0 : _a.push({
          element: import_react310.default.createElement(
            "li",
            { key: index, "data-itemid": `item-${itemid}`, className: styles_css_default99["list-item"] },
            import_react310.default.createElement(Link2, { definition: item, activeHref, fireChange, fireFollow })
          )
        });
        return;
      }
      case "section": {
        (_b = lists[currentListIndex].items) === null || _b === void 0 ? void 0 : _b.push({
          element: import_react310.default.createElement(
            "li",
            { key: index, "data-itemid": `item-${itemid}`, className: styles_css_default99["list-item"] },
            import_react310.default.createElement(Section, { definition: item, activeHref, variant, fireChange, fireFollow })
          )
        });
        return;
      }
      case "section-group": {
        (_c = lists[currentListIndex].items) === null || _c === void 0 ? void 0 : _c.push({
          element: import_react310.default.createElement(
            "li",
            { key: index, "data-itemid": `item-${itemid}`, className: styles_css_default99["list-item"] },
            import_react310.default.createElement(SectionGroup, { definition: item, activeHref, fireChange, fireFollow })
          )
        });
        return;
      }
      case "link-group": {
        (_d = lists[currentListIndex].items) === null || _d === void 0 ? void 0 : _d.push({
          element: import_react310.default.createElement(
            "li",
            { key: index, "data-itemid": `item-${itemid}`, className: styles_css_default99["list-item"] },
            import_react310.default.createElement(LinkGroup, { definition: item, activeHref, fireChange, fireFollow })
          )
        });
        return;
      }
      case "expandable-link-group": {
        (_e = lists[currentListIndex].items) === null || _e === void 0 ? void 0 : _e.push({
          element: import_react310.default.createElement(
            "li",
            { key: index, "data-itemid": `item-${itemid}`, className: styles_css_default99["list-item"] },
            import_react310.default.createElement(ExpandableLinkGroup, { definition: item, activeHref, fireChange, fireFollow, variant })
          )
        });
        return;
      }
    }
  });
  const lastListIndex = lists.length - 1;
  return import_react310.default.createElement(import_react310.default.Fragment, null, lists.map((list, index) => {
    if (!list.items || list.items.length === 0) {
      return import_react310.default.createElement("div", { key: `hr-${index}`, className: clsx_m_default(styles_css_default99.list, styles_css_default99[`list-variant-${variant}`], {
        [styles_css_default99["list-variant-root--last"]]: list.listVariant === "root" && index === lastListIndex
      }) }, list.element);
    } else {
      return import_react310.default.createElement("ul", { key: `list-${index}`, className: clsx_m_default(styles_css_default99.list, styles_css_default99[`list-variant-${list.listVariant}`], {
        [styles_css_default99["list-variant-root--last"]]: list.listVariant === "root" && index === lastListIndex
      }) }, list.items.map((item) => item.element));
    }
  }));
}
function Divider3({ variant = "default", isPresentational = false }) {
  return import_react310.default.createElement("hr", { className: clsx_m_default(styles_css_default99.divider, styles_css_default99[`divider-${variant}`]), role: isPresentational ? "presentation" : void 0 });
}
function Link2({ definition, expanded, activeHref, fireFollow }) {
  checkSafeUrl("SideNavigation", definition.href);
  const isActive = definition.href === activeHref;
  const onClick = (0, import_react310.useCallback)((event) => {
    if (isPlainLeftClick(event)) {
      fireFollow(definition, event);
    }
  }, [fireFollow, definition]);
  return import_react310.default.createElement(
    import_react310.default.Fragment,
    null,
    import_react310.default.createElement(
      "a",
      { href: definition.href, className: clsx_m_default(styles_css_default99.link, { [styles_css_default99["link-active"]]: isActive }), target: definition.external ? "_blank" : void 0, rel: definition.external ? "noopener noreferrer" : void 0, "aria-expanded": expanded, "aria-current": definition.href === activeHref ? "page" : void 0, onClick },
      definition.text,
      definition.external && import_react310.default.createElement(
        "span",
        { "aria-label": definition.externalIconAriaLabel, role: definition.externalIconAriaLabel ? "img" : void 0 },
        import_react310.default.createElement(internal_default, { name: "external", className: styles_css_default99["external-icon"] })
      )
    ),
    definition.info && import_react310.default.createElement("span", { className: styles_css_default99.info }, definition.info)
  );
}
function Section({ definition, activeHref, fireFollow, fireChange, variant }) {
  var _a;
  const [expanded, setExpanded] = (0, import_react310.useState)((_a = definition.defaultExpanded) !== null && _a !== void 0 ? _a : true);
  const isVisualRefresh = useVisualRefresh();
  const onExpandedChange = (0, import_react310.useCallback)((e) => {
    fireChange(definition, e.detail.expanded);
    setExpanded(e.detail.expanded);
  }, [definition, fireChange]);
  (0, import_react310.useEffect)(() => {
    var _a2;
    setExpanded((_a2 = definition.defaultExpanded) !== null && _a2 !== void 0 ? _a2 : true);
  }, [definition]);
  return import_react310.default.createElement(
    InternalExpandableSection,
    { variant: "footer", expanded, onChange: onExpandedChange, className: clsx_m_default(styles_css_default99.section, variant === "section-group" && styles_css_default99["section--no-ident"], isVisualRefresh && styles_css_default99.refresh), headerText: definition.text },
    import_react310.default.createElement(NavigationItemsList, { variant: "section", items: definition.items, fireFollow, fireChange, activeHref })
  );
}
function SectionGroup({ definition, activeHref, fireFollow, fireChange }) {
  return import_react310.default.createElement(
    "div",
    { className: styles_css_default99["section-group"] },
    import_react310.default.createElement(InternalBox, { className: styles_css_default99["section-group-title"], variant: "h3" }, definition.title),
    import_react310.default.createElement(NavigationItemsList, { variant: "section-group", items: definition.items, fireFollow, fireChange, activeHref })
  );
}
function LinkGroup({ definition, activeHref, fireFollow, fireChange }) {
  checkSafeUrl("SideNavigation", definition.href);
  return import_react310.default.createElement(
    import_react310.default.Fragment,
    null,
    import_react310.default.createElement(Link2, { definition: { type: "link", href: definition.href, text: definition.text, info: definition.info }, fireFollow: (_, event) => fireFollow(definition, event), fireChange, activeHref }),
    import_react310.default.createElement(NavigationItemsList, { variant: "link-group", items: definition.items, fireFollow, fireChange, activeHref })
  );
}
function ExpandableLinkGroup({ definition, fireFollow, fireChange, activeHref, variant }) {
  const containsActiveLink = (0, import_react310.useMemo)(() => {
    return activeHref ? hasActiveLink(definition.items, activeHref) : false;
  }, [activeHref, definition.items]);
  const [expanded, setExpanded] = (0, import_react310.useState)(() => {
    var _a;
    return (_a = definition.defaultExpanded) !== null && _a !== void 0 ? _a : definition.href === activeHref || containsActiveLink;
  });
  const [userExpanded, setUserExpanded] = (0, import_react310.useState)();
  (0, import_react310.useEffect)(() => setUserExpanded(void 0), [definition]);
  (0, import_react310.useEffect)(() => {
    setExpanded(definition.href === activeHref || containsActiveLink);
  }, [definition.href, containsActiveLink, activeHref]);
  (0, import_react310.useEffect)(() => {
    if (definition.defaultExpanded !== void 0) {
      setExpanded(definition.defaultExpanded);
    }
  }, [definition]);
  const onExpandedChange = (0, import_react310.useCallback)((e) => {
    fireChange(definition, e.detail.expanded);
    setUserExpanded(e.detail.expanded);
  }, [definition, fireChange]);
  const onHeaderFollow = (_, event) => {
    fireFollow(definition, event);
    setUserExpanded(true);
    if (!expanded) {
      fireChange(definition, true);
    }
  };
  return import_react310.default.createElement(
    InternalExpandableSection,
    { className: clsx_m_default(styles_css_default99["expandable-link-group"], variant === "section-group" && styles_css_default99["expandable-link-group--no-ident"]), variant: "navigation", expanded: userExpanded !== null && userExpanded !== void 0 ? userExpanded : expanded, onChange: onExpandedChange, headerText: import_react310.default.createElement(Link2, { definition: { type: "link", href: definition.href, text: definition.text }, expanded: userExpanded !== null && userExpanded !== void 0 ? userExpanded : expanded, fireFollow: onHeaderFollow, fireChange, activeHref }) },
    import_react310.default.createElement(NavigationItemsList, { variant: "expandable-link-group", items: definition.items, fireFollow, fireChange, activeHref })
  );
}

// node_modules/@cloudscape-design/components/side-navigation/index.js
function SideNavigation(_a) {
  var { header, activeHref, items = [], onFollow, onChange } = _a, props = __rest(_a, ["header", "activeHref", "items", "onFollow", "onChange"]);
  const { __internalRootRef } = useBaseComponent("SideNavigation");
  const baseProps = getBaseProps(props);
  const parentMap = (0, import_react311.useMemo)(() => generateExpandableItemsMapping(items), [items]);
  if (isDevelopment) {
    (0, import_react311.useEffect)(() => checkDuplicateHrefs(items), [items]);
  }
  const onChangeHandler = (0, import_react311.useCallback)((item, expanded) => {
    fireNonCancelableEvent(onChange, { item, expanded, expandableParents: parentMap.get(item) });
  }, [onChange, parentMap]);
  const onFollowHandler = (0, import_react311.useCallback)((item, sourceEvent) => {
    fireCancelableEvent(onFollow, item, sourceEvent);
  }, [onFollow]);
  return import_react311.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default99.root, baseProps.className), ref: __internalRootRef }),
    header && import_react311.default.createElement(Header3, { definition: header, activeHref, fireChange: onChangeHandler, fireFollow: onFollowHandler }),
    items && import_react311.default.createElement(
      "div",
      { className: styles_css_default99["list-container"] },
      import_react311.default.createElement(NavigationItemsList, { variant: "root", items, fireFollow: onFollowHandler, fireChange: onChangeHandler, activeHref })
    )
  );
}
applyDisplayName(SideNavigation, "SideNavigation");

// node_modules/@cloudscape-design/components/spinner/index.js
var import_react312 = __toESM(require_react());
function Spinner(_a) {
  var { size = "normal", variant = "normal" } = _a, props = __rest(_a, ["size", "variant"]);
  const baseComponentProps = useBaseComponent("Spinner", {
    props: { size, variant }
  });
  return import_react312.default.createElement(InternalSpinner, Object.assign({ size, variant }, props, baseComponentProps));
}
applyDisplayName(Spinner, "Spinner");

// node_modules/@cloudscape-design/components/split-panel/index.js
var import_react324 = __toESM(require_react());

// node_modules/@cloudscape-design/components/split-panel/widget.js
var import_react323 = __toESM(require_react());

// node_modules/@cloudscape-design/components/split-panel/implementation.js
var import_react322 = __toESM(require_react());

// node_modules/@cloudscape-design/components/split-panel/preferences-modal.js
var import_react319 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tiles/internal.js
var import_react314 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tiles/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/tiles/styles.scoped.css";
var styles_css_default100 = {
  "column-layout": "awsui_column-layout_vj6p7_147sx_99",
  "grid": "awsui_grid_vj6p7_147sx_134",
  "grid-no-gutters": "awsui_grid-no-gutters_vj6p7_147sx_140",
  "grid-variant-text-grid": "awsui_grid-variant-text-grid_vj6p7_147sx_144",
  "grid-breakpoint-default": "awsui_grid-breakpoint-default_vj6p7_147sx_152",
  "grid-columns-1": "awsui_grid-columns-1_vj6p7_147sx_155",
  "grid-breakpoint-xxs": "awsui_grid-breakpoint-xxs_vj6p7_147sx_155",
  "grid-breakpoint-xs": "awsui_grid-breakpoint-xs_vj6p7_147sx_158",
  "grid-columns-2": "awsui_grid-columns-2_vj6p7_147sx_161",
  "grid-columns-3": "awsui_grid-columns-3_vj6p7_147sx_167",
  "grid-columns-4": "awsui_grid-columns-4_vj6p7_147sx_173",
  "grid-vertical-borders": "awsui_grid-vertical-borders_vj6p7_147sx_189",
  "grid-horizontal-borders": "awsui_grid-horizontal-borders_vj6p7_147sx_222",
  "root": "awsui_root_vj6p7_147sx_276",
  "tile-container": "awsui_tile-container_vj6p7_147sx_314",
  "refresh": "awsui_refresh_vj6p7_147sx_329",
  "has-metadata": "awsui_has-metadata_vj6p7_147sx_333",
  "selected": "awsui_selected_vj6p7_147sx_339",
  "disabled": "awsui_disabled_vj6p7_147sx_344",
  "columns": "awsui_columns_vj6p7_147sx_360",
  "column-1": "awsui_column-1_vj6p7_147sx_366",
  "breakpoint-xs": "awsui_breakpoint-xs_vj6p7_147sx_374",
  "breakpoint-xxs": "awsui_breakpoint-xxs_vj6p7_147sx_379",
  "column-2": "awsui_column-2_vj6p7_147sx_384",
  "column-3": "awsui_column-3_vj6p7_147sx_402",
  "column-4": "awsui_column-4_vj6p7_147sx_420",
  "control": "awsui_control_vj6p7_147sx_439",
  "no-image": "awsui_no-image_vj6p7_147sx_443",
  "image": "awsui_image_vj6p7_147sx_447"
};

// node_modules/@cloudscape-design/components/tiles/tile.js
var import_react313 = __toESM(require_react());
var Tile = import_react313.default.forwardRef(({ item, selected, name, breakpoint, onChange }, forwardedRef) => {
  const internalRef = (0, import_react313.useRef)(null);
  const isVisualRefresh = useVisualRefresh();
  const mergedRef = useMergeRefs(internalRef, forwardedRef);
  return import_react313.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default100["tile-container"], { [styles_css_default100["has-metadata"]]: item.description || item.image }, { [styles_css_default100.selected]: selected }, { [styles_css_default100.disabled]: !!item.disabled }, { [styles_css_default100.refresh]: isVisualRefresh }, styles_css_default100[`breakpoint-${breakpoint}`]), "data-value": item.value, onClick: () => {
      var _a;
      if (item.disabled) {
        return;
      }
      (_a = internalRef.current) === null || _a === void 0 ? void 0 : _a.focus();
      if (!selected) {
        fireNonCancelableEvent(onChange, { value: item.value });
      }
    } },
    import_react313.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default100.control, { [styles_css_default100["no-image"]]: !item.image }) },
      import_react313.default.createElement(radio_button_default, { checked: selected, ref: mergedRef, name, value: item.value, label: item.label, description: item.description, disabled: item.disabled, controlId: item.controlId })
    ),
    item.image && import_react313.default.createElement("div", { className: clsx_m_default(styles_css_default100.image, { [styles_css_default100.disabled]: !!item.disabled }) }, item.image)
  );
});

// node_modules/@cloudscape-design/components/tiles/internal.js
var COLUMN_TRIGGERS2 = ["default", "xxs", "xs"];
var InternalTiles = import_react314.default.forwardRef((_a, ref) => {
  var { name, value, items, ariaLabel, ariaRequired, ariaControls, columns, onChange, __internalRootRef = null } = _a, rest = __rest(_a, ["name", "value", "items", "ariaLabel", "ariaRequired", "ariaControls", "columns", "onChange", "__internalRootRef"]);
  const baseProps = getBaseProps(rest);
  const { ariaDescribedby, ariaLabelledby } = useFormFieldContext(rest);
  const generatedName = useUniqueId("awsui-tiles-");
  const [tileRef, tileRefIndex] = useRadioGroupForwardFocus(ref, items, value);
  const [breakpoint, breakpointRef] = useContainerBreakpoints(COLUMN_TRIGGERS2);
  const mergedRef = useMergeRefs(breakpointRef, __internalRootRef);
  const columnCount = getColumnCount(items, columns);
  return import_react314.default.createElement(
    "div",
    Object.assign({ role: "radiogroup", "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby, "aria-required": ariaRequired, "aria-controls": ariaControls }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default100.root), ref: mergedRef }),
    import_react314.default.createElement("div", { className: clsx_m_default(styles_css_default100.columns, styles_css_default100[`column-${columnCount}`]) }, items && items.map((item, index) => import_react314.default.createElement(Tile, { ref: index === tileRefIndex ? tileRef : void 0, key: item.value, item, selected: item.value === value, name: name || generatedName, breakpoint, onChange })))
  );
});
function getColumnCount(items, columns) {
  if (columns) {
    return columns;
  }
  const nItems = items ? items.length : 0;
  const columnsLookup = {
    0: 1,
    1: 1,
    2: 2,
    4: 2,
    8: 2
  };
  return columnsLookup[nItems] || 3;
}
var internal_default21 = InternalTiles;

// node_modules/@cloudscape-design/components/split-panel/icons/side-position.js
var import_react315 = __toESM(require_react());
var sidePositionIcon = import_react315.default.createElement(
  "svg",
  { focusable: false, viewBox: "0 0 239 134", version: "1.1", xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", "aria-hidden": "true" },
  import_react315.default.createElement(
    "g",
    { stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd" },
    import_react315.default.createElement(
      "g",
      null,
      import_react315.default.createElement("rect", { className: styles_css_default19["preference-icon--layout-border"], strokeWidth: "2", x: "1", y: "1", width: "223", height: "125", rx: "2" }),
      import_react315.default.createElement("rect", { className: styles_css_default19["preference-icon--layout-background"], x: "11.25", y: "0", width: "203.4375", height: "125" }),
      import_react315.default.createElement("path", { className: styles_css_default19["preference-icon--layout-header"], d: "M2,0 L223,0 C224.104569,-2.02906125e-16 225,0.8954305 225,2 L225,10 L225,10 L0,10 L0,2 C-1.3527075e-16,0.8954305 0.8954305,2.02906125e-16 2,0 Z" })
    ),
    import_react315.default.createElement(
      "g",
      { transform: "translate(20.000000, 22.000000)" },
      import_react315.default.createElement("rect", { className: styles_css_default19["preference-icon--border"], strokeWidth: "2", x: "1", y: "1", width: "182", height: "110", rx: "2" }),
      import_react315.default.createElement("rect", { className: styles_css_default19["preference-icon--primary-button"], x: "152", y: "6", width: "26", height: "10" }),
      import_react315.default.createElement("rect", { className: styles_css_default19["preference-icon--disabled-element"], x: "122", y: "6", width: "26", height: "10" }),
      import_react315.default.createElement("rect", { className: styles_css_default19["preference-icon--disabled-element"], x: "92", y: "6", width: "26", height: "10" }),
      import_react315.default.createElement("rect", { className: styles_css_default19["preference-icon--disabled-element"], x: "122", y: "29", width: "55", height: "3" }),
      import_react315.default.createElement("rect", { className: styles_css_default19["preference-icon--disabled-element"], x: "92", y: "29", width: "26", height: "3" }),
      import_react315.default.createElement("polygon", { className: styles_css_default19["preference-icon--focus-text"], points: "19 29 49 29 49 32 19 32" }),
      import_react315.default.createElement("polygon", { className: styles_css_default19["preference-icon--focus-text"], points: "10 10 40 10 40 13 10 13" }),
      import_react315.default.createElement("polygon", { className: styles_css_default19["preference-icon--disabled-element"], points: "10 29 13 29 13 32 10 32" }),
      import_react315.default.createElement("line", { className: styles_css_default19["preference-icon--separator"], x1: "3", y1: "22.7619048", x2: "181", y2: "22.7619048", strokeWidth: "2", strokeLinecap: "square" }),
      import_react315.default.createElement(
        "g",
        { transform: "translate(3.000000, 37.285714)" },
        import_react315.default.createElement("rect", { className: styles_css_default19["preference-icon--disabled-element"], x: "119", y: "6", width: "55", height: "3" }),
        import_react315.default.createElement("rect", { className: styles_css_default19["preference-icon--disabled-element"], x: "89", y: "6", width: "26", height: "3" }),
        import_react315.default.createElement("polygon", { className: styles_css_default19["preference-icon--focus-text"], points: "16 6 46 6 46 9 16 9" }),
        import_react315.default.createElement("polygon", { className: styles_css_default19["preference-icon--disabled-element"], points: "7 6 10 6 10 9 7 9" }),
        import_react315.default.createElement("line", { className: styles_css_default19["preference-icon--separator"], x1: "0", y1: "0.666666667", x2: "178", y2: "0.666666667", strokeLinecap: "square" })
      ),
      import_react315.default.createElement(
        "g",
        { transform: "translate(3.000000, 51.714286)" },
        import_react315.default.createElement("rect", { className: styles_css_default19["preference-icon--disabled-element"], x: "119", y: "6", width: "55", height: "3" }),
        import_react315.default.createElement("rect", { className: styles_css_default19["preference-icon--disabled-element"], x: "89", y: "6", width: "26", height: "3" }),
        import_react315.default.createElement("polygon", { className: styles_css_default19["preference-icon--focus-text"], points: "16 6 46 6 46 9 16 9" }),
        import_react315.default.createElement("polygon", { className: styles_css_default19["preference-icon--disabled-element"], points: "7 6 10 6 10 9 7 9" }),
        import_react315.default.createElement("line", { className: styles_css_default19["preference-icon--separator"], x1: "0", y1: "0.666666667", x2: "178", y2: "0.666666667", strokeLinecap: "square" })
      ),
      import_react315.default.createElement(
        "g",
        { transform: "translate(3.000000, 80.571429)" },
        import_react315.default.createElement("rect", { className: styles_css_default19["preference-icon--disabled-element"], x: "119", y: "6", width: "55", height: "3" }),
        import_react315.default.createElement("rect", { className: styles_css_default19["preference-icon--disabled-element"], x: "89", y: "6", width: "26", height: "3" }),
        import_react315.default.createElement("polygon", { className: styles_css_default19["preference-icon--focus-text"], points: "16 6 46 6 46 9 16 9" }),
        import_react315.default.createElement("polygon", { className: styles_css_default19["preference-icon--disabled-element"], points: "7 6 10 6 10 9 7 9" }),
        import_react315.default.createElement("line", { className: styles_css_default19["preference-icon--separator"], x1: "0", y1: "0.666666667", x2: "178", y2: "0.666666667", strokeLinecap: "square" })
      ),
      import_react315.default.createElement(
        "g",
        { transform: "translate(3.000000, 66.142857)" },
        import_react315.default.createElement("rect", { className: styles_css_default19["preference-icon--disabled-element"], x: "119", y: "6", width: "55", height: "3" }),
        import_react315.default.createElement("rect", { className: styles_css_default19["preference-icon--disabled-element"], x: "89", y: "6", width: "26", height: "3" }),
        import_react315.default.createElement("polygon", { className: styles_css_default19["preference-icon--focus-text"], points: "16 6 46 6 46 9 16 9" }),
        import_react315.default.createElement("polygon", { className: styles_css_default19["preference-icon--disabled-element"], points: "7 6 10 6 10 9 7 9" }),
        import_react315.default.createElement("line", { className: styles_css_default19["preference-icon--separator"], x1: "0", y1: "0.666666667", x2: "178", y2: "0.666666667", strokeLinecap: "square" })
      ),
      import_react315.default.createElement(
        "g",
        { transform: "translate(3.000000, 95.000000)" },
        import_react315.default.createElement("rect", { className: styles_css_default19["preference-icon--disabled-element"], x: "119", y: "6", width: "55", height: "3" }),
        import_react315.default.createElement("rect", { className: styles_css_default19["preference-icon--disabled-element"], x: "89", y: "6", width: "26", height: "3" }),
        import_react315.default.createElement("polygon", { className: styles_css_default19["preference-icon--focus-text"], points: "16 6 46 6 46 9 16 9" }),
        import_react315.default.createElement("polygon", { className: styles_css_default19["preference-icon--disabled-element"], points: "7 6 10 6 10 9 7 9" }),
        import_react315.default.createElement("line", { className: styles_css_default19["preference-icon--separator"], x1: "0", y1: "0.666666667", x2: "178", y2: "0.666666667", strokeLinecap: "square" })
      )
    ),
    import_react315.default.createElement(
      "g",
      { transform: "translate(182.000000, 28.000000)" },
      import_react315.default.createElement(
        "g",
        null,
        import_react315.default.createElement("rect", { className: styles_css_default19["preference-icon--border"], strokeWidth: "2", x: "1", y: "1", width: "55", height: "97", rx: "2" }),
        import_react315.default.createElement("rect", { className: styles_css_default19["preference-icon--secondary"], x: "39.5474354", y: "5.86666667", width: "14", height: "6.41666667" }),
        import_react315.default.createElement("polygon", { className: styles_css_default19["preference-icon--focus-text"], points: "3.62672811 7.88333333 24.6267281 7.88333333 24.6267281 10.6333333 3.62672811 10.6333333" })
      ),
      import_react315.default.createElement(
        "g",
        { transform: "translate(4.000000, 22.000000)", className: styles_css_default19["preference-icon--secondary"] },
        import_react315.default.createElement("polygon", { points: "0 0 23 0 23 2 0 2" }),
        import_react315.default.createElement("polygon", { points: "26 0 49 0 49 2 26 2" })
      ),
      import_react315.default.createElement(
        "g",
        { transform: "translate(4.000000, 32.000000)", className: styles_css_default19["preference-icon--secondary"] },
        import_react315.default.createElement("polygon", { points: "0 0 23 0 23 2 0 2" }),
        import_react315.default.createElement("polygon", { points: "26 0 49 0 49 2 26 2" })
      ),
      import_react315.default.createElement(
        "g",
        { transform: "translate(4.000000, 43.000000)", className: styles_css_default19["preference-icon--secondary"] },
        import_react315.default.createElement("polygon", { points: "0 0 23 0 23 2 0 2" }),
        import_react315.default.createElement("polygon", { points: "26 0 49 0 49 2 26 2" })
      ),
      import_react315.default.createElement(
        "g",
        { transform: "translate(4.000000, 51.000000)", className: styles_css_default19["preference-icon--secondary"] },
        import_react315.default.createElement("polygon", { points: "0 0 23 0 23 2 0 2" }),
        import_react315.default.createElement("polygon", { points: "26 0 49 0 49 2 26 2" })
      )
    )
  )
);
var side_position_default = sidePositionIcon;

// node_modules/@cloudscape-design/components/split-panel/icons/bottom-icon.js
var import_react316 = __toESM(require_react());
var bottomPositionIcon = import_react316.default.createElement(
  "svg",
  { focusable: false, viewBox: "0 0 240 134", version: "1.1", xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", "aria-hidden": "true" },
  import_react316.default.createElement(
    "g",
    { stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd" },
    import_react316.default.createElement(
      "g",
      null,
      import_react316.default.createElement(
        "g",
        null,
        import_react316.default.createElement("rect", { className: styles_css_default19["preference-icon--layout-border"], strokeWidth: "2", x: "1", y: "1", width: "238", height: "125", rx: "2" }),
        import_react316.default.createElement("rect", { className: styles_css_default19["preference-icon--layout-background"], x: "12", y: "0", width: "217", height: "126" }),
        import_react316.default.createElement("path", { className: styles_css_default19["preference-icon--layout-header"], d: "M2,0 L238,0 C239.104569,-1.58997828e-14 240,0.8954305 240,2 L240,10 L240,10 L0,10 L0,2 C-1.3527075e-16,0.8954305 0.8954305,2.02906125e-16 2,0 Z" })
      ),
      import_react316.default.createElement(
        "g",
        { transform: "translate(28.000000, 22.000000)" },
        import_react316.default.createElement("rect", { className: styles_css_default19["preference-icon--border"], strokeWidth: "2", x: "1", y: "1", width: "182", height: "110", rx: "2" }),
        import_react316.default.createElement("rect", { className: styles_css_default19["preference-icon--primary-button"], x: "152", y: "6", width: "26", height: "10" }),
        import_react316.default.createElement("rect", { className: styles_css_default19["preference-icon--disabled-element"], x: "122", y: "6", width: "26", height: "10" }),
        import_react316.default.createElement("rect", { className: styles_css_default19["preference-icon--disabled-element"], x: "92", y: "6", width: "26", height: "10" }),
        import_react316.default.createElement("rect", { className: styles_css_default19["preference-icon--disabled-element"], x: "122", y: "29", width: "55", height: "3" }),
        import_react316.default.createElement("rect", { className: styles_css_default19["preference-icon--disabled-element"], x: "92", y: "29", width: "26", height: "3" }),
        import_react316.default.createElement("polygon", { className: styles_css_default19["preference-icon--focus-text"], points: "19 29 49 29 49 32 19 32" }),
        import_react316.default.createElement("polygon", { className: styles_css_default19["preference-icon--focus-text"], points: "10 10 40 10 40 13 10 13" }),
        import_react316.default.createElement("polygon", { className: styles_css_default19["preference-icon--disabled-element"], points: "10 29 13 29 13 32 10 32" }),
        import_react316.default.createElement("line", { className: styles_css_default19["preference-icon--separator"], x1: "3", y1: "22.7619048", x2: "181", y2: "22.7619048", strokeWidth: "2", strokeLinecap: "square" }),
        import_react316.default.createElement(
          "g",
          { transform: "translate(3.000000, 37.285714)" },
          import_react316.default.createElement("rect", { className: styles_css_default19["preference-icon--disabled-element"], x: "119", y: "6", width: "55", height: "3" }),
          import_react316.default.createElement("rect", { className: styles_css_default19["preference-icon--disabled-element"], x: "89", y: "6", width: "26", height: "3" }),
          import_react316.default.createElement("polygon", { className: styles_css_default19["preference-icon--focus-text"], points: "16 6 46 6 46 9 16 9" }),
          import_react316.default.createElement("polygon", { className: styles_css_default19["preference-icon--disabled-element"], points: "7 6 10 6 10 9 7 9" }),
          import_react316.default.createElement("line", { className: styles_css_default19["preference-icon--separator"], x1: "0", y1: "0.666666667", x2: "178", y2: "0.666666667", strokeLinecap: "square" })
        )
      ),
      import_react316.default.createElement(
        "g",
        { transform: "translate(12.000000, 74.000000)" },
        import_react316.default.createElement(
          "g",
          null,
          import_react316.default.createElement("rect", { className: styles_css_default19["preference-icon--border"], strokeWidth: "2", x: "1", y: "1", width: "215", height: "58", rx: "2" }),
          import_react316.default.createElement("rect", { className: styles_css_default19["preference-icon--secondary"], x: "177", y: "8", width: "30.6630435", height: "10" }),
          import_react316.default.createElement("polygon", { className: styles_css_default19["preference-icon--focus-text"], points: "10 12 45.3804348 12 45.3804348 15 10 15" })
        ),
        import_react316.default.createElement(
          "g",
          { className: styles_css_default19["preference-icon--secondary"], transform: "translate(9.000000, 40.000000)" },
          import_react316.default.createElement("polygon", { points: "-3.55271368e-15 0 39 0 39 3 -3.55271368e-15 3" }),
          import_react316.default.createElement("polygon", { points: "53 0 92 0 92 3 53 3" }),
          import_react316.default.createElement("polygon", { points: "107 0 146 0 146 3 107 3" }),
          import_react316.default.createElement("polygon", { points: "160 0 199 0 199 3 160 3" }),
          import_react316.default.createElement("polygon", { points: "-3.55271368e-15 9 39 9 39 12 -3.55271368e-15 12" }),
          import_react316.default.createElement("polygon", { points: "53 9 92 9 92 12 53 12" }),
          import_react316.default.createElement("polygon", { points: "107 9 146 9 146 12 107 12" }),
          import_react316.default.createElement("polygon", { points: "160 9 199 9 199 12 160 12" })
        ),
        import_react316.default.createElement("polygon", { className: styles_css_default19["preference-icon--focus-text"], points: "10 23 32 23 32 26 10 26" }),
        import_react316.default.createElement("polygon", { className: styles_css_default19["preference-icon--secondary"], points: "40 23 62 23 62 26 40 26" })
      )
    )
  )
);
var bottom_icon_default = bottomPositionIcon;

// node_modules/@cloudscape-design/components/split-panel/icons/side-position-refresh.js
var import_react317 = __toESM(require_react());
var getClassName3 = (suffix) => styles_css_default19[`preference-icon-refresh--${suffix}`];
var TableRow = ({ offset, separator = true, isHeader }) => {
  const offsetTop = 0.4482;
  const offsetBottom = 3.4482;
  return import_react317.default.createElement(
    "g",
    { transform: `translate(0, ${offset})`, className: getClassName3(isHeader ? "column-header" : "disabled") },
    import_react317.default.createElement("path", { d: `M19 ${offsetTop}2H22V${offsetBottom}H19V${offsetTop}Z` }),
    import_react317.default.createElement("path", { d: `M27 ${offsetTop}H51V${offsetBottom}H27V${offsetTop}Z`, className: !isHeader ? getClassName3("secondary") : void 0 }),
    import_react317.default.createElement("path", { d: `M90 ${offsetTop}H110V${offsetBottom}H90V${offsetTop}Z` }),
    import_react317.default.createElement("path", { d: `M113 ${offsetTop}H157V${offsetBottom}H113V${offsetTop}Z` }),
    separator && import_react317.default.createElement("path", { d: "M14 8H159.387", className: getClassName3("separator"), strokeLinecap: "square" })
  );
};
var SidePanelRow = ({ offset }) => {
  return import_react317.default.createElement(
    "g",
    { transform: `translate(0, ${offset})`, className: getClassName3("secondary") },
    import_react317.default.createElement("path", { d: "M177 0H190V3H177V0Z" }),
    import_react317.default.createElement("path", { d: "M195 0H208V3H195V0Z" })
  );
};
var bottomPositionIcon2 = import_react317.default.createElement(
  "svg",
  { focusable: false, viewBox: "0 0 230 128", version: "1.1", xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", "aria-hidden": "true" },
  import_react317.default.createElement("path", { d: "M2 1H214C214.552 1 215 1.44772 215 2V126C215 126.552 214.552 127 214 127H2.00001C1.44772 127 1 126.552 1 126V2C1 1.44772 1.44772 1 2 1Z", className: getClassName3("window"), strokeWidth: "2" }),
  import_react317.default.createElement(
    "g",
    { className: "awsui-context-top-navigation" },
    import_react317.default.createElement("rect", { x: "2", y: "2", width: "212", height: "6", className: getClassName3("layout-top") })
  ),
  import_react317.default.createElement(
    "g",
    { className: getContentHeaderClassName() },
    import_react317.default.createElement("path", { d: "M2 8H214V23H2V8Z", className: getClassName3("layout-main") }),
    import_react317.default.createElement(
      "g",
      { className: getClassName3("default") },
      import_react317.default.createElement("path", { d: "M9 15.5C9 16.8807 7.88071 18 6.5 18C5.11929 18 4 16.8807 4 15.5C4 14.1193 5.11929 13 6.5 13C7.88071 13 9 14.1193 9 15.5Z", className: getClassName3("disabled") }),
      import_react317.default.createElement("path", { d: "M16 14H46.1484V17H16V14Z" }),
      import_react317.default.createElement("path", { d: "M92 15.5C92 13.567 93.567 12 95.5 12H108.86C110.793 12 112.36 13.567 112.36 15.5C112.36 17.433 110.793 19 108.86 19H95.5C93.567 19 92 17.433 92 15.5Z" }),
      import_react317.default.createElement("path", { d: "M116 15.5C116 13.567 117.567 12 119.5 12H132.86C134.793 12 136.36 13.567 136.36 15.5C136.36 17.433 134.793 19 132.86 19H119.5C117.567 19 116 17.433 116 15.5Z" }),
      import_react317.default.createElement("path", { d: "M139 15.5C139 13.567 140.567 12 142.5 12H155.86C157.793 12 159.36 13.567 159.36 15.5C159.36 17.433 157.793 19 155.86 19H142.5C140.567 19 139 17.433 139 15.5Z", className: getClassName3("primary") })
    )
  ),
  import_react317.default.createElement(TableRow, { offset: 27, isHeader: true }),
  import_react317.default.createElement(TableRow, { offset: 39 }),
  import_react317.default.createElement(TableRow, { offset: 51 }),
  import_react317.default.createElement(TableRow, { offset: 63 }),
  import_react317.default.createElement(TableRow, { offset: 75 }),
  import_react317.default.createElement(TableRow, { offset: 87 }),
  import_react317.default.createElement(TableRow, { offset: 99 }),
  import_react317.default.createElement(TableRow, { offset: 111, separator: false }),
  import_react317.default.createElement("rect", { x: "166", y: "13", width: "62", height: "108", rx: "5", className: getClassName3("window"), strokeWidth: "2" }),
  import_react317.default.createElement("rect", { x: "169", y: "62", width: "3", height: "8", rx: "1.5", className: getClassName3("input-default") }),
  import_react317.default.createElement("path", { d: "M216 14V120", className: getClassName3("separator") }),
  import_react317.default.createElement(
    "g",
    { className: getClassName3("disabled") },
    import_react317.default.createElement("path", { d: "M224 19.5C224 20.8807 222.881 22 221.5 22C220.119 22 219 20.8807 219 19.5C219 18.1193 220.119 17 221.5 17C222.881 17 224 18.1193 224 19.5Z" }),
    import_react317.default.createElement("path", { d: "M224 27.5C224 28.8807 222.881 30 221.5 30C220.119 30 219 28.8807 219 27.5C219 26.1193 220.119 25 221.5 25C222.881 25 224 26.1193 224 27.5Z" })
  ),
  import_react317.default.createElement("path", { d: "M177 23H191V28H177V23Z", className: getClassName3("heading") }),
  import_react317.default.createElement(
    "g",
    { className: getClassName3("secondary") },
    import_react317.default.createElement("path", { d: "M207 23H212V28H207V23Z" }),
    import_react317.default.createElement("path", { d: "M199 23H204V28H199V23Z" })
  ),
  import_react317.default.createElement(SidePanelRow, { offset: 36 }),
  import_react317.default.createElement(SidePanelRow, { offset: 48 }),
  import_react317.default.createElement(SidePanelRow, { offset: 60 }),
  import_react317.default.createElement(SidePanelRow, { offset: 72 })
);
var side_position_refresh_default = bottomPositionIcon2;

// node_modules/@cloudscape-design/components/split-panel/icons/bottom-icon-refresh.js
var import_react318 = __toESM(require_react());
var TableRow2 = ({ offset, isHeader }) => {
  const offsetTop = 0.4482;
  const offsetBottom = 3.4482;
  return import_react318.default.createElement(
    "g",
    { transform: `translate(0, ${offset})`, className: getClassName3(isHeader ? "column-header" : "disabled") },
    import_react318.default.createElement("path", { d: `M31 ${offsetTop}H34V${offsetBottom}H31V${offsetTop}Z` }),
    import_react318.default.createElement("path", { d: `M39 ${offsetTop}H63V${offsetBottom}H39V${offsetTop}Z`, className: !isHeader ? getClassName3("secondary") : void 0 }),
    import_react318.default.createElement("path", { d: `M135 ${offsetTop}H155V${offsetBottom}H135V${offsetTop}Z` }),
    import_react318.default.createElement("path", { d: `M158 ${offsetTop}H202V${offsetBottom}H158V${offsetTop}Z` }),
    import_react318.default.createElement("path", { d: "M26 8H204.388", className: getClassName3("separator"), strokeLinecap: "square" })
  );
};
var SidePanelRow2 = ({ offset }) => {
  return import_react318.default.createElement(
    "g",
    { transform: `translate(0, ${offset})`, className: getClassName3("secondary") },
    import_react318.default.createElement("path", { d: "M27 0H59V3H27V0Z" }),
    import_react318.default.createElement("path", { d: "M75 0H107V3H75V0Z" }),
    import_react318.default.createElement("path", { d: "M123 0H155V3H123V0Z" }),
    import_react318.default.createElement("path", { d: "M171 0H203V3H171V0Z" })
  );
};
var bottomPositionIcon3 = import_react318.default.createElement(
  "svg",
  { focusable: false, viewBox: "0 0 230 128", version: "1.1", xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", "aria-hidden": "true" },
  import_react318.default.createElement("path", { d: "M2 1H228C228.552 1 229 1.44772 229 2V117C229 117.552 228.552 118 228 118H2C1.44772 118 1 117.552 1 117V2C1 1.44772 1.44772 1 2 1Z", className: getClassName3("window"), strokeWidth: "2" }),
  import_react318.default.createElement(
    "g",
    { className: "awsui-context-top-navigation" },
    import_react318.default.createElement("rect", { x: "2", y: "2", width: "226", height: "6", className: getClassName3("layout-top") })
  ),
  import_react318.default.createElement(
    "g",
    { className: getContentHeaderClassName() },
    import_react318.default.createElement("path", { d: "M2 8H228V23H2V8Z", className: getClassName3("layout-main") }),
    import_react318.default.createElement(
      "g",
      { className: getClassName3("default") },
      import_react318.default.createElement("path", { d: "M9 15.5C9 16.8807 7.88071 18 6.5 18C5.11929 18 4 16.8807 4 15.5C4 14.1193 5.11929 13 6.5 13C7.88071 13 9 14.1193 9 15.5Z", className: getClassName3("disabled") }),
      import_react318.default.createElement("path", { d: "M26 14H56.1484V17H26V14Z" }),
      import_react318.default.createElement("path", { d: "M139 15.5C139 13.567 140.567 12 142.5 12H155.86C157.793 12 159.36 13.567 159.36 15.5C159.36 17.433 157.793 19 155.86 19H142.5C140.567 19 139 17.433 139 15.5Z" }),
      import_react318.default.createElement("path", { d: "M163 15.5C163 13.567 164.567 12 166.5 12H179.86C181.793 12 183.36 13.567 183.36 15.5C183.36 17.433 181.793 19 179.86 19H166.5C164.567 19 163 17.433 163 15.5Z" }),
      import_react318.default.createElement("path", { d: "M186 15.5C186 13.567 187.567 12 189.5 12H202.86C204.793 12 206.36 13.567 206.36 15.5C206.36 17.433 204.793 19 202.86 19H189.5C187.567 19 186 17.433 186 15.5Z", className: getClassName3("primary") }),
      import_react318.default.createElement("circle", { cx: "223.5", cy: "15.5", r: "2.5", className: getClassName3("disabled") })
    )
  ),
  import_react318.default.createElement(TableRow2, { offset: 27, isHeader: true }),
  import_react318.default.createElement(TableRow2, { offset: 39 }),
  import_react318.default.createElement(TableRow2, { offset: 51 }),
  import_react318.default.createElement(TableRow2, { offset: 63 }),
  import_react318.default.createElement("rect", { x: "8", y: "75", width: "214", height: "52", rx: "5", className: getClassName3("window"), strokeWidth: "2" }),
  import_react318.default.createElement("rect", { x: "111", y: "79", width: "8", height: "3", rx: "1.5", className: getClassName3("input-default") }),
  import_react318.default.createElement("path", { d: "M27 87H57V92H27V87Z", className: getClassName3("heading") }),
  import_react318.default.createElement(
    "g",
    { className: getClassName3("secondary") },
    import_react318.default.createElement("path", { d: "M198 87H203V92H198V87Z" }),
    import_react318.default.createElement("path", { d: "M190 87H195V92H190V87Z" })
  ),
  import_react318.default.createElement(SidePanelRow2, { offset: 99 }),
  import_react318.default.createElement(SidePanelRow2, { offset: 106 }),
  import_react318.default.createElement(SidePanelRow2, { offset: 113 })
);
var bottom_icon_refresh_default = bottomPositionIcon3;

// node_modules/@cloudscape-design/components/split-panel/preferences-modal.js
var preferences_modal_default2 = (props) => {
  const [position, setPosition] = (0, import_react319.useState)(props.preferences.position);
  const onCancel = () => {
    setPosition(props.preferences.position);
    props.onDismiss();
  };
  const onConfirm = () => {
    props.onConfirm({ position });
  };
  return import_react319.default.createElement(
    InternalModal,
    { size: "medium", visible: props.visible, onDismiss: props.onDismiss, header: props.i18nStrings.header, closeAriaLabel: props.i18nStrings.cancel, footer: import_react319.default.createElement(
      InternalBox,
      { float: "right" },
      import_react319.default.createElement(
        InternalSpaceBetween,
        { direction: "horizontal", size: "xs" },
        import_react319.default.createElement(InternalButton, { onClick: onCancel, formAction: "none", variant: "link" }, props.i18nStrings.cancel),
        import_react319.default.createElement(InternalButton, { onClick: onConfirm, variant: "primary" }, props.i18nStrings.confirm)
      )
    ), __internalRootRef: props.__internalRootRef },
    import_react319.default.createElement(
      InternalFormField,
      { label: props.i18nStrings.positionLabel, description: props.i18nStrings.positionDescription },
      import_react319.default.createElement(internal_default21, { onChange: (e) => setPosition(e.detail.value), value: position, columns: 2, items: [
        {
          label: props.i18nStrings.positionBottom,
          image: props.isRefresh ? bottom_icon_refresh_default : bottom_icon_default,
          value: "bottom"
        },
        {
          label: props.i18nStrings.positionSide,
          image: props.isRefresh ? side_position_refresh_default : side_position_default,
          value: "side",
          disabled: props.disabledSidePosition
        }
      ] })
    )
  );
};

// node_modules/@cloudscape-design/components/split-panel/side.js
var import_react320 = __toESM(require_react());
function SplitPanelContentSide({ baseProps, splitPanelRef, toggleRef, header, children, resizeHandle, isOpen, cappedSize, openButtonAriaLabel, panelHeaderId, onToggle }) {
  const { topOffset, bottomOffset } = useSplitPanelContext();
  const isRefresh = useVisualRefresh();
  return import_react320.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default19.drawer, styles_css_default19.root, styles_css_default19["position-side"], {
      [styles_css_default19["drawer-closed"]]: !isOpen
    }), style: {
      width: isOpen && isRefresh ? cappedSize : void 0,
      maxWidth: isRefresh ? "100%" : void 0
    }, ref: splitPanelRef }),
    import_react320.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default19["drawer-content-side"]), style: {
        top: topOffset,
        bottom: bottomOffset
      }, onClick: () => !isOpen && onToggle(), "aria-labelledby": panelHeaderId, role: "region" },
      isOpen ? import_react320.default.createElement("div", { className: styles_css_default19["slider-wrapper-side"] }, resizeHandle) : import_react320.default.createElement(internal_default2, { className: clsx_m_default(styles_css_default19["open-button"], styles_css_default19["open-button-side"]), iconName: "angle-left", variant: "icon", formAction: "none", ariaLabel: openButtonAriaLabel, ariaExpanded: isOpen, ref: isRefresh ? null : toggleRef }),
      import_react320.default.createElement(
        "div",
        { className: styles_css_default19["content-side"], "aria-hidden": !isOpen },
        import_react320.default.createElement("div", { className: clsx_m_default(styles_css_default19["pane-header-wrapper-side"]) }, header),
        import_react320.default.createElement("div", { className: clsx_m_default(styles_css_default19["pane-content-wrapper-side"]) }, children)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/split-panel/bottom.js
var import_react321 = __toESM(require_react());
function SplitPanelContentBottom({ baseProps, isOpen, state, transitioningElementRef, splitPanelRef, cappedSize, header, resizeHandle, children, appLayoutMaxWidth, panelHeaderId, onToggle }) {
  const isRefresh = useVisualRefresh();
  const { bottomOffset, leftOffset, rightOffset, disableContentPaddings, contentWrapperPaddings, reportHeaderHeight } = useSplitPanelContext();
  const transitionContentBottomRef = useMergeRefs(splitPanelRef || null, transitioningElementRef);
  const isMobile = useMobile();
  const headerRef = (0, import_react321.useRef)(null);
  useResizeObserver(headerRef, (entry) => reportHeaderHeight(entry.borderBoxHeight));
  (0, import_react321.useEffect)(() => {
    return () => reportHeaderHeight(0);
  }, []);
  const centeredMaxWidthClasses = clsx_m_default({
    [styles_css_default19["pane-bottom-center-align"]]: isRefresh,
    [styles_css_default19["pane-bottom-content-nav-padding"]]: contentWrapperPaddings === null || contentWrapperPaddings === void 0 ? void 0 : contentWrapperPaddings.closedNav,
    [styles_css_default19["pane-bottom-content-tools-padding"]]: contentWrapperPaddings === null || contentWrapperPaddings === void 0 ? void 0 : contentWrapperPaddings.closedTools
  });
  return import_react321.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default19.root, styles_css_default19.drawer, styles_css_default19["position-bottom"], {
      [styles_css_default19["drawer-closed"]]: !isOpen,
      [styles_css_default19["drawer-mobile"]]: isMobile,
      [styles_css_default19["drawer-disable-content-paddings"]]: disableContentPaddings,
      [styles_css_default19.animating]: isRefresh && (state === "entering" || state === "exiting"),
      [styles_css_default19.refresh]: isRefresh
    }), onClick: () => !isOpen && onToggle(), style: {
      bottom: bottomOffset,
      left: leftOffset,
      right: rightOffset,
      height: isOpen ? cappedSize : void 0
    }, ref: transitionContentBottomRef }),
    isOpen && import_react321.default.createElement("div", { className: styles_css_default19["slider-wrapper-bottom"] }, resizeHandle),
    import_react321.default.createElement(
      "div",
      { className: styles_css_default19["drawer-content-bottom"], "aria-labelledby": panelHeaderId, role: "region" },
      import_react321.default.createElement("div", { className: clsx_m_default(styles_css_default19["pane-header-wrapper-bottom"], centeredMaxWidthClasses), ref: headerRef }, header),
      import_react321.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default19["content-bottom"], centeredMaxWidthClasses), "aria-hidden": !isOpen },
        import_react321.default.createElement("div", { className: clsx_m_default({ [styles_css_default19["content-bottom-max-width"]]: isRefresh }), style: appLayoutMaxWidth }, children)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/split-panel/implementation.js
var SplitPanelImplementation = import_react322.default.forwardRef((_a, __internalRootRef) => {
  var { header, children, hidePreferencesButton = false, closeBehavior = "collapse", i18nStrings } = _a, restProps = __rest(_a, ["header", "children", "hidePreferencesButton", "closeBehavior", "i18nStrings"]);
  const isRefresh = useVisualRefresh();
  const { position, topOffset, bottomOffset, rightOffset, contentWidthStyles, isOpen, isForcedPosition, onPreferencesChange, onResize, onToggle, size, relativeSize, setSplitPanelToggle, refs } = useSplitPanelContext();
  const baseProps = getBaseProps(restProps);
  const i18n = useInternalI18n("split-panel");
  const [isPreferencesOpen, setPreferencesOpen] = (0, import_react322.useState)(false);
  const appLayoutMaxWidth = isRefresh && position === "bottom" ? contentWidthStyles : void 0;
  const openButtonAriaLabel = i18n("i18nStrings.openButtonAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.openButtonAriaLabel);
  (0, import_react322.useEffect)(() => {
    setSplitPanelToggle({ displayed: closeBehavior === "collapse", ariaLabel: openButtonAriaLabel });
  }, [setSplitPanelToggle, openButtonAriaLabel, closeBehavior]);
  const splitPanelRefObject = (0, import_react322.useRef)(null);
  const sizeControlProps = {
    position,
    panelRef: splitPanelRefObject,
    handleRef: refs.slider,
    onResize
  };
  const onSliderPointerDown = usePointerEvents(sizeControlProps);
  const onKeyDown = useKeyboardEvents(sizeControlProps);
  const wrappedChildren = import_react322.default.createElement(AppLayoutContext.Provider, { value: {
    stickyOffsetTop: topOffset,
    stickyOffsetBottom: bottomOffset
  } }, children);
  const panelHeaderId = useUniqueId("split-panel-header");
  const wrappedHeader = import_react322.default.createElement(
    "div",
    { className: styles_css_default19.header, style: appLayoutMaxWidth },
    import_react322.default.createElement("h2", { className: styles_css_default19["header-text"], id: panelHeaderId }, header),
    import_react322.default.createElement(
      "div",
      { className: styles_css_default19["header-actions"] },
      !hidePreferencesButton && isOpen && import_react322.default.createElement(
        import_react322.default.Fragment,
        null,
        import_react322.default.createElement(InternalButton, { className: styles_css_default19["preferences-button"], iconName: "settings", variant: "icon", onClick: () => setPreferencesOpen(true), formAction: "none", ariaLabel: i18n("i18nStrings.preferencesTitle", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesTitle), ref: refs.preferences }),
        import_react322.default.createElement("span", { className: styles_css_default19.divider })
      ),
      isOpen ? import_react322.default.createElement(InternalButton, { className: styles_css_default19["close-button"], iconName: isRefresh && closeBehavior === "collapse" ? position === "side" ? "angle-right" : "angle-down" : "close", variant: "icon", onClick: onToggle, formAction: "none", ariaLabel: i18n("i18nStrings.closeButtonAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.closeButtonAriaLabel), ariaExpanded: isOpen }) : position === "side" ? null : import_react322.default.createElement(InternalButton, { className: styles_css_default19["open-button"], iconName: "angle-up", variant: "icon", formAction: "none", ariaLabel: i18n("i18nStrings.openButtonAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.openButtonAriaLabel), ref: refs.toggle, ariaExpanded: isOpen })
    )
  );
  const resizeHandle = import_react322.default.createElement(
    "div",
    { ref: refs.slider, role: "slider", tabIndex: 0, "aria-label": i18n("i18nStrings.resizeHandleAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.resizeHandleAriaLabel), "aria-valuemax": 100, "aria-valuemin": 0, "aria-valuenow": position === "bottom" ? relativeSize : 100 - relativeSize, className: clsx_m_default(styles_css_default19.slider, styles_css_default19[`slider-${position}`]), onKeyDown, onPointerDown: onSliderPointerDown },
    import_react322.default.createElement(resize_handler_default, { className: clsx_m_default(styles_css_default19["slider-icon"], styles_css_default19[`slider-icon-${position}`]) })
  );
  (0, import_react322.useLayoutEffect)(() => {
    const root = splitPanelRefObject.current;
    if (root) {
      const property = "transform";
      const temporaryValue = "translateZ(0)";
      const valueBefore = root.style[property];
      root.style[property] = temporaryValue;
      void root.offsetHeight;
      root.style[property] = valueBefore;
    }
  }, [rightOffset, __internalRootRef]);
  const mergedRef = useMergeRefs(splitPanelRefObject, __internalRootRef);
  if (closeBehavior === "hide" && !isOpen) {
    return import_react322.default.createElement(import_react322.default.Fragment, null);
  }
  if (isRefresh && !isOpen && position === "side") {
    return import_react322.default.createElement(import_react322.default.Fragment, null);
  }
  return import_react322.default.createElement(Transition, { in: isOpen !== null && isOpen !== void 0 ? isOpen : false }, (state, transitioningElementRef) => import_react322.default.createElement(
    import_react322.default.Fragment,
    null,
    position === "side" && import_react322.default.createElement(SplitPanelContentSide, { resizeHandle, baseProps, isOpen, splitPanelRef: mergedRef, cappedSize: size, onToggle, openButtonAriaLabel: i18n("i18nStrings.openButtonAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.openButtonAriaLabel), toggleRef: refs.toggle, header: wrappedHeader, panelHeaderId }, wrappedChildren),
    position === "bottom" && import_react322.default.createElement(SplitPanelContentBottom, { resizeHandle, baseProps, isOpen, splitPanelRef: mergedRef, cappedSize: size, onToggle, header: wrappedHeader, panelHeaderId, state, transitioningElementRef, appLayoutMaxWidth }, wrappedChildren),
    isPreferencesOpen && import_react322.default.createElement(preferences_modal_default2, { visible: true, preferences: { position }, disabledSidePosition: position === "bottom" && isForcedPosition, isRefresh, i18nStrings: {
      header: i18n("i18nStrings.preferencesTitle", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesTitle),
      confirm: i18n("i18nStrings.preferencesConfirm", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesConfirm),
      cancel: i18n("i18nStrings.preferencesCancel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesCancel),
      positionLabel: i18n("i18nStrings.preferencesPositionLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesPositionLabel),
      positionDescription: i18n("i18nStrings.preferencesPositionDescription", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesPositionDescription),
      positionBottom: i18n("i18nStrings.preferencesPositionBottom", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesPositionBottom),
      positionSide: i18n("i18nStrings.preferencesPositionSide", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesPositionSide)
    }, onConfirm: (preferences) => {
      onPreferencesChange(Object.assign({}, preferences));
      setPreferencesOpen(false);
    }, onDismiss: () => {
      setPreferencesOpen(false);
    } })
  ));
});

// node_modules/@cloudscape-design/components/split-panel/widget.js
function createWidgetizedSplitPanel(SplitPanelLoader) {
  return import_react323.default.forwardRef((props, ref) => {
    const isRefresh = useVisualRefresh();
    if (isRefresh && getGlobalFlag("appLayoutWidget") && SplitPanelLoader) {
      return import_react323.default.createElement(SplitPanelLoader, Object.assign({ ref }, props));
    }
    return import_react323.default.createElement(SplitPanelImplementation, Object.assign({ ref }, props));
  });
}

// node_modules/@cloudscape-design/components/split-panel/internal.js
var SplitPanelInternal = createWidgetizedSplitPanel();

// node_modules/@cloudscape-design/components/split-panel/index.js
function SplitPanel2(_a) {
  var { hidePreferencesButton = false, closeBehavior = "collapse" } = _a, restProps = __rest(_a, ["hidePreferencesButton", "closeBehavior"]);
  const { __internalRootRef } = useBaseComponent("SplitPanel", {
    props: { closeBehavior, hidePreferencesButton }
  });
  return import_react324.default.createElement(SplitPanelInternal, Object.assign({}, restProps, { ref: __internalRootRef, hidePreferencesButton, closeBehavior }));
}
applyDisplayName(SplitPanel2, "SplitPanel");

// node_modules/@cloudscape-design/components/status-indicator/index.js
var import_react325 = __toESM(require_react());
function StatusIndicator2(_a) {
  var { type = "success", wrapText = true } = _a, props = __rest(_a, ["type", "wrapText"]);
  const baseComponentProps = useBaseComponent("StatusIndicator", {
    props: { colorOverride: props.colorOverride, type, wrapText }
  });
  return import_react325.default.createElement(StatusIndicator, Object.assign({ type, wrapText }, props, baseComponentProps));
}
applyDisplayName(StatusIndicator2, "StatusIndicator");

// node_modules/@cloudscape-design/components/table/index.js
var import_react326 = __toESM(require_react());
var Table = import_react326.default.forwardRef((_a, ref) => {
  var { items = [], selectedItems = [], variant = "container", contentDensity = "comfortable" } = _a, props = __rest(_a, ["items", "selectedItems", "variant", "contentDensity"]);
  const baseComponentProps = useBaseComponent("Table", {
    props: {
      contentDensity,
      resizableColumns: props.resizableColumns,
      selectionType: props.selectionType,
      stickyHeader: props.stickyHeader,
      stripedRows: props.stripedRows,
      variant,
      wrapLines: props.wrapLines,
      enableKeyboardNavigation: props.enableKeyboardNavigation
    },
    metadata: {
      expandableRows: !!props.expandableRows
    }
  });
  const tableProps = Object.assign(Object.assign(Object.assign({
    items,
    selectedItems,
    variant,
    contentDensity
  }, props), baseComponentProps), { ref });
  if (variant === "borderless" || variant === "embedded") {
    return import_react326.default.createElement(internal_default19, Object.assign({}, tableProps));
  }
  return import_react326.default.createElement(
    AnalyticsFunnelSubStep,
    null,
    import_react326.default.createElement(InternalTableAsSubstep, Object.assign({}, tableProps))
  );
});
applyDisplayName(Table, "Table");
var table_default = Table;

// node_modules/@cloudscape-design/components/tag-editor/index.js
var import_react329 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tag-editor/internal.js
var import_react327 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tag-editor/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/tag-editor/styles.scoped.css";
var styles_css_default101 = {
  "root": "awsui_root_brdst_1yvx7_99",
  "loading": "awsui_loading_brdst_1yvx7_103",
  "undo-button": "awsui_undo-button_brdst_1yvx7_107"
};

// node_modules/@cloudscape-design/components/tag-editor/internal.js
var TagControl = import_react327.default.forwardRef(({ row, value, readOnly, defaultOptions: defaultOptions3, placeholder, errorText, loadingText, suggestionText, tooManySuggestionText, limit, filteringKey, enteredTextLabel, clearAriaLabel, onChange, onBlur, onRequest, initialOptionsRef }, ref) => {
  const [options, setOptions] = (0, import_react327.useState)(defaultOptions3);
  const [statusType, setStatusType] = (0, import_react327.useState)();
  const requestCancelFnRef = (0, import_react327.useRef)({
    cancel: () => {
    },
    isCancelled: () => false
  });
  const latestFilteringQuery = (0, import_react327.useRef)({ key: void 0, value: void 0 });
  const isSameQuery = (key2, value2) => latestFilteringQuery.current.key === key2 && latestFilteringQuery.current.value === value2;
  const onLoadItems = (filteringText) => {
    if (!onRequest || isSameQuery(filteringKey, filteringText) || requestCancelFnRef.current.isCancelled()) {
      return;
    }
    requestCancelFnRef.current.cancel();
    if (latestFilteringQuery.current.key !== filteringKey) {
      setOptions([]);
    } else if (filteringText === "" && (initialOptionsRef === null || initialOptionsRef === void 0 ? void 0 : initialOptionsRef.current) && initialOptionsRef.current.length > 0) {
      setOptions(initialOptionsRef.current);
    }
    setStatusType("loading");
    latestFilteringQuery.current = { key: filteringKey, value: filteringText };
    const { promise, cancel, isCancelled } = makeCancellable(onRequest(filteringText));
    promise.then((newValues) => {
      const newOptions = newValues.map((value2) => ({ value: value2 }));
      setStatusType(void 0);
      setOptions(newOptions);
      if (initialOptionsRef) {
        initialOptionsRef.current = newOptions;
      }
    }).catch((err) => {
      if (!(err instanceof PromiseCancelledSignal)) {
        setStatusType("error");
      }
    });
    requestCancelFnRef.current = { cancel, isCancelled };
  };
  return import_react327.default.createElement(internal_default11, { ref, value, readOnly, statusType, options: options.length < limit ? options : [], empty: options.length < limit ? suggestionText : tooManySuggestionText, placeholder, errorText, loadingText, enteredTextLabel, clearAriaLabel, onChange: ({ detail }) => onChange(detail.value, row), onBlur: () => onBlur === null || onBlur === void 0 ? void 0 : onBlur(row), onFocus: () => {
    onLoadItems("");
  }, onLoadItems: ({ detail }) => {
    onLoadItems(detail.filteringText);
  } });
});
var UndoButton = import_react327.default.forwardRef(({ children, onClick }, ref) => {
  return import_react327.default.createElement("a", { ref, role: "button", tabIndex: 0, className: styles_css_default101["undo-button"], onClick, onKeyDown: (event) => {
    if (event.keyCode === KeyCode.space || event.keyCode === KeyCode.enter) {
      event.preventDefault();
    }
    if (event.keyCode === KeyCode.enter) {
      onClick();
    }
  }, onKeyUp: (event) => {
    if (event.keyCode === KeyCode.space) {
      onClick();
    }
  } }, children);
});

// node_modules/@cloudscape-design/components/tag-editor/validation.js
var DEFAULT_CHAR_REGEX = /^([\p{L}\p{Z}\p{N}_.:/=+\\@-]*)$/u;
var SYSTEM_TAG_PREFIX = "aws:";
var MAX_KEY_LENGTH = 128;
var MAX_VALUE_LENGTH = 256;
function validate2(tags, keyDirtyState, i18n, i18nStrings, charRegex = DEFAULT_CHAR_REGEX) {
  const tagKeysCache = {};
  tags.forEach((tag) => {
    var _a;
    if (tag.key && !tag.markedForRemoval) {
      tagKeysCache[tag.key] = ((_a = tagKeysCache[tag.key]) !== null && _a !== void 0 ? _a : 0) + 1;
    }
  });
  return tags.map((tag, i) => {
    let keyError, valueError;
    if (keyDirtyState[i] && emptyKeyCheck(tag.key)) {
      keyError = i18n("i18nStrings.emptyKeyError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.emptyKeyError);
    } else if (awsPrefixCheck(tag.key)) {
      keyError = i18n("i18nStrings.awsPrefixError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.awsPrefixError);
    } else if (invalidCharCheck(tag.key, charRegex)) {
      keyError = i18n("i18nStrings.invalidKeyError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.invalidKeyError);
    } else if (maxKeyLengthCheck(tag.key)) {
      keyError = i18n("i18nStrings.maxKeyCharLengthError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.maxKeyCharLengthError);
    } else if (duplicateKeyCheck(tag.key, tagKeysCache)) {
      keyError = i18n("i18nStrings.duplicateKeyError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.duplicateKeyError);
    }
    if (!tag.markedForRemoval) {
      if (invalidCharCheck(tag.value, charRegex)) {
        valueError = i18n("i18nStrings.invalidValueError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.invalidValueError);
      } else if (maxValueLengthCheck(tag.value)) {
        valueError = i18n("i18nStrings.maxValueCharLengthError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.maxValueCharLengthError);
      }
    }
    if (keyError || valueError) {
      return { key: keyError, value: valueError };
    }
  });
}
var awsPrefixCheck = (value) => {
  return value.toLowerCase().indexOf(SYSTEM_TAG_PREFIX) === 0;
};
var emptyKeyCheck = (value) => {
  return !value || value.trim().length === 0;
};
var maxKeyLengthCheck = (value) => {
  return value && value.length > MAX_KEY_LENGTH;
};
var duplicateKeyCheck = (value, keyCache) => {
  var _a;
  return ((_a = keyCache === null || keyCache === void 0 ? void 0 : keyCache[value]) !== null && _a !== void 0 ? _a : 0) > 1;
};
var maxValueLengthCheck = (value) => {
  return value && value.length > MAX_VALUE_LENGTH;
};
var invalidCharCheck = (value, validCharRegex = DEFAULT_CHAR_REGEX) => {
  if (!value || !validCharRegex) {
    return false;
  }
  return !validCharRegex.test(value);
};

// node_modules/@cloudscape-design/components/tag-editor/utils.js
var import_react328 = __toESM(require_react());
function findIndex3(array, condition) {
  for (let i = 0; i < array.length; i++) {
    if (condition(array[i])) {
      return i;
    }
  }
  return -1;
}
function makeMemoizedArray(prev, next, isEqual2) {
  for (let i = 0; i < Math.max(prev.length, next.length); i++) {
    if (i === next.length) {
      return prev.slice(0, i);
    }
    if (i === prev.length) {
      return [...prev.slice(0, i), ...next.slice(i)];
    }
    if (!isEqual2(prev[i], next[i])) {
      return [...prev.slice(0, i), next[i], ...makeMemoizedArray(prev.slice(i + 1), next.slice(i + 1), isEqual2)];
    }
  }
  return prev;
}
function useMemoizedArray(array, isEqual2) {
  const ref = (0, import_react328.useRef)(array);
  const updated = makeMemoizedArray(ref.current, array, isEqual2);
  (0, import_react328.useEffect)(() => {
    ref.current = updated;
  }, [updated]);
  return updated;
}

// node_modules/@cloudscape-design/components/tag-editor/index.js
var isItemRemovable = ({ tag }) => !tag.markedForRemoval;
var TagEditor = import_react329.default.forwardRef((_a, ref) => {
  var _b, _c, _d, _e, _f, _g;
  var { tags = [], i18nStrings, loading = false, tagLimit = 50, allowedCharacterPattern, keysRequest, valuesRequest, onChange } = _a, restProps = __rest(_a, ["tags", "i18nStrings", "loading", "tagLimit", "allowedCharacterPattern", "keysRequest", "valuesRequest", "onChange"]);
  const baseComponentProps = useBaseComponent("TagEditor", {
    props: { tagLimit, allowedCharacterPattern }
  });
  const i18n = useInternalI18n("tag-editor");
  const remainingTags = tagLimit - tags.filter((tag) => !tag.markedForRemoval).length;
  const attributeEditorRef = (0, import_react329.useRef)(null);
  const keyInputRefs = (0, import_react329.useRef)([]);
  const valueInputRefs = (0, import_react329.useRef)([]);
  const undoButtonRefs = (0, import_react329.useRef)([]);
  const initialKeyOptionsRef = (0, import_react329.useRef)([]);
  const keyDirtyStateRef = (0, import_react329.useRef)([]);
  const focusEventRef = (0, import_react329.useRef)();
  (0, import_react329.useLayoutEffect)(() => {
    var _a2;
    (_a2 = focusEventRef.current) === null || _a2 === void 0 ? void 0 : _a2.apply(void 0);
    focusEventRef.current = void 0;
  });
  const errors = validate2(tags, keyDirtyStateRef.current, i18n, i18nStrings, allowedCharacterPattern ? new RegExp(allowedCharacterPattern) : void 0);
  const internalTags = useMemoizedArray(tags.map((tag, i) => ({ tag, error: errors[i] })), (prev, next) => {
    var _a2, _b2, _c2, _d2;
    return prev.tag === next.tag && ((_a2 = prev.error) === null || _a2 === void 0 ? void 0 : _a2.key) === ((_b2 = next.error) === null || _b2 === void 0 ? void 0 : _b2.key) && ((_c2 = prev.error) === null || _c2 === void 0 ? void 0 : _c2.value) === ((_d2 = next.error) === null || _d2 === void 0 ? void 0 : _d2.value);
  });
  (0, import_react329.useImperativeHandle)(ref, () => ({
    focus() {
      var _a2, _b2;
      const errorIndex = findIndex3(internalTags, ({ error }) => (error === null || error === void 0 ? void 0 : error.key) || (error === null || error === void 0 ? void 0 : error.value));
      if (errorIndex !== -1) {
        const refArray = ((_a2 = internalTags[errorIndex].error) === null || _a2 === void 0 ? void 0 : _a2.key) ? keyInputRefs : valueInputRefs;
        (_b2 = refArray.current[errorIndex]) === null || _b2 === void 0 ? void 0 : _b2.focus();
      }
    }
  }), [internalTags]);
  const validateAndFire = (0, import_react329.useCallback)((newTags) => {
    fireNonCancelableEvent(onChange, {
      tags: newTags,
      valid: !validate2(newTags, keyDirtyStateRef.current, i18n, i18nStrings, allowedCharacterPattern ? new RegExp(allowedCharacterPattern) : void 0).some((error) => error)
    });
  }, [onChange, i18n, i18nStrings, allowedCharacterPattern]);
  const onAddButtonClick = () => {
    validateAndFire([...tags, { key: "", value: "", existing: false }]);
    focusEventRef.current = () => {
      var _a2;
      (_a2 = keyInputRefs.current[tags.length]) === null || _a2 === void 0 ? void 0 : _a2.focus();
    };
  };
  const onRemoveButtonClick = useStableCallback(({ detail }) => {
    var _a2, _b2, _c2, _d2, _e2;
    const existing = tags[detail.itemIndex].existing;
    validateAndFire([
      ...tags.slice(0, detail.itemIndex),
      ...existing ? [Object.assign(Object.assign({}, tags[detail.itemIndex]), { markedForRemoval: true })] : [],
      ...tags.slice(detail.itemIndex + 1)
    ]);
    if (existing) {
      focusEventRef.current = () => {
        var _a3;
        (_a3 = undoButtonRefs.current[detail.itemIndex]) === null || _a3 === void 0 ? void 0 : _a3.focus();
      };
    } else {
      keyDirtyStateRef.current.splice(detail.itemIndex, 1);
      const nextKey = keyInputRefs.current[detail.itemIndex + 1];
      if (nextKey) {
        (_a2 = keyInputRefs.current[detail.itemIndex]) === null || _a2 === void 0 ? void 0 : _a2.focus();
      } else if (detail.itemIndex > 0) {
        const previousIsExisting = tags[detail.itemIndex - 1].existing;
        if (previousIsExisting) {
          if (tags[detail.itemIndex - 1].markedForRemoval) {
            (_b2 = undoButtonRefs.current[detail.itemIndex - 1]) === null || _b2 === void 0 ? void 0 : _b2.focus();
          } else {
            (_c2 = valueInputRefs.current[detail.itemIndex - 1]) === null || _c2 === void 0 ? void 0 : _c2.focus();
          }
        } else {
          (_d2 = keyInputRefs.current[detail.itemIndex - 1]) === null || _d2 === void 0 ? void 0 : _d2.focus();
        }
      } else {
        (_e2 = attributeEditorRef.current) === null || _e2 === void 0 ? void 0 : _e2.focusAddButton();
      }
    }
  });
  const onKeyChange = useStableCallback((value, row) => {
    keyDirtyStateRef.current[row] = true;
    validateAndFire([...tags.slice(0, row), Object.assign(Object.assign({}, tags[row]), { key: value }), ...tags.slice(row + 1)]);
  });
  const onKeyBlur = useStableCallback((row) => {
    keyDirtyStateRef.current[row] = true;
    validateAndFire([...tags]);
  });
  const onValueChange = useStableCallback((value, row) => {
    validateAndFire([...tags.slice(0, row), Object.assign(Object.assign({}, tags[row]), { value }), ...tags.slice(row + 1)]);
  });
  const onUndoRemoval = useStableCallback((row) => {
    validateAndFire([...tags.slice(0, row), Object.assign(Object.assign({}, tags[row]), { markedForRemoval: false }), ...tags.slice(row + 1)]);
    focusEventRef.current = () => {
      var _a2;
      (_a2 = attributeEditorRef.current) === null || _a2 === void 0 ? void 0 : _a2.focusRemoveButton(row);
    };
  });
  const definition = (0, import_react329.useMemo)(() => [
    {
      label: i18n("i18nStrings.keyHeader", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.keyHeader),
      control: ({ tag }, row) => import_react329.default.createElement(TagControl, { row, value: tag.key, readOnly: tag.existing, limit: 200, defaultOptions: [], placeholder: i18n("i18nStrings.keyPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.keyPlaceholder), errorText: i18n("i18nStrings.keysSuggestionError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.keysSuggestionError), loadingText: i18n("i18nStrings.keysSuggestionLoading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.keysSuggestionLoading), suggestionText: i18n("i18nStrings.keySuggestion", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.keySuggestion), tooManySuggestionText: i18n("i18nStrings.tooManyKeysSuggestion", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tooManyKeysSuggestion), enteredTextLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.enteredKeyLabel, clearAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.clearAriaLabel, onRequest: keysRequest, onChange: onKeyChange, onBlur: onKeyBlur, initialOptionsRef: initialKeyOptionsRef, ref: (ref2) => {
        keyInputRefs.current[row] = ref2;
      } }),
      errorText: ({ error }) => error === null || error === void 0 ? void 0 : error.key
    },
    {
      label: import_react329.default.createElement(
        import_react329.default.Fragment,
        null,
        i18n("i18nStrings.valueHeader", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.valueHeader),
        " -",
        " ",
        import_react329.default.createElement("i", null, i18n("i18nStrings.optional", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.optional))
      ),
      control: ({ tag }, row) => {
        var _a2;
        return tag.markedForRemoval ? import_react329.default.createElement(
          "div",
          { role: "alert" },
          import_react329.default.createElement(
            InternalBox,
            { margin: { top: "xxs" } },
            i18n("i18nStrings.undoPrompt", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.undoPrompt),
            " ",
            import_react329.default.createElement(UndoButton, { onClick: () => onUndoRemoval(row), ref: (elem) => {
              undoButtonRefs.current[row] = elem;
            } }, i18n("i18nStrings.undoButton", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.undoButton))
          )
        ) : import_react329.default.createElement(TagControl, { row, value: tag.value, readOnly: false, limit: 200, defaultOptions: (_a2 = tag.valueSuggestionOptions) !== null && _a2 !== void 0 ? _a2 : [], placeholder: i18n("i18nStrings.valuePlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.valuePlaceholder), errorText: i18n("i18nStrings.valuesSuggestionError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.valuesSuggestionError), loadingText: i18n("i18nStrings.valuesSuggestionLoading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.valuesSuggestionLoading), suggestionText: i18n("i18nStrings.valueSuggestion", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.valueSuggestion), tooManySuggestionText: i18n("i18nStrings.tooManyValuesSuggestion", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tooManyValuesSuggestion), enteredTextLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.enteredValueLabel, clearAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.clearAriaLabel, filteringKey: tag.key, onRequest: valuesRequest && ((value) => valuesRequest(tag.key, value)), onChange: onValueChange, ref: (ref2) => {
          valueInputRefs.current[row] = ref2;
        } });
      },
      errorText: ({ error }) => error === null || error === void 0 ? void 0 : error.value
    }
  ], [i18n, i18nStrings, keysRequest, onKeyChange, onKeyBlur, valuesRequest, onValueChange, onUndoRemoval]);
  const forwardedI18nStrings = (0, import_react329.useMemo)(() => ({
    errorIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel,
    itemRemovedAriaLive: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.itemRemovedAriaLive,
    removeButtonAriaLabel: i18n("i18nStrings.removeButtonAriaLabel", (i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.removeButtonAriaLabel) && (({ tag }) => i18nStrings.removeButtonAriaLabel(tag)), (format3) => ({ tag }) => format3({ tag__key: tag.key }))
  }), [i18nStrings, i18n]);
  if (loading) {
    return import_react329.default.createElement(
      "div",
      { className: styles_css_default101.root, ref: baseComponentProps.__internalRootRef },
      import_react329.default.createElement(
        StatusIndicator,
        { className: styles_css_default101.loading, type: "loading" },
        import_react329.default.createElement(live_region_default, { visible: true }, i18n("i18nStrings.loading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.loading))
      )
    );
  }
  const baseProps = getBaseProps(restProps);
  return import_react329.default.createElement(internal_default10, Object.assign({}, baseProps, baseComponentProps, { ref: attributeEditorRef, className: clsx_m_default(styles_css_default101.root, baseProps.className), items: internalTags, isItemRemovable, onAddButtonClick, onRemoveButtonClick, addButtonText: (_b = i18n("i18nStrings.addButton", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.addButton)) !== null && _b !== void 0 ? _b : "", removeButtonText: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.removeButton, disableAddButton: remainingTags <= 0, empty: i18n("i18nStrings.emptyTags", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.emptyTags), additionalInfo: remainingTags < 0 ? import_react329.default.createElement(FormFieldError, { errorIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel }, (_d = i18n("i18nStrings.tagLimitExceeded", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tagLimitExceeded) === null || _c === void 0 ? void 0 : _c.call(i18nStrings, tagLimit), (format3) => format3({ tagLimit }))) !== null && _d !== void 0 ? _d : "") : remainingTags === 0 ? (_f = i18n("i18nStrings.tagLimitReached", (_e = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tagLimitReached) === null || _e === void 0 ? void 0 : _e.call(i18nStrings, tagLimit), (format3) => format3({ tagLimit }))) !== null && _f !== void 0 ? _f : "" : i18n("i18nStrings.tagLimit", (_g = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tagLimit) === null || _g === void 0 ? void 0 : _g.call(i18nStrings, remainingTags, tagLimit), (format3) => format3({ tagLimitAvailable: `${remainingTags === tagLimit}`, availableTags: remainingTags, tagLimit })), definition, i18nStrings: forwardedI18nStrings }));
});
applyDisplayName(TagEditor, "TagEditor");
var tag_editor_default = TagEditor;

// node_modules/@cloudscape-design/components/text-content/index.js
var import_react330 = __toESM(require_react());

// node_modules/@cloudscape-design/components/text-content/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/text-content/styles.scoped.css";
var styles_css_default102 = {
  "text-content": "awsui_text-content_6absk_1rcdq_100"
};

// node_modules/@cloudscape-design/components/text-content/index.js
function TextContent(_a) {
  var { children } = _a, props = __rest(_a, ["children"]);
  const { __internalRootRef } = useBaseComponent("TextContent");
  const baseProps = getBaseProps(props);
  const className2 = clsx_m_default(baseProps.className, styles_css_default102["text-content"]);
  return import_react330.default.createElement("div", Object.assign({}, baseProps, { className: className2, ref: __internalRootRef }), children);
}
applyDisplayName(TextContent, "TextContent");

// node_modules/@cloudscape-design/components/text-filter/index.js
var import_react331 = __toESM(require_react());
var TextFilter = import_react331.default.forwardRef((props, ref) => {
  const baseComponentProps = useBaseComponent("TextFilter");
  return import_react331.default.createElement(internal_default20, Object.assign({}, props, baseComponentProps, { ref }));
});
applyDisplayName(TextFilter, "TextFilter");
var text_filter_default = TextFilter;

// node_modules/@cloudscape-design/components/textarea/index.js
var import_react332 = __toESM(require_react());

// node_modules/@cloudscape-design/components/textarea/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/textarea/styles.scoped.css";
var styles_css_default103 = {
  "root": "awsui_root_qk1j1_w6j53_99",
  "textarea": "awsui_textarea_qk1j1_w6j53_103",
  "textarea-readonly": "awsui_textarea-readonly_qk1j1_w6j53_156",
  "textarea-invalid": "awsui_textarea-invalid_qk1j1_w6j53_198"
};

// node_modules/@cloudscape-design/components/textarea/index.js
var Textarea = import_react332.default.forwardRef((_a, ref) => {
  var { value, autoComplete = true, disabled, readOnly, disableBrowserAutocorrect, disableBrowserSpellcheck, spellcheck, onKeyDown, onKeyUp, onChange, onBlur, onFocus, ariaRequired, name, rows, placeholder, autoFocus, ariaLabel } = _a, rest = __rest(_a, ["value", "autoComplete", "disabled", "readOnly", "disableBrowserAutocorrect", "disableBrowserSpellcheck", "spellcheck", "onKeyDown", "onKeyUp", "onChange", "onBlur", "onFocus", "ariaRequired", "name", "rows", "placeholder", "autoFocus", "ariaLabel"]);
  const { __internalRootRef } = useBaseComponent("Textarea", {
    props: { autoComplete, autoFocus, disableBrowserAutocorrect, disableBrowserSpellcheck, readOnly, spellcheck }
  });
  const { ariaLabelledby, ariaDescribedby, controlId, invalid } = useFormFieldContext(rest);
  const baseProps = getBaseProps(rest);
  const textareaRef = (0, import_react332.useRef)(null);
  useForwardFocus(ref, textareaRef);
  const attributes = {
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    "aria-describedby": ariaDescribedby,
    "aria-required": ariaRequired ? "true" : void 0,
    "aria-invalid": invalid ? "true" : void 0,
    name,
    placeholder,
    autoFocus,
    className: clsx_m_default(styles_css_default103.textarea, {
      [styles_css_default103["textarea-readonly"]]: readOnly,
      [styles_css_default103["textarea-invalid"]]: invalid
    }),
    autoComplete: convertAutoComplete(autoComplete),
    spellCheck: spellcheck,
    disabled,
    readOnly: readOnly ? true : void 0,
    rows: rows || 3,
    onKeyDown: onKeyDown && ((event) => fireKeyboardEvent(onKeyDown, event)),
    onKeyUp: onKeyUp && ((event) => fireKeyboardEvent(onKeyUp, event)),
    // We set a default value on the component in order to force it into the controlled mode.
    value: value || "",
    onChange: onChange && ((event) => fireNonCancelableEvent(onChange, { value: event.target.value })),
    onBlur: onBlur && (() => fireNonCancelableEvent(onBlur)),
    onFocus: onFocus && (() => fireNonCancelableEvent(onFocus))
  };
  if (disableBrowserAutocorrect) {
    attributes.autoCorrect = "off";
    attributes.autoCapitalize = "off";
  }
  if (disableBrowserSpellcheck) {
    attributes.spellCheck = "false";
  }
  return import_react332.default.createElement(
    "span",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default103.root, baseProps.className), ref: __internalRootRef }),
    import_react332.default.createElement("textarea", Object.assign({ ref: textareaRef, id: controlId }, attributes))
  );
});
applyDisplayName(Textarea, "Textarea");
var textarea_default = Textarea;

// node_modules/@cloudscape-design/components/tiles/index.js
var import_react333 = __toESM(require_react());
var Tiles = import_react333.default.forwardRef((props, ref) => {
  const baseComponentProps = useBaseComponent("Tiles", {
    props: { columns: props.columns }
  });
  return import_react333.default.createElement(internal_default21, Object.assign({ ref }, props, baseComponentProps));
});
applyDisplayName(Tiles, "Tiles");
var tiles_default = Tiles;

// node_modules/@cloudscape-design/components/time-input/index.js
var import_react334 = __toESM(require_react());
var TimeInput = import_react334.default.forwardRef((_a, ref) => {
  var { format: format3 = "hh:mm:ss", use24Hour = true, autoComplete = true } = _a, props = __rest(_a, ["format", "use24Hour", "autoComplete"]);
  const baseComponentProps = useBaseComponent("TimeInput", {
    props: {
      autoFocus: props.autoFocus,
      disableBrowserAutocorrect: props.disableBrowserAutocorrect,
      format: format3,
      readOnly: props.readOnly,
      use24Hour
    }
  });
  return import_react334.default.createElement(internal_default17, Object.assign({ format: format3, use24Hour, autoComplete }, props, baseComponentProps, { ref }));
});
applyDisplayName(TimeInput, "TimeInput");
var time_input_default = TimeInput;

// node_modules/@cloudscape-design/components/toggle/index.js
var import_react335 = __toESM(require_react());
var Toggle = import_react335.default.forwardRef((props, ref) => {
  const baseComponentProps = useBaseComponent("Toggle");
  return import_react335.default.createElement(internal_default14, Object.assign({}, props, baseComponentProps, { ref }));
});
applyDisplayName(Toggle, "Toggle");
var toggle_default = Toggle;

// node_modules/@cloudscape-design/components/token-group/index.js
var import_react336 = __toESM(require_react());
function TokenGroup(_a) {
  var { items = [], alignment = "horizontal" } = _a, props = __rest(_a, ["items", "alignment"]);
  const baseComponentProps = useBaseComponent("TokenGroup", {
    props: { alignment, disableOuterPadding: props.disableOuterPadding, limit: props.limit }
  });
  return import_react336.default.createElement(InternalTokenGroup, Object.assign({ items, alignment }, props, baseComponentProps));
}
applyDisplayName(TokenGroup, "TokenGroup");

// node_modules/@cloudscape-design/components/top-navigation/index.js
var import_react347 = __toESM(require_react());

// node_modules/@cloudscape-design/components/top-navigation/internal.js
var import_react346 = __toESM(require_react());

// node_modules/@cloudscape-design/components/top-navigation/use-top-navigation.js
var import_react337 = __toESM(require_react());

// node_modules/@cloudscape-design/components/top-navigation/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/top-navigation/styles.scoped.css";
var styles_css_default104 = {
  "icon": "awsui_icon_k5dlb_d6w6r_99",
  "top-navigation": "awsui_top-navigation_k5dlb_d6w6r_117",
  "padding-box": "awsui_padding-box_k5dlb_d6w6r_152",
  "medium": "awsui_medium_k5dlb_d6w6r_162",
  "narrow": "awsui_narrow_k5dlb_d6w6r_162",
  "virtual": "awsui_virtual_k5dlb_d6w6r_173",
  "hidden": "awsui_hidden_k5dlb_d6w6r_177",
  "	": "awsui_	_k5dlb_d6w6r_1",
  "identity": "awsui_identity_k5dlb_d6w6r_189",
  "identity-link": "awsui_identity-link_k5dlb_d6w6r_192",
  "no-logo": "awsui_no-logo_k5dlb_d6w6r_212",
  "logo": "awsui_logo_k5dlb_d6w6r_216",
  "title": "awsui_title_k5dlb_d6w6r_228",
  "inputs": "awsui_inputs_k5dlb_d6w6r_243",
  "search": "awsui_search_k5dlb_d6w6r_251",
  "search-expanded": "awsui_search-expanded_k5dlb_d6w6r_255",
  "utilities": "awsui_utilities_k5dlb_d6w6r_259",
  "utility-wrapper": "awsui_utility-wrapper_k5dlb_d6w6r_270",
  "utility-type-button-link": "awsui_utility-type-button-link_k5dlb_d6w6r_291",
  "utility-type-menu-dropdown": "awsui_utility-type-menu-dropdown_k5dlb_d6w6r_296",
  "utility-type-button-primary-button": "awsui_utility-type-button-primary-button_k5dlb_d6w6r_305",
  "utility-link-icon": "awsui_utility-link-icon_k5dlb_d6w6r_313",
  "utility-button-external-icon": "awsui_utility-button-external-icon_k5dlb_d6w6r_317",
  "offset-right-none": "awsui_offset-right-none_k5dlb_d6w6r_321",
  "offset-right-l": "awsui_offset-right-l_k5dlb_d6w6r_325",
  "offset-right-xxl": "awsui_offset-right-xxl_k5dlb_d6w6r_329",
  "overflow-menu-drawer": "awsui_overflow-menu-drawer_k5dlb_d6w6r_334",
  "overflow-menu": "awsui_overflow-menu_k5dlb_d6w6r_334",
  "overflow-menu-header": "awsui_overflow-menu-header_k5dlb_d6w6r_378",
  "overflow-menu-header-text": "awsui_overflow-menu-header-text_k5dlb_d6w6r_386",
  "overflow-menu-header-text--secondary": "awsui_overflow-menu-header-text--secondary_k5dlb_d6w6r_398",
  "overflow-menu-header-text--title": "awsui_overflow-menu-header-text--title_k5dlb_d6w6r_404",
  "overflow-menu-back-button": "awsui_overflow-menu-back-button_k5dlb_d6w6r_408",
  "overflow-menu-dismiss-button": "awsui_overflow-menu-dismiss-button_k5dlb_d6w6r_412",
  "overflow-menu-control": "awsui_overflow-menu-control_k5dlb_d6w6r_416",
  "overflow-menu-list-item-utility": "awsui_overflow-menu-list-item-utility_k5dlb_d6w6r_457",
  "overflow-menu-control-link": "awsui_overflow-menu-control-link_k5dlb_d6w6r_465",
  "overflow-menu-control-expandable-menu-trigger": "awsui_overflow-menu-control-expandable-menu-trigger_k5dlb_d6w6r_468",
  "overflow-menu-list": "awsui_overflow-menu-list_k5dlb_d6w6r_457",
  "overflow-menu-list-submenu": "awsui_overflow-menu-list-submenu_k5dlb_d6w6r_504",
  "overflow-menu-list-item": "awsui_overflow-menu-list-item_k5dlb_d6w6r_457",
  "overflow-menu-list-item-icon": "awsui_overflow-menu-list-item-icon_k5dlb_d6w6r_513",
  "overflow-menu-list-item-text": "awsui_overflow-menu-list-item-text_k5dlb_d6w6r_516",
  "overflow-menu-list-item-submenu": "awsui_overflow-menu-list-item-submenu_k5dlb_d6w6r_525",
  "overflow-menu-list-item-dropdown-menu": "awsui_overflow-menu-list-item-dropdown-menu_k5dlb_d6w6r_531",
  "overflow-menu-list-item-expandable": "awsui_overflow-menu-list-item-expandable_k5dlb_d6w6r_535",
  "expanded": "awsui_expanded_k5dlb_d6w6r_543"
};

// node_modules/@cloudscape-design/components/top-navigation/use-top-navigation.js
var RESPONSIVENESS_BUFFER = 20;
function useTopNavigation({ identity: identity2, search, utilities }) {
  const mainRef = (0, import_react337.useRef)(null);
  const virtualRef = (0, import_react337.useRef)(null);
  const [breakpoint, breakpointRef] = useContainerBreakpoints(["xxs", "s"]);
  const hasSearch = !!search;
  const hasTitleWithLogo = identity2 && !!identity2.logo && !!identity2.title;
  const responsiveStates = (0, import_react337.useMemo)(() => {
    return generateResponsiveStateKeys(utilities, hasSearch, hasTitleWithLogo);
  }, [utilities, hasSearch, hasTitleWithLogo]);
  const [responsiveState, setResponsiveState] = (0, import_react337.useState)();
  const recalculateFit = (0, import_react337.useCallback)(() => {
    var _a, _b, _c, _d;
    if (!(mainRef === null || mainRef === void 0 ? void 0 : mainRef.current) || !virtualRef.current) {
      setResponsiveState(responsiveStates[0]);
      return;
    }
    const availableWidth = getContentBoxWidth(mainRef.current.querySelector(`.${styles_css_default104["padding-box"]}`));
    if (availableWidth === 0) {
      setResponsiveState(responsiveStates[0]);
      return;
    }
    const sizeConfiguration = {
      hasSearch,
      availableWidth,
      // Get widths from the hidden top navigation
      fullIdentityWidth: virtualRef.current.querySelector(`.${styles_css_default104.identity}`).getBoundingClientRect().width,
      titleWidth: (_b = (_a = virtualRef.current.querySelector(`.${styles_css_default104.title}`)) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().width) !== null && _b !== void 0 ? _b : 0,
      searchSlotWidth: (_d = (_c = virtualRef.current.querySelector(`.${styles_css_default104.search}`)) === null || _c === void 0 ? void 0 : _c.getBoundingClientRect().width) !== null && _d !== void 0 ? _d : 0,
      searchUtilityWidth: virtualRef.current.querySelector('[data-utility-special="search"]').getBoundingClientRect().width,
      utilitiesLeftPadding: parseFloat(getComputedStyle(virtualRef.current.querySelector(`.${styles_css_default104.utilities}`)).paddingLeft || "0px"),
      utilityWithLabelWidths: Array.prototype.slice.call(virtualRef.current.querySelectorAll(`[data-utility-hide="false"]`)).map((element) => element.getBoundingClientRect().width),
      utilityWithoutLabelWidths: Array.prototype.slice.call(virtualRef.current.querySelectorAll(`[data-utility-hide="true"]`)).map((element) => element.getBoundingClientRect().width),
      menuTriggerUtilityWidth: virtualRef.current.querySelector('[data-utility-special="menu-trigger"]').getBoundingClientRect().width
    };
    setResponsiveState(determineBestResponsiveState(responsiveStates, sizeConfiguration));
  }, [responsiveStates, hasSearch]);
  const [, containerQueryRef] = useContainerQuery(() => {
    recalculateFit();
  }, [recalculateFit]);
  const onVirtualMount = (0, import_react337.useCallback)((element) => {
    virtualRef.current = element;
    recalculateFit();
  }, [recalculateFit]);
  const [isSearchMinimized, setSearchMinimized] = (0, import_react337.useState)(true);
  const isSearchExpanded = !isSearchMinimized && hasSearch && (responsiveState === null || responsiveState === void 0 ? void 0 : responsiveState.hideSearch);
  (0, import_react337.useEffect)(() => {
    if (!(responsiveState === null || responsiveState === void 0 ? void 0 : responsiveState.hideSearch)) {
      setSearchMinimized(true);
    }
  }, [responsiveState]);
  (0, import_react337.useEffect)(() => {
    var _a, _b;
    if (isSearchExpanded) {
      (_b = (_a = mainRef === null || mainRef === void 0 ? void 0 : mainRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(`.${styles_css_default104.search} input`)) === null || _b === void 0 ? void 0 : _b.focus();
    }
  }, [isSearchExpanded, mainRef]);
  const mergedMainRef = useMergeRefs(mainRef, containerQueryRef, breakpointRef);
  return {
    mainRef: mergedMainRef,
    virtualRef: onVirtualMount,
    responsiveState: responsiveState !== null && responsiveState !== void 0 ? responsiveState : responsiveStates[0],
    breakpoint: breakpoint !== null && breakpoint !== void 0 ? breakpoint : "default",
    isSearchExpanded: !!isSearchExpanded,
    onSearchUtilityClick: () => setSearchMinimized((isSearchMinimized2) => !isSearchMinimized2)
  };
}
function getContentBoxWidth(element) {
  const style = getComputedStyle(element);
  return parseFloat(style.width || "0px") - parseFloat(style.paddingLeft || "0px") - parseFloat(style.paddingRight || "0px");
}
function generateResponsiveStateKeys(utilities, canHideSearch, canHideTitle) {
  const states = [{}];
  if (utilities.some((utility) => utility.text)) {
    states.push({ hideUtilityText: true });
  }
  if (canHideSearch) {
    states.push({
      hideUtilityText: true,
      hideSearch: true
    });
  }
  const hiddenUtilties = [];
  for (let i = 0; i < utilities.length; i++) {
    if (!utilities[i].disableUtilityCollapse) {
      hiddenUtilties.push(i);
      states.push({
        hideUtilityText: true,
        hideSearch: canHideSearch || void 0,
        hideUtilities: hiddenUtilties.length > 0 ? hiddenUtilties.slice() : void 0
      });
    }
  }
  if (canHideTitle) {
    states.push({
      hideUtilityText: true,
      hideSearch: canHideSearch || void 0,
      hideUtilities: hiddenUtilties.length > 0 ? hiddenUtilties.slice() : void 0,
      hideTitle: true
    });
  }
  return states;
}
function determineBestResponsiveState(possibleStates, sizes) {
  const { hasSearch, availableWidth, utilitiesLeftPadding, fullIdentityWidth, titleWidth, searchSlotWidth, searchUtilityWidth, utilityWithLabelWidths, utilityWithoutLabelWidths, menuTriggerUtilityWidth } = sizes;
  for (const state of possibleStates) {
    const searchWidth = hasSearch ? state.hideSearch ? searchUtilityWidth : searchSlotWidth : 0;
    const utilitiesWidth = (state.hideUtilityText ? utilityWithoutLabelWidths : utilityWithLabelWidths).filter((_width, i) => !state.hideUtilities || state.hideUtilities.indexOf(i) === -1).reduce((sum2, width) => sum2 + width, 0);
    const menuTriggerWidth = state.hideUtilities ? menuTriggerUtilityWidth : 0;
    const identityWidth = state.hideTitle ? fullIdentityWidth - titleWidth : fullIdentityWidth;
    const expectedInnerWidth = identityWidth + searchWidth + utilitiesLeftPadding + utilitiesWidth + menuTriggerWidth;
    if (expectedInnerWidth <= availableWidth - RESPONSIVENESS_BUFFER) {
      return state;
    }
  }
  return possibleStates[possibleStates.length - 1];
}

// node_modules/@cloudscape-design/components/top-navigation/parts/utility.js
var import_react339 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/menu-dropdown/index.js
var import_react338 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/menu-dropdown/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/internal/components/menu-dropdown/styles.scoped.css";
var styles_css_default105 = {
  "button": "awsui_button_m5h9f_1s7lt_99",
  "expanded": "awsui_expanded_m5h9f_1s7lt_154",
  "offset-right-none": "awsui_offset-right-none_m5h9f_1s7lt_165",
  "offset-right-l": "awsui_offset-right-l_m5h9f_1s7lt_168",
  "offset-right-xxl": "awsui_offset-right-xxl_m5h9f_1s7lt_171",
  "text": "awsui_text_m5h9f_1s7lt_196",
  "icon": "awsui_icon_m5h9f_1s7lt_200"
};

// node_modules/@cloudscape-design/components/internal/components/menu-dropdown/index.js
var ButtonTrigger = import_react338.default.forwardRef(({ testUtilsClass, iconName, iconUrl, iconAlt, iconSvg, badge, ariaLabel, offsetRight, disabled, expanded, children, onClick }, ref) => {
  const hasIcon = iconName || iconUrl || iconSvg;
  return import_react338.default.createElement(
    "button",
    { ref, type: "button", className: clsx_m_default(styles_css_default105.button, styles_css_default105[`offset-right-${offsetRight}`], testUtilsClass, {
      [styles_css_default105.expanded]: expanded
    }), "aria-label": ariaLabel, "aria-expanded": !!expanded, "aria-haspopup": true, disabled, onClick: (event) => {
      event.preventDefault();
      onClick && onClick();
    } },
    hasIcon && import_react338.default.createElement(internal_default, { className: styles_css_default105.icon, name: iconName, url: iconUrl, alt: iconAlt, svg: iconSvg, badge }),
    children && import_react338.default.createElement("span", { className: styles_css_default105.text }, children),
    children && import_react338.default.createElement(internal_default, { name: "caret-down-filled", className: expanded ? styles_css_default10["rotate-up"] : styles_css_default10["rotate-down"] })
  );
});
var MenuDropdown = (_a) => {
  var { iconName, iconUrl, iconAlt, iconSvg, badge, offsetRight, children } = _a, props = __rest(_a, ["iconName", "iconUrl", "iconAlt", "iconSvg", "badge", "offsetRight", "children"]);
  const baseProps = getBaseProps(props);
  const dropdownTrigger = ({ triggerRef, ariaLabel, isOpen, testUtilsClass, disabled, onClick }) => {
    return import_react338.default.createElement(ButtonTrigger, { testUtilsClass, ref: triggerRef, disabled, expanded: isOpen, iconName, iconUrl, iconAlt, iconSvg, badge, ariaLabel, offsetRight, onClick }, children);
  };
  return import_react338.default.createElement(internal_default7, Object.assign({}, baseProps, props, { variant: "navigation", customTriggerBuilder: dropdownTrigger, preferCenter: true }));
};
applyDisplayName(MenuDropdown, "MenuDropdown");
var menu_dropdown_default = MenuDropdown;

// node_modules/@cloudscape-design/components/top-navigation/parts/utility.js
function Utility({ hideText, definition, offsetRight }) {
  var _a;
  const hasIcon = !!definition.iconName || !!definition.iconUrl || !!definition.iconAlt || !!definition.iconSvg;
  const shouldHideText = hideText && !definition.disableTextCollapse && hasIcon;
  let ariaLabel = (_a = definition.ariaLabel) !== null && _a !== void 0 ? _a : definition.text;
  if (definition.type === "button") {
    ariaLabel = definition.ariaLabel ? definition.ariaLabel : joinStrings(definition.text, definition.externalIconAriaLabel);
    checkSafeUrl("TopNavigation", definition.href);
    if (definition.variant === "primary-button") {
      return import_react339.default.createElement(
        "span",
        { className: styles_css_default104[`offset-right-${offsetRight}`] },
        import_react339.default.createElement(InternalButton, { variant: "primary", href: definition.href, target: definition.external ? "_blank" : void 0, onClick: definition.onClick, onFollow: definition.onFollow, ariaLabel, iconName: definition.iconName, iconUrl: definition.iconUrl, iconAlt: definition.iconAlt, iconSvg: definition.iconSvg }, shouldHideText ? null : import_react339.default.createElement(
          import_react339.default.Fragment,
          null,
          definition.text,
          definition.external && import_react339.default.createElement(
            import_react339.default.Fragment,
            null,
            " ",
            import_react339.default.createElement(
              "span",
              { className: clsx_m_default(styles_css_default104["utility-button-external-icon"], styles_css_default104[`offset-right-${offsetRight}`]), "aria-label": definition.externalIconAriaLabel, role: definition.externalIconAriaLabel ? "img" : void 0 },
              import_react339.default.createElement(internal_default, { name: "external" })
            )
          )
        ))
      );
    } else {
      return import_react339.default.createElement(
        "span",
        { className: styles_css_default104[`offset-right-${offsetRight}`] },
        import_react339.default.createElement(
          internal_default3,
          { variant: "top-navigation", href: definition.href, target: definition.target, rel: definition.rel, external: definition.external, onFollow: (evt) => {
            fireCancelableEvent(definition.onFollow, { href: definition.href, target: definition.target, external: definition.external }, evt);
            fireCancelableEvent(definition.onClick, { href: definition.href, target: definition.target, external: definition.external }, evt);
          }, ariaLabel },
          hasIcon && import_react339.default.createElement(internal_default, { name: definition.iconName, url: definition.iconUrl, alt: definition.iconAlt, svg: definition.iconSvg, badge: definition.badge }),
          !shouldHideText && definition.text && import_react339.default.createElement("span", { className: hasIcon ? styles_css_default104["utility-link-icon"] : void 0 }, definition.text)
        )
      );
    }
  } else if (definition.type === "menu-dropdown") {
    const title = definition.title || definition.text;
    const shouldShowTitle = shouldHideText || !definition.text;
    checkSafeUrlRecursively(definition.items);
    return import_react339.default.createElement(menu_dropdown_default, Object.assign({}, definition, { title: shouldShowTitle ? title : "", ariaLabel, offsetRight }), !shouldHideText && definition.text);
  }
  return null;
}
function checkSafeUrlRecursively(itemOrGroup) {
  for (const item of itemOrGroup) {
    checkSafeUrl("TopNavigation", item.href);
    if ("items" in item) {
      checkSafeUrlRecursively(item.items);
    }
  }
}

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/index.js
var import_react345 = __toESM(require_react());

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/router.js
var import_react340 = __toESM(require_react());
var defaultCtx = { state: { view: "utilities", data: null }, setState: () => {
} };
var ViewContext = (0, import_react340.createContext)(defaultCtx);
var useNavigate = () => {
  const { setState } = (0, import_react340.useContext)(ViewContext);
  const navigate = (view, data) => {
    setState({ view, data });
  };
  return navigate;
};
var Route = ({ view, element }) => {
  const { state } = (0, import_react340.useContext)(ViewContext);
  if (view === state.view) {
    if (typeof element === "function") {
      return element(state.data);
    }
    return import_react340.default.createElement(import_react340.default.Fragment, null, element);
  }
  return null;
};
var Router = ({ children }) => {
  const [state, setState] = (0, import_react340.useState)({ view: "utilities", data: null });
  return import_react340.default.createElement(ViewContext.Provider, { value: { state, setState } }, children);
};
var router_default = Router;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/views/utilities.js
var import_react343 = __toESM(require_react());

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/header.js
var import_react341 = __toESM(require_react());
var Header4 = ({ children, secondaryText, backIconAriaLabel, dismissIconAriaLabel, onBack, onClose }) => {
  return import_react341.default.createElement(
    "div",
    { className: styles_css_default104["overflow-menu-header"] },
    onBack && import_react341.default.createElement(
      internal_default2,
      {
        // Used for test-utils, which require the selectable element to have a classname.
        // eslint-disable-next-line react/forbid-component-props
        className: styles_css_default104["overflow-menu-back-button"],
        ariaLabel: backIconAriaLabel,
        iconName: "angle-left",
        variant: "icon",
        onClick: () => onBack()
      }
    ),
    import_react341.default.createElement(
      "h2",
      { className: styles_css_default104["overflow-menu-header-text"] },
      import_react341.default.createElement("div", { className: styles_css_default104["overflow-menu-header-text--title"] }, children),
      secondaryText && import_react341.default.createElement("div", { className: styles_css_default104["overflow-menu-header-text--secondary"] }, secondaryText)
    ),
    import_react341.default.createElement(
      internal_default2,
      {
        // eslint-disable-next-line react/forbid-component-props
        className: styles_css_default104["overflow-menu-dismiss-button"],
        ariaLabel: dismissIconAriaLabel,
        iconName: "close",
        variant: "icon",
        onClick: () => onClose && onClose()
      }
    )
  );
};
var header_default2 = Header4;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/menu-item.js
var import_react342 = __toESM(require_react());
var ListItem = ({ children, startIcon, endIcon }) => {
  return import_react342.default.createElement(
    import_react342.default.Fragment,
    null,
    startIcon && import_react342.default.createElement("span", { className: styles_css_default104["overflow-menu-list-item-icon"] }, startIcon),
    import_react342.default.createElement("span", { className: styles_css_default104["overflow-menu-list-item-text"] }, children),
    endIcon && endIcon
  );
};
var LinkItem = (0, import_react342.forwardRef)(({ children, external, href, target, rel, startIcon, endIcon, onClick, context, testId }, ref) => {
  const anchorTarget = target !== null && target !== void 0 ? target : external ? "_blank" : void 0;
  const anchorRel = rel !== null && rel !== void 0 ? rel : anchorTarget === "_blank" ? "noopener noreferrer" : void 0;
  const role = !href ? "button" : void 0;
  return import_react342.default.createElement(
    "a",
    Object.assign({ ref, onClick, className: clsx_m_default(styles_css_default104["overflow-menu-control"], styles_css_default104["overflow-menu-control-link"], context && styles_css_default104[`overflow-menu-control-${context}`]), role, tabIndex: 0, href, target: anchorTarget, rel: anchorRel }, testId ? { "data-testid": testId } : {}),
    import_react342.default.createElement(ListItem, { startIcon, endIcon }, children)
  );
});
var ButtonItem = (0, import_react342.forwardRef)(({ children, startIcon, endIcon, onClick, testId }, ref) => {
  return import_react342.default.createElement(
    "button",
    Object.assign({ ref, className: styles_css_default104["overflow-menu-control"], onClick }, typeof testId === "string" ? { "data-testid": testId } : {}),
    import_react342.default.createElement(ListItem, { startIcon, endIcon }, children)
  );
});
var NavigationItem = (0, import_react342.forwardRef)((_a, ref) => {
  var { startIcon, children, index, testId } = _a, definition = __rest(_a, ["startIcon", "children", "index", "testId"]);
  const navigate = useNavigate();
  return import_react342.default.createElement(ButtonItem, { ref, startIcon, endIcon: import_react342.default.createElement(internal_default, { name: "angle-right" }), testId, onClick: () => navigate("dropdown-menu", {
    definition,
    headerText: definition.text || definition.title,
    headerSecondaryText: definition.description,
    utilityIndex: index
  }) }, children);
});
var ExpandableItem = (_a) => {
  var { children, onItemClick } = _a, definition = __rest(_a, ["children", "onItemClick"]);
  const [expanded, setExpanded] = (0, import_react342.useState)(false);
  const headerId = useUniqueId("overflow-menu-item");
  return import_react342.default.createElement(
    import_react342.default.Fragment,
    null,
    import_react342.default.createElement(
      "button",
      { className: clsx_m_default(styles_css_default104["overflow-menu-control"], styles_css_default104["overflow-menu-control-expandable-menu-trigger"]), onClick: () => setExpanded((value) => !value), "aria-expanded": expanded },
      import_react342.default.createElement(
        ListItem,
        { endIcon: import_react342.default.createElement(
          "span",
          { className: clsx_m_default(styles_css_default104.icon, expanded && styles_css_default104.expanded) },
          import_react342.default.createElement(internal_default, { name: "caret-up-filled" })
        ) },
        import_react342.default.createElement("span", { id: headerId }, children)
      )
    ),
    expanded && import_react342.default.createElement("ul", { className: clsx_m_default(styles_css_default104["overflow-menu-list"], styles_css_default104["overflow-menu-list-submenu"]), "aria-labelledby": headerId }, definition.items.map((item, index) => {
      const isGroup5 = typeof item.items !== "undefined";
      return import_react342.default.createElement("li", { key: index, className: clsx_m_default(styles_css_default104[`overflow-menu-list-item`], styles_css_default104[`overflow-menu-list-item-dropdown-menu`]) }, dropdownComponentFactory(item, isGroup5, onItemClick));
    }))
  );
};
function utilityComponentFactory(utility, index, ref) {
  const label = utility.text || utility.title;
  const hasIcon = !!utility.iconName || !!utility.iconUrl || !!utility.iconAlt || !!utility.iconSvg;
  const startIcon = hasIcon && import_react342.default.createElement(internal_default, { name: utility.iconName, url: utility.iconUrl, alt: utility.iconAlt, svg: utility.iconSvg });
  switch (utility.type) {
    case "button": {
      const handleClick = (event) => {
        var _a;
        if (Boolean(utility.href) && isPlainLeftClick(event)) {
          fireCancelableEvent(utility.onFollow, { href: utility.href, target: utility.target }, event);
        }
        fireCancelableEvent(utility.onClick, {}, event);
        (_a = utility.onClose) === null || _a === void 0 ? void 0 : _a.call(utility);
      };
      const content = import_react342.default.createElement(
        import_react342.default.Fragment,
        null,
        label,
        utility.external && import_react342.default.createElement(
          import_react342.default.Fragment,
          null,
          " ",
          import_react342.default.createElement(
            "span",
            { "aria-label": utility.externalIconAriaLabel, role: utility.externalIconAriaLabel ? "img" : void 0 },
            import_react342.default.createElement(internal_default, { name: "external", size: "normal" })
          )
        )
      );
      if (!utility.href) {
        return import_react342.default.createElement(ButtonItem, { ref, startIcon, onClick: handleClick, testId: `__${index}` }, content);
      }
      return import_react342.default.createElement(LinkItem, { ref, startIcon, href: utility.href, external: utility.external, target: utility.target, rel: utility.rel, testId: `__${index}`, onClick: handleClick }, content);
    }
    case "menu-dropdown": {
      return import_react342.default.createElement(NavigationItem, Object.assign({ ref, startIcon, index }, utility, { testId: `__${index}` }), label);
    }
  }
}
function dropdownComponentFactory(item, expandable, onItemClick) {
  const label = item.text;
  const hasIcon = !!item.iconName || !!item.iconUrl || !!item.iconAlt || !!item.iconSvg;
  const startIcon = hasIcon && import_react342.default.createElement(internal_default, { name: item.iconName, url: item.iconUrl, alt: item.iconAlt, svg: item.iconSvg });
  if (expandable) {
    return import_react342.default.createElement(ExpandableItem, Object.assign({}, item, { onItemClick }), label);
  }
  return import_react342.default.createElement(
    LinkItem,
    { startIcon, href: item.href, external: item.external, context: "dropdown-menu", testId: item.id, onClick: (event) => onItemClick(event, item) },
    label,
    item.external && import_react342.default.createElement(
      import_react342.default.Fragment,
      null,
      " ",
      import_react342.default.createElement(
        "span",
        { "aria-label": item.externalIconAriaLabel, role: item.externalIconAriaLabel ? "img" : void 0 },
        import_react342.default.createElement(internal_default, { name: "external", size: "normal" })
      )
    )
  );
}
var UtilityMenuItem = (0, import_react342.forwardRef)((_a, ref) => {
  var { index } = _a, props = __rest(_a, ["index"]);
  return import_react342.default.createElement("li", { className: clsx_m_default(styles_css_default104[`overflow-menu-list-item`], styles_css_default104[`overflow-menu-list-item-utility`]) }, utilityComponentFactory(props, index, ref));
});
var SubmenuItem = (props) => {
  const expandable = typeof props.items !== "undefined";
  return import_react342.default.createElement("li", { className: clsx_m_default(styles_css_default104[`overflow-menu-list-item`], styles_css_default104[`overflow-menu-list-item-submenu`], expandable && styles_css_default104[`overflow-menu-list-item-expandable`]) }, dropdownComponentFactory(props, expandable, props.onClick));
};

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/views/utilities.js
var UtilitiesView = ({ headerText, dismissIconAriaLabel, onClose, items = [], focusIndex }) => {
  const headerId = useUniqueId("overflow-menu-header");
  const ref = (0, import_react343.useRef)(null);
  (0, import_react343.useEffect)(() => {
    var _a;
    if (typeof focusIndex === "number") {
      (_a = ref.current) === null || _a === void 0 ? void 0 : _a.focus();
    }
  }, [focusIndex]);
  return import_react343.default.createElement(
    focus_lock_default,
    { autoFocus: true },
    import_react343.default.createElement(
      header_default2,
      { dismissIconAriaLabel, onClose },
      import_react343.default.createElement("span", { id: headerId }, headerText)
    ),
    import_react343.default.createElement("ul", { className: styles_css_default104["overflow-menu-list"], "aria-labelledby": headerId }, items.map((utility, index) => import_react343.default.createElement(UtilityMenuItem, Object.assign({ key: index, index, ref: index === focusIndex ? ref : void 0, onClose }, utility))))
  );
};
var utilities_default = UtilitiesView;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/views/submenu.js
var import_react344 = __toESM(require_react());
var SubmenuView = ({ onClose, utilityIndex, headerText, headerSecondaryText, dismissIconAriaLabel, backIconAriaLabel, definition }) => {
  const navigate = useNavigate();
  const headerId = useUniqueId("overflow-menu-header");
  return import_react344.default.createElement(
    focus_lock_default,
    { autoFocus: true },
    import_react344.default.createElement(
      header_default2,
      { secondaryText: headerSecondaryText, dismissIconAriaLabel, backIconAriaLabel, onClose, onBack: () => navigate("utilities", { utilityIndex }) },
      import_react344.default.createElement("span", { id: headerId }, headerText)
    ),
    import_react344.default.createElement("ul", { className: clsx_m_default(styles_css_default104["overflow-menu-list"], styles_css_default104["overflow-menu-list-submenu"]), "aria-labelledby": headerId }, definition.items.map((item, index) => import_react344.default.createElement(SubmenuItem, Object.assign({ key: index }, item, { onClick: (event, item2) => {
      if (item2.href && isPlainLeftClick(event)) {
        fireCancelableEvent(definition.onItemFollow, { id: item2.id, href: item2.href, external: item2.external }, event);
      }
      fireCancelableEvent(definition.onItemClick, { id: item2.id, href: item2.href, external: item2.external }, event);
      onClose === null || onClose === void 0 ? void 0 : onClose();
    } }))))
  );
};
var submenu_default = SubmenuView;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/index.js
var OverflowMenu2 = ({ headerText, dismissIconAriaLabel, backIconAriaLabel, items = [], onClose }) => {
  const i18n = useInternalI18n("top-navigation");
  const renderedDismissIconAriaLabel = i18n("i18nStrings.overflowMenuDismissIconAriaLabel", dismissIconAriaLabel);
  const renderedBackIconAriaLabel = i18n("i18nStrings.overflowMenuBackIconAriaLabel", backIconAriaLabel);
  return import_react345.default.createElement(
    "div",
    { className: styles_css_default104["overflow-menu"], onKeyUp: (event) => {
      if (event.key === "Escape") {
        onClose === null || onClose === void 0 ? void 0 : onClose();
      }
    } },
    import_react345.default.createElement(
      router_default,
      null,
      import_react345.default.createElement(Route, { view: "utilities", element: (data) => import_react345.default.createElement(utilities_default, { headerText: i18n("i18nStrings.overflowMenuTitleText", headerText), items, focusIndex: data === null || data === void 0 ? void 0 : data.utilityIndex, dismissIconAriaLabel: renderedDismissIconAriaLabel, backIconAriaLabel: renderedBackIconAriaLabel, onClose }) }),
      import_react345.default.createElement(Route, { view: "dropdown-menu", element: (data) => import_react345.default.createElement(submenu_default, { headerText: data === null || data === void 0 ? void 0 : data.headerText, headerSecondaryText: data === null || data === void 0 ? void 0 : data.headerSecondaryText, dismissIconAriaLabel: renderedDismissIconAriaLabel, backIconAriaLabel: renderedBackIconAriaLabel, definition: data === null || data === void 0 ? void 0 : data.definition, utilityIndex: data === null || data === void 0 ? void 0 : data.utilityIndex, onClose }) })
    )
  );
};
var overflow_menu_default = OverflowMenu2;

// node_modules/@cloudscape-design/components/top-navigation/internal.js
function InternalTopNavigation(_a) {
  var { __internalRootRef, identity: identity2, i18nStrings, utilities, search } = _a, restProps = __rest(_a, ["__internalRootRef", "identity", "i18nStrings", "utilities", "search"]);
  checkSafeUrl("TopNavigation", identity2.href);
  const baseProps = getBaseProps(restProps);
  const { mainRef, virtualRef, breakpoint, responsiveState, isSearchExpanded, onSearchUtilityClick } = useTopNavigation({ identity: identity2, search, utilities });
  const [overflowMenuOpen, setOverflowMenuOpen] = (0, import_react346.useState)(false);
  const overflowMenuTriggerRef = (0, import_react346.useRef)(null);
  const isNarrowViewport = breakpoint === "default";
  const isMediumViewport = breakpoint === "xxs";
  const isLargeViewport = breakpoint === "s";
  const i18n = useInternalI18n("top-navigation");
  const onIdentityClick = (event) => {
    if (isPlainLeftClick(event)) {
      fireCancelableEvent(identity2.onFollow, {}, event);
    }
  };
  const toggleOverflowMenu = () => {
    setOverflowMenuOpen((overflowMenuOpen2) => !overflowMenuOpen2);
  };
  const menuTriggerVisible = !isSearchExpanded && responsiveState.hideUtilities;
  (0, import_react346.useEffect)(() => {
    setOverflowMenuOpen(false);
  }, [menuTriggerVisible]);
  useEffectOnUpdate(() => {
    var _a2;
    if (!overflowMenuOpen) {
      (_a2 = overflowMenuTriggerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  }, [overflowMenuOpen]);
  const content = (isVirtual) => {
    var _a2, _b;
    const Wrapper = isVirtual ? "div" : "header";
    const showIdentity = isVirtual || !isSearchExpanded;
    const showTitle = isVirtual || !responsiveState.hideTitle;
    const showSearchSlot = search && (isVirtual || !responsiveState.hideSearch || isSearchExpanded);
    const showSearchUtility = isVirtual || search && responsiveState.hideSearch;
    const showUtilities = isVirtual || !isSearchExpanded;
    const showMenuTrigger = isVirtual || menuTriggerVisible;
    return import_react346.default.createElement(
      Wrapper,
      {
        ref: isVirtual ? virtualRef : mainRef,
        "aria-hidden": isVirtual ? true : void 0,
        // Wrapper is an alias for "div" or "header".
        // eslint-disable-next-line react/forbid-component-props
        className: clsx_m_default(styles_css_default104["top-navigation"], {
          [styles_css_default104.virtual]: isVirtual,
          [styles_css_default104.hidden]: isVirtual,
          [styles_css_default104.narrow]: isNarrowViewport,
          [styles_css_default104.medium]: isMediumViewport
        })
      },
      import_react346.default.createElement(
        "div",
        { className: styles_css_default104["padding-box"] },
        showIdentity && import_react346.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default104.identity, !identity2.logo && styles_css_default104["no-logo"]) },
          import_react346.default.createElement(
            "a",
            { className: styles_css_default104["identity-link"], href: identity2.href, onClick: onIdentityClick },
            identity2.logo && import_react346.default.createElement("img", { role: "img", src: (_a2 = identity2.logo) === null || _a2 === void 0 ? void 0 : _a2.src, alt: (_b = identity2.logo) === null || _b === void 0 ? void 0 : _b.alt, className: clsx_m_default(styles_css_default104.logo, {
              [styles_css_default104.narrow]: isNarrowViewport
            }) }),
            showTitle && import_react346.default.createElement("span", { className: styles_css_default104.title }, identity2.title)
          )
        ),
        showSearchSlot && import_react346.default.createElement(
          "div",
          { className: styles_css_default104.inputs },
          import_react346.default.createElement("div", { className: clsx_m_default(styles_css_default104.search, !isVirtual && isSearchExpanded && styles_css_default104["search-expanded"]) }, search)
        ),
        import_react346.default.createElement(
          "div",
          { className: styles_css_default104.utilities },
          showSearchUtility && import_react346.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default104["utility-wrapper"], styles_css_default104["utility-type-button"], styles_css_default104["utility-type-button-link"], {
              [styles_css_default104.narrow]: isNarrowViewport,
              [styles_css_default104.medium]: isMediumViewport
            }), "data-utility-special": "search" },
            import_react346.default.createElement(Utility, { hideText: true, definition: {
              type: "button",
              iconName: isSearchExpanded ? "close" : "search",
              ariaLabel: isSearchExpanded ? i18n("i18nStrings.searchDismissIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.searchDismissIconAriaLabel) : i18n("i18nStrings.searchIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.searchIconAriaLabel),
              onClick: onSearchUtilityClick
            } })
          ),
          showUtilities && utilities.filter((_utility, i) => isVirtual || !responsiveState.hideUtilities || responsiveState.hideUtilities.indexOf(i) === -1).map((utility, i) => {
            var _a3;
            const hideText = !!responsiveState.hideUtilityText;
            const isLast = (isVirtual || !showMenuTrigger) && i === utilities.length - 1;
            const offsetRight = isLast && isLargeViewport ? "xxl" : isLast ? "l" : void 0;
            return import_react346.default.createElement(
              "div",
              { key: i, className: clsx_m_default(styles_css_default104["utility-wrapper"], styles_css_default104[`utility-type-${utility.type}`], utility.type === "button" && styles_css_default104[`utility-type-button-${(_a3 = utility.variant) !== null && _a3 !== void 0 ? _a3 : "link"}`], {
                [styles_css_default104.narrow]: isNarrowViewport,
                [styles_css_default104.medium]: isMediumViewport
              }), "data-utility-index": i, "data-utility-hide": `${hideText}` },
              import_react346.default.createElement(Utility, { hideText, definition: utility, offsetRight })
            );
          }),
          isVirtual && utilities.map((utility, i) => {
            var _a3;
            const hideText = !responsiveState.hideUtilityText;
            const isLast = !showMenuTrigger && i === utilities.length - 1;
            const offsetRight = isLast && isLargeViewport ? "xxl" : isLast ? "l" : void 0;
            return import_react346.default.createElement(
              "div",
              { key: i, className: clsx_m_default(styles_css_default104["utility-wrapper"], styles_css_default104[`utility-type-${utility.type}`], utility.type === "button" && styles_css_default104[`utility-type-button-${(_a3 = utility.variant) !== null && _a3 !== void 0 ? _a3 : "link"}`], {
                [styles_css_default104.narrow]: isNarrowViewport,
                [styles_css_default104.medium]: isMediumViewport
              }), "data-utility-index": i, "data-utility-hide": `${hideText}` },
              import_react346.default.createElement(Utility, { hideText, definition: utility, offsetRight })
            );
          }),
          showMenuTrigger && import_react346.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default104["utility-wrapper"], styles_css_default104["utility-type-menu-dropdown"], {
              [styles_css_default104.narrow]: isNarrowViewport,
              [styles_css_default104.medium]: isMediumViewport
            }), "data-utility-special": "menu-trigger" },
            import_react346.default.createElement(ButtonTrigger, { expanded: overflowMenuOpen, onClick: toggleOverflowMenu, offsetRight: "l", ref: !isVirtual ? overflowMenuTriggerRef : void 0 }, i18n("i18nStrings.overflowMenuTriggerText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.overflowMenuTriggerText))
          )
        )
      )
    );
  };
  return import_react346.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: __internalRootRef }),
    import_react346.default.createElement(
      VisualContext,
      { contextName: "top-navigation" },
      content(false),
      import_react346.default.createElement(Portal, null, content(true)),
      menuTriggerVisible && overflowMenuOpen && import_react346.default.createElement(
        "div",
        { className: styles_css_default104["overflow-menu-drawer"] },
        import_react346.default.createElement(overflow_menu_default, { headerText: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.overflowMenuTitleText, dismissIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.overflowMenuDismissIconAriaLabel, backIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.overflowMenuBackIconAriaLabel, items: utilities.filter((utility, i) => (!responsiveState.hideUtilities || responsiveState.hideUtilities.indexOf(i) !== -1) && !utility.disableUtilityCollapse), onClose: toggleOverflowMenu })
      )
    )
  );
}

// node_modules/@cloudscape-design/components/top-navigation/index.js
function TopNavigation(_a) {
  var { utilities = [] } = _a, restProps = __rest(_a, ["utilities"]);
  const baseComponentProps = useBaseComponent("TopNavigation");
  return import_react347.default.createElement(InternalTopNavigation, Object.assign({}, baseComponentProps, { utilities }, restProps));
}
applyDisplayName(TopNavigation, "TopNavigation");

// node_modules/@cloudscape-design/components/tutorial-panel/index.js
var import_react353 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tutorial-panel/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/tutorial-panel/styles.scoped.css";
var styles_css_default106 = {
  "tutorial-panel": "awsui_tutorial-panel_1oin5_a21xr_99"
};

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-list/index.js
var import_react348 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-list/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-list/styles.scoped.css";
var styles_css_default107 = {
  "content-enter": "awsui_content-enter_ig8mp_dp1p1_99",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_ig8mp_dp1p1_1",
  "tutorial-list": "awsui_tutorial-list_ig8mp_dp1p1_125",
  "tutorial-box": "awsui_tutorial-box_ig8mp_dp1p1_164",
  "tutorial-box-title": "awsui_tutorial-box-title_ig8mp_dp1p1_211",
  "tutorial-description-plaintext": "awsui_tutorial-description-plaintext_ig8mp_dp1p1_217",
  "tutorial-description": "awsui_tutorial-description_ig8mp_dp1p1_217",
  "expandable-section": "awsui_expandable-section_ig8mp_dp1p1_229",
  "expanded": "awsui_expanded_ig8mp_dp1p1_233",
  "button-wrapper": "awsui_button-wrapper_ig8mp_dp1p1_237",
  "start": "awsui_start_ig8mp_dp1p1_242",
  "expand-button": "awsui_expand-button_ig8mp_dp1p1_246",
  "collapse-button": "awsui_collapse-button_ig8mp_dp1p1_250",
  "learn-more-link": "awsui_learn-more-link_ig8mp_dp1p1_254",
  "title": "awsui_title_ig8mp_dp1p1_258",
  "prerequisites-alert": "awsui_prerequisites-alert_ig8mp_dp1p1_262",
  "completed": "awsui_completed_ig8mp_dp1p1_266",
  "download-link": "awsui_download-link_ig8mp_dp1p1_270"
};

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-list/index.js
function TutorialList({ i18nStrings, tutorials, loading = false, onStartTutorial, downloadUrl }) {
  checkSafeUrl("TutorialPanel", downloadUrl);
  const isRefresh = useVisualRefresh();
  return import_react348.default.createElement(
    import_react348.default.Fragment,
    null,
    import_react348.default.createElement(
      InternalSpaceBetween,
      { size: "s" },
      import_react348.default.createElement(
        InternalSpaceBetween,
        { size: "m" },
        import_react348.default.createElement(InternalBox, { variant: "h2", fontSize: isRefresh ? "heading-m" : "heading-l", padding: { bottom: "n" } }, i18nStrings.tutorialListTitle),
        import_react348.default.createElement(InternalBox, { variant: "p", color: "text-body-secondary", padding: "n" }, i18nStrings.tutorialListDescription)
      ),
      import_react348.default.createElement(
        InternalSpaceBetween,
        { size: "l" },
        downloadUrl && import_react348.default.createElement(
          "a",
          { href: downloadUrl, target: "_blank", rel: "noopener noreferrer", className: styles_css_default107["download-link"], "aria-label": i18nStrings.labelTutorialListDownloadLink },
          import_react348.default.createElement(internal_default, { name: "download" }),
          import_react348.default.createElement(InternalBox, { padding: { left: "xs" }, color: "inherit", fontWeight: "bold", display: "inline" }, i18nStrings.tutorialListDownloadLinkText)
        ),
        loading ? import_react348.default.createElement(
          StatusIndicator,
          { type: "loading" },
          import_react348.default.createElement(live_region_default, { visible: true }, i18nStrings.loadingText)
        ) : import_react348.default.createElement("ul", { className: styles_css_default107["tutorial-list"], role: "list" }, tutorials.map((tutorial, index) => import_react348.default.createElement(Tutorial, { tutorial, key: index, onStartTutorial, i18nStrings })))
      )
    )
  );
}
function Tutorial({ tutorial, onStartTutorial: onStartTutorialEventHandler, i18nStrings }) {
  var _a;
  checkSafeUrl("TutorialPanel", tutorial.learnMoreUrl);
  const controlId = useUniqueId();
  const triggerControldId = useUniqueId();
  const headerId = useUniqueId();
  const isRefresh = useVisualRefresh();
  const onStartTutorial = (0, import_react348.useCallback)(() => {
    fireNonCancelableEvent(onStartTutorialEventHandler, { tutorial });
  }, [onStartTutorialEventHandler, tutorial]);
  const [expanded, setExpanded] = (0, import_react348.useState)(!tutorial.prerequisitesNeeded && !tutorial.completed);
  const onClick = (0, import_react348.useCallback)(() => {
    setExpanded((expanded2) => !expanded2);
  }, []);
  return import_react348.default.createElement(
    "li",
    { className: styles_css_default107["tutorial-box"], role: "listitem" },
    import_react348.default.createElement(
      InternalSpaceBetween,
      { size: "xs" },
      import_react348.default.createElement(
        "div",
        { className: styles_css_default107["tutorial-box-title"] },
        import_react348.default.createElement(InternalBox, { variant: "h3", fontSize: isRefresh ? "heading-s" : "heading-m", id: headerId, margin: { right: "xs" }, padding: "n", className: styles_css_default107.title }, tutorial.title),
        import_react348.default.createElement(
          "div",
          { className: styles_css_default107["button-wrapper"] },
          import_react348.default.createElement(InternalButton, { id: triggerControldId, variant: "icon", ariaExpanded: expanded, __nativeAttributes: {
            "aria-controls": controlId,
            "aria-labelledby": headerId
          }, formAction: "none", onClick, className: expanded ? styles_css_default107["collapse-button"] : styles_css_default107["expand-button"], iconName: expanded ? "angle-up" : "angle-down" })
        )
      ),
      tutorial.completed ? import_react348.default.createElement(StatusIndicator, { __size: "inherit", type: "success", className: styles_css_default107.completed, wrapText: true }, i18nStrings.tutorialCompletedText) : null
    ),
    import_react348.default.createElement(
      "div",
      { "aria-live": "polite" },
      import_react348.default.createElement(
        CSSTransition_default,
        { in: expanded, timeout: 30, classNames: { enter: styles_css_default107["content-enter"] } },
        import_react348.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default107["expandable-section"], expanded && styles_css_default107.expanded), id: controlId },
          import_react348.default.createElement(
            InternalSpaceBetween,
            { size: "l" },
            import_react348.default.createElement(
              InternalSpaceBetween,
              { size: "m" },
              tutorial.prerequisitesNeeded && tutorial.prerequisitesAlert && import_react348.default.createElement(internal_default6, { type: "info", className: styles_css_default107["prerequisites-alert"] }, tutorial.prerequisitesAlert),
              import_react348.default.createElement(
                InternalSpaceBetween,
                { size: "s" },
                import_react348.default.createElement(
                  InternalBox,
                  { color: "text-body-secondary" },
                  import_react348.default.createElement("div", { className: clsx_m_default(styles_css_default107["tutorial-description"], typeof tutorial.description === "string" && styles_css_default107["tutorial-description-plaintext"]) }, tutorial.description)
                ),
                tutorial.learnMoreUrl && import_react348.default.createElement(internal_default3, { href: tutorial.learnMoreUrl, className: styles_css_default107["learn-more-link"], externalIconAriaLabel: i18nStrings.labelLearnMoreExternalIcon, ariaLabel: i18nStrings.labelLearnMoreLink, external: true, variant: "primary" }, i18nStrings.learnMoreLinkText)
              )
            ),
            import_react348.default.createElement(
              InternalBox,
              { margin: { bottom: "xxs" } },
              import_react348.default.createElement(InternalButton, { onClick: onStartTutorial, disabled: (_a = tutorial.prerequisitesNeeded) !== null && _a !== void 0 ? _a : false, formAction: "none", className: styles_css_default107.start }, tutorial.completed ? i18nStrings.restartTutorialButtonText : i18nStrings.startTutorialButtonText)
            )
          )
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/index.js
var import_react352 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/styles.scoped.css";
var styles_css_default108 = {
  "tutorial-list": "awsui_tutorial-list_1u70p_8w58y_99",
  "tutorial-title": "awsui_tutorial-title_1u70p_8w58y_138",
  "task": "awsui_task_1u70p_8w58y_145",
  "task-title": "awsui_task-title_1u70p_8w58y_153",
  "task-title--status": "awsui_task-title--status_1u70p_8w58y_161",
  "current-task": "awsui_current-task_1u70p_8w58y_165",
  "successful-task": "awsui_successful-task_1u70p_8w58y_169",
  "congratulation-message": "awsui_congratulation-message_1u70p_8w58y_173",
  "congratulation-message--status": "awsui_congratulation-message--status_1u70p_8w58y_181",
  "plaintext-congratulation-description": "awsui_plaintext-congratulation-description_1u70p_8w58y_185",
  "divider": "awsui_divider_1u70p_8w58y_189",
  "step-list": "awsui_step-list_1u70p_8w58y_193",
  "step": "awsui_step_1u70p_8w58y_193",
  "expandable-section-wrapper": "awsui_expandable-section-wrapper_1u70p_8w58y_204",
  "expandable-section-header": "awsui_expandable-section-header_1u70p_8w58y_208",
  "step-title": "awsui_step-title_1u70p_8w58y_213",
  "feedback-link": "awsui_feedback-link_1u70p_8w58y_214",
  "dismiss-button": "awsui_dismiss-button_1u70p_8w58y_215",
  "completion-screen-title": "awsui_completion-screen-title_1u70p_8w58y_216",
  "completion-screen-description": "awsui_completion-screen-description_1u70p_8w58y_217"
};

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/congratulation-screen.js
var import_react349 = __toESM(require_react());
function CongratulationScreen({ children, onFeedbackClick, i18nStrings }) {
  return import_react349.default.createElement(
    InternalSpaceBetween,
    { size: "xxl" },
    import_react349.default.createElement(
      InternalSpaceBetween,
      { size: "xl" },
      import_react349.default.createElement(
        "div",
        { className: styles_css_default108["congratulation-message"] },
        import_react349.default.createElement(StatusIndicator, { __size: "inherit", type: "success", className: styles_css_default108["congratulation-message--status"] }),
        import_react349.default.createElement("div", { className: styles_css_default108["completion-screen-title"] }, i18nStrings.completionScreenTitle)
      ),
      import_react349.default.createElement(
        InternalBox,
        { color: "text-body-secondary" },
        import_react349.default.createElement("div", { className: clsx_m_default({
          [styles_css_default108["completion-screen-description"]]: true,
          [styles_css_default108["plaintext-congratulation-description"]]: typeof children === "string"
        }) }, children)
      )
    ),
    import_react349.default.createElement("div", { className: styles_css_default108.divider }),
    onFeedbackClick && import_react349.default.createElement(internal_default3, { onFollow: onFeedbackClick, className: styles_css_default108["feedback-link"], variant: "primary" }, i18nStrings.feedbackLinkText)
  );
}

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/task-list.js
var import_react351 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/task.js
var import_react350 = __toESM(require_react());
function getStatusIndicatorType(taskIndex, currentTaskIndex) {
  if (taskIndex < currentTaskIndex) {
    return "success";
  }
  if (taskIndex === currentTaskIndex) {
    return "in-progress";
  }
  return "pending";
}
function Task({ task, taskIndex, currentTaskIndex, expanded, onToggleExpand, i18nStrings }) {
  const statusIndicatorType = getStatusIndicatorType(taskIndex, currentTaskIndex);
  const onExpandChange = (0, import_react350.useCallback)(() => {
    onToggleExpand(taskIndex);
  }, [onToggleExpand, taskIndex]);
  return import_react350.default.createElement(
    "li",
    { className: styles_css_default108.task },
    import_react350.default.createElement(
      InternalSpaceBetween,
      { size: "xxs" },
      import_react350.default.createElement(
        "div",
        { className: styles_css_default108["task-title"] },
        import_react350.default.createElement(StatusIndicator, { __size: "inherit", type: statusIndicatorType, iconAriaLabel: i18nStrings.labelsTaskStatus[statusIndicatorType], className: styles_css_default108["task-title--status"] }),
        import_react350.default.createElement(InternalBox, { variant: "h3", padding: { left: "xxxs", vertical: "n" }, fontSize: "heading-s", color: taskIndex < currentTaskIndex ? "text-status-success" : "text-status-inactive" }, i18nStrings.taskTitle(taskIndex, task.title))
      ),
      import_react350.default.createElement(
        "div",
        { className: styles_css_default108["expandable-section-wrapper"] },
        import_react350.default.createElement(
          InternalExpandableSection,
          { header: import_react350.default.createElement("span", { className: styles_css_default108["expandable-section-header"] }, i18nStrings.labelTotalSteps(task.steps.length)), expanded, onChange: onExpandChange, headerAriaLabel: joinStrings(i18nStrings.taskTitle(taskIndex, task.title), i18nStrings.labelTotalSteps(task.steps.length)) },
          import_react350.default.createElement("ol", { className: styles_css_default108["step-list"] }, task.steps.map((step, stepIndex) => import_react350.default.createElement(
            "li",
            { key: stepIndex, className: styles_css_default108.step },
            import_react350.default.createElement(InternalBox, { color: "text-body-secondary", fontSize: "body-m", padding: { left: "l" }, className: styles_css_default108["step-title"] }, i18nStrings.stepTitle(stepIndex, step.title))
          )))
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/task-list.js
function TaskList({ tasks, onExitTutorial, currentGlobalStepIndex, i18nStrings }) {
  const currentTaskIndex = getStepInfo(tasks, currentGlobalStepIndex !== null && currentGlobalStepIndex !== void 0 ? currentGlobalStepIndex : 0).taskIndex;
  const [expandedTasks, setExpandedTasks] = (0, import_react351.useState)({ [currentTaskIndex]: true });
  const onToggleExpand = (0, import_react351.useCallback)((stepIndex) => {
    setExpandedTasks((prevTasks) => Object.assign(Object.assign({}, prevTasks), { [stepIndex]: !prevTasks[stepIndex] }));
  }, []);
  (0, import_react351.useEffect)(() => {
    setExpandedTasks({ [currentTaskIndex]: true });
  }, [currentTaskIndex]);
  return import_react351.default.createElement(
    InternalSpaceBetween,
    { size: "xxl" },
    import_react351.default.createElement("ol", { className: styles_css_default108["tutorial-list"] }, tasks.map((task, index) => {
      var _a;
      return import_react351.default.createElement(Task, { task, key: index, taskIndex: index, currentTaskIndex, expanded: (_a = expandedTasks[index]) !== null && _a !== void 0 ? _a : false, onToggleExpand, i18nStrings });
    })),
    import_react351.default.createElement(
      InternalBox,
      { margin: { top: "xxxs" } },
      import_react351.default.createElement(InternalButton, { onClick: onExitTutorial, formAction: "none", className: styles_css_default108["dismiss-button"] }, i18nStrings.dismissTutorialButtonText)
    )
  );
}

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/index.js
function TutorialDetailView({ tutorial, onExitTutorial: onExitTutorialHandler, currentStepIndex = 0, onFeedbackClick: onFeedbackClickHandler, i18nStrings }) {
  const isRefresh = useVisualRefresh();
  const onExitTutorial = (0, import_react352.useCallback)(() => {
    fireNonCancelableEvent(onExitTutorialHandler, { tutorial });
  }, [onExitTutorialHandler, tutorial]);
  const onFeedbackClick = (0, import_react352.useMemo)(() => onFeedbackClickHandler && (() => fireNonCancelableEvent(onFeedbackClickHandler, { tutorial })), [onFeedbackClickHandler, tutorial]);
  return import_react352.default.createElement(
    import_react352.default.Fragment,
    null,
    import_react352.default.createElement(
      InternalSpaceBetween,
      { size: "xl" },
      import_react352.default.createElement(
        "div",
        { className: styles_css_default108["tutorial-title"] },
        import_react352.default.createElement(InternalButton, { variant: "icon", onClick: onExitTutorial, ariaLabel: i18nStrings.labelExitTutorial, formAction: "none", iconName: "arrow-left" }),
        import_react352.default.createElement(InternalBox, { variant: "h2", fontSize: isRefresh ? "heading-m" : "heading-l", padding: { top: "xxs" }, margin: { left: "s" } }, tutorial.title)
      ),
      import_react352.default.createElement(
        "div",
        null,
        import_react352.default.createElement("div", { role: "status" }, tutorial.completed && import_react352.default.createElement(CongratulationScreen, { onFeedbackClick, i18nStrings }, tutorial.completedScreenDescription)),
        !tutorial.completed && import_react352.default.createElement(TaskList, { tasks: tutorial.tasks, onExitTutorial, currentGlobalStepIndex: currentStepIndex, i18nStrings })
      )
    )
  );
}

// node_modules/@cloudscape-design/components/tutorial-panel/index.js
function TutorialPanel(_a) {
  var { i18nStrings, loading, tutorials, onFeedbackClick, downloadUrl } = _a, restProps = __rest(_a, ["i18nStrings", "loading", "tutorials", "onFeedbackClick", "downloadUrl"]);
  const { __internalRootRef } = useBaseComponent("TutorialPanel");
  const baseProps = getBaseProps(restProps);
  const context = (0, import_react353.useContext)(hotspotContext);
  return import_react353.default.createElement(
    import_react353.default.Fragment,
    null,
    import_react353.default.createElement("div", Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default106["tutorial-panel"]), ref: __internalRootRef }), context.currentTutorial ? import_react353.default.createElement(TutorialDetailView, { i18nStrings, tutorial: context.currentTutorial, onExitTutorial: context.onExitTutorial, currentStepIndex: context.currentStepIndex, onFeedbackClick }) : import_react353.default.createElement(TutorialList, { i18nStrings, tutorials, loading, onStartTutorial: context.onStartTutorial, downloadUrl }))
  );
}
applyDisplayName(TutorialPanel, "TutorialPanel");

// node_modules/@cloudscape-design/components/wizard/index.js
var import_react361 = __toESM(require_react());

// node_modules/@cloudscape-design/components/wizard/internal.js
var import_react360 = __toESM(require_react());

// node_modules/@cloudscape-design/components/wizard/wizard-form.js
var import_react357 = __toESM(require_react());

// node_modules/@cloudscape-design/components/wizard/wizard-actions.js
var import_react355 = __toESM(require_react());

// node_modules/@cloudscape-design/components/wizard/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/wizard/styles.scoped.css";
var styles_css_default109 = {
  "root": "awsui_root_1xupv_e5t6y_100",
  "wizard": "awsui_wizard_1xupv_e5t6y_135",
  "refresh": "awsui_refresh_1xupv_e5t6y_135",
  "small-container": "awsui_small-container_1xupv_e5t6y_142",
  "remove-high-contrast-header": "awsui_remove-high-contrast-header_1xupv_e5t6y_146",
  "navigation": "awsui_navigation_1xupv_e5t6y_154",
  "number": "awsui_number_1xupv_e5t6y_236",
  "circle": "awsui_circle_1xupv_e5t6y_252",
  "title": "awsui_title_1xupv_e5t6y_263",
  "active": "awsui_active_1xupv_e5t6y_294",
  "disabled": "awsui_disabled_1xupv_e5t6y_305",
  "enabled": "awsui_enabled_1xupv_e5t6y_315",
  "form": "awsui_form_1xupv_e5t6y_357",
  "form-header": "awsui_form-header_1xupv_e5t6y_362",
  "background": "awsui_background_1xupv_e5t6y_372",
  "form-header-content": "awsui_form-header-content_1xupv_e5t6y_384",
  "form-component": "awsui_form-component_1xupv_e5t6y_392",
  "hidden": "awsui_hidden_1xupv_e5t6y_406",
  "collapsed-steps": "awsui_collapsed-steps_1xupv_e5t6y_410",
  "collapsed-steps-hidden": "awsui_collapsed-steps-hidden_1xupv_e5t6y_415",
  "form-header-component-wrapper": "awsui_form-header-component-wrapper_1xupv_e5t6y_419",
  "form-header-component": "awsui_form-header-component_1xupv_e5t6y_419",
  "navigation-link": "awsui_navigation-link_1xupv_e5t6y_435",
  "navigation-link-item": "awsui_navigation-link-item_1xupv_e5t6y_436",
  "navigation-link-label": "awsui_navigation-link-label_1xupv_e5t6y_437",
  "navigation-link-active": "awsui_navigation-link-active_1xupv_e5t6y_441",
  "navigation-link-disabled": "awsui_navigation-link-disabled_1xupv_e5t6y_446",
  "cancel-button": "awsui_cancel-button_1xupv_e5t6y_450",
  "previous-button": "awsui_previous-button_1xupv_e5t6y_451",
  "primary-button": "awsui_primary-button_1xupv_e5t6y_452",
  "skip-to-button": "awsui_skip-to-button_1xupv_e5t6y_453",
  "action-buttons": "awsui_action-buttons_1xupv_e5t6y_457"
};

// node_modules/@cloudscape-design/components/wizard/unmount.js
var import_react354 = __toESM(require_react());
var Unmount = class extends import_react354.default.Component {
  componentWillUnmount() {
    this.props.onUnmount();
  }
  render() {
    return this.props.children;
  }
};

// node_modules/@cloudscape-design/components/wizard/wizard-actions.js
function WizardActions({ cancelButtonText, onCancelClick, isPrimaryLoading, primaryButtonText, primaryButtonLoadingText, onPrimaryClick, showPrevious, previousButtonText, onPreviousClick, showSkipTo, skipToButtonText, onSkipToClick }) {
  const containerRef = (0, import_react355.useRef)(null);
  const primaryButtonRef = (0, import_react355.useRef)(null);
  const onPreviousUnmount = () => {
    var _a, _b;
    if (((_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(`.${styles_css_default109["previous-button"]}`)) === document.activeElement) {
      (_b = primaryButtonRef.current) === null || _b === void 0 ? void 0 : _b.focus();
    }
  };
  const onSkipUnmount = () => {
    var _a, _b;
    if (((_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(`.${styles_css_default109["skip-to-button"]}`)) === document.activeElement) {
      (_b = primaryButtonRef.current) === null || _b === void 0 ? void 0 : _b.focus();
    }
  };
  return import_react355.default.createElement(
    "div",
    { ref: containerRef },
    import_react355.default.createElement(
      InternalSpaceBetween,
      { direction: "horizontal", size: "xs", className: styles_css_default109["action-buttons"] },
      import_react355.default.createElement(InternalButton, { className: styles_css_default109["cancel-button"], variant: "link", formAction: "none", onClick: onCancelClick }, cancelButtonText),
      showSkipTo && skipToButtonText && import_react355.default.createElement(
        Unmount,
        { onUnmount: onSkipUnmount },
        import_react355.default.createElement(InternalButton, { className: styles_css_default109["skip-to-button"], onClick: onSkipToClick, formAction: "none", disabled: isPrimaryLoading }, skipToButtonText)
      ),
      showPrevious && import_react355.default.createElement(
        Unmount,
        { onUnmount: onPreviousUnmount },
        import_react355.default.createElement(InternalButton, { className: styles_css_default109["previous-button"], onClick: onPreviousClick, formAction: "none", disabled: isPrimaryLoading }, previousButtonText)
      ),
      import_react355.default.createElement(InternalButton, { ref: primaryButtonRef, className: styles_css_default109["primary-button"], variant: "primary", formAction: "none", onClick: onPrimaryClick, loading: isPrimaryLoading, loadingText: primaryButtonLoadingText }, primaryButtonText)
    )
  );
}

// node_modules/@cloudscape-design/components/wizard/wizard-form-header.js
var import_react356 = __toESM(require_react());
function WizardFormHeader({ children, isVisualRefresh }) {
  const overlapElement = useDynamicOverlap();
  return import_react356.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default109["form-header"], isVisualRefresh && styles_css_default109["form-header-refresh"], isVisualRefresh && getContentHeaderClassName()), ref: overlapElement },
    import_react356.default.createElement("div", { className: clsx_m_default(styles_css_default109["form-header-content"], shouldRemoveHighContrastHeader() && styles_css_default109["remove-high-contrast-header"]) }, children)
  );
}

// node_modules/@cloudscape-design/components/wizard/wizard-form.js
var STEP_NAME_SELECTOR = `[${DATA_ATTR_FUNNEL_KEY}=${FUNNEL_KEY_STEP_NAME}]`;
function WizardForm({ steps, activeStepIndex, isVisualRefresh, showCollapsedSteps, i18nStrings, submitButtonText, isPrimaryLoading, allowSkipTo, secondaryActions, onCancelClick, onPreviousClick, onPrimaryClick, onSkipToClick }) {
  const _a = steps[activeStepIndex] || {}, { title, info, description, content, errorText, isOptional } = _a, rest = __rest(_a, ["title", "info", "description", "content", "errorText", "isOptional"]);
  const isLastStep = activeStepIndex >= steps.length - 1;
  const skipToTargetIndex = findSkipToTargetIndex(steps, activeStepIndex);
  const isMobile = useMobile();
  const stepHeaderRef = (0, import_react357.useRef)(null);
  const analyticsMetadata = getAnalyticsMetadataProps(rest);
  const elementRef = useComponentMetadata("WizardForm", PACKAGE_VERSION, Object.assign({}, analyticsMetadata));
  useEffectOnUpdate(() => {
    var _a2;
    if (stepHeaderRef && stepHeaderRef.current) {
      (_a2 = stepHeaderRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  }, [activeStepIndex]);
  const showSkipTo = allowSkipTo && skipToTargetIndex !== -1;
  const skipToButtonText = skipToTargetIndex !== -1 && i18nStrings.skipToButtonLabel ? i18nStrings.skipToButtonLabel(steps[skipToTargetIndex], skipToTargetIndex + 1) : void 0;
  return import_react357.default.createElement(
    import_react357.default.Fragment,
    null,
    import_react357.default.createElement(AnalyticsFunnelStep, { instanceIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, errorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext, stepNameSelector: STEP_NAME_SELECTOR, stepNumber: activeStepIndex + 1 }, ({ funnelStepProps }) => {
      var _a2;
      return import_react357.default.createElement(
        import_react357.default.Fragment,
        null,
        import_react357.default.createElement(
          WizardFormHeader,
          { isMobile: isMobile || showCollapsedSteps, isVisualRefresh },
          import_react357.default.createElement("div", { className: clsx_m_default(styles_css_default109["collapsed-steps"], !showCollapsedSteps && styles_css_default109["collapsed-steps-hidden"]) }, (_a2 = i18nStrings.collapsedStepsLabel) === null || _a2 === void 0 ? void 0 : _a2.call(i18nStrings, activeStepIndex + 1, steps.length)),
          import_react357.default.createElement(
            InternalHeader,
            { className: styles_css_default109["form-header-component"], variant: "h1", description, info },
            import_react357.default.createElement(
              "span",
              { className: styles_css_default109["form-header-component-wrapper"], tabIndex: -1, ref: stepHeaderRef },
              import_react357.default.createElement("span", Object.assign({}, { [DATA_ATTR_FUNNEL_KEY]: FUNNEL_KEY_STEP_NAME }), title),
              isOptional && import_react357.default.createElement("i", null, ` - ${i18nStrings.optional}`)
            )
          )
        ),
        import_react357.default.createElement(InternalForm, Object.assign({ __internalRootRef: elementRef, className: clsx_m_default(styles_css_default109["form-component"]), actions: import_react357.default.createElement(WizardActions, { cancelButtonText: i18nStrings.cancelButton, primaryButtonText: isLastStep ? submitButtonText !== null && submitButtonText !== void 0 ? submitButtonText : i18nStrings.submitButton : i18nStrings.nextButton, primaryButtonLoadingText: isLastStep ? i18nStrings.submitButtonLoadingAnnouncement : i18nStrings.nextButtonLoadingAnnouncement, previousButtonText: i18nStrings.previousButton, onCancelClick, onPreviousClick, onPrimaryClick, onSkipToClick: () => onSkipToClick(skipToTargetIndex), showPrevious: activeStepIndex !== 0, isPrimaryLoading, showSkipTo, skipToButtonText }), secondaryActions, errorText, errorIconAriaLabel: i18nStrings.errorIconAriaLabel }, funnelStepProps), content)
      );
    })
  );
}
function findSkipToTargetIndex(steps, activeStepIndex) {
  let nextRequiredStepIndex = activeStepIndex;
  do {
    nextRequiredStepIndex++;
  } while (nextRequiredStepIndex < steps.length - 1 && steps[nextRequiredStepIndex].isOptional);
  return nextRequiredStepIndex > activeStepIndex + 1 ? nextRequiredStepIndex : -1;
}

// node_modules/@cloudscape-design/components/wizard/wizard-navigation.js
var import_react358 = __toESM(require_react());
var Statuses;
(function(Statuses2) {
  Statuses2["Active"] = "active";
  Statuses2["Unvisited"] = "unvisited";
  Statuses2["Visited"] = "visited";
  Statuses2["Next"] = "next";
})(Statuses || (Statuses = {}));
function Navigation2({ activeStepIndex, farthestStepIndex, allowSkipTo, hidden, i18nStrings, isVisualRefresh, isLoadingNextStep, onStepClick, onSkipToClick, steps }) {
  return import_react358.default.createElement(
    "nav",
    { className: clsx_m_default(styles_css_default109.navigation, hidden && styles_css_default109.hidden, isVisualRefresh && styles_css_default109.refresh, shouldRemoveHighContrastHeader() && styles_css_default109["remove-high-contrast-header"]), "aria-label": i18nStrings.navigationAriaLabel },
    import_react358.default.createElement("ul", { className: clsx_m_default(isVisualRefresh && styles_css_default109.refresh, shouldRemoveHighContrastHeader() && styles_css_default109["remove-high-contrast-header"]) }, steps.map((step, index) => isVisualRefresh ? import_react358.default.createElement(NavigationStepVisualRefresh, { i18nStrings, index, key: index, onStepClick, onSkipToClick, status: getStatus(index), step }) : import_react358.default.createElement(NavigationStepClassic, { i18nStrings, index, key: index, onStepClick, onSkipToClick, status: getStatus(index), step })))
  );
  function getStatus(index) {
    if (activeStepIndex === index) {
      return Statuses.Active;
    }
    if (isLoadingNextStep) {
      return Statuses.Unvisited;
    }
    if (farthestStepIndex >= index) {
      return Statuses.Visited;
    }
    if (allowSkipTo && canSkip(activeStepIndex + 1, index)) {
      return Statuses.Next;
    }
    return Statuses.Unvisited;
  }
  function canSkip(fromIndex, toIndex) {
    let index = fromIndex;
    do {
      if (!steps[index].isOptional) {
        return false;
      }
      index++;
    } while (index < toIndex);
    return true;
  }
}
function NavigationStepVisualRefresh({ i18nStrings, index, onStepClick, onSkipToClick, status, step }) {
  function handleStepInteraction() {
    if (status === Statuses.Visited) {
      onStepClick(index);
    }
    if (status === Statuses.Next) {
      onSkipToClick(index);
    }
  }
  const state = {
    active: "active",
    unvisited: "disabled",
    visited: "enabled",
    next: "enabled"
  }[status];
  const linkClassName = clsx_m_default(styles_css_default109["navigation-link"], {
    [styles_css_default109["navigation-link-active"]]: status === Statuses.Active,
    [styles_css_default109["navigation-link-disabled"]]: status === Statuses.Unvisited
  });
  return import_react358.default.createElement(
    "li",
    { className: clsx_m_default(styles_css_default109[`${state}`], styles_css_default109["navigation-link-item"]) },
    import_react358.default.createElement("hr", null),
    import_react358.default.createElement(
      "span",
      { className: clsx_m_default(styles_css_default109.number, styles_css_default109["navigation-link-label"]) },
      i18nStrings.stepNumberLabel && i18nStrings.stepNumberLabel(index + 1),
      step.isOptional && import_react358.default.createElement("i", null, ` - ${i18nStrings.optional}`)
    ),
    import_react358.default.createElement(
      "a",
      { className: linkClassName, "aria-current": status === Statuses.Active ? "step" : void 0, "aria-disabled": status === Statuses.Unvisited ? "true" : void 0, onClick: (event) => {
        event.preventDefault();
        handleStepInteraction();
      }, onKeyDown: (event) => {
        if (event.key === " " || event.key === "Enter") {
          event.preventDefault();
        }
        if (event.key === "Enter") {
          handleStepInteraction();
        }
      }, onKeyUp: (event) => {
        if (event.key === " ") {
          handleStepInteraction();
        }
      }, role: "button", tabIndex: status === Statuses.Visited || status === Statuses.Next ? 0 : void 0 },
      import_react358.default.createElement("div", { className: clsx_m_default(styles_css_default109.circle) }),
      import_react358.default.createElement("span", { className: clsx_m_default(styles_css_default109.title) }, step.title)
    )
  );
}
function NavigationStepClassic({ i18nStrings, index, onStepClick, onSkipToClick, status, step }) {
  const spanClassName = clsx_m_default(styles_css_default109["navigation-link"], status === Statuses.Active ? styles_css_default109["navigation-link-active"] : styles_css_default109["navigation-link-disabled"]);
  return import_react358.default.createElement(
    "li",
    { className: styles_css_default109["navigation-link-item"] },
    import_react358.default.createElement(
      InternalBox,
      { variant: "small", className: styles_css_default109["navigation-link-label"], display: "block", margin: { bottom: "xxs" } },
      i18nStrings.stepNumberLabel && i18nStrings.stepNumberLabel(index + 1),
      step.isOptional && import_react358.default.createElement("i", null, ` - ${i18nStrings.optional}`)
    ),
    import_react358.default.createElement("div", null, status === Statuses.Visited || status === Statuses.Next ? import_react358.default.createElement(internal_default3, { className: clsx_m_default(styles_css_default109["navigation-link"]), onFollow: (evt) => {
      evt.preventDefault();
      status === Statuses.Visited ? onStepClick(index) : onSkipToClick(index);
    }, variant: "primary" }, step.title) : import_react358.default.createElement("span", { className: spanClassName, "aria-current": status === Statuses.Active ? "step" : void 0, "aria-disabled": status === Statuses.Active ? void 0 : "true" }, step.title))
  );
}

// node_modules/@cloudscape-design/components/wizard/analytics.js
var import_react359 = __toESM(require_react());
function useFunnelChangeEvent(funnelInteractionId, steps) {
  const listenForStepChanges = (0, import_react359.useRef)(false);
  (0, import_react359.useEffect)(() => {
    const handle = setTimeout(() => listenForStepChanges.current = true, 0);
    return () => {
      clearTimeout(handle);
      listenForStepChanges.current = false;
    };
  }, [funnelInteractionId]);
  const stepTitles = steps.map((step) => step.title).join();
  (0, import_react359.useEffect)(() => {
    if (!funnelInteractionId || !listenForStepChanges.current) {
      return;
    }
    FunnelMetrics.funnelChange({
      funnelInteractionId,
      stepConfiguration: getStepConfiguration(steps)
    });
  }, [funnelInteractionId, stepTitles]);
}
function getStepConfiguration(steps) {
  return steps.map((step, index) => {
    var _a;
    return {
      name: step.title,
      number: index + 1,
      isOptional: (_a = step.isOptional) !== null && _a !== void 0 ? _a : false
    };
  });
}

// node_modules/@cloudscape-design/components/wizard/internal.js
function InternalWizard(_a) {
  var _b, _c, _d, _e, _f, _g, _h, _j;
  var { steps, activeStepIndex: controlledActiveStepIndex, submitButtonText, isLoadingNextStep = false, allowSkipTo = false, secondaryActions, onCancel, onSubmit, onNavigate, __internalRootRef } = _a, rest = __rest(_a, ["steps", "activeStepIndex", "submitButtonText", "isLoadingNextStep", "allowSkipTo", "secondaryActions", "onCancel", "onSubmit", "onNavigate", "__internalRootRef"]);
  const baseProps = getBaseProps(rest);
  const [breakpoint, breakpointsRef] = useContainerBreakpoints(["xs"]);
  const ref = useMergeRefs(breakpointsRef, __internalRootRef);
  const smallContainer = breakpoint === "default";
  const [activeStepIndex, setActiveStepIndex] = useControllable(controlledActiveStepIndex, onNavigate, 0, {
    componentName: "Wizard",
    controlledProp: "activeStepIndex",
    changeHandler: "onNavigate"
  });
  const { funnelInteractionId, funnelSubmit, funnelCancel, funnelProps, funnelNextOrSubmitAttempt } = useFunnel();
  const actualActiveStepIndex = activeStepIndex ? Math.min(activeStepIndex, steps.length - 1) : 0;
  const farthestStepIndex = (0, import_react360.useRef)(actualActiveStepIndex);
  farthestStepIndex.current = Math.max(farthestStepIndex.current, actualActiveStepIndex);
  const isVisualRefresh = useVisualRefresh();
  const isLastStep = actualActiveStepIndex >= steps.length - 1;
  const navigationEvent = (requestedStepIndex, reason) => {
    if (funnelInteractionId) {
      const stepName = getNameFromSelector(STEP_NAME_SELECTOR);
      FunnelMetrics.funnelStepNavigation({
        navigationType: reason,
        funnelInteractionId,
        stepNumber: actualActiveStepIndex + 1,
        stepName,
        stepNameSelector: STEP_NAME_SELECTOR,
        destinationStepNumber: requestedStepIndex + 1,
        subStepAllSelector: getSubStepAllSelector()
      });
    }
    setActiveStepIndex(requestedStepIndex);
    fireNonCancelableEvent(onNavigate, { requestedStepIndex, reason });
  };
  const onStepClick = (stepIndex) => navigationEvent(stepIndex, "step");
  const onSkipToClick = (stepIndex) => navigationEvent(stepIndex, "skip");
  const onCancelClick = () => {
    funnelCancel();
    fireNonCancelableEvent(onCancel);
  };
  const onPreviousClick = () => navigationEvent(actualActiveStepIndex - 1, "previous");
  const onPrimaryClick = () => {
    funnelNextOrSubmitAttempt();
    if (isLastStep) {
      funnelSubmit();
      fireNonCancelableEvent(onSubmit);
    } else {
      navigationEvent(actualActiveStepIndex + 1, "next");
    }
  };
  useFunnelChangeEvent(funnelInteractionId, steps);
  const i18n = useInternalI18n("wizard");
  const skipToButtonLabel = i18n("i18nStrings.skipToButtonLabel", (_b = rest.i18nStrings) === null || _b === void 0 ? void 0 : _b.skipToButtonLabel, (format3) => (task) => format3({ task__title: task.title }));
  const i18nStrings = Object.assign(Object.assign({}, rest.i18nStrings), { skipToButtonLabel, stepNumberLabel: i18n("i18nStrings.stepNumberLabel", (_c = rest.i18nStrings) === null || _c === void 0 ? void 0 : _c.stepNumberLabel, (format3) => (stepNumber) => format3({ stepNumber })), collapsedStepsLabel: i18n("i18nStrings.collapsedStepsLabel", (_d = rest.i18nStrings) === null || _d === void 0 ? void 0 : _d.collapsedStepsLabel, (format3) => (stepNumber, stepsCount) => format3({ stepNumber, stepsCount })), navigationAriaLabel: i18n("i18nStrings.navigationAriaLabel", (_e = rest.i18nStrings) === null || _e === void 0 ? void 0 : _e.navigationAriaLabel), cancelButton: i18n("i18nStrings.cancelButton", (_f = rest.i18nStrings) === null || _f === void 0 ? void 0 : _f.cancelButton), previousButton: i18n("i18nStrings.previousButton", (_g = rest.i18nStrings) === null || _g === void 0 ? void 0 : _g.previousButton), nextButton: i18n("i18nStrings.nextButton", (_h = rest.i18nStrings) === null || _h === void 0 ? void 0 : _h.nextButton), optional: i18n("i18nStrings.optional", (_j = rest.i18nStrings) === null || _j === void 0 ? void 0 : _j.optional) });
  if (activeStepIndex && activeStepIndex >= steps.length) {
    warnOnce("Wizard", `You have set \`activeStepIndex\` to ${activeStepIndex} but you have provided only ${steps.length} steps. Its value is ignored and the component uses ${steps.length - 1} instead.`);
  }
  if (allowSkipTo && !skipToButtonLabel) {
    warnOnce("Wizard", `You have set \`allowSkipTo\` but you have not provided \`i18nStrings.skipToButtonLabel\`. The skip-to button will not be rendered.`);
  }
  return import_react360.default.createElement(
    "div",
    Object.assign({}, baseProps, funnelProps, { ref, className: clsx_m_default(styles_css_default109.root, baseProps.className) }),
    import_react360.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default109.wizard, isVisualRefresh && styles_css_default109.refresh, smallContainer && styles_css_default109["small-container"], shouldRemoveHighContrastHeader() && styles_css_default109["remove-high-contrast-header"]) },
      import_react360.default.createElement(Navigation2, { activeStepIndex: actualActiveStepIndex, farthestStepIndex: farthestStepIndex.current, allowSkipTo, hidden: smallContainer, i18nStrings, isVisualRefresh, isLoadingNextStep, onStepClick, onSkipToClick, steps }),
      import_react360.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default109.form, isVisualRefresh && styles_css_default109.refresh, smallContainer && styles_css_default109["small-container"], shouldRemoveHighContrastHeader() && styles_css_default109["remove-high-contrast-header"]) },
        isVisualRefresh && import_react360.default.createElement("div", { className: clsx_m_default(styles_css_default109.background, getContentHeaderClassName()) }),
        import_react360.default.createElement(WizardForm, { steps, isVisualRefresh, showCollapsedSteps: smallContainer, i18nStrings, submitButtonText, activeStepIndex: actualActiveStepIndex, isPrimaryLoading: isLoadingNextStep, allowSkipTo, secondaryActions, onCancelClick, onPreviousClick, onSkipToClick, onPrimaryClick })
      )
    )
  );
}

// node_modules/@cloudscape-design/components/wizard/index.js
function Wizard(_a) {
  var { isLoadingNextStep = false, allowSkipTo = false } = _a, props = __rest(_a, ["isLoadingNextStep", "allowSkipTo"]);
  const analyticsMetadata = getAnalyticsMetadataProps(props);
  const baseComponentProps = useBaseComponent("Wizard", { props: { allowSkipTo } }, analyticsMetadata);
  const { wizardCount } = useFunnel();
  const externalProps = getExternalProps(props);
  (0, import_react361.useEffect)(() => {
    wizardCount.current++;
    return () => void wizardCount.current--;
  }, [wizardCount]);
  return import_react361.default.createElement(
    AnalyticsFunnel,
    { instanceIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, flowType: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.flowType, errorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext, funnelType: "multi-page", optionalStepNumbers: props.steps.map((step, index) => step.isOptional ? index + 1 : -1).filter((step) => step !== -1), totalFunnelSteps: props.steps.length, stepConfiguration: getStepConfiguration(props.steps) },
    import_react361.default.createElement(InternalWizard, Object.assign({ isLoadingNextStep, allowSkipTo }, externalProps, baseComponentProps))
  );
}
applyDisplayName(Wizard, "Wizard");
var wizard_default = Wizard;
export {
  alert_default as Alert,
  AnchorNavigation,
  AnnotationContext,
  app_layout_default as AppLayout,
  area_chart_default as AreaChart,
  attribute_editor_default as AttributeEditor,
  autosuggest_default as Autosuggest,
  Badge,
  bar_chart_default as BarChart,
  Box,
  BreadcrumbGroup,
  button_default as Button,
  button_dropdown_default as ButtonDropdown,
  Calendar2 as Calendar,
  cards_default as Cards,
  checkbox_default as Checkbox,
  code_editor_default as CodeEditor,
  CollectionPreferences,
  ColumnLayout2 as ColumnLayout,
  Container,
  ContentLayout,
  CopyToClipboard,
  date_input_default as DateInput,
  date_picker_default as DatePicker,
  date_range_picker_default as DateRangePicker,
  Drawer2 as Drawer,
  ExpandableSection,
  file_upload_default as FileUpload,
  Flashbar,
  Form,
  FormField,
  Grid3 as Grid,
  Header2 as Header,
  HelpPanel,
  Hotspot,
  Icon,
  input_default as Input,
  line_chart_default as LineChart,
  link_default as Link,
  mixed_line_bar_chart_default as MixedLineBarChart,
  Modal,
  multiselect_default as Multiselect,
  Pagination,
  pie_chart_default2 as PieChart,
  Popover,
  ProgressBar,
  property_filter_default as PropertyFilter,
  radio_group_default as RadioGroup,
  s3_resource_selector_default as S3ResourceSelector,
  SegmentedControl,
  select_default as Select,
  SideNavigation,
  SpaceBetween,
  Spinner,
  SplitPanel2 as SplitPanel,
  StatusIndicator2 as StatusIndicator,
  table_default as Table,
  Tabs,
  tag_editor_default as TagEditor,
  TextContent,
  text_filter_default as TextFilter,
  textarea_default as Textarea,
  tiles_default as Tiles,
  time_input_default as TimeInput,
  toggle_default as Toggle,
  TokenGroup,
  TopNavigation,
  TutorialPanel,
  wizard_default as Wizard
};
//# sourceMappingURL=@cloudscape-design_components.js.map
