import {
  custom_css_properties_default
} from "./chunk-OLLVJWHA.js";
import {
  useMobile
} from "./chunk-3ZBHGQZB.js";
import {
  useFormFieldContext
} from "./chunk-5OOIWY6K.js";
import {
  Tooltip,
  useInternalI18n
} from "./chunk-7EIH7T54.js";
import {
  useUniqueId
} from "./chunk-USK37E6T.js";
import {
  fireNonCancelableEvent
} from "./chunk-IGE3W7Z3.js";
import {
  __rest,
  applyDisplayName,
  clsx_m_default,
  getBaseProps,
  useBaseComponent,
  warnOnce
} from "./chunk-J22TPFA3.js";
import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@cloudscape-design/components/slider/index.js
var import_react4 = __toESM(require_react());

// node_modules/@cloudscape-design/components/slider/internal.js
var import_react3 = __toESM(require_react());

// node_modules/@cloudscape-design/components/slider/slider-labels.js
var import_react = __toESM(require_react());

// node_modules/@cloudscape-design/components/slider/styles.css.js
import "/home/a171157/personal-repos/deep-racer/community-contributions/deepracer-custom-console/new/node_modules/@cloudscape-design/components/slider/styles.scoped.css";
var styles_css_default = {
  "root": "awsui_root_pcgz5_3bv9o_153",
  "slider": "awsui_slider_pcgz5_3bv9o_190",
  "slider-track": "awsui_slider-track_pcgz5_3bv9o_194",
  "slider-range": "awsui_slider-range_pcgz5_3bv9o_194",
  "disabled": "awsui_disabled_pcgz5_3bv9o_209",
  "readonly": "awsui_readonly_pcgz5_3bv9o_213",
  "error": "awsui_error_pcgz5_3bv9o_222",
  "warning": "awsui_warning_pcgz5_3bv9o_225",
  "active": "awsui_active_pcgz5_3bv9o_228",
  "error-active": "awsui_error-active_pcgz5_3bv9o_231",
  "warning-active": "awsui_warning-active_pcgz5_3bv9o_234",
  "labels": "awsui_labels_pcgz5_3bv9o_245",
  "labels-noref": "awsui_labels-noref_pcgz5_3bv9o_251",
  "labels-reference": "awsui_labels-reference_pcgz5_3bv9o_254",
  "labels-min": "awsui_labels-min_pcgz5_3bv9o_261",
  "labels-max": "awsui_labels-max_pcgz5_3bv9o_267",
  "labels-aria-description": "awsui_labels-aria-description_pcgz5_3bv9o_275",
  "ticks": "awsui_ticks_pcgz5_3bv9o_293",
  "ticks-wrapper": "awsui_ticks-wrapper_pcgz5_3bv9o_299",
  "tick": "awsui_tick_pcgz5_3bv9o_293",
  "middle": "awsui_middle_pcgz5_3bv9o_314",
  "filled": "awsui_filled_pcgz5_3bv9o_317",
  "tooltip-thumb": "awsui_tooltip-thumb_pcgz5_3bv9o_345",
  "thumb": "awsui_thumb_pcgz5_3bv9o_358",
  "min": "awsui_min_pcgz5_3bv9o_394",
  "max": "awsui_max_pcgz5_3bv9o_397"
};

// node_modules/@cloudscape-design/components/slider/slider-labels.js
function SliderLabels({ min, max, referenceValues, valueFormatter, labelsId, ariaDescription }) {
  const isMobile = useMobile();
  const MAX_LABEL_COUNT = isMobile ? 4 : 10;
  const minDistance = (max - min) / MAX_LABEL_COUNT;
  const getVisibleReferenceValues = () => {
    if (!referenceValues || referenceValues.length === 0) {
      return [];
    }
    const values = [];
    let lastValue = min;
    for (let i = 0; i <= referenceValues.length; i++) {
      if (referenceValues[i] > min && referenceValues[i] < max && Math.abs(referenceValues[i] - lastValue) >= minDistance && Math.abs(max - referenceValues[i]) >= minDistance && Number.isInteger(referenceValues[i])) {
        values.push(referenceValues[i]);
        lastValue = referenceValues[i];
      }
    }
    return values;
  };
  function getLabelPosition(index) {
    const colSpan = Math.floor(minDistance / 2);
    const positionStart = index - colSpan;
    const positionEnd = index + colSpan;
    const hasSmallRange = max - min <= MAX_LABEL_COUNT;
    if (hasSmallRange) {
      return {
        min: 1,
        max: (max - min) * 2 - 1,
        posStart: (index - min) * 2,
        posEnd: (index - min) * 2
      };
    }
    const roundedHalfCol = Math.round(colSpan / 2);
    return {
      min: colSpan * 2 + roundedHalfCol,
      max: (max - min - colSpan) * 2 - roundedHalfCol + 1,
      // add one to center the label
      posStart: (positionStart - min) * 2 + 1 + roundedHalfCol,
      posEnd: (positionEnd - min) * 2 - roundedHalfCol
    };
  }
  return import_react.default.createElement(
    import_react.default.Fragment,
    null,
    import_react.default.createElement(
      "div",
      { role: "list", "aria-hidden": !valueFormatter && !referenceValues ? "true" : void 0, className: clsx_m_default(styles_css_default.labels, {
        [styles_css_default["labels-noref"]]: getVisibleReferenceValues().length === 0
      }), style: {
        [custom_css_properties_default.sliderLabelCount]: getVisibleReferenceValues().length === 0 ? 2 : (max - min) * 2
      }, id: !ariaDescription ? labelsId : void 0 },
      import_react.default.createElement("span", { role: "listitem", className: clsx_m_default(styles_css_default.label, styles_css_default["labels-min"]), style: {
        [custom_css_properties_default.sliderMinEnd]: getLabelPosition(0).min
      } }, valueFormatter ? valueFormatter(min) : min),
      getVisibleReferenceValues().map((step) => {
        return import_react.default.createElement("span", { role: "listitem", key: step, style: {
          [custom_css_properties_default.sliderReferenceColumn]: getLabelPosition(step).posStart,
          [custom_css_properties_default.sliderNextReferenceColumn]: getLabelPosition(step).posEnd
        }, className: clsx_m_default(styles_css_default.label, styles_css_default["labels-reference"]) }, valueFormatter ? valueFormatter(step) : step);
      }),
      import_react.default.createElement("span", { role: "listitem", className: clsx_m_default(styles_css_default.label, styles_css_default["labels-max"]), style: {
        [custom_css_properties_default.sliderMaxStart]: !referenceValues ? 2 : getLabelPosition(0).max
      } }, valueFormatter ? valueFormatter(max) : max)
    ),
    ariaDescription && import_react.default.createElement("div", { className: styles_css_default["labels-aria-description"], id: labelsId }, ariaDescription)
  );
}

// node_modules/@cloudscape-design/components/slider/tick-marks.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/components/slider/utils.js
function getPercent(value, range) {
  return (value - range[0]) / (range[1] - range[0]) * 100;
}
function countDecimals(value) {
  var _a;
  if (Math.floor(value) === value) {
    return 0;
  }
  const str = Math.abs(value).toString();
  if (str.indexOf("-") !== -1) {
    return parseInt(str.split("-")[1], 10) || 0;
  }
  return ((_a = str.split(".")[1]) === null || _a === void 0 ? void 0 : _a.length) || 0;
}
var getStepArray = (step, [min, max]) => {
  const steps = [min];
  const multiplier = Math.pow(10, countDecimals(step));
  let currentStep = min;
  while (currentStep < max) {
    currentStep = (multiplier * currentStep + multiplier * step) / multiplier;
    if (currentStep <= max) {
      steps.push(currentStep);
    }
  }
  return steps;
};
var findLowerAndHigherValues = (array, value) => {
  let sortedArray = [...array];
  sortedArray = sortedArray.sort((a, b) => a - b);
  const index = sortedArray.indexOf(value) || 0;
  const lower = sortedArray[index - 1] || void 0;
  const higher = sortedArray[index + 1] || void 0;
  return { lower, higher };
};
var valuesAreValid = (referenceValues) => {
  const valuesWithDecimals = referenceValues === null || referenceValues === void 0 ? void 0 : referenceValues.filter((value) => !Number.isInteger(value));
  return valuesWithDecimals.length === 0;
};
var THUMB_SIZE = 16;
var THUMB_READONLY_SIZE = 12;

// node_modules/@cloudscape-design/components/slider/tick-marks.js
function TickMark(props) {
  const { hideFillLine, value, isActive, invalid, warning, disabled, type, min, max, step, readOnly } = props;
  const showWarning = warning && !invalid;
  const getType = () => {
    if (type === "min") {
      return min;
    }
    if (type === "max") {
      return max;
    }
    return step;
  };
  return import_react2.default.createElement("div", { className: clsx_m_default(styles_css_default.tick, {
    [styles_css_default.filled]: !hideFillLine && value > getType(),
    [styles_css_default.active]: !hideFillLine && isActive && value > getType(),
    [styles_css_default.error]: invalid && !hideFillLine && value > getType(),
    [styles_css_default.warning]: showWarning && !hideFillLine && value > getType(),
    [styles_css_default["error-active"]]: invalid && isActive && !hideFillLine && value > getType(),
    [styles_css_default["warning-active"]]: showWarning && isActive && !hideFillLine && value > getType(),
    [styles_css_default.disabled]: disabled,
    [styles_css_default.readonly]: readOnly,
    [styles_css_default.middle]: type === "step"
  }) });
}
function SliderTickMarks(props) {
  const { min, max, step } = props;
  return import_react2.default.createElement(
    "div",
    { className: styles_css_default["ticks-wrapper"] },
    import_react2.default.createElement(TickMark, Object.assign({}, props, { type: "min" })),
    import_react2.default.createElement("div", { className: styles_css_default.ticks, style: {
      [custom_css_properties_default.sliderTickCount]: Math.round((max - min) / step)
    } }, getStepArray(step, [min, max]).map((step2, index) => import_react2.default.createElement(TickMark, Object.assign({}, props, { type: "step", step: step2, key: `step-${index}` })))),
    import_react2.default.createElement(TickMark, Object.assign({}, props, { type: "max" }))
  );
}

// node_modules/@cloudscape-design/components/slider/internal.js
function InternalSlider(_a) {
  var { value, min, max, onChange, step, disabled, readOnly, ariaLabel, ariaDescription, referenceValues, tickMarks, hideFillLine, valueFormatter, i18nStrings, __internalRootRef = null } = _a, rest = __rest(_a, ["value", "min", "max", "onChange", "step", "disabled", "readOnly", "ariaLabel", "ariaDescription", "referenceValues", "tickMarks", "hideFillLine", "valueFormatter", "i18nStrings", "__internalRootRef"]);
  const baseProps = getBaseProps(rest);
  const i18n = useInternalI18n("slider");
  const handleRef = (0, import_react3.useRef)(null);
  const [showTooltip, setShowTooltip] = (0, import_react3.useState)(false);
  const [isActive, setIsActive] = (0, import_react3.useState)(false);
  const labelsId = useUniqueId("labels");
  const { ariaLabelledby, ariaDescribedby, controlId, invalid, warning } = useFormFieldContext(rest);
  const showWarning = warning && !invalid;
  if (referenceValues && valuesAreValid(referenceValues) === false) {
    warnOnce("Slider", "All reference values must be integers. Non-integer values will not be displayed.");
  }
  if (min >= max) {
    warnOnce("Slider", "The min value cannot be greater than the max value.");
  }
  if (step && step > max - min) {
    warnOnce("Slider", "The step value cannot be greater than the difference between the min and max.");
  }
  if (step && value !== void 0 && (value - min) % step !== 0) {
    warnOnce("Slider", "Slider value must be a multiple of the step. The value will round to the nearest step value.");
  }
  const getValue = () => {
    const stepIsValid = step && step < max - min && step > min;
    if (value === void 0) {
      return max < min ? min : min + (max - min) / 2;
    }
    if (!step) {
      return value;
    }
    if (step && stepIsValid && (value - min) % step !== 0) {
      const closest = getStepArray(step, [min, max]).reduce(function(prev, curr) {
        return Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev;
      });
      return closest;
    }
    return value;
  };
  const sliderValue = getValue();
  const percent = getPercent(Math.max(Math.min(sliderValue, max), min), [min, max]);
  const getAriaValueText = () => {
    if (valueFormatter && valueFormatter(sliderValue)) {
      return valueFormatter(sliderValue);
    }
    if (valueFormatter && !valueFormatter(sliderValue)) {
      const middleValues = referenceValues ? referenceValues : [];
      const valueArray = [min, ...middleValues, sliderValue, max];
      const prevAndNext = findLowerAndHigherValues(valueArray, sliderValue);
      const previousValue = prevAndNext.lower ? valueFormatter(prevAndNext.lower) : valueFormatter(min);
      const nextValue = prevAndNext.higher ? valueFormatter(prevAndNext.higher) : valueFormatter(max);
      const value2 = sliderValue;
      return i18n("i18nStrings.valueTextRange", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.valueTextRange(previousValue, value2, nextValue), (format) => format({ value: value2, previousValue, nextValue }));
    }
    return void 0;
  };
  const thumbSize = readOnly ? THUMB_READONLY_SIZE : THUMB_SIZE;
  return import_react3.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: __internalRootRef, className: clsx_m_default(baseProps.className, styles_css_default.root) }),
    showTooltip && import_react3.default.createElement(Tooltip, { value: valueFormatter ? valueFormatter(sliderValue) : sliderValue, trackRef: handleRef }),
    import_react3.default.createElement("div", { ref: handleRef, className: clsx_m_default(styles_css_default["tooltip-thumb"], {
      [styles_css_default.readonly]: readOnly
    }), style: {
      [custom_css_properties_default.sliderTooltipPosition]: `calc(${percent}% - ${thumbSize}px)`
    } }),
    import_react3.default.createElement(
      "div",
      { className: styles_css_default.slider },
      import_react3.default.createElement("div", { className: clsx_m_default(styles_css_default["slider-track"], {
        [styles_css_default.disabled]: disabled,
        [styles_css_default.readonly]: readOnly
      }) }),
      !hideFillLine && import_react3.default.createElement("div", { className: clsx_m_default(styles_css_default["slider-range"], {
        [styles_css_default.error]: invalid,
        [styles_css_default.warning]: showWarning,
        [styles_css_default.active]: isActive,
        [styles_css_default["error-active"]]: invalid && isActive,
        [styles_css_default["warning-active"]]: showWarning && isActive,
        [styles_css_default.disabled]: disabled,
        [styles_css_default.readonly]: readOnly
      }), style: { [custom_css_properties_default.sliderRangeInlineSize]: `${percent}%` } })
    ),
    !!step && tickMarks && import_react3.default.createElement(SliderTickMarks, { hideFillLine, disabled, readOnly, invalid, warning, isActive, step, min, max, value: sliderValue }),
    import_react3.default.createElement("input", {
      // we need to add this because input[type=range] isn't natively focusable in Safari.
      tabIndex: 0,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabel && !rest.ariaLabelledby ? void 0 : ariaLabelledby,
      "aria-describedby": valueFormatter ? ariaDescribedby ? `${labelsId} ${ariaDescribedby}` : labelsId : ariaDescribedby,
      "aria-valuetext": getAriaValueText(),
      "aria-invalid": invalid ? "true" : void 0,
      "aria-disabled": readOnly && !disabled ? "true" : void 0,
      id: controlId,
      type: "range",
      min,
      max,
      disabled,
      onFocus: () => {
        setShowTooltip(true);
        setIsActive(true);
      },
      onBlur: () => {
        setShowTooltip(false);
        setIsActive(false);
      },
      onMouseEnter: () => {
        setShowTooltip(true);
      },
      onMouseLeave: () => {
        setShowTooltip(false);
      },
      onTouchStart: () => {
        setShowTooltip(true);
        setIsActive(true);
      },
      onTouchEnd: () => {
        setShowTooltip(false);
        setIsActive(false);
      },
      step,
      value: sliderValue,
      onChange: (event) => {
        if (readOnly) {
          return;
        }
        onChange && fireNonCancelableEvent(onChange, { value: Number(event.target.value) });
      },
      className: clsx_m_default(styles_css_default.thumb, {
        [styles_css_default.error]: invalid,
        [styles_css_default.warning]: showWarning,
        [styles_css_default.disabled]: disabled,
        [styles_css_default.readonly]: readOnly,
        [styles_css_default.min]: sliderValue <= min || max < min,
        [styles_css_default.max]: sliderValue >= max && min < max
      })
    }),
    import_react3.default.createElement(SliderLabels, { min, max, referenceValues, valueFormatter, labelsId, ariaDescription })
  );
}

// node_modules/@cloudscape-design/components/slider/index.js
function Slider(_a) {
  var { tickMarks, hideFillLine } = _a, props = __rest(_a, ["tickMarks", "hideFillLine"]);
  const baseComponentProps = useBaseComponent("Slider", {
    props: { tickMarks, hideFillLine, readOnly: props.readOnly }
  });
  return import_react4.default.createElement(InternalSlider, Object.assign({ tickMarks, hideFillLine }, props, baseComponentProps));
}
applyDisplayName(Slider, "Slider");

export {
  Slider
};
//# sourceMappingURL=chunk-DN7TJSLC.js.map
