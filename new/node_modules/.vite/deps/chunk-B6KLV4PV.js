import {
  findUpUntil
} from "./chunk-3NPYXGPE.js";
import {
  createSingletonState,
  useResizeObserver
} from "./chunk-ZJSKJ6UY.js";
import {
  require_react
} from "./chunk-WHMHD7EJ.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@cloudscape-design/component-toolkit/lib/container-queries/use-container-query.js
var import_react = __toESM(require_react());
function useContainerQuery(mapFn, deps) {
  if (deps === void 0) {
    deps = [];
  }
  var elementRef = (0, import_react.useRef)(null);
  var _a = (0, import_react.useState)(null), state = _a[0], setState = _a[1];
  var getElement = (0, import_react.useCallback)(function() {
    return elementRef.current;
  }, deps);
  useResizeObserver(getElement, function(entry) {
    return setState(function(prevState) {
      return mapFn(entry, prevState);
    });
  });
  return [state, elementRef];
}

// node_modules/@cloudscape-design/component-toolkit/lib/use-controllable-state/use-controllable-state.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/components/i18n/context.js
var import_react3 = __toESM(require_react());
var InternalI18nContext = import_react3.default.createContext({
  locale: null,
  format: (_namespace, _component, _key, provided) => provided
});
function useLocale() {
  return (0, import_react3.useContext)(InternalI18nContext).locale;
}
function useInternalI18n(componentName) {
  const { format } = (0, import_react3.useContext)(InternalI18nContext);
  return (key, provided, customHandler) => {
    return format("@cloudscape-design/components", componentName, key, provided, customHandler);
  };
}

// node_modules/@cloudscape-design/components/internal/is-development.js
var isDevelopment2 = true;

// node_modules/@cloudscape-design/components/internal/breakpoints.js
var BREAKPOINT_MAPPING = [
  ["xl", 1840],
  ["l", 1320],
  ["m", 1120],
  ["s", 912],
  ["xs", 688],
  ["xxs", 465],
  ["default", -1]
];
var mobileBreakpoint = BREAKPOINT_MAPPING.filter((b) => b[0] === "xs")[0][1];
var BREAKPOINTS_DESCENDING = BREAKPOINT_MAPPING.map(([bp]) => bp);
function matchBreakpointMapping(subset, actual) {
  const qualifyingBreakpoints = BREAKPOINT_MAPPING.slice(BREAKPOINTS_DESCENDING.indexOf(actual));
  for (const [breakpoint] of qualifyingBreakpoints) {
    const breakpointValue = subset[breakpoint];
    if (breakpointValue !== void 0) {
      return breakpointValue;
    }
  }
  return null;
}
function getMatchingBreakpoint(width, breakpointFilter) {
  for (const [breakpoint, breakpointWidth] of BREAKPOINT_MAPPING) {
    if (width > breakpointWidth && (!breakpointFilter || breakpointFilter.indexOf(breakpoint) !== -1)) {
      return breakpoint;
    }
  }
  return "default";
}
function getBreakpointValue(breakpoint) {
  return BREAKPOINT_MAPPING.find((bp) => bp[0] === breakpoint)[1];
}

// node_modules/@cloudscape-design/components/internal/hooks/use-mobile/index.js
function getIsMobile() {
  if (typeof window === "undefined") {
    return false;
  }
  if (window.matchMedia) {
    return window.matchMedia(`(max-width: ${mobileBreakpoint}px)`).matches;
  }
  return getMatchingBreakpoint(window.innerWidth, ["xs"]) !== "xs";
}
var useMobile = createSingletonState({
  initialState: () => getIsMobile(),
  factory: (handler) => {
    const listener = () => handler(getIsMobile());
    window.addEventListener("resize", listener);
    return () => {
      window.removeEventListener("resize", listener);
    };
  }
});

// node_modules/@cloudscape-design/components/internal/utils/scrollable-containers.js
var getOverflowParents = (element) => {
  const parents = [];
  let node = element;
  while ((node = node.parentElement) && node !== document.body) {
    getComputedStyle(node).overflow !== "visible" && parents.push(node);
  }
  return parents;
};
var getOverflowParentDimensions = ({ element, excludeClosestParent = false, expandToViewport = false, canExpandOutsideViewport = false }) => {
  const parents = expandToViewport ? [] : getOverflowParents(element).map((el) => {
    const { height, width, top, left } = el.getBoundingClientRect();
    return {
      // Treat the whole scrollable area as the available height
      // if we're allowed to expand past the viewport.
      blockSize: canExpandOutsideViewport ? el.scrollHeight : height,
      inlineSize: width,
      insetBlockStart: top,
      insetInlineStart: left
    };
  });
  if (canExpandOutsideViewport && !expandToViewport) {
    const documentDimensions = document.documentElement.getBoundingClientRect();
    parents.push({
      inlineSize: Math.max(documentDimensions.width, document.documentElement.clientWidth),
      blockSize: Math.max(documentDimensions.height, document.documentElement.clientHeight),
      insetBlockStart: documentDimensions.top,
      insetInlineStart: documentDimensions.left
    });
  } else {
    parents.push({
      blockSize: window.innerHeight,
      inlineSize: window.innerWidth,
      insetBlockStart: 0,
      insetInlineStart: 0
    });
  }
  if (excludeClosestParent && !expandToViewport) {
    parents.shift();
  }
  return parents;
};
function scrollElementIntoView(element, options = { block: "nearest", inline: "nearest" }) {
  var _a;
  (_a = element === null || element === void 0 ? void 0 : element.scrollIntoView) === null || _a === void 0 ? void 0 : _a.call(element, options);
}
function calculateScroll({ insetBlockStart, blockSize }) {
  if (insetBlockStart < 0) {
    return insetBlockStart;
  } else if (insetBlockStart + blockSize > window.innerHeight) {
    if (blockSize > window.innerHeight) {
      return insetBlockStart;
    } else {
      return insetBlockStart + blockSize - window.innerHeight;
    }
  }
  return 0;
}
function scrollRectangleIntoView(box, scrollableParent) {
  const scrollAmount = calculateScroll(box);
  if (scrollAmount) {
    (scrollableParent || window).scrollBy(0, scrollAmount);
  }
}
function getFirstScrollableParent(element) {
  return findUpUntil(element, (el) => {
    const overflows = el.scrollHeight > el.clientHeight;
    return overflows && ["scroll", "auto"].includes(getComputedStyle(el).overflowY);
  }) || void 0;
}

// node_modules/@cloudscape-design/components/internal/direction.js
function isRtl(element) {
  return getComputedStyle(element).direction === "rtl";
}
function getScrollInlineStart(element) {
  return isRtl(element) ? Math.floor(element.scrollLeft) * -1 : Math.ceil(element.scrollLeft);
}
function getLogicalBoundingClientRect(element) {
  const boundingClientRect = element.getBoundingClientRect();
  const blockSize = boundingClientRect.height;
  const inlineSize = boundingClientRect.width;
  const insetBlockStart = boundingClientRect.top;
  const insetBlockEnd = boundingClientRect.bottom;
  const insetInlineStart = isRtl(element) ? document.documentElement.clientWidth - boundingClientRect.right : boundingClientRect.left;
  const insetInlineEnd = insetInlineStart + inlineSize;
  return {
    blockSize,
    inlineSize,
    insetBlockStart,
    insetBlockEnd,
    insetInlineStart,
    insetInlineEnd
  };
}

// node_modules/@cloudscape-design/components/internal/generated/custom-css-properties/index.js
var customCSSPropertiesMap = {
  breadcrumbsGap: "--awsui-breadcrumbs-gap-lgosor",
  contentGapLeft: "--awsui-content-gap-left-lgosor",
  contentGapRight: "--awsui-content-gap-right-lgosor",
  contentHeight: "--awsui-content-height-lgosor",
  defaultMaxContentWidth: "--awsui-default-max-content-width-lgosor",
  defaultMinContentWidth: "--awsui-default-min-content-width-lgosor",
  drawerSize: "--awsui-drawer-size-lgosor",
  footerHeight: "--awsui-footer-height-lgosor",
  headerGap: "--awsui-header-gap-lgosor",
  headerHeight: "--awsui-header-height-lgosor",
  layoutWidth: "--awsui-layout-width-lgosor",
  mainGap: "--awsui-main-gap-lgosor",
  mainOffsetLeft: "--awsui-main-offset-left-lgosor",
  mainTemplateRows: "--awsui-main-template-rows-lgosor",
  maxContentWidth: "--awsui-max-content-width-lgosor",
  minContentWidth: "--awsui-min-content-width-lgosor",
  mobileBarHeight: "--awsui-mobile-bar-height-lgosor",
  notificationsGap: "--awsui-notifications-gap-lgosor",
  notificationsHeight: "--awsui-notifications-height-lgosor",
  offsetTop: "--awsui-offset-top-lgosor",
  offsetTopWithNotifications: "--awsui-offset-top-with-notifications-lgosor",
  overlapHeight: "--awsui-overlap-height-lgosor",
  navigationWidth: "--awsui-navigation-width-lgosor",
  splitPanelReportedHeaderSize: "--awsui-split-panel-reported-header-size-lgosor",
  splitPanelReportedSize: "--awsui-split-panel-reported-size-lgosor",
  splitPanelHeight: "--awsui-split-panel-height-lgosor",
  splitPanelMinWidth: "--awsui-split-panel-min-width-lgosor",
  splitPanelMaxWidth: "--awsui-split-panel-max-width-lgosor",
  toolsMaxWidth: "--awsui-tools-max-width-lgosor",
  toolsWidth: "--awsui-tools-width-lgosor",
  toolsAnimationStartingOpacity: "--awsui-tools-animation-starting-opacity-lgosor",
  contentScrollMargin: "--awsui-content-scroll-margin-lgosor",
  flashbarStackDepth: "--awsui-flashbar-stack-depth-lgosor",
  flashbarStackIndex: "--awsui-flashbar-stack-index-lgosor",
  flashbarStickyBottomMargin: "--awsui-flashbar-sticky-bottom-margin-lgosor",
  stackedNotificationsBottomMargin: "--awsui-stacked-notifications-bottom-margin-lgosor",
  stackedNotificationsDefaultBottomMargin: "--awsui-stacked-notifications-default-bottom-margin-lgosor",
  dropdownDefaultMaxWidth: "--awsui-dropdown-default-max-width-lgosor",
  spinnerRotatorFrom: "--awsui-spinner-rotator-from-lgosor",
  spinnerRotatorTo: "--awsui-spinner-rotator-to-lgosor",
  spinnerLineLeftFrom: "--awsui-spinner-line-left-from-lgosor",
  spinnerLineLeftTo: "--awsui-spinner-line-left-to-lgosor",
  spinnerLineRightFrom: "--awsui-spinner-line-right-from-lgosor",
  spinnerLineRightTo: "--awsui-spinner-line-right-to-lgosor"
};
var custom_css_properties_default = customCSSPropertiesMap;

export {
  matchBreakpointMapping,
  getMatchingBreakpoint,
  getBreakpointValue,
  useContainerQuery,
  useLocale,
  useInternalI18n,
  getOverflowParents,
  getOverflowParentDimensions,
  scrollElementIntoView,
  calculateScroll,
  scrollRectangleIntoView,
  getFirstScrollableParent,
  isRtl,
  getScrollInlineStart,
  getLogicalBoundingClientRect,
  isDevelopment2 as isDevelopment,
  useMobile,
  custom_css_properties_default
};
//# sourceMappingURL=chunk-B6KLV4PV.js.map
