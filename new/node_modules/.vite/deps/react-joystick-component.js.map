{
  "version": 3,
  "sources": ["../../react-joystick-component/src/enums/shape.enum.ts", "../../react-joystick-component/src/shapes/shape.factory.ts", "../../react-joystick-component/src/shapes/shape.bounds.factory.ts", "../../react-joystick-component/src/Joystick.tsx", "../../react-joystick-component/src/index.tsx"],
  "sourcesContent": ["export enum JoystickShape {\n    Circle = 'circle',\n    Square = 'square',\n    AxisY = 'axisY',\n    AxisX = 'axisX',\n}", "import {JoystickShape} from \"../enums/shape.enum\";\n\nexport const shapeFactory = (shape: JoystickShape, size: number) =>{\n    switch (shape){\n      \n        case JoystickShape.Square:\n            return  {\n                borderRadius: Math.sqrt(size)\n            }\n        case JoystickShape.Circle:\n        default:\n            return {\n                borderRadius:size,\n            };\n    }\n}", "import {JoystickShape} from \"../enums/shape.enum\";\n\nexport const shapeBoundsFactory = (\n    shape: JoystickShape,\n    absoluteX:number,\n    absoluteY: number,\n    relativeX:number,\n    relativeY:number,\n    dist:number,\n    radius:number,\n    baseSize: number,\n    parentRect: DOMRect) => {\n    switch (shape){\n        case JoystickShape.Square:\n            relativeX = getWithinBounds(absoluteX - parentRect.left - (baseSize / 2), baseSize);\n            relativeY = getWithinBounds(absoluteY - parentRect.top - (baseSize / 2), baseSize);\n            return {relativeX, relativeY};\n        case JoystickShape.AxisX:\n            relativeX = getWithinBounds(absoluteX - parentRect.left - (baseSize / 2), baseSize);\n            relativeY = 0;\n        return {relativeX, relativeY};\n\n        case JoystickShape.AxisY:\n            relativeX = 0\n            relativeY = getWithinBounds(absoluteY - parentRect.top - (baseSize / 2), baseSize);\n            return {relativeX, relativeY};\n        default:\n            if (dist > radius) {\n                relativeX *= radius / dist;\n                relativeY *= radius / dist;\n            }\n            return {relativeX, relativeY};\n\n    }\n\n}\n\nconst getWithinBounds = (value:number, baseSize:number): number =>  {\n    const halfBaseSize = baseSize / 2;\n    if(value > halfBaseSize){\n        return halfBaseSize;\n    }\n    if(value < -(halfBaseSize)){\n        return halfBaseSize * -1;\n    }\n    return value\n}", "import * as React from 'react';\nimport {JoystickShape} from \"./enums/shape.enum\";\nimport {shapeFactory} from \"./shapes/shape.factory\";\nimport {shapeBoundsFactory} from \"./shapes/shape.bounds.factory\";\n\nexport interface IJoystickProps {\n    size?: number;\n    stickSize?: number;\n    baseColor?: string;\n    stickColor?: string;\n    throttle?: number;\n    disabled?: boolean;\n    sticky?: boolean;\n    move?: (event: IJoystickUpdateEvent) => void;\n    stop?: (event: IJoystickUpdateEvent) => void;\n    start?: (event: IJoystickUpdateEvent) => void;\n    stickImage?: string;\n    baseImage?: string;\n    followCursor?: boolean;\n    baseShape?: JoystickShape;\n    stickShape?: JoystickShape;\n    controlPlaneShape?: JoystickShape;\n    minDistance?: number;\n    pos?: {x: number, y: number};\n}\n\n\nenum InteractionEvents {\n    PointerDown = \"pointerdown\",\n    PointerMove = \"pointermove\",\n    PointerUp = \"pointerup\"\n}\n\nexport interface IJoystickUpdateEvent {\n    type: \"move\" | \"stop\" | \"start\";\n    // TODO: these could just be optional, but this may be a breaking change\n    x: number | null;\n    y: number | null;\n    direction: JoystickDirection | null;\n    distance: number | null;\n}\n\nexport interface IJoystickState {\n    dragging: boolean;\n    coordinates?: IJoystickCoordinates;\n}\n\ntype JoystickDirection = \"FORWARD\" | \"RIGHT\" | \"LEFT\" | \"BACKWARD\";\n\nexport interface IJoystickCoordinates {\n    relativeX: number;\n    relativeY: number;\n    axisX: number;\n    axisY: number;\n    direction: JoystickDirection;\n    distance: number;\n}\n\n\n/**\n * Radians identifying the direction of the joystick\n */\nenum RadianQuadrantBinding {\n    TopRight = 2.35619449,\n    TopLeft = -2.35619449,\n    BottomRight = 0.785398163,\n    BottomLeft = -0.785398163\n}\n\nclass Joystick extends React.Component<IJoystickProps, IJoystickState> {\n    private readonly _stickRef: React.RefObject<HTMLButtonElement> = React.createRef();\n    private readonly _baseRef: React.RefObject<HTMLDivElement> = React.createRef();\n    private readonly _throttleMoveCallback: (data: IJoystickUpdateEvent) => void;\n    private _baseSize: number;\n    private _stickSize?: number;\n    private frameId: number | null = null;\n\n    private _radius: number;\n    private _parentRect: DOMRect;\n    private _pointerId: number|null = null\n    private _mounted = false;\n\n    constructor(props: IJoystickProps) {\n        super(props);\n        this.state = {\n            dragging: false\n        };\n        this._throttleMoveCallback = (() => {\n            let lastCall = 0;\n            return (event: IJoystickUpdateEvent) => {\n\n                const now = new Date().getTime();\n                const throttleAmount = this.props.throttle || 0;\n                if (now - lastCall < throttleAmount) {\n                    return;\n                }\n                lastCall = now;\n                if (this.props.move) {\n                    return this.props.move(event);\n                }\n            };\n        })();\n\n\n\n    }\n\n    componentWillUnmount() {\n        this._mounted = false;\n        if (this.props.followCursor) {\n            window.removeEventListener(InteractionEvents.PointerMove, event => this._pointerMove(event));\n        }\n        if (this.frameId !== null) {\n            window.cancelAnimationFrame(this.frameId);\n        }\n    }\n\n    componentDidMount() {\n        this._mounted = true;\n        if (this.props.followCursor) {\n            //@ts-ignore\n            this._parentRect = this._baseRef.current.getBoundingClientRect();\n\n            this.setState({\n                dragging: true\n            });\n\n            window.addEventListener(InteractionEvents.PointerMove, event => this._pointerMove(event));\n\n            if (this.props.start) {\n                this.props.start({\n                    type: \"start\",\n                    x: null,\n                    y: null,\n                    distance: null,\n                    direction: null\n                });\n            }\n\n        }\n    }\n\n    /**\n     * Update position of joystick - set state and trigger DOM manipulation\n     * @param coordinates\n     * @private\n     */\n    private _updatePos(coordinates: IJoystickCoordinates) {\n\n        this.frameId = window.requestAnimationFrame(() => {\n            if(this._mounted){\n                this.setState({\n                    coordinates,\n                });\n            }\n          });\n          \n        if(typeof this.props.minDistance ===  'number'){\n            if(coordinates.distance < this.props.minDistance){\n                return;\n            }\n        }\n        this._throttleMoveCallback({\n            type: \"move\",\n            x: ((coordinates.relativeX * 2) / this._baseSize),\n            y: -((coordinates.relativeY * 2) / this._baseSize),\n            direction: coordinates.direction,\n            distance: coordinates.distance\n        });\n\n    }\n\n    /**\n     * Handle pointerdown event\n     * @param e PointerEvent\n     * @private\n     */\n    private _pointerDown(e: PointerEvent) {\n        if (this.props.disabled || this.props.followCursor) {\n            return;\n        }\n        //@ts-ignore\n        this._parentRect = this._baseRef.current.getBoundingClientRect();\n\n        this.setState({\n            dragging: true\n        });\n\n        window.addEventListener(InteractionEvents.PointerUp, this._pointerUp);\n        window.addEventListener(InteractionEvents.PointerMove, this._pointerMove);\n        this._pointerId = e.pointerId\n        //@ts-ignore\n        this._stickRef.current.setPointerCapture(e.pointerId);\n\n        if (this.props.start) {\n            this.props.start({\n                type: \"start\",\n                x: null,\n                y: null,\n                distance: null,\n                direction: null\n            });\n        }\n\n    }\n\n    /**\n     * Use ArcTan2 (4 Quadrant inverse tangent) to identify the direction the joystick is pointing\n     * https://docs.oracle.com/cd/B12037_01/olap.101/b10339/x_arcsin003.htm\n     * @param atan2: number\n     * @private\n     */\n    private _getDirection(atan2: number): JoystickDirection {\n        if (atan2 > RadianQuadrantBinding.TopRight || atan2 < RadianQuadrantBinding.TopLeft) {\n            return \"FORWARD\";\n        } else if (atan2 < RadianQuadrantBinding.TopRight && atan2 > RadianQuadrantBinding.BottomRight) {\n            return \"RIGHT\"\n        } else if (atan2 < RadianQuadrantBinding.BottomLeft) {\n            return \"LEFT\";\n        }\n        return \"BACKWARD\";\n\n\n    }\n\n    /**\n     * Hypotenuse distance calculation\n     * @param x: number\n     * @param y: number\n     * @private\n     */\n    private _distance(x: number, y: number): number {\n        return Math.hypot(x, y);\n    }\n    private _distanceToPercentile(distance:number): number {\n        const percentageBaseSize = distance / (this._baseSize/2) * 100;\n        if(percentageBaseSize > 100){\n            return 100;\n        }\n        return percentageBaseSize;\n    }\n\n    /**\n     * Calculate X/Y and ArcTan within the bounds of the joystick\n     * @param event\n     * @private\n     */\n    private _pointerMove = (event: PointerEvent) => {\n        event.preventDefault()\n        if (this.state.dragging) {\n            if(!this.props.followCursor && event.pointerId !== this._pointerId) return;\n            const absoluteX = event.clientX;\n            const absoluteY = event.clientY;\n            let relativeX = absoluteX - this._parentRect.left - this._radius;\n            let relativeY = absoluteY - this._parentRect.top - this._radius;\n            const dist = this._distance(relativeX, relativeY);\n            // @ts-ignore\n            const bounded = shapeBoundsFactory(\n                //@ts-ignore\n                this.props.controlPlaneShape || this.props.baseShape,\n                absoluteX,\n                absoluteY,\n                relativeX,\n                relativeY,\n                dist,\n                this._radius,\n                this._baseSize,\n                this._parentRect);\n            relativeX = bounded.relativeX\n            relativeY = bounded.relativeY\n            const atan2 = Math.atan2(relativeX, relativeY);\n\n            this._updatePos({\n                relativeX,\n                relativeY,\n                distance: this._distanceToPercentile(dist),\n                direction: this._getDirection(atan2),\n                axisX: absoluteX - this._parentRect.left,\n                axisY: absoluteY - this._parentRect.top\n            });\n        }\n    }\n\n\n\n    /**\n     * Handle pointer up and de-register listen events\n     * @private\n     */\n    private _pointerUp = (event: PointerEvent) => {\n        if(event.pointerId !== this._pointerId) return;\n        const stateUpdate = {\n            dragging: false,\n        } as any;\n        if (!this.props.sticky) {\n            stateUpdate.coordinates = undefined;\n        }\n        this.frameId = window.requestAnimationFrame(() => {\n            if(this._mounted){\n                this.setState(stateUpdate);\n            }\n          });\n          \n        window.removeEventListener(InteractionEvents.PointerUp, this._pointerUp);\n        window.removeEventListener(InteractionEvents.PointerMove, this._pointerMove);\n        this._pointerId = null;\n        if (this.props.stop) {\n            this.props.stop({\n                type: \"stop\",\n                // @ts-ignore\n                x: this.props.sticky ? ((this.state.coordinates.relativeX * 2) / this._baseSize) : null,\n                // @ts-ignore\n                y: this.props.sticky ? ((this.state.coordinates.relativeY * 2) / this._baseSize): null,\n                // @ts-ignore\n                direction: this.props.sticky ? this.state.coordinates.direction : null,\n                // @ts-ignore\n                distance: this.props.sticky ? this.state.coordinates.distance : null\n\n            });\n        }\n\n    }\n\n    /**\n     * Get the shape stylings for the base\n     * @private\n     */\n    private getBaseShapeStyle() {\n        const shape = this.props.baseShape || JoystickShape.Circle;\n        return shapeFactory(shape, this._baseSize);\n    }\n    /**\n     * Get the shape stylings for the stick\n     * @private\n     */\n    private getStickShapeStyle() {\n        const shape = this.props.stickShape || JoystickShape.Circle;\n        return shapeFactory(shape, this._baseSize);\n    }\n    /**\n     * Calculate base styles for pad\n     * @private\n     */\n    private _getBaseStyle(): any {\n        const baseColor: string = this.props.baseColor !== undefined ? this.props.baseColor : \"#000033\";\n\n        const baseSizeString = `${this._baseSize}px`;\n        const padStyle = {\n            ...this.getBaseShapeStyle(),\n            height: baseSizeString,\n            width: baseSizeString,\n            background: baseColor,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n        } as any;\n        if (this.props.baseImage) {\n            padStyle.background = `url(${this.props.baseImage})`;\n            padStyle.backgroundSize = '100%'\n        }\n        return padStyle;\n\n    }\n\n    /**\n     * Calculate  base styles for joystick and translate\n     * @private\n     */\n    private _getStickStyle(): any {\n        const stickColor: string = this.props.stickColor !== undefined ? this.props.stickColor : \"#3D59AB\";\n        const stickSize = this._stickSize ? `${this._stickSize}px` :`${this._baseSize / 1.5}px`;\n\n        let stickStyle = {\n            ...this.getStickShapeStyle(),\n            background: stickColor,\n            cursor: \"move\",\n            height: stickSize,\n            width: stickSize,\n            border: 'none',\n            flexShrink: 0,\n            touchAction: 'none'\n        } as any;\n        if (this.props.stickImage) {\n            stickStyle.background = `url(${this.props.stickImage})`;\n            stickStyle.backgroundSize = '100%'\n        }\n        if(this.props.pos){\n            stickStyle = Object.assign({}, stickStyle, {\n                position: 'absolute',\n                transform: `translate3d(${(this.props.pos.x * this._baseSize)/2 }px, ${-(this.props.pos.y * this._baseSize)/2}px, 0)`\n            });\n        }\n\n        if (this.state.coordinates !== undefined) {\n            stickStyle = Object.assign({}, stickStyle, {\n                position: 'absolute',\n                transform: `translate3d(${this.state.coordinates.relativeX}px, ${this.state.coordinates.relativeY}px, 0)`\n            });\n        }\n        return stickStyle;\n\n    }\n\n    render() {\n        this._baseSize = this.props.size || 100;\n        this._stickSize = this.props.stickSize;\n        this._radius = this._baseSize / 2;\n        const baseStyle = this._getBaseStyle();\n        const stickStyle = this._getStickStyle();\n        //@ts-ignore\n        return (\n            <div data-testid=\"joystick-base\" className={this.props.disabled ? 'joystick-base-disabled' : ''}\n\n                 ref={this._baseRef}\n                 style={baseStyle}>\n                <button ref={this._stickRef}\n                        disabled={this.props.disabled}\n                        onPointerDown={(event: any) => this._pointerDown(event)}\n                        className={this.props.disabled ? 'joystick-disabled' : ''}\n                        style={stickStyle}/>\n            </div>\n        )\n    }\n}\n\nexport {\n    Joystick\n};\n", "export { Joystick } from \"./Joystick\";\nexport { JoystickShape } from './enums/shape.enum';"],
  "mappings": ";;;;;;;;;;;;;AAAA,QAAY;AAAZ,KAAA,SAAYA,gBAAa;AACrB,MAAAA,eAAA,QAAA,IAAA;AACA,MAAAA,eAAA,QAAA,IAAA;AACA,MAAAA,eAAA,OAAA,IAAA;AACA,MAAAA,eAAA,OAAA,IAAA;IACJ,GALY,gBAAA,QAAA,kBAAA,QAAA,gBAAa,CAAA,EAAA;;;;;;;;;;ACAzB,QAAA,eAAA;AAEO,QAAM,eAAe,SAAC,OAAsB,MAAY;AAC3D,cAAQ,OAAM;QAEV,KAAK,aAAA,cAAc;AACf,iBAAQ;YACJ,cAAc,KAAK,KAAK,IAAI;;QAEpC,KAAK,aAAA,cAAc;QACnB;AACI,iBAAO;YACH,cAAa;;;IAG7B;AAba,YAAA,eAAY;;;;;;;;;;ACFzB,QAAA,eAAA;AAEO,QAAM,qBAAqB,SAC9B,OACA,WACA,WACA,WACA,WACA,MACA,QACA,UACA,YAAmB;AACnB,cAAQ,OAAM;QACV,KAAK,aAAA,cAAc;AACf,sBAAY,gBAAgB,YAAY,WAAW,OAAQ,WAAW,GAAI,QAAQ;AAClF,sBAAY,gBAAgB,YAAY,WAAW,MAAO,WAAW,GAAI,QAAQ;AACjF,iBAAO,EAAC,WAAW,UAAS;QAChC,KAAK,aAAA,cAAc;AACf,sBAAY,gBAAgB,YAAY,WAAW,OAAQ,WAAW,GAAI,QAAQ;AAClF,sBAAY;AAChB,iBAAO,EAAC,WAAW,UAAS;QAE5B,KAAK,aAAA,cAAc;AACf,sBAAY;AACZ,sBAAY,gBAAgB,YAAY,WAAW,MAAO,WAAW,GAAI,QAAQ;AACjF,iBAAO,EAAC,WAAW,UAAS;QAChC;AACI,cAAI,OAAO,QAAQ;AACf,yBAAa,SAAS;AACtB,yBAAa,SAAS;;AAE1B,iBAAO,EAAC,WAAW,UAAS;;IAIxC;AAjCa,YAAA,qBAAkB;AAmC/B,QAAM,kBAAkB,SAAC,OAAc,UAAe;AAClD,UAAM,eAAe,WAAW;AAChC,UAAG,QAAQ,cAAa;AACpB,eAAO;;AAEX,UAAG,QAAQ,CAAE,cAAc;AACvB,eAAO,eAAe;;AAE1B,aAAO;IACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9CA,QAAA,QAAA;AACA,QAAA,eAAA;AACA,QAAA,kBAAA;AACA,QAAA,yBAAA;AAwBA,QAAK;AAAL,KAAA,SAAKC,oBAAiB;AAClB,MAAAA,mBAAA,aAAA,IAAA;AACA,MAAAA,mBAAA,aAAA,IAAA;AACA,MAAAA,mBAAA,WAAA,IAAA;IACJ,GAJK,sBAAA,oBAAiB,CAAA,EAAA;AAmCtB,QAAK;AAAL,KAAA,SAAKC,wBAAqB;AACtB,MAAAA,uBAAAA,uBAAA,UAAA,IAAA,UAAA,IAAA;AACA,MAAAA,uBAAAA,uBAAA,SAAA,IAAA,WAAA,IAAA;AACA,MAAAA,uBAAAA,uBAAA,aAAA,IAAA,WAAA,IAAA;AACA,MAAAA,uBAAAA,uBAAA,YAAA,IAAA,YAAA,IAAA;IACJ,GALK,0BAAA,wBAAqB,CAAA,EAAA;AAO1B,QAAA;;MAAA,SAAA,QAAA;AAAuB,kBAAAC,WAAA,MAAA;AAanB,iBAAAA,UAAY,OAAqB;AAAjC,cAAA,QACI,OAAA,KAAA,MAAM,KAAK,KAAC;AAbC,gBAAA,YAAgD,MAAM,UAAS;AAC/D,gBAAA,WAA4C,MAAM,UAAS;AAIpE,gBAAA,UAAyB;AAIzB,gBAAA,aAA0B;AAC1B,gBAAA,WAAW;AAuKX,gBAAA,eAAe,SAAC,OAAmB;AACvC,kBAAM,eAAc;AACpB,gBAAI,MAAK,MAAM,UAAU;AACrB,kBAAG,CAAC,MAAK,MAAM,gBAAgB,MAAM,cAAc,MAAK;AAAY;AACpE,kBAAM,YAAY,MAAM;AACxB,kBAAM,YAAY,MAAM;AACxB,kBAAI,YAAY,YAAY,MAAK,YAAY,OAAO,MAAK;AACzD,kBAAI,YAAY,YAAY,MAAK,YAAY,MAAM,MAAK;AACxD,kBAAM,OAAO,MAAK,UAAU,WAAW,SAAS;AAEhD,kBAAM,WAAU,GAAA,uBAAA;;gBAEZ,MAAK,MAAM,qBAAqB,MAAK,MAAM;gBAC3C;gBACA;gBACA;gBACA;gBACA;gBACA,MAAK;gBACL,MAAK;gBACL,MAAK;cAAW;AACpB,0BAAY,QAAQ;AACpB,0BAAY,QAAQ;AACpB,kBAAM,QAAQ,KAAK,MAAM,WAAW,SAAS;AAE7C,oBAAK,WAAW;gBACZ;gBACA;gBACA,UAAU,MAAK,sBAAsB,IAAI;gBACzC,WAAW,MAAK,cAAc,KAAK;gBACnC,OAAO,YAAY,MAAK,YAAY;gBACpC,OAAO,YAAY,MAAK,YAAY;eACvC;;UAET;AAQQ,gBAAA,aAAa,SAAC,OAAmB;AACrC,gBAAG,MAAM,cAAc,MAAK;AAAY;AACxC,gBAAM,cAAc;cAChB,UAAU;;AAEd,gBAAI,CAAC,MAAK,MAAM,QAAQ;AACpB,0BAAY,cAAc;;AAE9B,kBAAK,UAAU,OAAO,sBAAsB,WAAA;AACxC,kBAAG,MAAK,UAAS;AACb,sBAAK,SAAS,WAAW;;YAE/B,CAAC;AAEH,mBAAO,oBAAoB,kBAAkB,WAAW,MAAK,UAAU;AACvE,mBAAO,oBAAoB,kBAAkB,aAAa,MAAK,YAAY;AAC3E,kBAAK,aAAa;AAClB,gBAAI,MAAK,MAAM,MAAM;AACjB,oBAAK,MAAM,KAAK;gBACZ,MAAM;;gBAEN,GAAG,MAAK,MAAM,SAAW,MAAK,MAAM,YAAY,YAAY,IAAK,MAAK,YAAa;;gBAEnF,GAAG,MAAK,MAAM,SAAW,MAAK,MAAM,YAAY,YAAY,IAAK,MAAK,YAAY;;gBAElF,WAAW,MAAK,MAAM,SAAS,MAAK,MAAM,YAAY,YAAY;;gBAElE,UAAU,MAAK,MAAM,SAAS,MAAK,MAAM,YAAY,WAAW;eAEnE;;UAGT;AA7OI,gBAAK,QAAQ;YACT,UAAU;;AAEd,gBAAK,wBAAyB,2BAAA;AAC1B,gBAAI,WAAW;AACf,mBAAO,SAAC,OAA2B;AAE/B,kBAAM,OAAM,oBAAI,KAAI,GAAG,QAAO;AAC9B,kBAAM,iBAAiB,MAAK,MAAM,YAAY;AAC9C,kBAAI,MAAM,WAAW,gBAAgB;AACjC;;AAEJ,yBAAW;AACX,kBAAI,MAAK,MAAM,MAAM;AACjB,uBAAO,MAAK,MAAM,KAAK,KAAK;;YAEpC;UACJ,EAAE;;QAIN;AAEA,QAAAA,UAAA,UAAA,uBAAA,WAAA;AAAA,cAAA,QAAA;AACI,eAAK,WAAW;AAChB,cAAI,KAAK,MAAM,cAAc;AACzB,mBAAO,oBAAoB,kBAAkB,aAAa,SAAA,OAAK;AAAI,qBAAA,MAAK,aAAa,KAAK;YAAvB,CAAwB;;AAE/F,cAAI,KAAK,YAAY,MAAM;AACvB,mBAAO,qBAAqB,KAAK,OAAO;;QAEhD;AAEA,QAAAA,UAAA,UAAA,oBAAA,WAAA;AAAA,cAAA,QAAA;AACI,eAAK,WAAW;AAChB,cAAI,KAAK,MAAM,cAAc;AAEzB,iBAAK,cAAc,KAAK,SAAS,QAAQ,sBAAqB;AAE9D,iBAAK,SAAS;cACV,UAAU;aACb;AAED,mBAAO,iBAAiB,kBAAkB,aAAa,SAAA,OAAK;AAAI,qBAAA,MAAK,aAAa,KAAK;YAAvB,CAAwB;AAExF,gBAAI,KAAK,MAAM,OAAO;AAClB,mBAAK,MAAM,MAAM;gBACb,MAAM;gBACN,GAAG;gBACH,GAAG;gBACH,UAAU;gBACV,WAAW;eACd;;;QAIb;AAOQ,QAAAA,UAAA,UAAA,aAAR,SAAmB,aAAiC;AAApD,cAAA,QAAA;AAEI,eAAK,UAAU,OAAO,sBAAsB,WAAA;AACxC,gBAAG,MAAK,UAAS;AACb,oBAAK,SAAS;gBACV;eACH;;UAEP,CAAC;AAEH,cAAG,OAAO,KAAK,MAAM,gBAAiB,UAAS;AAC3C,gBAAG,YAAY,WAAW,KAAK,MAAM,aAAY;AAC7C;;;AAGR,eAAK,sBAAsB;YACvB,MAAM;YACN,GAAK,YAAY,YAAY,IAAK,KAAK;YACvC,GAAG,EAAG,YAAY,YAAY,IAAK,KAAK;YACxC,WAAW,YAAY;YACvB,UAAU,YAAY;WACzB;QAEL;AAOQ,QAAAA,UAAA,UAAA,eAAR,SAAqB,GAAe;AAChC,cAAI,KAAK,MAAM,YAAY,KAAK,MAAM,cAAc;AAChD;;AAGJ,eAAK,cAAc,KAAK,SAAS,QAAQ,sBAAqB;AAE9D,eAAK,SAAS;YACV,UAAU;WACb;AAED,iBAAO,iBAAiB,kBAAkB,WAAW,KAAK,UAAU;AACpE,iBAAO,iBAAiB,kBAAkB,aAAa,KAAK,YAAY;AACxE,eAAK,aAAa,EAAE;AAEpB,eAAK,UAAU,QAAQ,kBAAkB,EAAE,SAAS;AAEpD,cAAI,KAAK,MAAM,OAAO;AAClB,iBAAK,MAAM,MAAM;cACb,MAAM;cACN,GAAG;cACH,GAAG;cACH,UAAU;cACV,WAAW;aACd;;QAGT;AAQQ,QAAAA,UAAA,UAAA,gBAAR,SAAsB,OAAa;AAC/B,cAAI,QAAQ,sBAAsB,YAAY,QAAQ,sBAAsB,SAAS;AACjF,mBAAO;qBACA,QAAQ,sBAAsB,YAAY,QAAQ,sBAAsB,aAAa;AAC5F,mBAAO;qBACA,QAAQ,sBAAsB,YAAY;AACjD,mBAAO;;AAEX,iBAAO;QAGX;AAQQ,QAAAA,UAAA,UAAA,YAAR,SAAkB,GAAW,GAAS;AAClC,iBAAO,KAAK,MAAM,GAAG,CAAC;QAC1B;AACQ,QAAAA,UAAA,UAAA,wBAAR,SAA8B,UAAe;AACzC,cAAM,qBAAqB,YAAY,KAAK,YAAU,KAAK;AAC3D,cAAG,qBAAqB,KAAI;AACxB,mBAAO;;AAEX,iBAAO;QACX;AAuFQ,QAAAA,UAAA,UAAA,oBAAR,WAAA;AACI,cAAM,QAAQ,KAAK,MAAM,aAAa,aAAA,cAAc;AACpD,kBAAO,GAAA,gBAAA,cAAa,OAAO,KAAK,SAAS;QAC7C;AAKQ,QAAAA,UAAA,UAAA,qBAAR,WAAA;AACI,cAAM,QAAQ,KAAK,MAAM,cAAc,aAAA,cAAc;AACrD,kBAAO,GAAA,gBAAA,cAAa,OAAO,KAAK,SAAS;QAC7C;AAKQ,QAAAA,UAAA,UAAA,gBAAR,WAAA;AACI,cAAM,YAAoB,KAAK,MAAM,cAAc,SAAY,KAAK,MAAM,YAAY;AAEtF,cAAM,iBAAiB,GAAA,OAAG,KAAK,WAAS,IAAA;AACxC,cAAM,WAAW,SAAA,SAAA,CAAA,GACV,KAAK,kBAAiB,CAAE,GAAA,EAC3B,QAAQ,gBACR,OAAO,gBACP,YAAY,WACZ,SAAS,QACT,gBAAgB,UAChB,YAAY,SAAQ,CAAA;AAExB,cAAI,KAAK,MAAM,WAAW;AACtB,qBAAS,aAAa,OAAA,OAAO,KAAK,MAAM,WAAS,GAAA;AACjD,qBAAS,iBAAiB;;AAE9B,iBAAO;QAEX;AAMQ,QAAAA,UAAA,UAAA,iBAAR,WAAA;AACI,cAAM,aAAqB,KAAK,MAAM,eAAe,SAAY,KAAK,MAAM,aAAa;AACzF,cAAM,YAAY,KAAK,aAAa,GAAA,OAAG,KAAK,YAAU,IAAA,IAAM,GAAA,OAAG,KAAK,YAAY,KAAG,IAAA;AAEnF,cAAI,aAAa,SAAA,SAAA,CAAA,GACV,KAAK,mBAAkB,CAAE,GAAA,EAC5B,YAAY,YACZ,QAAQ,QACR,QAAQ,WACR,OAAO,WACP,QAAQ,QACR,YAAY,GACZ,aAAa,OAAM,CAAA;AAEvB,cAAI,KAAK,MAAM,YAAY;AACvB,uBAAW,aAAa,OAAA,OAAO,KAAK,MAAM,YAAU,GAAA;AACpD,uBAAW,iBAAiB;;AAEhC,cAAG,KAAK,MAAM,KAAI;AACd,yBAAa,OAAO,OAAO,CAAA,GAAI,YAAY;cACvC,UAAU;cACV,WAAW,eAAA,OAAgB,KAAK,MAAM,IAAI,IAAI,KAAK,YAAW,GAAC,MAAA,EAAA,OAAQ,EAAE,KAAK,MAAM,IAAI,IAAI,KAAK,aAAW,GAAC,QAAA;aAChH;;AAGL,cAAI,KAAK,MAAM,gBAAgB,QAAW;AACtC,yBAAa,OAAO,OAAO,CAAA,GAAI,YAAY;cACvC,UAAU;cACV,WAAW,eAAA,OAAe,KAAK,MAAM,YAAY,WAAS,MAAA,EAAA,OAAO,KAAK,MAAM,YAAY,WAAS,QAAA;aACpG;;AAEL,iBAAO;QAEX;AAEA,QAAAA,UAAA,UAAA,SAAA,WAAA;AAAA,cAAA,QAAA;AACI,eAAK,YAAY,KAAK,MAAM,QAAQ;AACpC,eAAK,aAAa,KAAK,MAAM;AAC7B,eAAK,UAAU,KAAK,YAAY;AAChC,cAAM,YAAY,KAAK,cAAa;AACpC,cAAM,aAAa,KAAK,eAAc;AAEtC,iBACI,MAAA;YAAA;YAAA,EAAA,eAAiB,iBAAgB,WAAW,KAAK,MAAM,WAAW,2BAA2B,IAExF,KAAK,KAAK,UACV,OAAO,UAAS;YACjB,MAAA,cAAA,UAAA,EAAQ,KAAK,KAAK,WACV,UAAU,KAAK,MAAM,UACrB,eAAe,SAAC,OAAU;AAAK,qBAAA,MAAK,aAAa,KAAK;YAAvB,GAC/B,WAAW,KAAK,MAAM,WAAW,sBAAsB,IACvD,OAAO,WAAU,CAAA;UAAG;QAGxC;AACJ,eAAAA;MAAA,EAlWuB,MAAM,SAAS;;AAqWlC,YAAA,WAAA;;;;;;;;;AC1aJ,QAAA,aAAA;AAAS,WAAA,eAAA,SAAA,YAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,aAAA,WAAA;IAAQ,EAAA,CAAA;AACjB,QAAA,eAAA;AAAS,WAAA,eAAA,SAAA,iBAAA,EAAA,YAAA,MAAA,KAAA,WAAA;AAAA,aAAA,aAAA;IAAa,EAAA,CAAA;;;",
  "names": ["JoystickShape", "InteractionEvents", "RadianQuadrantBinding", "Joystick"]
}
