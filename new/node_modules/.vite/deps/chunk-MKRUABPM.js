import {
  require_react
} from "./chunk-WHMHD7EJ.js";
import {
  __commonJS,
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/balanced-match/index.js
var require_balanced_match = __commonJS({
  "node_modules/balanced-match/index.js"(exports, module) {
    "use strict";
    module.exports = balanced2;
    function balanced2(a, b, str) {
      if (a instanceof RegExp) a = maybeMatch(a, str);
      if (b instanceof RegExp) b = maybeMatch(b, str);
      var r = range(a, b, str);
      return r && {
        start: r[0],
        end: r[1],
        pre: str.slice(0, r[0]),
        body: str.slice(r[0] + a.length, r[1]),
        post: str.slice(r[1] + b.length)
      };
    }
    function maybeMatch(reg, str) {
      var m = str.match(reg);
      return m ? m[0] : null;
    }
    balanced2.range = range;
    function range(a, b, str) {
      var begs, beg, left, right, result;
      var ai = str.indexOf(a);
      var bi = str.indexOf(b, ai + 1);
      var i = ai;
      if (ai >= 0 && bi > 0) {
        if (a === b) {
          return [ai, bi];
        }
        begs = [];
        left = str.length;
        while (i >= 0 && !result) {
          if (i == ai) {
            begs.push(i);
            ai = str.indexOf(a, i + 1);
          } else if (begs.length == 1) {
            result = [begs.pop(), bi];
          } else {
            beg = begs.pop();
            if (beg < left) {
              left = beg;
              right = bi;
            }
            bi = str.indexOf(b, i + 1);
          }
          i = ai < bi && ai >= 0 ? ai : bi;
        }
        if (begs.length) {
          result = [left, right];
        }
      }
      return result;
    }
  }
});

// node_modules/@cloudscape-design/components/internal/analytics/selectors.js
var DATA_ATTR_FUNNEL = "data-analytics-funnel";
var DATA_ATTR_FUNNEL_INTERACTION_ID = `${DATA_ATTR_FUNNEL}-interaction-id`;
var DATA_ATTR_FUNNEL_KEY = `${DATA_ATTR_FUNNEL}-key`;
var DATA_ATTR_FUNNEL_VALUE = `${DATA_ATTR_FUNNEL}-value`;
var DATA_ATTR_FUNNEL_STEP = `${DATA_ATTR_FUNNEL}-step`;
var DATA_ATTR_FUNNEL_SUBSTEP = `${DATA_ATTR_FUNNEL}-substep`;
var DATA_ATTR_FIELD_LABEL = "data-analytics-field-label";
var DATA_ATTR_FIELD_ERROR = "data-analytics-field-error";
var DATA_ATTR_ANALYTICS_ALERT = "data-analytics-alert";
var DATA_ATTR_ANALYTICS_FLASHBAR = "data-analytics-flashbar";
var FUNNEL_KEY_FUNNEL_NAME = "funnel-name";
var FUNNEL_KEY_STEP_NAME = "step-name";
var FUNNEL_KEY_SUBSTEP_NAME = "substep-name";
var getFunnelNameSelector = () => `[${DATA_ATTR_FUNNEL_KEY}="${FUNNEL_KEY_FUNNEL_NAME}"]`;
var getFunnelValueSelector = (value) => `[${DATA_ATTR_FUNNEL_VALUE}="${value}"]`;
var getSubStepAllSelector = () => `[${DATA_ATTR_FUNNEL_SUBSTEP}]`;
var getSubStepSelector = (subStepId) => `[${DATA_ATTR_FUNNEL_SUBSTEP}="${subStepId}"]`;
var getSubStepNameSelector = (subStepId) => [subStepId ? getSubStepSelector(subStepId) : "", `[${DATA_ATTR_FUNNEL_KEY}="${FUNNEL_KEY_SUBSTEP_NAME}"]`].join(" ");
var getFieldSlotSeletor = (id) => id ? `[id="${id}"]` : void 0;
var getNameFromSelector = (selector) => {
  var _a2, _b;
  return selector ? (_b = (_a2 = document.querySelector(selector)) === null || _a2 === void 0 ? void 0 : _a2.innerText) === null || _b === void 0 ? void 0 : _b.trim() : void 0;
};

// node_modules/@cloudscape-design/components/internal/utils/dom.js
var import_balanced_match = __toESM(require_balanced_match());

// node_modules/@cloudscape-design/components/internal/utils/calculate-once.js
function calculateOnce(callback) {
  let result = void 0;
  return () => {
    if (result === void 0) {
      result = callback();
    }
    return result;
  };
}

// node_modules/@cloudscape-design/components/internal/utils/dom.js
function findUpUntil(node, callback) {
  let current = node;
  while (current && !callback(current)) {
    current = current.parentElement;
    while (current && !(current instanceof HTMLElement)) {
      current = current.parentElement;
    }
  }
  return current;
}
function supportsStickyPosition() {
  var _a2, _b, _c;
  if (typeof window === "undefined") {
    return false;
  }
  return (_c = (_b = (_a2 = window.CSS) === null || _a2 === void 0 ? void 0 : _a2.supports) === null || _b === void 0 ? void 0 : _b.call(_a2, "position", "sticky")) !== null && _c !== void 0 ? _c : false;
}
var supportsContainingBlockPositioning = calculateOnce(() => {
  const parent = document.createElement("div");
  parent.style.transform = "translateY(5px)";
  document.body.appendChild(parent);
  const child = document.createElement("div");
  child.style.position = "fixed";
  child.style.top = "0";
  parent.appendChild(child);
  const result = parent.getBoundingClientRect().top === child.getBoundingClientRect().top;
  document.body.removeChild(parent);
  return result;
});
function getContainingBlock(startElement) {
  if (!startElement.parentElement) {
    return null;
  }
  return supportsContainingBlockPositioning() ? findUpUntil(startElement.parentElement, (element) => {
    const computedStyle = getComputedStyle(element);
    return !!computedStyle.transform && computedStyle.transform !== "none" || !!computedStyle.perspective && computedStyle.perspective !== "none";
  }) : null;
}
var cssVariableExpression = /--.+?\s*,\s*(.+)/;
function parseCssVariable(value) {
  var _a2, _b, _c;
  if ((_c = (_b = (_a2 = window.CSS) === null || _a2 === void 0 ? void 0 : _a2.supports) === null || _b === void 0 ? void 0 : _b.call(_a2, "color", "var(--dummy, #000)")) !== null && _c !== void 0 ? _c : false) {
    return value;
  }
  const varIndex = value.lastIndexOf("var(");
  if (varIndex === -1) {
    return value;
  }
  const expr = (0, import_balanced_match.default)("(", ")", value.substr(varIndex));
  if (!expr) {
    return value;
  }
  const match = expr.body.match(cssVariableExpression);
  return match ? match[1] : value;
}

// node_modules/@cloudscape-design/components/internal/hooks/use-unique-id/index.js
var import_react = __toESM(require_react());
var _a;
var counter = 0;
var useIdFallback = () => {
  const idRef = (0, import_react.useRef)(null);
  if (!idRef.current) {
    idRef.current = `${counter++}-${Date.now()}-${Math.round(Math.random() * 1e4)}`;
  }
  return idRef.current;
};
var useId = (_a = import_react.default.useId) !== null && _a !== void 0 ? _a : useIdFallback;
function useUniqueId(prefix) {
  return `${prefix ? prefix : ""}` + useId();
}

export {
  DATA_ATTR_FUNNEL_INTERACTION_ID,
  DATA_ATTR_FUNNEL_KEY,
  DATA_ATTR_FUNNEL_VALUE,
  DATA_ATTR_FUNNEL_STEP,
  DATA_ATTR_FUNNEL_SUBSTEP,
  DATA_ATTR_FIELD_LABEL,
  DATA_ATTR_FIELD_ERROR,
  DATA_ATTR_ANALYTICS_ALERT,
  DATA_ATTR_ANALYTICS_FLASHBAR,
  FUNNEL_KEY_FUNNEL_NAME,
  FUNNEL_KEY_STEP_NAME,
  FUNNEL_KEY_SUBSTEP_NAME,
  getFunnelNameSelector,
  getFunnelValueSelector,
  getSubStepAllSelector,
  getSubStepSelector,
  getSubStepNameSelector,
  getFieldSlotSeletor,
  getNameFromSelector,
  calculateOnce,
  findUpUntil,
  supportsStickyPosition,
  getContainingBlock,
  parseCssVariable,
  useUniqueId
};
//# sourceMappingURL=chunk-MKRUABPM.js.map
